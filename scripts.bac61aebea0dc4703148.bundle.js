webpackJsonp([2,5],{225:function(t,n){t.exports=function(t){"undefined"!=typeof execScript?execScript(t):eval.call(null,t)}},230:function(t,n,e){e(225)(e(374))},231:function(t,n,e){e(225)(e(375))},374:function(t,n){t.exports="(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"echarts\"] = factory();\n\telse\n\t\troot[\"echarts\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Export echarts as CommonJS module\n\t */\n\tmodule.exports = __webpack_require__(1);\n\n\t// Import all charts and components\n\t__webpack_require__(100);\n\t__webpack_require__(134);\n\t__webpack_require__(141);\n\t__webpack_require__(150);\n\t__webpack_require__(154);\n\n\t__webpack_require__(164);\n\t__webpack_require__(185);\n\t__webpack_require__(197);\n\t__webpack_require__(218);\n\t__webpack_require__(222);\n\t__webpack_require__(226);\n\t__webpack_require__(241);\n\t__webpack_require__(247);\n\t__webpack_require__(254);\n\t__webpack_require__(260);\n\t__webpack_require__(264);\n\t__webpack_require__(273);\n\t__webpack_require__(277);\n\t__webpack_require__(280);\n\n\t__webpack_require__(292);\n\t__webpack_require__(113);\n\t__webpack_require__(293);\n\t__webpack_require__(299);\n\t__webpack_require__(303);\n\t__webpack_require__(314);\n\t__webpack_require__(227);\n\t__webpack_require__(281);\n\t__webpack_require__(317);\n\n\t__webpack_require__(328);\n\n\t__webpack_require__(329);\n\t__webpack_require__(343);\n\n\t__webpack_require__(358);\n\t__webpack_require__(364);\n\t__webpack_require__(367);\n\n\t__webpack_require__(370);\n\t__webpack_require__(379);\n\n\t__webpack_require__(391);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Enable DEV mode when using source code without build. which has no __DEV__ variable\n\t// In build process 'typeof __DEV__' will be replace with 'boolean'\n\t// So this code will be removed or disabled anyway after built.\n\tif (false) {\n\t    // In browser\n\t    if (typeof window !== 'undefined') {\n\t        window.__DEV__ = true;\n\t    }\n\t    // In node\n\t    else if (typeof global !== 'undefined') {\n\t        global.__DEV__ = true;\n\t    }\n\t}\n\n\t/*!\n\t * ECharts, a javascript interactive chart library.\n\t *\n\t * Copyright (c) 2015, Baidu Inc.\n\t * All rights reserved.\n\t *\n\t * LICENSE\n\t * https://github.com/ecomfe/echarts/blob/master/LICENSE.txt\n\t */\n\n\t/**\n\t * @module echarts\n\t */\n\n\n\t    var env = __webpack_require__(2);\n\n\t    var GlobalModel = __webpack_require__(3);\n\t    var ExtensionAPI = __webpack_require__(25);\n\t    var CoordinateSystemManager = __webpack_require__(26);\n\t    var OptionManager = __webpack_require__(27);\n\n\t    var ComponentModel = __webpack_require__(19);\n\t    var SeriesModel = __webpack_require__(28);\n\n\t    var ComponentView = __webpack_require__(29);\n\t    var ChartView = __webpack_require__(42);\n\t    var graphic = __webpack_require__(43);\n\t    var modelUtil = __webpack_require__(5);\n\t    var throttle = __webpack_require__(81);\n\n\t    var zrender = __webpack_require__(82);\n\t    var zrUtil = __webpack_require__(4);\n\t    var colorTool = __webpack_require__(39);\n\t    var Eventful = __webpack_require__(33);\n\t    var timsort = __webpack_require__(86);\n\n\t    var each = zrUtil.each;\n\t    var parseClassType = ComponentModel.parseClassType;\n\n\t    var PRIORITY_PROCESSOR_FILTER = 1000;\n\t    var PRIORITY_PROCESSOR_STATISTIC = 5000;\n\n\n\t    var PRIORITY_VISUAL_LAYOUT = 1000;\n\t    var PRIORITY_VISUAL_GLOBAL = 2000;\n\t    var PRIORITY_VISUAL_CHART = 3000;\n\t    var PRIORITY_VISUAL_COMPONENT = 4000;\n\t    // FIXME\n\t    // necessary?\n\t    var PRIORITY_VISUAL_BRUSH = 5000;\n\n\t    // Main process have three entries: `setOption`, `dispatchAction` and `resize`,\n\t    // where they must not be invoked nestedly, except the only case: invoke\n\t    // dispatchAction with updateMethod \"none\" in main process.\n\t    // This flag is used to carry out this rule.\n\t    // All events will be triggered out side main process (i.e. when !this[IN_MAIN_PROCESS]).\n\t    var IN_MAIN_PROCESS = '__flagInMainProcess';\n\t    var HAS_GRADIENT_OR_PATTERN_BG = '__hasGradientOrPatternBg';\n\t    var OPTION_UPDATED = '__optionUpdated';\n\t    var ACTION_REG = /^[a-zA-Z0-9_]+$/;\n\n\t    function createRegisterEventWithLowercaseName(method) {\n\t        return function (eventName, handler, context) {\n\t            // Event name is all lowercase\n\t            eventName = eventName && eventName.toLowerCase();\n\t            Eventful.prototype[method].call(this, eventName, handler, context);\n\t        };\n\t    }\n\n\t    /**\n\t     * @module echarts~MessageCenter\n\t     */\n\t    function MessageCenter() {\n\t        Eventful.call(this);\n\t    }\n\t    MessageCenter.prototype.on = createRegisterEventWithLowercaseName('on');\n\t    MessageCenter.prototype.off = createRegisterEventWithLowercaseName('off');\n\t    MessageCenter.prototype.one = createRegisterEventWithLowercaseName('one');\n\t    zrUtil.mixin(MessageCenter, Eventful);\n\n\t    /**\n\t     * @module echarts~ECharts\n\t     */\n\t    function ECharts (dom, theme, opts) {\n\t        opts = opts || {};\n\n\t        // Get theme by name\n\t        if (typeof theme === 'string') {\n\t            theme = themeStorage[theme];\n\t        }\n\n\t        /**\n\t         * @type {string}\n\t         */\n\t        this.id;\n\t        /**\n\t         * Group id\n\t         * @type {string}\n\t         */\n\t        this.group;\n\t        /**\n\t         * @type {HTMLDomElement}\n\t         * @private\n\t         */\n\t        this._dom = dom;\n\t        /**\n\t         * @type {module:zrender/ZRender}\n\t         * @private\n\t         */\n\t        var zr = this._zr = zrender.init(dom, {\n\t            renderer: opts.renderer || 'canvas',\n\t            devicePixelRatio: opts.devicePixelRatio,\n\t            width: opts.width,\n\t            height: opts.height\n\t        });\n\n\t        /**\n\t         * Expect 60 pfs.\n\t         * @type {Function}\n\t         * @private\n\t         */\n\t        this._throttledZrFlush = throttle.throttle(zrUtil.bind(zr.flush, zr), 17);\n\n\t        /**\n\t         * @type {Object}\n\t         * @private\n\t         */\n\t        this._theme = zrUtil.clone(theme);\n\n\t        /**\n\t         * @type {Array.<module:echarts/view/Chart>}\n\t         * @private\n\t         */\n\t        this._chartsViews = [];\n\n\t        /**\n\t         * @type {Object.<string, module:echarts/view/Chart>}\n\t         * @private\n\t         */\n\t        this._chartsMap = {};\n\n\t        /**\n\t         * @type {Array.<module:echarts/view/Component>}\n\t         * @private\n\t         */\n\t        this._componentsViews = [];\n\n\t        /**\n\t         * @type {Object.<string, module:echarts/view/Component>}\n\t         * @private\n\t         */\n\t        this._componentsMap = {};\n\n\t        /**\n\t         * @type {module:echarts/ExtensionAPI}\n\t         * @private\n\t         */\n\t        this._api = new ExtensionAPI(this);\n\n\t        /**\n\t         * @type {module:echarts/CoordinateSystem}\n\t         * @private\n\t         */\n\t        this._coordSysMgr = new CoordinateSystemManager();\n\n\t        Eventful.call(this);\n\n\t        /**\n\t         * @type {module:echarts~MessageCenter}\n\t         * @private\n\t         */\n\t        this._messageCenter = new MessageCenter();\n\n\t        // Init mouse events\n\t        this._initEvents();\n\n\t        // In case some people write `window.onresize = chart.resize`\n\t        this.resize = zrUtil.bind(this.resize, this);\n\n\t        // Can't dispatch action during rendering procedure\n\t        this._pendingActions = [];\n\t        // Sort on demand\n\t        function prioritySortFunc(a, b) {\n\t            return a.prio - b.prio;\n\t        }\n\t        timsort(visualFuncs, prioritySortFunc);\n\t        timsort(dataProcessorFuncs, prioritySortFunc);\n\n\t        zr.animation.on('frame', this._onframe, this);\n\t    }\n\n\t    var echartsProto = ECharts.prototype;\n\n\t    echartsProto._onframe = function () {\n\t        // Lazy update\n\t        if (this[OPTION_UPDATED]) {\n\t            var silent = this[OPTION_UPDATED].silent;\n\n\t            this[IN_MAIN_PROCESS] = true;\n\n\t            updateMethods.prepareAndUpdate.call(this);\n\n\t            this[IN_MAIN_PROCESS] = false;\n\n\t            this[OPTION_UPDATED] = false;\n\n\t            flushPendingActions.call(this, silent);\n\n\t            triggerUpdatedEvent.call(this, silent);\n\t        }\n\t    };\n\t    /**\n\t     * @return {HTMLDomElement}\n\t     */\n\t    echartsProto.getDom = function () {\n\t        return this._dom;\n\t    };\n\n\t    /**\n\t     * @return {module:zrender~ZRender}\n\t     */\n\t    echartsProto.getZr = function () {\n\t        return this._zr;\n\t    };\n\n\t    /**\n\t     * Usage:\n\t     * chart.setOption(option, notMerge, lazyUpdate);\n\t     * chart.setOption(option, {\n\t     *     notMerge: ...,\n\t     *     lazyUpdate: ...,\n\t     *     silent: ...\n\t     * });\n\t     *\n\t     * @param {Object} option\n\t     * @param {Object|boolean} [opts] opts or notMerge.\n\t     * @param {boolean} [opts.notMerge=false]\n\t     * @param {boolean} [opts.lazyUpdate=false] Useful when setOption frequently.\n\t     */\n\t    echartsProto.setOption = function (option, notMerge, lazyUpdate) {\n\t        if (true) {\n\t            zrUtil.assert(!this[IN_MAIN_PROCESS], '`setOption` should not be called during main process.');\n\t        }\n\n\t        var silent;\n\t        if (zrUtil.isObject(notMerge)) {\n\t            lazyUpdate = notMerge.lazyUpdate;\n\t            silent = notMerge.silent;\n\t            notMerge = notMerge.notMerge;\n\t        }\n\n\t        this[IN_MAIN_PROCESS] = true;\n\n\t        if (!this._model || notMerge) {\n\t            var optionManager = new OptionManager(this._api);\n\t            var theme = this._theme;\n\t            var ecModel = this._model = new GlobalModel(null, null, theme, optionManager);\n\t            ecModel.init(null, null, theme, optionManager);\n\t        }\n\n\t        // FIXME\n\t        // ugly\n\t        this.__lastOnlyGraphic = !!(option && option.graphic);\n\t        zrUtil.each(option, function (o, mainType) {\n\t            mainType !== 'graphic' && (this.__lastOnlyGraphic = false);\n\t        }, this);\n\n\t        this._model.setOption(option, optionPreprocessorFuncs);\n\n\t        if (lazyUpdate) {\n\t            this[OPTION_UPDATED] = {silent: silent};\n\t            this[IN_MAIN_PROCESS] = false;\n\t        }\n\t        else {\n\t            updateMethods.prepareAndUpdate.call(this);\n\t            // Ensure zr refresh sychronously, and then pixel in canvas can be\n\t            // fetched after `setOption`.\n\t            this._zr.flush();\n\n\t            this[OPTION_UPDATED] = false;\n\t            this[IN_MAIN_PROCESS] = false;\n\n\t            flushPendingActions.call(this, silent);\n\t            triggerUpdatedEvent.call(this, silent);\n\t        }\n\t    };\n\n\t    /**\n\t     * @DEPRECATED\n\t     */\n\t    echartsProto.setTheme = function () {\n\t        console.log('ECharts#setTheme() is DEPRECATED in ECharts 3.0');\n\t    };\n\n\t    /**\n\t     * @return {module:echarts/model/Global}\n\t     */\n\t    echartsProto.getModel = function () {\n\t        return this._model;\n\t    };\n\n\t    /**\n\t     * @return {Object}\n\t     */\n\t    echartsProto.getOption = function () {\n\t        return this._model && this._model.getOption();\n\t    };\n\n\t    /**\n\t     * @return {number}\n\t     */\n\t    echartsProto.getWidth = function () {\n\t        return this._zr.getWidth();\n\t    };\n\n\t    /**\n\t     * @return {number}\n\t     */\n\t    echartsProto.getHeight = function () {\n\t        return this._zr.getHeight();\n\t    };\n\n\t    /**\n\t     * Get canvas which has all thing rendered\n\t     * @param {Object} opts\n\t     * @param {string} [opts.backgroundColor]\n\t     */\n\t    echartsProto.getRenderedCanvas = function (opts) {\n\t        if (!env.canvasSupported) {\n\t            return;\n\t        }\n\t        opts = opts || {};\n\t        opts.pixelRatio = opts.pixelRatio || 1;\n\t        opts.backgroundColor = opts.backgroundColor\n\t            || this._model.get('backgroundColor');\n\t        var zr = this._zr;\n\t        var list = zr.storage.getDisplayList();\n\t        // Stop animations\n\t        zrUtil.each(list, function (el) {\n\t            el.stopAnimation(true);\n\t        });\n\t        return zr.painter.getRenderedCanvas(opts);\n\t    };\n\t    /**\n\t     * @return {string}\n\t     * @param {Object} opts\n\t     * @param {string} [opts.type='png']\n\t     * @param {string} [opts.pixelRatio=1]\n\t     * @param {string} [opts.backgroundColor]\n\t     * @param {string} [opts.excludeComponents]\n\t     */\n\t    echartsProto.getDataURL = function (opts) {\n\t        opts = opts || {};\n\t        var excludeComponents = opts.excludeComponents;\n\t        var ecModel = this._model;\n\t        var excludesComponentViews = [];\n\t        var self = this;\n\n\t        each(excludeComponents, function (componentType) {\n\t            ecModel.eachComponent({\n\t                mainType: componentType\n\t            }, function (component) {\n\t                var view = self._componentsMap[component.__viewId];\n\t                if (!view.group.ignore) {\n\t                    excludesComponentViews.push(view);\n\t                    view.group.ignore = true;\n\t                }\n\t            });\n\t        });\n\n\t        var url = this.getRenderedCanvas(opts).toDataURL(\n\t            'image/' + (opts && opts.type || 'png')\n\t        );\n\n\t        each(excludesComponentViews, function (view) {\n\t            view.group.ignore = false;\n\t        });\n\t        return url;\n\t    };\n\n\n\t    /**\n\t     * @return {string}\n\t     * @param {Object} opts\n\t     * @param {string} [opts.type='png']\n\t     * @param {string} [opts.pixelRatio=1]\n\t     * @param {string} [opts.backgroundColor]\n\t     */\n\t    echartsProto.getConnectedDataURL = function (opts) {\n\t        if (!env.canvasSupported) {\n\t            return;\n\t        }\n\t        var groupId = this.group;\n\t        var mathMin = Math.min;\n\t        var mathMax = Math.max;\n\t        var MAX_NUMBER = Infinity;\n\t        if (connectedGroups[groupId]) {\n\t            var left = MAX_NUMBER;\n\t            var top = MAX_NUMBER;\n\t            var right = -MAX_NUMBER;\n\t            var bottom = -MAX_NUMBER;\n\t            var canvasList = [];\n\t            var dpr = (opts && opts.pixelRatio) || 1;\n\n\t            zrUtil.each(instances, function (chart, id) {\n\t                if (chart.group === groupId) {\n\t                    var canvas = chart.getRenderedCanvas(\n\t                        zrUtil.clone(opts)\n\t                    );\n\t                    var boundingRect = chart.getDom().getBoundingClientRect();\n\t                    left = mathMin(boundingRect.left, left);\n\t                    top = mathMin(boundingRect.top, top);\n\t                    right = mathMax(boundingRect.right, right);\n\t                    bottom = mathMax(boundingRect.bottom, bottom);\n\t                    canvasList.push({\n\t                        dom: canvas,\n\t                        left: boundingRect.left,\n\t                        top: boundingRect.top\n\t                    });\n\t                }\n\t            });\n\n\t            left *= dpr;\n\t            top *= dpr;\n\t            right *= dpr;\n\t            bottom *= dpr;\n\t            var width = right - left;\n\t            var height = bottom - top;\n\t            var targetCanvas = zrUtil.createCanvas();\n\t            targetCanvas.width = width;\n\t            targetCanvas.height = height;\n\t            var zr = zrender.init(targetCanvas);\n\n\t            each(canvasList, function (item) {\n\t                var img = new graphic.Image({\n\t                    style: {\n\t                        x: item.left * dpr - left,\n\t                        y: item.top * dpr - top,\n\t                        image: item.dom\n\t                    }\n\t                });\n\t                zr.add(img);\n\t            });\n\t            zr.refreshImmediately();\n\n\t            return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));\n\t        }\n\t        else {\n\t            return this.getDataURL(opts);\n\t        }\n\t    };\n\n\t    /**\n\t     * Convert from logical coordinate system to pixel coordinate system.\n\t     * See CoordinateSystem#convertToPixel.\n\t     * @param {string|Object} finder\n\t     *        If string, e.g., 'geo', means {geoIndex: 0}.\n\t     *        If Object, could contain some of these properties below:\n\t     *        {\n\t     *            seriesIndex / seriesId / seriesName,\n\t     *            geoIndex / geoId, geoName,\n\t     *            bmapIndex / bmapId / bmapName,\n\t     *            xAxisIndex / xAxisId / xAxisName,\n\t     *            yAxisIndex / yAxisId / yAxisName,\n\t     *            gridIndex / gridId / gridName,\n\t     *            ... (can be extended)\n\t     *        }\n\t     * @param {Array|number} value\n\t     * @return {Array|number} result\n\t     */\n\t    echartsProto.convertToPixel = zrUtil.curry(doConvertPixel, 'convertToPixel');\n\n\t    /**\n\t     * Convert from pixel coordinate system to logical coordinate system.\n\t     * See CoordinateSystem#convertFromPixel.\n\t     * @param {string|Object} finder\n\t     *        If string, e.g., 'geo', means {geoIndex: 0}.\n\t     *        If Object, could contain some of these properties below:\n\t     *        {\n\t     *            seriesIndex / seriesId / seriesName,\n\t     *            geoIndex / geoId / geoName,\n\t     *            bmapIndex / bmapId / bmapName,\n\t     *            xAxisIndex / xAxisId / xAxisName,\n\t     *            yAxisIndex / yAxisId / yAxisName\n\t     *            gridIndex / gridId / gridName,\n\t     *            ... (can be extended)\n\t     *        }\n\t     * @param {Array|number} value\n\t     * @return {Array|number} result\n\t     */\n\t    echartsProto.convertFromPixel = zrUtil.curry(doConvertPixel, 'convertFromPixel');\n\n\t    function doConvertPixel(methodName, finder, value) {\n\t        var ecModel = this._model;\n\t        var coordSysList = this._coordSysMgr.getCoordinateSystems();\n\t        var result;\n\n\t        finder = modelUtil.parseFinder(ecModel, finder);\n\n\t        for (var i = 0; i < coordSysList.length; i++) {\n\t            var coordSys = coordSysList[i];\n\t            if (coordSys[methodName]\n\t                && (result = coordSys[methodName](ecModel, finder, value)) != null\n\t            ) {\n\t                return result;\n\t            }\n\t        }\n\n\t        if (true) {\n\t            console.warn(\n\t                'No coordinate system that supports ' + methodName + ' found by the given finder.'\n\t            );\n\t        }\n\t    }\n\n\t    /**\n\t     * Is the specified coordinate systems or components contain the given pixel point.\n\t     * @param {string|Object} finder\n\t     *        If string, e.g., 'geo', means {geoIndex: 0}.\n\t     *        If Object, could contain some of these properties below:\n\t     *        {\n\t     *            seriesIndex / seriesId / seriesName,\n\t     *            geoIndex / geoId / geoName,\n\t     *            bmapIndex / bmapId / bmapName,\n\t     *            xAxisIndex / xAxisId / xAxisName,\n\t     *            yAxisIndex / yAxisId / yAxisName\n\t     *            gridIndex / gridId / gridName,\n\t     *            ... (can be extended)\n\t     *        }\n\t     * @param {Array|number} value\n\t     * @return {boolean} result\n\t     */\n\t    echartsProto.containPixel = function (finder, value) {\n\t        var ecModel = this._model;\n\t        var result;\n\n\t        finder = modelUtil.parseFinder(ecModel, finder);\n\n\t        zrUtil.each(finder, function (models, key) {\n\t            key.indexOf('Models') >= 0 && zrUtil.each(models, function (model) {\n\t                var coordSys = model.coordinateSystem;\n\t                if (coordSys && coordSys.containPoint) {\n\t                    result |= !!coordSys.containPoint(value);\n\t                }\n\t                else if (key === 'seriesModels') {\n\t                    var view = this._chartsMap[model.__viewId];\n\t                    if (view && view.containPoint) {\n\t                        result |= view.containPoint(value, model);\n\t                    }\n\t                    else {\n\t                        if (true) {\n\t                            console.warn(key + ': ' + (view\n\t                                ? 'The found component do not support containPoint.'\n\t                                : 'No view mapping to the found component.'\n\t                            ));\n\t                        }\n\t                    }\n\t                }\n\t                else {\n\t                    if (true) {\n\t                        console.warn(key + ': containPoint is not supported');\n\t                    }\n\t                }\n\t            }, this);\n\t        }, this);\n\n\t        return !!result;\n\t    };\n\n\t    /**\n\t     * Get visual from series or data.\n\t     * @param {string|Object} finder\n\t     *        If string, e.g., 'series', means {seriesIndex: 0}.\n\t     *        If Object, could contain some of these properties below:\n\t     *        {\n\t     *            seriesIndex / seriesId / seriesName,\n\t     *            dataIndex / dataIndexInside\n\t     *        }\n\t     *        If dataIndex is not specified, series visual will be fetched,\n\t     *        but not data item visual.\n\t     *        If all of seriesIndex, seriesId, seriesName are not specified,\n\t     *        visual will be fetched from first series.\n\t     * @param {string} visualType 'color', 'symbol', 'symbolSize'\n\t     */\n\t    echartsProto.getVisual = function (finder, visualType) {\n\t        var ecModel = this._model;\n\n\t        finder = modelUtil.parseFinder(ecModel, finder, {defaultMainType: 'series'});\n\n\t        var seriesModel = finder.seriesModel;\n\n\t        if (true) {\n\t            if (!seriesModel) {\n\t                console.warn('There is no specified seires model');\n\t            }\n\t        }\n\n\t        var data = seriesModel.getData();\n\n\t        var dataIndexInside = finder.hasOwnProperty('dataIndexInside')\n\t            ? finder.dataIndexInside\n\t            : finder.hasOwnProperty('dataIndex')\n\t            ? data.indexOfRawIndex(finder.dataIndex)\n\t            : null;\n\n\t        return dataIndexInside != null\n\t            ? data.getItemVisual(dataIndexInside, visualType)\n\t            : data.getVisual(visualType);\n\t    };\n\n\n\t    var updateMethods = {\n\n\t        /**\n\t         * @param {Object} payload\n\t         * @private\n\t         */\n\t        update: function (payload) {\n\t            // console.time && console.time('update');\n\n\t            var ecModel = this._model;\n\t            var api = this._api;\n\t            var coordSysMgr = this._coordSysMgr;\n\t            var zr = this._zr;\n\t            // update before setOption\n\t            if (!ecModel) {\n\t                return;\n\t            }\n\n\t            // Fixme First time update ?\n\t            ecModel.restoreData();\n\n\t            // TODO\n\t            // Save total ecModel here for undo/redo (after restoring data and before processing data).\n\t            // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.\n\n\t            // Create new coordinate system each update\n\t            // In LineView may save the old coordinate system and use it to get the orignal point\n\t            coordSysMgr.create(this._model, this._api);\n\n\t            processData.call(this, ecModel, api);\n\n\t            stackSeriesData.call(this, ecModel);\n\n\t            coordSysMgr.update(ecModel, api);\n\n\t            doVisualEncoding.call(this, ecModel, payload);\n\n\t            doRender.call(this, ecModel, payload);\n\n\t            // Set background\n\t            var backgroundColor = ecModel.get('backgroundColor') || 'transparent';\n\n\t            var painter = zr.painter;\n\t            // TODO all use clearColor ?\n\t            if (painter.isSingleCanvas && painter.isSingleCanvas()) {\n\t                zr.configLayer(0, {\n\t                    clearColor: backgroundColor\n\t                });\n\t            }\n\t            else {\n\t                // In IE8\n\t                if (!env.canvasSupported) {\n\t                    var colorArr = colorTool.parse(backgroundColor);\n\t                    backgroundColor = colorTool.stringify(colorArr, 'rgb');\n\t                    if (colorArr[3] === 0) {\n\t                        backgroundColor = 'transparent';\n\t                    }\n\t                }\n\t                if (backgroundColor.colorStops || backgroundColor.image) {\n\t                    // Gradient background\n\t                    // FIXME Fixed layer？\n\t                    zr.configLayer(0, {\n\t                        clearColor: backgroundColor\n\t                    });\n\t                    this[HAS_GRADIENT_OR_PATTERN_BG] = true;\n\n\t                    this._dom.style.background = 'transparent';\n\t                }\n\t                else {\n\t                    if (this[HAS_GRADIENT_OR_PATTERN_BG]) {\n\t                        zr.configLayer(0, {\n\t                            clearColor: null\n\t                        });\n\t                    }\n\t                    this[HAS_GRADIENT_OR_PATTERN_BG] = false;\n\n\t                    this._dom.style.background = backgroundColor;\n\t                }\n\t            }\n\n\t            // console.time && console.timeEnd('update');\n\t        },\n\n\t        /**\n\t         * @param {Object} payload\n\t         * @private\n\t         */\n\t        updateView: function (payload) {\n\t            var ecModel = this._model;\n\n\t            // update before setOption\n\t            if (!ecModel) {\n\t                return;\n\t            }\n\n\t            ecModel.eachSeries(function (seriesModel) {\n\t                seriesModel.getData().clearAllVisual();\n\t            });\n\n\t            doVisualEncoding.call(this, ecModel, payload);\n\n\t            invokeUpdateMethod.call(this, 'updateView', ecModel, payload);\n\t        },\n\n\t        /**\n\t         * @param {Object} payload\n\t         * @private\n\t         */\n\t        updateVisual: function (payload) {\n\t            var ecModel = this._model;\n\n\t            // update before setOption\n\t            if (!ecModel) {\n\t                return;\n\t            }\n\n\t            ecModel.eachSeries(function (seriesModel) {\n\t                seriesModel.getData().clearAllVisual();\n\t            });\n\n\t            doVisualEncoding.call(this, ecModel, payload, true);\n\n\t            invokeUpdateMethod.call(this, 'updateVisual', ecModel, payload);\n\t        },\n\n\t        /**\n\t         * @param {Object} payload\n\t         * @private\n\t         */\n\t        updateLayout: function (payload) {\n\t            var ecModel = this._model;\n\n\t            // update before setOption\n\t            if (!ecModel) {\n\t                return;\n\t            }\n\n\t            doLayout.call(this, ecModel, payload);\n\n\t            invokeUpdateMethod.call(this, 'updateLayout', ecModel, payload);\n\t        },\n\n\t        /**\n\t         * @param {Object} payload\n\t         * @private\n\t         */\n\t        prepareAndUpdate: function (payload) {\n\t            var ecModel = this._model;\n\n\t            prepareView.call(this, 'component', ecModel);\n\n\t            prepareView.call(this, 'chart', ecModel);\n\n\t            // FIXME\n\t            // ugly\n\t            if (this.__lastOnlyGraphic) {\n\t                each(this._componentsViews, function (componentView) {\n\t                    var componentModel = componentView.__model;\n\t                    if (componentModel && componentModel.mainType === 'graphic') {\n\t                        componentView.render(componentModel, ecModel, this._api, payload);\n\t                        updateZ(componentModel, componentView);\n\t                    }\n\t                }, this);\n\t                this.__lastOnlyGraphic = false;\n\t            }\n\t            else {\n\t                updateMethods.update.call(this, payload);\n\t            }\n\t        }\n\t    };\n\n\t    /**\n\t     * @private\n\t     */\n\t    function updateDirectly(ecIns, method, payload, mainType, subType) {\n\t        var ecModel = ecIns._model;\n\t        var query = {};\n\t        query[mainType + 'Id'] = payload[mainType + 'Id'];\n\t        query[mainType + 'Index'] = payload[mainType + 'Index'];\n\t        query[mainType + 'Name'] = payload[mainType + 'Name'];\n\n\t        var condition = {mainType: mainType, query: query};\n\t        subType && (condition.subType = subType); // subType may be '' by parseClassType;\n\n\t        // If dispatchAction before setOption, do nothing.\n\t        ecModel && ecModel.eachComponent(condition, function (model, index) {\n\t            var view = ecIns[\n\t                mainType === 'series' ? '_chartsMap' : '_componentsMap'\n\t            ][model.__viewId];\n\t            if (view && view.__alive) {\n\t                view[method](model, ecModel, ecIns._api, payload);\n\t            }\n\t        }, ecIns);\n\t    }\n\n\t    /**\n\t     * Resize the chart\n\t     * @param {Object} opts\n\t     * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)\n\t     * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)\n\t     * @param {boolean} [opts.silent=false]\n\t     */\n\t    echartsProto.resize = function (opts) {\n\t        if (true) {\n\t            zrUtil.assert(!this[IN_MAIN_PROCESS], '`resize` should not be called during main process.');\n\t        }\n\n\t        this[IN_MAIN_PROCESS] = true;\n\n\t        this._zr.resize(opts);\n\n\t        var optionChanged = this._model && this._model.resetOption('media');\n\t        var updateMethod = optionChanged ? 'prepareAndUpdate' : 'update';\n\n\t        updateMethods[updateMethod].call(this);\n\n\t        // Resize loading effect\n\t        this._loadingFX && this._loadingFX.resize();\n\n\t        this[IN_MAIN_PROCESS] = false;\n\n\t        var silent = opts && opts.silent;\n\n\t        flushPendingActions.call(this, silent);\n\n\t        triggerUpdatedEvent.call(this, silent);\n\t    };\n\n\t    /**\n\t     * Show loading effect\n\t     * @param  {string} [name='default']\n\t     * @param  {Object} [cfg]\n\t     */\n\t    echartsProto.showLoading = function (name, cfg) {\n\t        if (zrUtil.isObject(name)) {\n\t            cfg = name;\n\t            name = '';\n\t        }\n\t        name = name || 'default';\n\n\t        this.hideLoading();\n\t        if (!loadingEffects[name]) {\n\t            if (true) {\n\t                console.warn('Loading effects ' + name + ' not exists.');\n\t            }\n\t            return;\n\t        }\n\t        var el = loadingEffects[name](this._api, cfg);\n\t        var zr = this._zr;\n\t        this._loadingFX = el;\n\n\t        zr.add(el);\n\t    };\n\n\t    /**\n\t     * Hide loading effect\n\t     */\n\t    echartsProto.hideLoading = function () {\n\t        this._loadingFX && this._zr.remove(this._loadingFX);\n\t        this._loadingFX = null;\n\t    };\n\n\t    /**\n\t     * @param {Object} eventObj\n\t     * @return {Object}\n\t     */\n\t    echartsProto.makeActionFromEvent = function (eventObj) {\n\t        var payload = zrUtil.extend({}, eventObj);\n\t        payload.type = eventActionMap[eventObj.type];\n\t        return payload;\n\t    };\n\n\t    /**\n\t     * @pubilc\n\t     * @param {Object} payload\n\t     * @param {string} [payload.type] Action type\n\t     * @param {Object|boolean} [opt] If pass boolean, means opt.silent\n\t     * @param {boolean} [opt.silent=false] Whether trigger events.\n\t     * @param {boolean} [opt.flush=undefined]\n\t     *                  true: Flush immediately, and then pixel in canvas can be fetched\n\t     *                      immediately. Caution: it might affect performance.\n\t     *                  false: Not not flush.\n\t     *                  undefined: Auto decide whether perform flush.\n\t     */\n\t    echartsProto.dispatchAction = function (payload, opt) {\n\t        if (!zrUtil.isObject(opt)) {\n\t            opt = {silent: !!opt};\n\t        }\n\n\t        if (!actions[payload.type]) {\n\t            return;\n\t        }\n\n\t        // if (__DEV__) {\n\t        //     zrUtil.assert(\n\t        //         !this[IN_MAIN_PROCESS],\n\t        //         '`dispatchAction` should not be called during main process.'\n\t        //         + 'unless updateMathod is \"none\".'\n\t        //     );\n\t        // }\n\n\t        // May dispatchAction in rendering procedure\n\t        if (this[IN_MAIN_PROCESS]) {\n\t            this._pendingActions.push(payload);\n\t            return;\n\t        }\n\n\t        doDispatchAction.call(this, payload, opt.silent);\n\n\t        if (opt.flush) {\n\t            this._zr.flush(true);\n\t        }\n\t        else if (opt.flush !== false && env.browser.weChat) {\n\t            // In WeChat embeded browser, `requestAnimationFrame` and `setInterval`\n\t            // hang when sliding page (on touch event), which cause that zr does not\n\t            // refresh util user interaction finished, which is not expected.\n\t            // But `dispatchAction` may be called too frequently when pan on touch\n\t            // screen, which impacts performance if do not throttle them.\n\t            this._throttledZrFlush();\n\t        }\n\n\t        flushPendingActions.call(this, opt.silent);\n\n\t        triggerUpdatedEvent.call(this, opt.silent);\n\t    };\n\n\t    function doDispatchAction(payload, silent) {\n\t        var payloadType = payload.type;\n\t        var actionWrap = actions[payloadType];\n\t        var actionInfo = actionWrap.actionInfo;\n\n\t        var cptType = (actionInfo.update || 'update').split(':');\n\t        var updateMethod = cptType.pop();\n\t        cptType = cptType[0] && parseClassType(cptType[0]);\n\n\t        this[IN_MAIN_PROCESS] = true;\n\n\t        var payloads = [payload];\n\t        var batched = false;\n\t        // Batch action\n\t        if (payload.batch) {\n\t            batched = true;\n\t            payloads = zrUtil.map(payload.batch, function (item) {\n\t                item = zrUtil.defaults(zrUtil.extend({}, item), payload);\n\t                item.batch = null;\n\t                return item;\n\t            });\n\t        }\n\n\t        var eventObjBatch = [];\n\t        var eventObj;\n\t        var isHighDown = payloadType === 'highlight' || payloadType === 'downplay';\n\n\t        for (var i = 0; i < payloads.length; i++) {\n\t            var batchItem = payloads[i];\n\t            // Action can specify the event by return it.\n\t            eventObj = actionWrap.action(batchItem, this._model);\n\t            // Emit event outside\n\t            eventObj = eventObj || zrUtil.extend({}, batchItem);\n\t            // Convert type to eventType\n\t            eventObj.type = actionInfo.event || eventObj.type;\n\t            eventObjBatch.push(eventObj);\n\n\t            // light update does not perform data process, layout and visual.\n\t            if (isHighDown) {\n\t                // method, payload, mainType, subType\n\t                updateDirectly(this, updateMethod, batchItem, 'series');\n\t            }\n\t            else if (cptType) {\n\t                updateDirectly(this, updateMethod, batchItem, cptType.main, cptType.sub);\n\t            }\n\t        }\n\n\t        if (updateMethod !== 'none' && !isHighDown && !cptType) {\n\t            // Still dirty\n\t            if (this[OPTION_UPDATED]) {\n\t                // FIXME Pass payload ?\n\t                updateMethods.prepareAndUpdate.call(this, payload);\n\t                this[OPTION_UPDATED] = false;\n\t            }\n\t            else {\n\t                updateMethods[updateMethod].call(this, payload);\n\t            }\n\t        }\n\n\t        // Follow the rule of action batch\n\t        if (batched) {\n\t            eventObj = {\n\t                type: actionInfo.event || payloadType,\n\t                batch: eventObjBatch\n\t            };\n\t        }\n\t        else {\n\t            eventObj = eventObjBatch[0];\n\t        }\n\n\t        this[IN_MAIN_PROCESS] = false;\n\n\t        !silent && this._messageCenter.trigger(eventObj.type, eventObj);\n\t    }\n\n\t    function flushPendingActions(silent) {\n\t        var pendingActions = this._pendingActions;\n\t        while (pendingActions.length) {\n\t            var payload = pendingActions.shift();\n\t            doDispatchAction.call(this, payload, silent);\n\t        }\n\t    }\n\n\t    function triggerUpdatedEvent(silent) {\n\t        !silent && this.trigger('updated');\n\t    }\n\n\t    /**\n\t     * Register event\n\t     * @method\n\t     */\n\t    echartsProto.on = createRegisterEventWithLowercaseName('on');\n\t    echartsProto.off = createRegisterEventWithLowercaseName('off');\n\t    echartsProto.one = createRegisterEventWithLowercaseName('one');\n\n\t    /**\n\t     * @param {string} methodName\n\t     * @private\n\t     */\n\t    function invokeUpdateMethod(methodName, ecModel, payload) {\n\t        var api = this._api;\n\n\t        // Update all components\n\t        each(this._componentsViews, function (component) {\n\t            var componentModel = component.__model;\n\t            component[methodName](componentModel, ecModel, api, payload);\n\n\t            updateZ(componentModel, component);\n\t        }, this);\n\n\t        // Upate all charts\n\t        ecModel.eachSeries(function (seriesModel, idx) {\n\t            var chart = this._chartsMap[seriesModel.__viewId];\n\t            chart[methodName](seriesModel, ecModel, api, payload);\n\n\t            updateZ(seriesModel, chart);\n\n\t            updateProgressiveAndBlend(seriesModel, chart);\n\t        }, this);\n\n\t        // If use hover layer\n\t        updateHoverLayerStatus(this._zr, ecModel);\n\t    }\n\n\t    /**\n\t     * Prepare view instances of charts and components\n\t     * @param  {module:echarts/model/Global} ecModel\n\t     * @private\n\t     */\n\t    function prepareView(type, ecModel) {\n\t        var isComponent = type === 'component';\n\t        var viewList = isComponent ? this._componentsViews : this._chartsViews;\n\t        var viewMap = isComponent ? this._componentsMap : this._chartsMap;\n\t        var zr = this._zr;\n\n\t        for (var i = 0; i < viewList.length; i++) {\n\t            viewList[i].__alive = false;\n\t        }\n\n\t        ecModel[isComponent ? 'eachComponent' : 'eachSeries'](function (componentType, model) {\n\t            if (isComponent) {\n\t                if (componentType === 'series') {\n\t                    return;\n\t                }\n\t            }\n\t            else {\n\t                model = componentType;\n\t            }\n\n\t            // Consider: id same and type changed.\n\t            var viewId = model.id + '_' + model.type;\n\t            var view = viewMap[viewId];\n\t            if (!view) {\n\t                var classType = parseClassType(model.type);\n\t                var Clazz = isComponent\n\t                    ? ComponentView.getClass(classType.main, classType.sub)\n\t                    : ChartView.getClass(classType.sub);\n\t                if (Clazz) {\n\t                    view = new Clazz();\n\t                    view.init(ecModel, this._api);\n\t                    viewMap[viewId] = view;\n\t                    viewList.push(view);\n\t                    zr.add(view.group);\n\t                }\n\t                else {\n\t                    // Error\n\t                    return;\n\t                }\n\t            }\n\n\t            model.__viewId = viewId;\n\t            view.__alive = true;\n\t            view.__id = viewId;\n\t            view.__model = model;\n\t        }, this);\n\n\t        for (var i = 0; i < viewList.length;) {\n\t            var view = viewList[i];\n\t            if (!view.__alive) {\n\t                zr.remove(view.group);\n\t                view.dispose(ecModel, this._api);\n\t                viewList.splice(i, 1);\n\t                delete viewMap[view.__id];\n\t            }\n\t            else {\n\t                i++;\n\t            }\n\t        }\n\t    }\n\n\t    /**\n\t     * Processor data in each series\n\t     *\n\t     * @param {module:echarts/model/Global} ecModel\n\t     * @private\n\t     */\n\t    function processData(ecModel, api) {\n\t        each(dataProcessorFuncs, function (process) {\n\t            process.func(ecModel, api);\n\t        });\n\t    }\n\n\t    /**\n\t     * @private\n\t     */\n\t    function stackSeriesData(ecModel) {\n\t        var stackedDataMap = {};\n\t        ecModel.eachSeries(function (series) {\n\t            var stack = series.get('stack');\n\t            var data = series.getData();\n\t            if (stack && data.type === 'list') {\n\t                var previousStack = stackedDataMap[stack];\n\t                if (previousStack) {\n\t                    data.stackedOn = previousStack;\n\t                }\n\t                stackedDataMap[stack] = data;\n\t            }\n\t        });\n\t    }\n\n\t    /**\n\t     * Layout before each chart render there series, special visual encoding stage\n\t     *\n\t     * @param {module:echarts/model/Global} ecModel\n\t     * @private\n\t     */\n\t    function doLayout(ecModel, payload) {\n\t        var api = this._api;\n\t        each(visualFuncs, function (visual) {\n\t            if (visual.isLayout) {\n\t                visual.func(ecModel, api, payload);\n\t            }\n\t        });\n\t    }\n\n\t    /**\n\t     * Encode visual infomation from data after data processing\n\t     *\n\t     * @param {module:echarts/model/Global} ecModel\n\t     * @param {object} layout\n\t     * @param {boolean} [excludesLayout]\n\t     * @private\n\t     */\n\t    function doVisualEncoding(ecModel, payload, excludesLayout) {\n\t        var api = this._api;\n\t        ecModel.clearColorPalette();\n\t        ecModel.eachSeries(function (seriesModel) {\n\t            seriesModel.clearColorPalette();\n\t        });\n\t        each(visualFuncs, function (visual) {\n\t            (!excludesLayout || !visual.isLayout)\n\t                && visual.func(ecModel, api, payload);\n\t        });\n\t    }\n\n\t    /**\n\t     * Render each chart and component\n\t     * @private\n\t     */\n\t    function doRender(ecModel, payload) {\n\t        var api = this._api;\n\t        // Render all components\n\t        each(this._componentsViews, function (componentView) {\n\t            var componentModel = componentView.__model;\n\t            componentView.render(componentModel, ecModel, api, payload);\n\n\t            updateZ(componentModel, componentView);\n\t        }, this);\n\n\t        each(this._chartsViews, function (chart) {\n\t            chart.__alive = false;\n\t        }, this);\n\n\t        // Render all charts\n\t        ecModel.eachSeries(function (seriesModel, idx) {\n\t            var chartView = this._chartsMap[seriesModel.__viewId];\n\t            chartView.__alive = true;\n\t            chartView.render(seriesModel, ecModel, api, payload);\n\n\t            chartView.group.silent = !!seriesModel.get('silent');\n\n\t            updateZ(seriesModel, chartView);\n\n\t            updateProgressiveAndBlend(seriesModel, chartView);\n\n\t        }, this);\n\n\t        // If use hover layer\n\t        updateHoverLayerStatus(this._zr, ecModel);\n\n\t        // Remove groups of unrendered charts\n\t        each(this._chartsViews, function (chart) {\n\t            if (!chart.__alive) {\n\t                chart.remove(ecModel, api);\n\t            }\n\t        }, this);\n\t    }\n\n\t    var MOUSE_EVENT_NAMES = [\n\t        'click', 'dblclick', 'mouseover', 'mouseout', 'mousemove',\n\t        'mousedown', 'mouseup', 'globalout', 'contextmenu'\n\t    ];\n\t    /**\n\t     * @private\n\t     */\n\t    echartsProto._initEvents = function () {\n\t        each(MOUSE_EVENT_NAMES, function (eveName) {\n\t            this._zr.on(eveName, function (e) {\n\t                var ecModel = this.getModel();\n\t                var el = e.target;\n\t                var params;\n\n\t                // no e.target when 'globalout'.\n\t                if (eveName === 'globalout') {\n\t                    params = {};\n\t                }\n\t                else if (el && el.dataIndex != null) {\n\t                    var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);\n\t                    params = dataModel && dataModel.getDataParams(el.dataIndex, el.dataType) || {};\n\t                }\n\t                // If element has custom eventData of components\n\t                else if (el && el.eventData) {\n\t                    params = zrUtil.extend({}, el.eventData);\n\t                }\n\n\t                if (params) {\n\t                    params.event = e;\n\t                    params.type = eveName;\n\t                    this.trigger(eveName, params);\n\t                }\n\n\t            }, this);\n\t        }, this);\n\n\t        each(eventActionMap, function (actionType, eventType) {\n\t            this._messageCenter.on(eventType, function (event) {\n\t                this.trigger(eventType, event);\n\t            }, this);\n\t        }, this);\n\t    };\n\n\t    /**\n\t     * @return {boolean}\n\t     */\n\t    echartsProto.isDisposed = function () {\n\t        return this._disposed;\n\t    };\n\n\t    /**\n\t     * Clear\n\t     */\n\t    echartsProto.clear = function () {\n\t        this.setOption({ series: [] }, true);\n\t    };\n\t    /**\n\t     * Dispose instance\n\t     */\n\t    echartsProto.dispose = function () {\n\t        if (this._disposed) {\n\t            if (true) {\n\t                console.warn('Instance ' + this.id + ' has been disposed');\n\t            }\n\t            return;\n\t        }\n\t        this._disposed = true;\n\n\t        var api = this._api;\n\t        var ecModel = this._model;\n\n\t        each(this._componentsViews, function (component) {\n\t            component.dispose(ecModel, api);\n\t        });\n\t        each(this._chartsViews, function (chart) {\n\t            chart.dispose(ecModel, api);\n\t        });\n\n\t        // Dispose after all views disposed\n\t        this._zr.dispose();\n\n\t        delete instances[this.id];\n\t    };\n\n\t    zrUtil.mixin(ECharts, Eventful);\n\n\t    function updateHoverLayerStatus(zr, ecModel) {\n\t        var storage = zr.storage;\n\t        var elCount = 0;\n\t        storage.traverse(function (el) {\n\t            if (!el.isGroup) {\n\t                elCount++;\n\t            }\n\t        });\n\t        if (elCount > ecModel.get('hoverLayerThreshold') && !env.node) {\n\t            storage.traverse(function (el) {\n\t                if (!el.isGroup) {\n\t                    el.useHoverLayer = true;\n\t                }\n\t            });\n\t        }\n\t    }\n\t    /**\n\t     * Update chart progressive and blend.\n\t     * @param {module:echarts/model/Series|module:echarts/model/Component} model\n\t     * @param {module:echarts/view/Component|module:echarts/view/Chart} view\n\t     */\n\t    function updateProgressiveAndBlend(seriesModel, chartView) {\n\t        // Progressive configuration\n\t        var elCount = 0;\n\t        chartView.group.traverse(function (el) {\n\t            if (el.type !== 'group' && !el.ignore) {\n\t                elCount++;\n\t            }\n\t        });\n\t        var frameDrawNum = +seriesModel.get('progressive');\n\t        var needProgressive = elCount > seriesModel.get('progressiveThreshold') && frameDrawNum && !env.node;\n\t        if (needProgressive) {\n\t            chartView.group.traverse(function (el) {\n\t                // FIXME marker and other components\n\t                if (!el.isGroup) {\n\t                    el.progressive = needProgressive ?\n\t                        Math.floor(elCount++ / frameDrawNum) : -1;\n\t                    if (needProgressive) {\n\t                        el.stopAnimation(true);\n\t                    }\n\t                }\n\t            });\n\t        }\n\n\t        // Blend configration\n\t        var blendMode = seriesModel.get('blendMode') || null;\n\t        if (true) {\n\t            if (!env.canvasSupported && blendMode && blendMode !== 'source-over') {\n\t                console.warn('Only canvas support blendMode');\n\t            }\n\t        }\n\t        chartView.group.traverse(function (el) {\n\t            // FIXME marker and other components\n\t            if (!el.isGroup) {\n\t                el.setStyle('blend', blendMode);\n\t            }\n\t        });\n\t    }\n\t    /**\n\t     * @param {module:echarts/model/Series|module:echarts/model/Component} model\n\t     * @param {module:echarts/view/Component|module:echarts/view/Chart} view\n\t     */\n\t    function updateZ(model, view) {\n\t        var z = model.get('z');\n\t        var zlevel = model.get('zlevel');\n\t        // Set z and zlevel\n\t        view.group.traverse(function (el) {\n\t            if (el.type !== 'group') {\n\t                z != null && (el.z = z);\n\t                zlevel != null && (el.zlevel = zlevel);\n\t            }\n\t        });\n\t    }\n\t    /**\n\t     * @type {Array.<Function>}\n\t     * @inner\n\t     */\n\t    var actions = [];\n\n\t    /**\n\t     * Map eventType to actionType\n\t     * @type {Object}\n\t     */\n\t    var eventActionMap = {};\n\n\t    /**\n\t     * Data processor functions of each stage\n\t     * @type {Array.<Object.<string, Function>>}\n\t     * @inner\n\t     */\n\t    var dataProcessorFuncs = [];\n\n\t    /**\n\t     * @type {Array.<Function>}\n\t     * @inner\n\t     */\n\t    var optionPreprocessorFuncs = [];\n\n\t    /**\n\t     * Visual encoding functions of each stage\n\t     * @type {Array.<Object.<string, Function>>}\n\t     * @inner\n\t     */\n\t    var visualFuncs = [];\n\t    /**\n\t     * Theme storage\n\t     * @type {Object.<key, Object>}\n\t     */\n\t    var themeStorage = {};\n\t    /**\n\t     * Loading effects\n\t     */\n\t    var loadingEffects = {};\n\n\n\t    var instances = {};\n\t    var connectedGroups = {};\n\n\t    var idBase = new Date() - 0;\n\t    var groupIdBase = new Date() - 0;\n\t    var DOM_ATTRIBUTE_KEY = '_echarts_instance_';\n\t    /**\n\t     * @alias module:echarts\n\t     */\n\t    var echarts = {\n\t        /**\n\t         * @type {number}\n\t         */\n\t        version: '3.4.0',\n\t        dependencies: {\n\t            zrender: '3.3.0'\n\t        }\n\t    };\n\n\t    function enableConnect(chart) {\n\n\t        var STATUS_PENDING = 0;\n\t        var STATUS_UPDATING = 1;\n\t        var STATUS_UPDATED = 2;\n\t        var STATUS_KEY = '__connectUpdateStatus';\n\t        function updateConnectedChartsStatus(charts, status) {\n\t            for (var i = 0; i < charts.length; i++) {\n\t                var otherChart = charts[i];\n\t                otherChart[STATUS_KEY] = status;\n\t            }\n\t        }\n\t        zrUtil.each(eventActionMap, function (actionType, eventType) {\n\t            chart._messageCenter.on(eventType, function (event) {\n\t                if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {\n\t                    var action = chart.makeActionFromEvent(event);\n\t                    var otherCharts = [];\n\n\t                    zrUtil.each(instances, function (otherChart) {\n\t                        if (otherChart !== chart && otherChart.group === chart.group) {\n\t                            otherCharts.push(otherChart);\n\t                        }\n\t                    });\n\n\t                    updateConnectedChartsStatus(otherCharts, STATUS_PENDING);\n\t                    each(otherCharts, function (otherChart) {\n\t                        if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {\n\t                            otherChart.dispatchAction(action);\n\t                        }\n\t                    });\n\t                    updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);\n\t                }\n\t            });\n\t        });\n\n\t    }\n\t    /**\n\t     * @param {HTMLDomElement} dom\n\t     * @param {Object} [theme]\n\t     * @param {Object} opts\n\t     * @param {number} [opts.devicePixelRatio] Use window.devicePixelRatio by default\n\t     * @param {string} [opts.renderer] Currently only 'canvas' is supported.\n\t     * @param {number} [opts.width] Use clientWidth of the input `dom` by default.\n\t     *                              Can be 'auto' (the same as null/undefined)\n\t     * @param {number} [opts.height] Use clientHeight of the input `dom` by default.\n\t     *                               Can be 'auto' (the same as null/undefined)\n\t     */\n\t    echarts.init = function (dom, theme, opts) {\n\t        if (true) {\n\t            // Check version\n\t            if ((zrender.version.replace('.', '') - 0) < (echarts.dependencies.zrender.replace('.', '') - 0)) {\n\t                throw new Error(\n\t                    'ZRender ' + zrender.version\n\t                    + ' is too old for ECharts ' + echarts.version\n\t                    + '. Current version need ZRender '\n\t                    + echarts.dependencies.zrender + '+'\n\t                );\n\t            }\n\t            if (!dom) {\n\t                throw new Error('Initialize failed: invalid dom.');\n\t            }\n\t            if (zrUtil.isDom(dom) && dom.nodeName.toUpperCase() !== 'CANVAS' && (!dom.clientWidth || !dom.clientHeight)) {\n\t                console.warn('Can\\'t get dom width or height');\n\t            }\n\t        }\n\n\t        var chart = new ECharts(dom, theme, opts);\n\t        chart.id = 'ec_' + idBase++;\n\t        instances[chart.id] = chart;\n\n\t        dom.setAttribute &&\n\t            dom.setAttribute(DOM_ATTRIBUTE_KEY, chart.id);\n\n\t        enableConnect(chart);\n\n\t        return chart;\n\t    };\n\n\t    /**\n\t     * @return {string|Array.<module:echarts~ECharts>} groupId\n\t     */\n\t    echarts.connect = function (groupId) {\n\t        // Is array of charts\n\t        if (zrUtil.isArray(groupId)) {\n\t            var charts = groupId;\n\t            groupId = null;\n\t            // If any chart has group\n\t            zrUtil.each(charts, function (chart) {\n\t                if (chart.group != null) {\n\t                    groupId = chart.group;\n\t                }\n\t            });\n\t            groupId = groupId || ('g_' + groupIdBase++);\n\t            zrUtil.each(charts, function (chart) {\n\t                chart.group = groupId;\n\t            });\n\t        }\n\t        connectedGroups[groupId] = true;\n\t        return groupId;\n\t    };\n\n\t    /**\n\t     * @return {string} groupId\n\t     */\n\t    echarts.disConnect = function (groupId) {\n\t        connectedGroups[groupId] = false;\n\t    };\n\n\t    /**\n\t     * Dispose a chart instance\n\t     * @param  {module:echarts~ECharts|HTMLDomElement|string} chart\n\t     */\n\t    echarts.dispose = function (chart) {\n\t        if (zrUtil.isDom(chart)) {\n\t            chart = echarts.getInstanceByDom(chart);\n\t        }\n\t        else if (typeof chart === 'string') {\n\t            chart = instances[chart];\n\t        }\n\t        if ((chart instanceof ECharts) && !chart.isDisposed()) {\n\t            chart.dispose();\n\t        }\n\t    };\n\n\t    /**\n\t     * @param  {HTMLDomElement} dom\n\t     * @return {echarts~ECharts}\n\t     */\n\t    echarts.getInstanceByDom = function (dom) {\n\t        var key = dom.getAttribute(DOM_ATTRIBUTE_KEY);\n\t        return instances[key];\n\t    };\n\t    /**\n\t     * @param {string} key\n\t     * @return {echarts~ECharts}\n\t     */\n\t    echarts.getInstanceById = function (key) {\n\t        return instances[key];\n\t    };\n\n\t    /**\n\t     * Register theme\n\t     */\n\t    echarts.registerTheme = function (name, theme) {\n\t        themeStorage[name] = theme;\n\t    };\n\n\t    /**\n\t     * Register option preprocessor\n\t     * @param {Function} preprocessorFunc\n\t     */\n\t    echarts.registerPreprocessor = function (preprocessorFunc) {\n\t        optionPreprocessorFuncs.push(preprocessorFunc);\n\t    };\n\n\t    /**\n\t     * @param {number} [priority=1000]\n\t     * @param {Function} processorFunc\n\t     */\n\t    echarts.registerProcessor = function (priority, processorFunc) {\n\t        if (typeof priority === 'function') {\n\t            processorFunc = priority;\n\t            priority = PRIORITY_PROCESSOR_FILTER;\n\t        }\n\t        if (true) {\n\t            if (isNaN(priority)) {\n\t                throw new Error('Unkown processor priority');\n\t            }\n\t        }\n\t        dataProcessorFuncs.push({\n\t            prio: priority,\n\t            func: processorFunc\n\t        });\n\t    };\n\n\t    /**\n\t     * Usage:\n\t     * registerAction('someAction', 'someEvent', function () { ... });\n\t     * registerAction('someAction', function () { ... });\n\t     * registerAction(\n\t     *     {type: 'someAction', event: 'someEvent', update: 'updateView'},\n\t     *     function () { ... }\n\t     * );\n\t     *\n\t     * @param {(string|Object)} actionInfo\n\t     * @param {string} actionInfo.type\n\t     * @param {string} [actionInfo.event]\n\t     * @param {string} [actionInfo.update]\n\t     * @param {string} [eventName]\n\t     * @param {Function} action\n\t     */\n\t    echarts.registerAction = function (actionInfo, eventName, action) {\n\t        if (typeof eventName === 'function') {\n\t            action = eventName;\n\t            eventName = '';\n\t        }\n\t        var actionType = zrUtil.isObject(actionInfo)\n\t            ? actionInfo.type\n\t            : ([actionInfo, actionInfo = {\n\t                event: eventName\n\t            }][0]);\n\n\t        // Event name is all lowercase\n\t        actionInfo.event = (actionInfo.event || actionType).toLowerCase();\n\t        eventName = actionInfo.event;\n\n\t        // Validate action type and event name.\n\t        zrUtil.assert(ACTION_REG.test(actionType) && ACTION_REG.test(eventName));\n\n\t        if (!actions[actionType]) {\n\t            actions[actionType] = {action: action, actionInfo: actionInfo};\n\t        }\n\t        eventActionMap[eventName] = actionType;\n\t    };\n\n\t    /**\n\t     * @param {string} type\n\t     * @param {*} CoordinateSystem\n\t     */\n\t    echarts.registerCoordinateSystem = function (type, CoordinateSystem) {\n\t        CoordinateSystemManager.register(type, CoordinateSystem);\n\t    };\n\n\t    /**\n\t     * Layout is a special stage of visual encoding\n\t     * Most visual encoding like color are common for different chart\n\t     * But each chart has it's own layout algorithm\n\t     *\n\t     * @param {number} [priority=1000]\n\t     * @param {Function} layoutFunc\n\t     */\n\t    echarts.registerLayout = function (priority, layoutFunc) {\n\t        if (typeof priority === 'function') {\n\t            layoutFunc = priority;\n\t            priority = PRIORITY_VISUAL_LAYOUT;\n\t        }\n\t        if (true) {\n\t            if (isNaN(priority)) {\n\t                throw new Error('Unkown layout priority');\n\t            }\n\t        }\n\t        visualFuncs.push({\n\t            prio: priority,\n\t            func: layoutFunc,\n\t            isLayout: true\n\t        });\n\t    };\n\n\t    /**\n\t     * @param {number} [priority=3000]\n\t     * @param {Function} visualFunc\n\t     */\n\t    echarts.registerVisual = function (priority, visualFunc) {\n\t        if (typeof priority === 'function') {\n\t            visualFunc = priority;\n\t            priority = PRIORITY_VISUAL_CHART;\n\t        }\n\t        if (true) {\n\t            if (isNaN(priority)) {\n\t                throw new Error('Unkown visual priority');\n\t            }\n\t        }\n\t        visualFuncs.push({\n\t            prio: priority,\n\t            func: visualFunc\n\t        });\n\t    };\n\n\t    /**\n\t     * @param {string} name\n\t     */\n\t    echarts.registerLoading = function (name, loadingFx) {\n\t        loadingEffects[name] = loadingFx;\n\t    };\n\n\t    /**\n\t     * @param {Object} opts\n\t     * @param {string} [superClass]\n\t     */\n\t    echarts.extendComponentModel = function (opts/*, superClass*/) {\n\t        // var Clazz = ComponentModel;\n\t        // if (superClass) {\n\t        //     var classType = parseClassType(superClass);\n\t        //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\n\t        // }\n\t        return ComponentModel.extend(opts);\n\t    };\n\n\t    /**\n\t     * @param {Object} opts\n\t     * @param {string} [superClass]\n\t     */\n\t    echarts.extendComponentView = function (opts/*, superClass*/) {\n\t        // var Clazz = ComponentView;\n\t        // if (superClass) {\n\t        //     var classType = parseClassType(superClass);\n\t        //     Clazz = ComponentView.getClass(classType.main, classType.sub, true);\n\t        // }\n\t        return ComponentView.extend(opts);\n\t    };\n\n\t    /**\n\t     * @param {Object} opts\n\t     * @param {string} [superClass]\n\t     */\n\t    echarts.extendSeriesModel = function (opts/*, superClass*/) {\n\t        // var Clazz = SeriesModel;\n\t        // if (superClass) {\n\t        //     superClass = 'series.' + superClass.replace('series.', '');\n\t        //     var classType = parseClassType(superClass);\n\t        //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\n\t        // }\n\t        return SeriesModel.extend(opts);\n\t    };\n\n\t    /**\n\t     * @param {Object} opts\n\t     * @param {string} [superClass]\n\t     */\n\t    echarts.extendChartView = function (opts/*, superClass*/) {\n\t        // var Clazz = ChartView;\n\t        // if (superClass) {\n\t        //     superClass = superClass.replace('series.', '');\n\t        //     var classType = parseClassType(superClass);\n\t        //     Clazz = ChartView.getClass(classType.main, true);\n\t        // }\n\t        return ChartView.extend(opts);\n\t    };\n\n\t    /**\n\t     * ZRender need a canvas context to do measureText.\n\t     * But in node environment canvas may be created by node-canvas.\n\t     * So we need to specify how to create a canvas instead of using document.createElement('canvas')\n\t     *\n\t     * Be careful of using it in the browser.\n\t     *\n\t     * @param {Function} creator\n\t     * @example\n\t     *     var Canvas = require('canvas');\n\t     *     var echarts = require('echarts');\n\t     *     echarts.setCanvasCreator(function () {\n\t     *         // Small size is enough.\n\t     *         return new Canvas(32, 32);\n\t     *     });\n\t     */\n\t    echarts.setCanvasCreator = function (creator) {\n\t        zrUtil.createCanvas = creator;\n\t    };\n\n\t    echarts.registerVisual(PRIORITY_VISUAL_GLOBAL, __webpack_require__(94));\n\t    echarts.registerPreprocessor(__webpack_require__(95));\n\t    echarts.registerLoading('default', __webpack_require__(97));\n\n\t    // Default action\n\t    echarts.registerAction({\n\t        type: 'highlight',\n\t        event: 'highlight',\n\t        update: 'highlight'\n\t    }, zrUtil.noop);\n\t    echarts.registerAction({\n\t        type: 'downplay',\n\t        event: 'downplay',\n\t        update: 'downplay'\n\t    }, zrUtil.noop);\n\n\n\t    // --------\n\t    // Exports\n\t    // --------\n\t    //\n\t    echarts.List = __webpack_require__(98);\n\t    echarts.Model = __webpack_require__(12);\n\n\t    echarts.graphic = __webpack_require__(43);\n\t    echarts.number = __webpack_require__(7);\n\t    echarts.format = __webpack_require__(6);\n\t    echarts.throttle = throttle.throttle;\n\t    echarts.matrix = __webpack_require__(11);\n\t    echarts.vector = __webpack_require__(10);\n\t    echarts.color = __webpack_require__(39);\n\n\t    echarts.util = {};\n\t    each([\n\t            'map', 'each', 'filter', 'indexOf', 'inherits', 'reduce', 'filter',\n\t            'bind', 'curry', 'isArray', 'isString', 'isObject', 'isFunction',\n\t            'extend', 'defaults', 'clone'\n\t        ],\n\t        function (name) {\n\t            echarts.util[name] = zrUtil[name];\n\t        }\n\t    );\n\n\t    // PRIORITY\n\t    echarts.PRIORITY = {\n\t        PROCESSOR: {\n\t            FILTER: PRIORITY_PROCESSOR_FILTER,\n\t            STATISTIC: PRIORITY_PROCESSOR_STATISTIC\n\t        },\n\t        VISUAL: {\n\t            LAYOUT: PRIORITY_VISUAL_LAYOUT,\n\t            GLOBAL: PRIORITY_VISUAL_GLOBAL,\n\t            CHART: PRIORITY_VISUAL_CHART,\n\t            COMPONENT: PRIORITY_VISUAL_COMPONENT,\n\t            BRUSH: PRIORITY_VISUAL_BRUSH\n\t        }\n\t    };\n\n\t    module.exports = echarts;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t/**\n\t * echarts设备环境识别\n\t *\n\t * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。\n\t * @author firede[firede@firede.us]\n\t * @desc thanks zepto.\n\t */\n\n\t    var env = {};\n\t    if (typeof navigator === 'undefined') {\n\t        // In node\n\t        env = {\n\t            browser: {},\n\t            os: {},\n\t            node: true,\n\t            // Assume canvas is supported\n\t            canvasSupported: true\n\t        };\n\t    }\n\t    else {\n\t        env = detect(navigator.userAgent);\n\t    }\n\n\t    module.exports = env;\n\n\t    // Zepto.js\n\t    // (c) 2010-2013 Thomas Fuchs\n\t    // Zepto.js may be freely distributed under the MIT license.\n\n\t    function detect(ua) {\n\t        var os = {};\n\t        var browser = {};\n\t        // var webkit = ua.match(/Web[kK]it[\\/]{0,1}([\\d.]+)/);\n\t        // var android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/);\n\t        // var ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n\t        // var ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n\t        // var iphone = !ipad && ua.match(/(iPhone\\sOS)\\s([\\d_]+)/);\n\t        // var webos = ua.match(/(webOS|hpwOS)[\\s\\/]([\\d.]+)/);\n\t        // var touchpad = webos && ua.match(/TouchPad/);\n\t        // var kindle = ua.match(/Kindle\\/([\\d.]+)/);\n\t        // var silk = ua.match(/Silk\\/([\\d._]+)/);\n\t        // var blackberry = ua.match(/(BlackBerry).*Version\\/([\\d.]+)/);\n\t        // var bb10 = ua.match(/(BB10).*Version\\/([\\d.]+)/);\n\t        // var rimtabletos = ua.match(/(RIM\\sTablet\\sOS)\\s([\\d.]+)/);\n\t        // var playbook = ua.match(/PlayBook/);\n\t        // var chrome = ua.match(/Chrome\\/([\\d.]+)/) || ua.match(/CriOS\\/([\\d.]+)/);\n\t        var firefox = ua.match(/Firefox\\/([\\d.]+)/);\n\t        // var safari = webkit && ua.match(/Mobile\\//) && !chrome;\n\t        // var webview = ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !chrome;\n\t        var ie = ua.match(/MSIE\\s([\\d.]+)/)\n\t            // IE 11 Trident/7.0; rv:11.0\n\t            || ua.match(/Trident\\/.+?rv:(([\\d.]+))/);\n\t        var edge = ua.match(/Edge\\/([\\d.]+)/); // IE 12 and 12+\n\n\t        var weChat = (/micromessenger/i).test(ua);\n\n\t        // Todo: clean this up with a better OS/browser seperation:\n\t        // - discern (more) between multiple browsers on android\n\t        // - decide if kindle fire in silk mode is android or not\n\t        // - Firefox on Android doesn't specify the Android version\n\t        // - possibly devide in os, device and browser hashes\n\n\t        // if (browser.webkit = !!webkit) browser.version = webkit[1];\n\n\t        // if (android) os.android = true, os.version = android[2];\n\t        // if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');\n\t        // if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');\n\t        // if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;\n\t        // if (webos) os.webos = true, os.version = webos[2];\n\t        // if (touchpad) os.touchpad = true;\n\t        // if (blackberry) os.blackberry = true, os.version = blackberry[2];\n\t        // if (bb10) os.bb10 = true, os.version = bb10[2];\n\t        // if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];\n\t        // if (playbook) browser.playbook = true;\n\t        // if (kindle) os.kindle = true, os.version = kindle[1];\n\t        // if (silk) browser.silk = true, browser.version = silk[1];\n\t        // if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;\n\t        // if (chrome) browser.chrome = true, browser.version = chrome[1];\n\t        if (firefox) {\n\t            browser.firefox = true;\n\t            browser.version = firefox[1];\n\t        }\n\t        // if (safari && (ua.match(/Safari/) || !!os.ios)) browser.safari = true;\n\t        // if (webview) browser.webview = true;\n\n\t        if (ie) {\n\t            browser.ie = true;\n\t            browser.version = ie[1];\n\t        }\n\n\t        if (edge) {\n\t            browser.edge = true;\n\t            browser.version = edge[1];\n\t        }\n\n\t        // It is difficult to detect WeChat in Win Phone precisely, because ua can\n\t        // not be set on win phone. So we do not consider Win Phone.\n\t        if (weChat) {\n\t            browser.weChat = true;\n\t        }\n\n\t        // os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||\n\t        //     (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)));\n\t        // os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos ||\n\t        //     (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\\/([\\d.]+)/)) ||\n\t        //     (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))));\n\n\t        return {\n\t            browser: browser,\n\t            os: os,\n\t            node: false,\n\t            // 原生canvas支持，改极端点了\n\t            // canvasSupported : !(browser.ie && parseFloat(browser.version) < 9)\n\t            canvasSupported : document.createElement('canvas').getContext ? true : false,\n\t            // @see <http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript>\n\t            // works on most browsers\n\t            // IE10/11 does not support touch event, and MS Edge supports them but not by\n\t            // default, so we dont check navigator.maxTouchPoints for them here.\n\t            touchEventsSupported: 'ontouchstart' in window && !browser.ie && !browser.edge,\n\t            // <http://caniuse.com/#search=pointer%20event>.\n\t            pointerEventsSupported: 'onpointerdown' in window\n\t                // Firefox supports pointer but not by default, only MS browsers are reliable on pointer\n\t                // events currently. So we dont use that on other browsers unless tested sufficiently.\n\t                // Although IE 10 supports pointer event, it use old style and is different from the\n\t                // standard. So we exclude that. (IE 10 is hardly used on touch device)\n\t                && (browser.edge || (browser.ie && browser.version >= 11))\n\t        };\n\t    }\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * ECharts global model\n\t *\n\t * @module {echarts/model/Global}\n\t */\n\n\n\n\t    /**\n\t     * Caution: If the mechanism should be changed some day, these cases\n\t     * should be considered:\n\t     *\n\t     * (1) In `merge option` mode, if using the same option to call `setOption`\n\t     * many times, the result should be the same (try our best to ensure that).\n\t     * (2) In `merge option` mode, if a component has no id/name specified, it\n\t     * will be merged by index, and the result sequence of the components is\n\t     * consistent to the original sequence.\n\t     * (3) `reset` feature (in toolbox). Find detailed info in comments about\n\t     * `mergeOption` in module:echarts/model/OptionManager.\n\t     */\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var modelUtil = __webpack_require__(5);\n\t    var Model = __webpack_require__(12);\n\t    var each = zrUtil.each;\n\t    var filter = zrUtil.filter;\n\t    var map = zrUtil.map;\n\t    var isArray = zrUtil.isArray;\n\t    var indexOf = zrUtil.indexOf;\n\t    var isObject = zrUtil.isObject;\n\n\t    var ComponentModel = __webpack_require__(19);\n\n\t    var globalDefault = __webpack_require__(23);\n\n\t    var OPTION_INNER_KEY = '\\0_ec_inner';\n\n\t    /**\n\t     * @alias module:echarts/model/Global\n\t     *\n\t     * @param {Object} option\n\t     * @param {module:echarts/model/Model} parentModel\n\t     * @param {Object} theme\n\t     */\n\t    var GlobalModel = Model.extend({\n\n\t        constructor: GlobalModel,\n\n\t        init: function (option, parentModel, theme, optionManager) {\n\t            theme = theme || {};\n\n\t            this.option = null; // Mark as not initialized.\n\n\t            /**\n\t             * @type {module:echarts/model/Model}\n\t             * @private\n\t             */\n\t            this._theme = new Model(theme);\n\n\t            /**\n\t             * @type {module:echarts/model/OptionManager}\n\t             */\n\t            this._optionManager = optionManager;\n\t        },\n\n\t        setOption: function (option, optionPreprocessorFuncs) {\n\t            zrUtil.assert(\n\t                !(OPTION_INNER_KEY in option),\n\t                'please use chart.getOption()'\n\t            );\n\n\t            this._optionManager.setOption(option, optionPreprocessorFuncs);\n\n\t            this.resetOption();\n\t        },\n\n\t        /**\n\t         * @param {string} type null/undefined: reset all.\n\t         *                      'recreate': force recreate all.\n\t         *                      'timeline': only reset timeline option\n\t         *                      'media': only reset media query option\n\t         * @return {boolean} Whether option changed.\n\t         */\n\t        resetOption: function (type) {\n\t            var optionChanged = false;\n\t            var optionManager = this._optionManager;\n\n\t            if (!type || type === 'recreate') {\n\t                var baseOption = optionManager.mountOption(type === 'recreate');\n\n\t                if (!this.option || type === 'recreate') {\n\t                    initBase.call(this, baseOption);\n\t                }\n\t                else {\n\t                    this.restoreData();\n\t                    this.mergeOption(baseOption);\n\t                }\n\t                optionChanged = true;\n\t            }\n\n\t            if (type === 'timeline' || type === 'media') {\n\t                this.restoreData();\n\t            }\n\n\t            if (!type || type === 'recreate' || type === 'timeline') {\n\t                var timelineOption = optionManager.getTimelineOption(this);\n\t                timelineOption && (this.mergeOption(timelineOption), optionChanged = true);\n\t            }\n\n\t            if (!type || type === 'recreate' || type === 'media') {\n\t                var mediaOptions = optionManager.getMediaOption(this, this._api);\n\t                if (mediaOptions.length) {\n\t                    each(mediaOptions, function (mediaOption) {\n\t                        this.mergeOption(mediaOption, optionChanged = true);\n\t                    }, this);\n\t                }\n\t            }\n\n\t            return optionChanged;\n\t        },\n\n\t        /**\n\t         * @protected\n\t         */\n\t        mergeOption: function (newOption) {\n\t            var option = this.option;\n\t            var componentsMap = this._componentsMap;\n\t            var newCptTypes = [];\n\n\t            // 如果不存在对应的 component model 则直接 merge\n\t            each(newOption, function (componentOption, mainType) {\n\t                if (componentOption == null) {\n\t                    return;\n\t                }\n\n\t                if (!ComponentModel.hasClass(mainType)) {\n\t                    option[mainType] = option[mainType] == null\n\t                        ? zrUtil.clone(componentOption)\n\t                        : zrUtil.merge(option[mainType], componentOption, true);\n\t                }\n\t                else {\n\t                    newCptTypes.push(mainType);\n\t                }\n\t            });\n\n\t            // FIXME OPTION 同步是否要改回原来的\n\t            ComponentModel.topologicalTravel(\n\t                newCptTypes, ComponentModel.getAllClassMainTypes(), visitComponent, this\n\t            );\n\n\t            this._seriesIndices = this._seriesIndices || [];\n\n\t            function visitComponent(mainType, dependencies) {\n\t                var newCptOptionList = modelUtil.normalizeToArray(newOption[mainType]);\n\n\t                var mapResult = modelUtil.mappingToExists(\n\t                    componentsMap[mainType], newCptOptionList\n\t                );\n\n\t                modelUtil.makeIdAndName(mapResult);\n\n\t                // Set mainType and complete subType.\n\t                each(mapResult, function (item, index) {\n\t                    var opt = item.option;\n\t                    if (isObject(opt)) {\n\t                        item.keyInfo.mainType = mainType;\n\t                        item.keyInfo.subType = determineSubType(mainType, opt, item.exist);\n\t                    }\n\t                });\n\n\t                var dependentModels = getComponentsByTypes(\n\t                    componentsMap, dependencies\n\t                );\n\n\t                option[mainType] = [];\n\t                componentsMap[mainType] = [];\n\n\t                each(mapResult, function (resultItem, index) {\n\t                    var componentModel = resultItem.exist;\n\t                    var newCptOption = resultItem.option;\n\n\t                    zrUtil.assert(\n\t                        isObject(newCptOption) || componentModel,\n\t                        'Empty component definition'\n\t                    );\n\n\t                    // Consider where is no new option and should be merged using {},\n\t                    // see removeEdgeAndAdd in topologicalTravel and\n\t                    // ComponentModel.getAllClassMainTypes.\n\t                    if (!newCptOption) {\n\t                        componentModel.mergeOption({}, this);\n\t                        componentModel.optionUpdated({}, false);\n\t                    }\n\t                    else {\n\t                        var ComponentModelClass = ComponentModel.getClass(\n\t                            mainType, resultItem.keyInfo.subType, true\n\t                        );\n\n\t                        if (componentModel && componentModel instanceof ComponentModelClass) {\n\t                            componentModel.name = resultItem.keyInfo.name;\n\t                            componentModel.mergeOption(newCptOption, this);\n\t                            componentModel.optionUpdated(newCptOption, false);\n\t                        }\n\t                        else {\n\t                            // PENDING Global as parent ?\n\t                            var extraOpt = zrUtil.extend(\n\t                                {\n\t                                    dependentModels: dependentModels,\n\t                                    componentIndex: index\n\t                                },\n\t                                resultItem.keyInfo\n\t                            );\n\t                            componentModel = new ComponentModelClass(\n\t                                newCptOption, this, this, extraOpt\n\t                            );\n\t                            zrUtil.extend(componentModel, extraOpt);\n\t                            componentModel.init(newCptOption, this, this, extraOpt);\n\t                            // Call optionUpdated after init.\n\t                            // newCptOption has been used as componentModel.option\n\t                            // and may be merged with theme and default, so pass null\n\t                            // to avoid confusion.\n\t                            componentModel.optionUpdated(null, true);\n\t                        }\n\t                    }\n\n\t                    componentsMap[mainType][index] = componentModel;\n\t                    option[mainType][index] = componentModel.option;\n\t                }, this);\n\n\t                // Backup series for filtering.\n\t                if (mainType === 'series') {\n\t                    this._seriesIndices = createSeriesIndices(componentsMap.series);\n\t                }\n\t            }\n\t        },\n\n\t        /**\n\t         * Get option for output (cloned option and inner info removed)\n\t         * @public\n\t         * @return {Object}\n\t         */\n\t        getOption: function () {\n\t            var option = zrUtil.clone(this.option);\n\n\t            each(option, function (opts, mainType) {\n\t                if (ComponentModel.hasClass(mainType)) {\n\t                    var opts = modelUtil.normalizeToArray(opts);\n\t                    for (var i = opts.length - 1; i >= 0; i--) {\n\t                        // Remove options with inner id.\n\t                        if (modelUtil.isIdInner(opts[i])) {\n\t                            opts.splice(i, 1);\n\t                        }\n\t                    }\n\t                    option[mainType] = opts;\n\t                }\n\t            });\n\n\t            delete option[OPTION_INNER_KEY];\n\n\t            return option;\n\t        },\n\n\t        /**\n\t         * @return {module:echarts/model/Model}\n\t         */\n\t        getTheme: function () {\n\t            return this._theme;\n\t        },\n\n\t        /**\n\t         * @param {string} mainType\n\t         * @param {number} [idx=0]\n\t         * @return {module:echarts/model/Component}\n\t         */\n\t        getComponent: function (mainType, idx) {\n\t            var list = this._componentsMap[mainType];\n\t            if (list) {\n\t                return list[idx || 0];\n\t            }\n\t        },\n\n\t        /**\n\t         * If none of index and id and name used, return all components with mainType.\n\t         * @param {Object} condition\n\t         * @param {string} condition.mainType\n\t         * @param {string} [condition.subType] If ignore, only query by mainType\n\t         * @param {number|Array.<number>} [condition.index] Either input index or id or name.\n\t         * @param {string|Array.<string>} [condition.id] Either input index or id or name.\n\t         * @param {string|Array.<string>} [condition.name] Either input index or id or name.\n\t         * @return {Array.<module:echarts/model/Component>}\n\t         */\n\t        queryComponents: function (condition) {\n\t            var mainType = condition.mainType;\n\t            if (!mainType) {\n\t                return [];\n\t            }\n\n\t            var index = condition.index;\n\t            var id = condition.id;\n\t            var name = condition.name;\n\n\t            var cpts = this._componentsMap[mainType];\n\n\t            if (!cpts || !cpts.length) {\n\t                return [];\n\t            }\n\n\t            var result;\n\n\t            if (index != null) {\n\t                if (!isArray(index)) {\n\t                    index = [index];\n\t                }\n\t                result = filter(map(index, function (idx) {\n\t                    return cpts[idx];\n\t                }), function (val) {\n\t                    return !!val;\n\t                });\n\t            }\n\t            else if (id != null) {\n\t                var isIdArray = isArray(id);\n\t                result = filter(cpts, function (cpt) {\n\t                    return (isIdArray && indexOf(id, cpt.id) >= 0)\n\t                        || (!isIdArray && cpt.id === id);\n\t                });\n\t            }\n\t            else if (name != null) {\n\t                var isNameArray = isArray(name);\n\t                result = filter(cpts, function (cpt) {\n\t                    return (isNameArray && indexOf(name, cpt.name) >= 0)\n\t                        || (!isNameArray && cpt.name === name);\n\t                });\n\t            }\n\t            else {\n\t                // Return all components with mainType\n\t                result = cpts;\n\t            }\n\n\t            return filterBySubType(result, condition);\n\t        },\n\n\t        /**\n\t         * The interface is different from queryComponents,\n\t         * which is convenient for inner usage.\n\t         *\n\t         * @usage\n\t         * var result = findComponents(\n\t         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}}\n\t         * );\n\t         * var result = findComponents(\n\t         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}}\n\t         * );\n\t         * var result = findComponents(\n\t         *     {mainType: 'series'},\n\t         *     function (model, index) {...}\n\t         * );\n\t         * // result like [component0, componnet1, ...]\n\t         *\n\t         * @param {Object} condition\n\t         * @param {string} condition.mainType Mandatory.\n\t         * @param {string} [condition.subType] Optional.\n\t         * @param {Object} [condition.query] like {xxxIndex, xxxId, xxxName},\n\t         *        where xxx is mainType.\n\t         *        If query attribute is null/undefined or has no index/id/name,\n\t         *        do not filtering by query conditions, which is convenient for\n\t         *        no-payload situations or when target of action is global.\n\t         * @param {Function} [condition.filter] parameter: component, return boolean.\n\t         * @return {Array.<module:echarts/model/Component>}\n\t         */\n\t        findComponents: function (condition) {\n\t            var query = condition.query;\n\t            var mainType = condition.mainType;\n\n\t            var queryCond = getQueryCond(query);\n\t            var result = queryCond\n\t                ? this.queryComponents(queryCond)\n\t                : this._componentsMap[mainType];\n\n\t            return doFilter(filterBySubType(result, condition));\n\n\t            function getQueryCond(q) {\n\t                var indexAttr = mainType + 'Index';\n\t                var idAttr = mainType + 'Id';\n\t                var nameAttr = mainType + 'Name';\n\t                return q && (\n\t                        q[indexAttr] != null\n\t                        || q[idAttr] != null\n\t                        || q[nameAttr] != null\n\t                    )\n\t                    ? {\n\t                        mainType: mainType,\n\t                        // subType will be filtered finally.\n\t                        index: q[indexAttr],\n\t                        id: q[idAttr],\n\t                        name: q[nameAttr]\n\t                    }\n\t                    : null;\n\t            }\n\n\t            function doFilter(res) {\n\t                return condition.filter\n\t                     ? filter(res, condition.filter)\n\t                     : res;\n\t            }\n\t        },\n\n\t        /**\n\t         * @usage\n\t         * eachComponent('legend', function (legendModel, index) {\n\t         *     ...\n\t         * });\n\t         * eachComponent(function (componentType, model, index) {\n\t         *     // componentType does not include subType\n\t         *     // (componentType is 'xxx' but not 'xxx.aa')\n\t         * });\n\t         * eachComponent(\n\t         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}},\n\t         *     function (model, index) {...}\n\t         * );\n\t         * eachComponent(\n\t         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}},\n\t         *     function (model, index) {...}\n\t         * );\n\t         *\n\t         * @param {string|Object=} mainType When mainType is object, the definition\n\t         *                                  is the same as the method 'findComponents'.\n\t         * @param {Function} cb\n\t         * @param {*} context\n\t         */\n\t        eachComponent: function (mainType, cb, context) {\n\t            var componentsMap = this._componentsMap;\n\n\t            if (typeof mainType === 'function') {\n\t                context = cb;\n\t                cb = mainType;\n\t                each(componentsMap, function (components, componentType) {\n\t                    each(components, function (component, index) {\n\t                        cb.call(context, componentType, component, index);\n\t                    });\n\t                });\n\t            }\n\t            else if (zrUtil.isString(mainType)) {\n\t                each(componentsMap[mainType], cb, context);\n\t            }\n\t            else if (isObject(mainType)) {\n\t                var queryResult = this.findComponents(mainType);\n\t                each(queryResult, cb, context);\n\t            }\n\t        },\n\n\t        /**\n\t         * @param {string} name\n\t         * @return {Array.<module:echarts/model/Series>}\n\t         */\n\t        getSeriesByName: function (name) {\n\t            var series = this._componentsMap.series;\n\t            return filter(series, function (oneSeries) {\n\t                return oneSeries.name === name;\n\t            });\n\t        },\n\n\t        /**\n\t         * @param {number} seriesIndex\n\t         * @return {module:echarts/model/Series}\n\t         */\n\t        getSeriesByIndex: function (seriesIndex) {\n\t            return this._componentsMap.series[seriesIndex];\n\t        },\n\n\t        /**\n\t         * @param {string} subType\n\t         * @return {Array.<module:echarts/model/Series>}\n\t         */\n\t        getSeriesByType: function (subType) {\n\t            var series = this._componentsMap.series;\n\t            return filter(series, function (oneSeries) {\n\t                return oneSeries.subType === subType;\n\t            });\n\t        },\n\n\t        /**\n\t         * @return {Array.<module:echarts/model/Series>}\n\t         */\n\t        getSeries: function () {\n\t            return this._componentsMap.series.slice();\n\t        },\n\n\t        /**\n\t         * After filtering, series may be different\n\t         * frome raw series.\n\t         *\n\t         * @param {Function} cb\n\t         * @param {*} context\n\t         */\n\t        eachSeries: function (cb, context) {\n\t            assertSeriesInitialized(this);\n\t            each(this._seriesIndices, function (rawSeriesIndex) {\n\t                var series = this._componentsMap.series[rawSeriesIndex];\n\t                cb.call(context, series, rawSeriesIndex);\n\t            }, this);\n\t        },\n\n\t        /**\n\t         * Iterate raw series before filtered.\n\t         *\n\t         * @param {Function} cb\n\t         * @param {*} context\n\t         */\n\t        eachRawSeries: function (cb, context) {\n\t            each(this._componentsMap.series, cb, context);\n\t        },\n\n\t        /**\n\t         * After filtering, series may be different.\n\t         * frome raw series.\n\t         *\n\t         * @parma {string} subType\n\t         * @param {Function} cb\n\t         * @param {*} context\n\t         */\n\t        eachSeriesByType: function (subType, cb, context) {\n\t            assertSeriesInitialized(this);\n\t            each(this._seriesIndices, function (rawSeriesIndex) {\n\t                var series = this._componentsMap.series[rawSeriesIndex];\n\t                if (series.subType === subType) {\n\t                    cb.call(context, series, rawSeriesIndex);\n\t                }\n\t            }, this);\n\t        },\n\n\t        /**\n\t         * Iterate raw series before filtered of given type.\n\t         *\n\t         * @parma {string} subType\n\t         * @param {Function} cb\n\t         * @param {*} context\n\t         */\n\t        eachRawSeriesByType: function (subType, cb, context) {\n\t            return each(this.getSeriesByType(subType), cb, context);\n\t        },\n\n\t        /**\n\t         * @param {module:echarts/model/Series} seriesModel\n\t         */\n\t        isSeriesFiltered: function (seriesModel) {\n\t            assertSeriesInitialized(this);\n\t            return zrUtil.indexOf(this._seriesIndices, seriesModel.componentIndex) < 0;\n\t        },\n\n\t        /**\n\t         * @param {Function} cb\n\t         * @param {*} context\n\t         */\n\t        filterSeries: function (cb, context) {\n\t            assertSeriesInitialized(this);\n\t            var filteredSeries = filter(\n\t                this._componentsMap.series, cb, context\n\t            );\n\t            this._seriesIndices = createSeriesIndices(filteredSeries);\n\t        },\n\n\t        restoreData: function () {\n\t            var componentsMap = this._componentsMap;\n\n\t            this._seriesIndices = createSeriesIndices(componentsMap.series);\n\n\t            var componentTypes = [];\n\t            each(componentsMap, function (components, componentType) {\n\t                componentTypes.push(componentType);\n\t            });\n\n\t            ComponentModel.topologicalTravel(\n\t                componentTypes,\n\t                ComponentModel.getAllClassMainTypes(),\n\t                function (componentType, dependencies) {\n\t                    each(componentsMap[componentType], function (component) {\n\t                        component.restoreData();\n\t                    });\n\t                }\n\t            );\n\t        }\n\n\t    });\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function mergeTheme(option, theme) {\n\t        zrUtil.each(theme, function (themeItem, name) {\n\t            // 如果有 component model 则把具体的 merge 逻辑交给该 model 处理\n\t            if (!ComponentModel.hasClass(name)) {\n\t                if (typeof themeItem === 'object') {\n\t                    option[name] = !option[name]\n\t                        ? zrUtil.clone(themeItem)\n\t                        : zrUtil.merge(option[name], themeItem, false);\n\t                }\n\t                else {\n\t                    if (option[name] == null) {\n\t                        option[name] = themeItem;\n\t                    }\n\t                }\n\t            }\n\t        });\n\t    }\n\n\t    function initBase(baseOption) {\n\t        baseOption = baseOption;\n\n\t        // Using OPTION_INNER_KEY to mark that this option can not be used outside,\n\t        // i.e. `chart.setOption(chart.getModel().option);` is forbiden.\n\t        this.option = {};\n\t        this.option[OPTION_INNER_KEY] = 1;\n\n\t        /**\n\t         * @type {Object.<string, Array.<module:echarts/model/Model>>}\n\t         * @private\n\t         */\n\t        this._componentsMap = {};\n\n\t        /**\n\t         * Mapping between filtered series list and raw series list.\n\t         * key: filtered series indices, value: raw series indices.\n\t         * @type {Array.<nubmer>}\n\t         * @private\n\t         */\n\t        this._seriesIndices = null;\n\n\t        mergeTheme(baseOption, this._theme.option);\n\n\t        // TODO Needs clone when merging to the unexisted property\n\t        zrUtil.merge(baseOption, globalDefault, false);\n\n\t        this.mergeOption(baseOption);\n\t    }\n\n\t    /**\n\t     * @inner\n\t     * @param {Array.<string>|string} types model types\n\t     * @return {Object} key: {string} type, value: {Array.<Object>} models\n\t     */\n\t    function getComponentsByTypes(componentsMap, types) {\n\t        if (!zrUtil.isArray(types)) {\n\t            types = types ? [types] : [];\n\t        }\n\n\t        var ret = {};\n\t        each(types, function (type) {\n\t            ret[type] = (componentsMap[type] || []).slice();\n\t        });\n\n\t        return ret;\n\t    }\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function determineSubType(mainType, newCptOption, existComponent) {\n\t        var subType = newCptOption.type\n\t            ? newCptOption.type\n\t            : existComponent\n\t            ? existComponent.subType\n\t            // Use determineSubType only when there is no existComponent.\n\t            : ComponentModel.determineSubType(mainType, newCptOption);\n\n\t        // tooltip, markline, markpoint may always has no subType\n\t        return subType;\n\t    }\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function createSeriesIndices(seriesModels) {\n\t        return map(seriesModels, function (series) {\n\t            return series.componentIndex;\n\t        }) || [];\n\t    }\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function filterBySubType(components, condition) {\n\t        // Using hasOwnProperty for restrict. Consider\n\t        // subType is undefined in user payload.\n\t        return condition.hasOwnProperty('subType')\n\t            ? filter(components, function (cpt) {\n\t                return cpt.subType === condition.subType;\n\t            })\n\t            : components;\n\t    }\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function assertSeriesInitialized(ecModel) {\n\t        // Components that use _seriesIndices should depends on series component,\n\t        // which make sure that their initialization is after series.\n\t        if (true) {\n\t            if (!ecModel._seriesIndices) {\n\t                throw new Error('Series has not been initialized yet.');\n\t            }\n\t        }\n\t    }\n\n\t    zrUtil.mixin(GlobalModel, __webpack_require__(24));\n\n\t    module.exports = GlobalModel;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t/**\n\t * @module zrender/core/util\n\t */\n\n\n\t    // 用于处理merge时无法遍历Date等对象的问题\n\t    var BUILTIN_OBJECT = {\n\t        '[object Function]': 1,\n\t        '[object RegExp]': 1,\n\t        '[object Date]': 1,\n\t        '[object Error]': 1,\n\t        '[object CanvasGradient]': 1,\n\t        '[object CanvasPattern]': 1,\n\t        // For node-canvas\n\t        '[object Image]': 1,\n\t        '[object Canvas]': 1\n\t    };\n\n\t    var TYPED_ARRAY = {\n\t        '[object Int8Array]': 1,\n\t        '[object Uint8Array]': 1,\n\t        '[object Uint8ClampedArray]': 1,\n\t        '[object Int16Array]': 1,\n\t        '[object Uint16Array]': 1,\n\t        '[object Int32Array]': 1,\n\t        '[object Uint32Array]': 1,\n\t        '[object Float32Array]': 1,\n\t        '[object Float64Array]': 1\n\t    };\n\n\t    var objToString = Object.prototype.toString;\n\n\t    var arrayProto = Array.prototype;\n\t    var nativeForEach = arrayProto.forEach;\n\t    var nativeFilter = arrayProto.filter;\n\t    var nativeSlice = arrayProto.slice;\n\t    var nativeMap = arrayProto.map;\n\t    var nativeReduce = arrayProto.reduce;\n\n\t    /**\n\t     * Those data types can be cloned:\n\t     *     Plain object, Array, TypedArray, number, string, null, undefined.\n\t     * Those data types will be assgined using the orginal data:\n\t     *     BUILTIN_OBJECT\n\t     * Instance of user defined class will be cloned to a plain object, without\n\t     * properties in prototype.\n\t     * Other data types is not supported (not sure what will happen).\n\t     *\n\t     * Caution: do not support clone Date, for performance consideration.\n\t     * (There might be a large number of date in `series.data`).\n\t     * So date should not be modified in and out of echarts.\n\t     *\n\t     * @param {*} source\n\t     * @return {*} new\n\t     */\n\t    function clone(source) {\n\t        if (source == null || typeof source != 'object') {\n\t            return source;\n\t        }\n\n\t        var result = source;\n\t        var typeStr = objToString.call(source);\n\n\t        if (typeStr === '[object Array]') {\n\t            result = [];\n\t            for (var i = 0, len = source.length; i < len; i++) {\n\t                result[i] = clone(source[i]);\n\t            }\n\t        }\n\t        else if (TYPED_ARRAY[typeStr]) {\n\t            result = source.constructor.from(source);\n\t        }\n\t        else if (!BUILTIN_OBJECT[typeStr] && !isDom(source)) {\n\t            result = {};\n\t            for (var key in source) {\n\t                if (source.hasOwnProperty(key)) {\n\t                    result[key] = clone(source[key]);\n\t                }\n\t            }\n\t        }\n\n\t        return result;\n\t    }\n\n\t    /**\n\t     * @memberOf module:zrender/core/util\n\t     * @param {*} target\n\t     * @param {*} source\n\t     * @param {boolean} [overwrite=false]\n\t     */\n\t    function merge(target, source, overwrite) {\n\t        // We should escapse that source is string\n\t        // and enter for ... in ...\n\t        if (!isObject(source) || !isObject(target)) {\n\t            return overwrite ? clone(source) : target;\n\t        }\n\n\t        for (var key in source) {\n\t            if (source.hasOwnProperty(key)) {\n\t                var targetProp = target[key];\n\t                var sourceProp = source[key];\n\n\t                if (isObject(sourceProp)\n\t                    && isObject(targetProp)\n\t                    && !isArray(sourceProp)\n\t                    && !isArray(targetProp)\n\t                    && !isDom(sourceProp)\n\t                    && !isDom(targetProp)\n\t                    && !isBuildInObject(sourceProp)\n\t                    && !isBuildInObject(targetProp)\n\t                ) {\n\t                    // 如果需要递归覆盖，就递归调用merge\n\t                    merge(targetProp, sourceProp, overwrite);\n\t                }\n\t                else if (overwrite || !(key in target)) {\n\t                    // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况\n\t                    // NOTE，在 target[key] 不存在的时候也是直接覆盖\n\t                    target[key] = clone(source[key], true);\n\t                }\n\t            }\n\t        }\n\n\t        return target;\n\t    }\n\n\t    /**\n\t     * @param {Array} targetAndSources The first item is target, and the rests are source.\n\t     * @param {boolean} [overwrite=false]\n\t     * @return {*} target\n\t     */\n\t    function mergeAll(targetAndSources, overwrite) {\n\t        var result = targetAndSources[0];\n\t        for (var i = 1, len = targetAndSources.length; i < len; i++) {\n\t            result = merge(result, targetAndSources[i], overwrite);\n\t        }\n\t        return result;\n\t    }\n\n\t    /**\n\t     * @param {*} target\n\t     * @param {*} source\n\t     * @memberOf module:zrender/core/util\n\t     */\n\t    function extend(target, source) {\n\t        for (var key in source) {\n\t            if (source.hasOwnProperty(key)) {\n\t                target[key] = source[key];\n\t            }\n\t        }\n\t        return target;\n\t    }\n\n\t    /**\n\t     * @param {*} target\n\t     * @param {*} source\n\t     * @param {boolen} [overlay=false]\n\t     * @memberOf module:zrender/core/util\n\t     */\n\t    function defaults(target, source, overlay) {\n\t        for (var key in source) {\n\t            if (source.hasOwnProperty(key)\n\t                && (overlay ? source[key] != null : target[key] == null)\n\t            ) {\n\t                target[key] = source[key];\n\t            }\n\t        }\n\t        return target;\n\t    }\n\n\t    function createCanvas() {\n\t        return document.createElement('canvas');\n\t    }\n\t    // FIXME\n\t    var _ctx;\n\t    function getContext() {\n\t        if (!_ctx) {\n\t            // Use util.createCanvas instead of createCanvas\n\t            // because createCanvas may be overwritten in different environment\n\t            _ctx = util.createCanvas().getContext('2d');\n\t        }\n\t        return _ctx;\n\t    }\n\n\t    /**\n\t     * 查询数组中元素的index\n\t     * @memberOf module:zrender/core/util\n\t     */\n\t    function indexOf(array, value) {\n\t        if (array) {\n\t            if (array.indexOf) {\n\t                return array.indexOf(value);\n\t            }\n\t            for (var i = 0, len = array.length; i < len; i++) {\n\t                if (array[i] === value) {\n\t                    return i;\n\t                }\n\t            }\n\t        }\n\t        return -1;\n\t    }\n\n\t    /**\n\t     * 构造类继承关系\n\t     *\n\t     * @memberOf module:zrender/core/util\n\t     * @param {Function} clazz 源类\n\t     * @param {Function} baseClazz 基类\n\t     */\n\t    function inherits(clazz, baseClazz) {\n\t        var clazzPrototype = clazz.prototype;\n\t        function F() {}\n\t        F.prototype = baseClazz.prototype;\n\t        clazz.prototype = new F();\n\n\t        for (var prop in clazzPrototype) {\n\t            clazz.prototype[prop] = clazzPrototype[prop];\n\t        }\n\t        clazz.prototype.constructor = clazz;\n\t        clazz.superClass = baseClazz;\n\t    }\n\n\t    /**\n\t     * @memberOf module:zrender/core/util\n\t     * @param {Object|Function} target\n\t     * @param {Object|Function} sorce\n\t     * @param {boolean} overlay\n\t     */\n\t    function mixin(target, source, overlay) {\n\t        target = 'prototype' in target ? target.prototype : target;\n\t        source = 'prototype' in source ? source.prototype : source;\n\n\t        defaults(target, source, overlay);\n\t    }\n\n\t    /**\n\t     * @param {Array|TypedArray} data\n\t     */\n\t    function isArrayLike(data) {\n\t        if (! data) {\n\t            return;\n\t        }\n\t        if (typeof data == 'string') {\n\t            return false;\n\t        }\n\t        return typeof data.length == 'number';\n\t    }\n\n\t    /**\n\t     * 数组或对象遍历\n\t     * @memberOf module:zrender/core/util\n\t     * @param {Object|Array} obj\n\t     * @param {Function} cb\n\t     * @param {*} [context]\n\t     */\n\t    function each(obj, cb, context) {\n\t        if (!(obj && cb)) {\n\t            return;\n\t        }\n\t        if (obj.forEach && obj.forEach === nativeForEach) {\n\t            obj.forEach(cb, context);\n\t        }\n\t        else if (obj.length === +obj.length) {\n\t            for (var i = 0, len = obj.length; i < len; i++) {\n\t                cb.call(context, obj[i], i, obj);\n\t            }\n\t        }\n\t        else {\n\t            for (var key in obj) {\n\t                if (obj.hasOwnProperty(key)) {\n\t                    cb.call(context, obj[key], key, obj);\n\t                }\n\t            }\n\t        }\n\t    }\n\n\t    /**\n\t     * 数组映射\n\t     * @memberOf module:zrender/core/util\n\t     * @param {Array} obj\n\t     * @param {Function} cb\n\t     * @param {*} [context]\n\t     * @return {Array}\n\t     */\n\t    function map(obj, cb, context) {\n\t        if (!(obj && cb)) {\n\t            return;\n\t        }\n\t        if (obj.map && obj.map === nativeMap) {\n\t            return obj.map(cb, context);\n\t        }\n\t        else {\n\t            var result = [];\n\t            for (var i = 0, len = obj.length; i < len; i++) {\n\t                result.push(cb.call(context, obj[i], i, obj));\n\t            }\n\t            return result;\n\t        }\n\t    }\n\n\t    /**\n\t     * @memberOf module:zrender/core/util\n\t     * @param {Array} obj\n\t     * @param {Function} cb\n\t     * @param {Object} [memo]\n\t     * @param {*} [context]\n\t     * @return {Array}\n\t     */\n\t    function reduce(obj, cb, memo, context) {\n\t        if (!(obj && cb)) {\n\t            return;\n\t        }\n\t        if (obj.reduce && obj.reduce === nativeReduce) {\n\t            return obj.reduce(cb, memo, context);\n\t        }\n\t        else {\n\t            for (var i = 0, len = obj.length; i < len; i++) {\n\t                memo = cb.call(context, memo, obj[i], i, obj);\n\t            }\n\t            return memo;\n\t        }\n\t    }\n\n\t    /**\n\t     * 数组过滤\n\t     * @memberOf module:zrender/core/util\n\t     * @param {Array} obj\n\t     * @param {Function} cb\n\t     * @param {*} [context]\n\t     * @return {Array}\n\t     */\n\t    function filter(obj, cb, context) {\n\t        if (!(obj && cb)) {\n\t            return;\n\t        }\n\t        if (obj.filter && obj.filter === nativeFilter) {\n\t            return obj.filter(cb, context);\n\t        }\n\t        else {\n\t            var result = [];\n\t            for (var i = 0, len = obj.length; i < len; i++) {\n\t                if (cb.call(context, obj[i], i, obj)) {\n\t                    result.push(obj[i]);\n\t                }\n\t            }\n\t            return result;\n\t        }\n\t    }\n\n\t    /**\n\t     * 数组项查找\n\t     * @memberOf module:zrender/core/util\n\t     * @param {Array} obj\n\t     * @param {Function} cb\n\t     * @param {*} [context]\n\t     * @return {Array}\n\t     */\n\t    function find(obj, cb, context) {\n\t        if (!(obj && cb)) {\n\t            return;\n\t        }\n\t        for (var i = 0, len = obj.length; i < len; i++) {\n\t            if (cb.call(context, obj[i], i, obj)) {\n\t                return obj[i];\n\t            }\n\t        }\n\t    }\n\n\t    /**\n\t     * @memberOf module:zrender/core/util\n\t     * @param {Function} func\n\t     * @param {*} context\n\t     * @return {Function}\n\t     */\n\t    function bind(func, context) {\n\t        var args = nativeSlice.call(arguments, 2);\n\t        return function () {\n\t            return func.apply(context, args.concat(nativeSlice.call(arguments)));\n\t        };\n\t    }\n\n\t    /**\n\t     * @memberOf module:zrender/core/util\n\t     * @param {Function} func\n\t     * @return {Function}\n\t     */\n\t    function curry(func) {\n\t        var args = nativeSlice.call(arguments, 1);\n\t        return function () {\n\t            return func.apply(this, args.concat(nativeSlice.call(arguments)));\n\t        };\n\t    }\n\n\t    /**\n\t     * @memberOf module:zrender/core/util\n\t     * @param {*} value\n\t     * @return {boolean}\n\t     */\n\t    function isArray(value) {\n\t        return objToString.call(value) === '[object Array]';\n\t    }\n\n\t    /**\n\t     * @memberOf module:zrender/core/util\n\t     * @param {*} value\n\t     * @return {boolean}\n\t     */\n\t    function isFunction(value) {\n\t        return typeof value === 'function';\n\t    }\n\n\t    /**\n\t     * @memberOf module:zrender/core/util\n\t     * @param {*} value\n\t     * @return {boolean}\n\t     */\n\t    function isString(value) {\n\t        return objToString.call(value) === '[object String]';\n\t    }\n\n\t    /**\n\t     * @memberOf module:zrender/core/util\n\t     * @param {*} value\n\t     * @return {boolean}\n\t     */\n\t    function isObject(value) {\n\t        // Avoid a V8 JIT bug in Chrome 19-20.\n\t        // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n\t        var type = typeof value;\n\t        return type === 'function' || (!!value && type == 'object');\n\t    }\n\n\t    /**\n\t     * @memberOf module:zrender/core/util\n\t     * @param {*} value\n\t     * @return {boolean}\n\t     */\n\t    function isBuildInObject(value) {\n\t        return !!BUILTIN_OBJECT[objToString.call(value)];\n\t    }\n\n\t    /**\n\t     * @memberOf module:zrender/core/util\n\t     * @param {*} value\n\t     * @return {boolean}\n\t     */\n\t    function isDom(value) {\n\t        return typeof value === 'object'\n\t            && typeof value.nodeType === 'number'\n\t            && typeof value.ownerDocument === 'object';\n\t    }\n\n\t    /**\n\t     * Whether is exactly NaN. Notice isNaN('a') returns true.\n\t     * @param {*} value\n\t     * @return {boolean}\n\t     */\n\t    function eqNaN(value) {\n\t        return value !== value;\n\t    }\n\n\t    /**\n\t     * If value1 is not null, then return value1, otherwise judget rest of values.\n\t     * @memberOf module:zrender/core/util\n\t     * @return {*} Final value\n\t     */\n\t    function retrieve(values) {\n\t        for (var i = 0, len = arguments.length; i < len; i++) {\n\t            if (arguments[i] != null) {\n\t                return arguments[i];\n\t            }\n\t        }\n\t    }\n\n\t    /**\n\t     * @memberOf module:zrender/core/util\n\t     * @param {Array} arr\n\t     * @param {number} startIndex\n\t     * @param {number} endIndex\n\t     * @return {Array}\n\t     */\n\t    function slice() {\n\t        return Function.call.apply(nativeSlice, arguments);\n\t    }\n\n\t    /**\n\t     * @memberOf module:zrender/core/util\n\t     * @param {boolean} condition\n\t     * @param {string} message\n\t     */\n\t    function assert(condition, message) {\n\t        if (!condition) {\n\t            throw new Error(message);\n\t        }\n\t    }\n\n\t    var util = {\n\t        inherits: inherits,\n\t        mixin: mixin,\n\t        clone: clone,\n\t        merge: merge,\n\t        mergeAll: mergeAll,\n\t        extend: extend,\n\t        defaults: defaults,\n\t        getContext: getContext,\n\t        createCanvas: createCanvas,\n\t        indexOf: indexOf,\n\t        slice: slice,\n\t        find: find,\n\t        isArrayLike: isArrayLike,\n\t        each: each,\n\t        map: map,\n\t        reduce: reduce,\n\t        filter: filter,\n\t        bind: bind,\n\t        curry: curry,\n\t        isArray: isArray,\n\t        isString: isString,\n\t        isObject: isObject,\n\t        isFunction: isFunction,\n\t        isBuildInObject: isBuildInObject,\n\t        isDom: isDom,\n\t        eqNaN: eqNaN,\n\t        retrieve: retrieve,\n\t        assert: assert,\n\t        noop: function () {}\n\t    };\n\t    module.exports = util;\n\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var formatUtil = __webpack_require__(6);\n\t    var nubmerUtil = __webpack_require__(7);\n\t    var Model = __webpack_require__(12);\n\t    var zrUtil = __webpack_require__(4);\n\t    var each = zrUtil.each;\n\t    var isObject = zrUtil.isObject;\n\n\t    var modelUtil = {};\n\n\t    /**\n\t     * If value is not array, then translate it to array.\n\t     * @param  {*} value\n\t     * @return {Array} [value] or value\n\t     */\n\t    modelUtil.normalizeToArray = function (value) {\n\t        return value instanceof Array\n\t            ? value\n\t            : value == null\n\t            ? []\n\t            : [value];\n\t    };\n\n\t    /**\n\t     * Sync default option between normal and emphasis like `position` and `show`\n\t     * In case some one will write code like\n\t     *     label: {\n\t     *         normal: {\n\t     *             show: false,\n\t     *             position: 'outside',\n\t     *             textStyle: {\n\t     *                 fontSize: 18\n\t     *             }\n\t     *         },\n\t     *         emphasis: {\n\t     *             show: true\n\t     *         }\n\t     *     }\n\t     * @param {Object} opt\n\t     * @param {Array.<string>} subOpts\n\t     */\n\t     modelUtil.defaultEmphasis = function (opt, subOpts) {\n\t        if (opt) {\n\t            var emphasisOpt = opt.emphasis = opt.emphasis || {};\n\t            var normalOpt = opt.normal = opt.normal || {};\n\n\t            // Default emphasis option from normal\n\t            each(subOpts, function (subOptName) {\n\t                var val = zrUtil.retrieve(emphasisOpt[subOptName], normalOpt[subOptName]);\n\t                if (val != null) {\n\t                    emphasisOpt[subOptName] = val;\n\t                }\n\t            });\n\t        }\n\t    };\n\n\t    modelUtil.LABEL_OPTIONS = ['position', 'offset', 'show', 'textStyle', 'distance', 'formatter'];\n\n\t    /**\n\t     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\n\t     * This helper method retieves value from data.\n\t     * @param {string|number|Date|Array|Object} dataItem\n\t     * @return {number|string|Date|Array.<number|string|Date>}\n\t     */\n\t    modelUtil.getDataItemValue = function (dataItem) {\n\t        // Performance sensitive.\n\t        return dataItem && (dataItem.value == null ? dataItem : dataItem.value);\n\t    };\n\n\t    /**\n\t     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\n\t     * This helper method determine if dataItem has extra option besides value\n\t     * @param {string|number|Date|Array|Object} dataItem\n\t     */\n\t    modelUtil.isDataItemOption = function (dataItem) {\n\t        return isObject(dataItem)\n\t            && !(dataItem instanceof Array);\n\t            // // markLine data can be array\n\t            // && !(dataItem[0] && isObject(dataItem[0]) && !(dataItem[0] instanceof Array));\n\t    };\n\n\t    /**\n\t     * This helper method convert value in data.\n\t     * @param {string|number|Date} value\n\t     * @param {Object|string} [dimInfo] If string (like 'x'), dimType defaults 'number'.\n\t     */\n\t    modelUtil.converDataValue = function (value, dimInfo) {\n\t        // Performance sensitive.\n\t        var dimType = dimInfo && dimInfo.type;\n\t        if (dimType === 'ordinal') {\n\t            return value;\n\t        }\n\n\t        if (dimType === 'time' && !isFinite(value) && value != null && value !== '-') {\n\t            value = +nubmerUtil.parseDate(value);\n\t        }\n\n\t        // dimType defaults 'number'.\n\t        // If dimType is not ordinal and value is null or undefined or NaN or '-',\n\t        // parse to NaN.\n\t        return (value == null || value === '')\n\t            ? NaN : +value; // If string (like '-'), using '+' parse to NaN\n\t    };\n\n\t    /**\n\t     * Create a model proxy to be used in tooltip for edge data, markLine data, markPoint data.\n\t     * @param {module:echarts/data/List} data\n\t     * @param {Object} opt\n\t     * @param {string} [opt.seriesIndex]\n\t     * @param {Object} [opt.name]\n\t     * @param {Object} [opt.mainType]\n\t     * @param {Object} [opt.subType]\n\t     */\n\t    modelUtil.createDataFormatModel = function (data, opt) {\n\t        var model = new Model();\n\t        zrUtil.mixin(model, modelUtil.dataFormatMixin);\n\t        model.seriesIndex = opt.seriesIndex;\n\t        model.name = opt.name || '';\n\t        model.mainType = opt.mainType;\n\t        model.subType = opt.subType;\n\n\t        model.getData = function () {\n\t            return data;\n\t        };\n\t        return model;\n\t    };\n\n\t    // PENDING A little ugly\n\t    modelUtil.dataFormatMixin = {\n\t        /**\n\t         * Get params for formatter\n\t         * @param {number} dataIndex\n\t         * @param {string} [dataType]\n\t         * @return {Object}\n\t         */\n\t        getDataParams: function (dataIndex, dataType) {\n\t            var data = this.getData(dataType);\n\n\t            var seriesIndex = this.seriesIndex;\n\t            var seriesName = this.name;\n\n\t            var rawValue = this.getRawValue(dataIndex, dataType);\n\t            var rawDataIndex = data.getRawIndex(dataIndex);\n\t            var name = data.getName(dataIndex, true);\n\t            var itemOpt = data.getRawDataItem(dataIndex);\n\n\t            return {\n\t                componentType: this.mainType,\n\t                componentSubType: this.subType,\n\t                seriesType: this.mainType === 'series' ? this.subType : null,\n\t                seriesIndex: seriesIndex,\n\t                seriesName: seriesName,\n\t                name: name,\n\t                dataIndex: rawDataIndex,\n\t                data: itemOpt,\n\t                dataType: dataType,\n\t                value: rawValue,\n\t                color: data.getItemVisual(dataIndex, 'color'),\n\n\t                // Param name list for mapping `a`, `b`, `c`, `d`, `e`\n\t                $vars: ['seriesName', 'name', 'value']\n\t            };\n\t        },\n\n\t        /**\n\t         * Format label\n\t         * @param {number} dataIndex\n\t         * @param {string} [status='normal'] 'normal' or 'emphasis'\n\t         * @param {string} [dataType]\n\t         * @param {number} [dimIndex]\n\t         * @return {string}\n\t         */\n\t        getFormattedLabel: function (dataIndex, status, dataType, dimIndex) {\n\t            status = status || 'normal';\n\t            var data = this.getData(dataType);\n\t            var itemModel = data.getItemModel(dataIndex);\n\n\t            var params = this.getDataParams(dataIndex, dataType);\n\t            if (dimIndex != null && (params.value instanceof Array)) {\n\t                params.value = params.value[dimIndex];\n\t            }\n\n\t            var formatter = itemModel.get(['label', status, 'formatter']);\n\n\t            if (typeof formatter === 'function') {\n\t                params.status = status;\n\t                return formatter(params);\n\t            }\n\t            else if (typeof formatter === 'string') {\n\t                return formatUtil.formatTpl(formatter, params);\n\t            }\n\t        },\n\n\t        /**\n\t         * Get raw value in option\n\t         * @param {number} idx\n\t         * @param {string} [dataType]\n\t         * @return {Object}\n\t         */\n\t        getRawValue: function (idx, dataType) {\n\t            var data = this.getData(dataType);\n\t            var dataItem = data.getRawDataItem(idx);\n\t            if (dataItem != null) {\n\t                return (isObject(dataItem) && !(dataItem instanceof Array))\n\t                    ? dataItem.value : dataItem;\n\t            }\n\t        },\n\n\t        /**\n\t         * Should be implemented.\n\t         * @param {number} dataIndex\n\t         * @param {boolean} [multipleSeries=false]\n\t         * @param {number} [dataType]\n\t         * @return {string} tooltip string\n\t         */\n\t        formatTooltip: zrUtil.noop\n\t    };\n\n\t    /**\n\t     * Mapping to exists for merge.\n\t     *\n\t     * @public\n\t     * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists\n\t     * @param {Object|Array.<Object>} newCptOptions\n\t     * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\n\t     *                          index of which is the same as exists.\n\t     */\n\t    modelUtil.mappingToExists = function (exists, newCptOptions) {\n\t        // Mapping by the order by original option (but not order of\n\t        // new option) in merge mode. Because we should ensure\n\t        // some specified index (like xAxisIndex) is consistent with\n\t        // original option, which is easy to understand, espatially in\n\t        // media query. And in most case, merge option is used to\n\t        // update partial option but not be expected to change order.\n\t        newCptOptions = (newCptOptions || []).slice();\n\n\t        var result = zrUtil.map(exists || [], function (obj, index) {\n\t            return {exist: obj};\n\t        });\n\n\t        // Mapping by id or name if specified.\n\t        each(newCptOptions, function (cptOption, index) {\n\t            if (!isObject(cptOption)) {\n\t                return;\n\t            }\n\n\t            // id has highest priority.\n\t            for (var i = 0; i < result.length; i++) {\n\t                if (!result[i].option // Consider name: two map to one.\n\t                    && cptOption.id != null\n\t                    && result[i].exist.id === cptOption.id + ''\n\t                ) {\n\t                    result[i].option = cptOption;\n\t                    newCptOptions[index] = null;\n\t                    return;\n\t                }\n\t            }\n\n\t            for (var i = 0; i < result.length; i++) {\n\t                var exist = result[i].exist;\n\t                if (!result[i].option // Consider name: two map to one.\n\t                    // Can not match when both ids exist but different.\n\t                    && (exist.id == null || cptOption.id == null)\n\t                    && cptOption.name != null\n\t                    && !modelUtil.isIdInner(cptOption)\n\t                    && !modelUtil.isIdInner(exist)\n\t                    && exist.name === cptOption.name + ''\n\t                ) {\n\t                    result[i].option = cptOption;\n\t                    newCptOptions[index] = null;\n\t                    return;\n\t                }\n\t            }\n\t        });\n\n\t        // Otherwise mapping by index.\n\t        each(newCptOptions, function (cptOption, index) {\n\t            if (!isObject(cptOption)) {\n\t                return;\n\t            }\n\n\t            var i = 0;\n\t            for (; i < result.length; i++) {\n\t                var exist = result[i].exist;\n\t                if (!result[i].option\n\t                    // Existing model that already has id should be able to\n\t                    // mapped to (because after mapping performed model may\n\t                    // be assigned with a id, whish should not affect next\n\t                    // mapping), except those has inner id.\n\t                    && !modelUtil.isIdInner(exist)\n\t                    // Caution:\n\t                    // Do not overwrite id. But name can be overwritten,\n\t                    // because axis use name as 'show label text'.\n\t                    // 'exist' always has id and name and we dont\n\t                    // need to check it.\n\t                    && cptOption.id == null\n\t                ) {\n\t                    result[i].option = cptOption;\n\t                    break;\n\t                }\n\t            }\n\n\t            if (i >= result.length) {\n\t                result.push({option: cptOption});\n\t            }\n\t        });\n\n\t        return result;\n\t    };\n\n\t    /**\n\t     * Make id and name for mapping result (result of mappingToExists)\n\t     * into `keyInfo` field.\n\t     *\n\t     * @public\n\t     * @param {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\n\t     *                          which order is the same as exists.\n\t     * @return {Array.<Object>} The input.\n\t     */\n\t    modelUtil.makeIdAndName = function (mapResult) {\n\t        // We use this id to hash component models and view instances\n\t        // in echarts. id can be specified by user, or auto generated.\n\n\t        // The id generation rule ensures new view instance are able\n\t        // to mapped to old instance when setOption are called in\n\t        // no-merge mode. So we generate model id by name and plus\n\t        // type in view id.\n\n\t        // name can be duplicated among components, which is convenient\n\t        // to specify multi components (like series) by one name.\n\n\t        // Ensure that each id is distinct.\n\t        var idMap = {};\n\n\t        each(mapResult, function (item, index) {\n\t            var existCpt = item.exist;\n\t            existCpt && (idMap[existCpt.id] = item);\n\t        });\n\n\t        each(mapResult, function (item, index) {\n\t            var opt = item.option;\n\n\t            zrUtil.assert(\n\t                !opt || opt.id == null || !idMap[opt.id] || idMap[opt.id] === item,\n\t                'id duplicates: ' + (opt && opt.id)\n\t            );\n\n\t            opt && opt.id != null && (idMap[opt.id] = item);\n\t            !item.keyInfo && (item.keyInfo = {});\n\t        });\n\n\t        // Make name and id.\n\t        each(mapResult, function (item, index) {\n\t            var existCpt = item.exist;\n\t            var opt = item.option;\n\t            var keyInfo = item.keyInfo;\n\n\t            if (!isObject(opt)) {\n\t                return;\n\t            }\n\n\t            // name can be overwitten. Consider case: axis.name = '20km'.\n\t            // But id generated by name will not be changed, which affect\n\t            // only in that case: setOption with 'not merge mode' and view\n\t            // instance will be recreated, which can be accepted.\n\t            keyInfo.name = opt.name != null\n\t                ? opt.name + ''\n\t                : existCpt\n\t                ? existCpt.name\n\t                : '\\0-';\n\n\t            if (existCpt) {\n\t                keyInfo.id = existCpt.id;\n\t            }\n\t            else if (opt.id != null) {\n\t                keyInfo.id = opt.id + '';\n\t            }\n\t            else {\n\t                // Consider this situatoin:\n\t                //  optionA: [{name: 'a'}, {name: 'a'}, {..}]\n\t                //  optionB [{..}, {name: 'a'}, {name: 'a'}]\n\t                // Series with the same name between optionA and optionB\n\t                // should be mapped.\n\t                var idNum = 0;\n\t                do {\n\t                    keyInfo.id = '\\0' + keyInfo.name + '\\0' + idNum++;\n\t                }\n\t                while (idMap[keyInfo.id]);\n\t            }\n\n\t            idMap[keyInfo.id] = item;\n\t        });\n\t    };\n\n\t    /**\n\t     * @public\n\t     * @param {Object} cptOption\n\t     * @return {boolean}\n\t     */\n\t    modelUtil.isIdInner = function (cptOption) {\n\t        return isObject(cptOption)\n\t            && cptOption.id\n\t            && (cptOption.id + '').indexOf('\\0_ec_\\0') === 0;\n\t    };\n\n\t    /**\n\t     * A helper for removing duplicate items between batchA and batchB,\n\t     * and in themselves, and categorize by series.\n\t     *\n\t     * @param {Array.<Object>} batchA Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\n\t     * @param {Array.<Object>} batchB Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\n\t     * @return {Array.<Array.<Object>, Array.<Object>>} result: [resultBatchA, resultBatchB]\n\t     */\n\t    modelUtil.compressBatches = function (batchA, batchB) {\n\t        var mapA = {};\n\t        var mapB = {};\n\n\t        makeMap(batchA || [], mapA);\n\t        makeMap(batchB || [], mapB, mapA);\n\n\t        return [mapToArray(mapA), mapToArray(mapB)];\n\n\t        function makeMap(sourceBatch, map, otherMap) {\n\t            for (var i = 0, len = sourceBatch.length; i < len; i++) {\n\t                var seriesId = sourceBatch[i].seriesId;\n\t                var dataIndices = modelUtil.normalizeToArray(sourceBatch[i].dataIndex);\n\t                var otherDataIndices = otherMap && otherMap[seriesId];\n\n\t                for (var j = 0, lenj = dataIndices.length; j < lenj; j++) {\n\t                    var dataIndex = dataIndices[j];\n\n\t                    if (otherDataIndices && otherDataIndices[dataIndex]) {\n\t                        otherDataIndices[dataIndex] = null;\n\t                    }\n\t                    else {\n\t                        (map[seriesId] || (map[seriesId] = {}))[dataIndex] = 1;\n\t                    }\n\t                }\n\t            }\n\t        }\n\n\t        function mapToArray(map, isData) {\n\t            var result = [];\n\t            for (var i in map) {\n\t                if (map.hasOwnProperty(i) && map[i] != null) {\n\t                    if (isData) {\n\t                        result.push(+i);\n\t                    }\n\t                    else {\n\t                        var dataIndices = mapToArray(map[i], true);\n\t                        dataIndices.length && result.push({seriesId: i, dataIndex: dataIndices});\n\t                    }\n\t                }\n\t            }\n\t            return result;\n\t        }\n\t    };\n\n\t    /**\n\t     * @param {module:echarts/data/List} data\n\t     * @param {Object} payload Contains dataIndex (means rawIndex) / dataIndexInside / name\n\t     *                         each of which can be Array or primary type.\n\t     * @return {number|Array.<number>} dataIndex If not found, return undefined/null.\n\t     */\n\t    modelUtil.queryDataIndex = function (data, payload) {\n\t        if (payload.dataIndexInside != null) {\n\t            return payload.dataIndexInside;\n\t        }\n\t        else if (payload.dataIndex != null) {\n\t            return zrUtil.isArray(payload.dataIndex)\n\t                ? zrUtil.map(payload.dataIndex, function (value) {\n\t                    return data.indexOfRawIndex(value);\n\t                })\n\t                : data.indexOfRawIndex(payload.dataIndex);\n\t        }\n\t        else if (payload.name != null) {\n\t            return zrUtil.isArray(payload.name)\n\t                ? zrUtil.map(payload.name, function (value) {\n\t                    return data.indexOfName(value);\n\t                })\n\t                : data.indexOfName(payload.name);\n\t        }\n\t    };\n\n\t    /**\n\t     * @param {module:echarts/model/Global} ecModel\n\t     * @param {string|Object} finder\n\t     *        If string, e.g., 'geo', means {geoIndex: 0}.\n\t     *        If Object, could contain some of these properties below:\n\t     *        {\n\t     *            seriesIndex, seriesId, seriesName,\n\t     *            geoIndex, geoId, goeName,\n\t     *            bmapIndex, bmapId, bmapName,\n\t     *            xAxisIndex, xAxisId, xAxisName,\n\t     *            yAxisIndex, yAxisId, yAxisName,\n\t     *            gridIndex, gridId, gridName,\n\t     *            ... (can be extended)\n\t     *        }\n\t     *        Each properties can be number|string|Array.<number>|Array.<string>\n\t     *        For example, a finder could be\n\t     *        {\n\t     *            seriesIndex: 3,\n\t     *            geoId: ['aa', 'cc'],\n\t     *            gridName: ['xx', 'rr']\n\t     *        }\n\t     * @param {Object} [opt]\n\t     * @param {string} [opt.defaultMainType]\n\t     * @return {Object} result like:\n\t     *        {\n\t     *            seriesModels: [seriesModel1, seriesModel2],\n\t     *            seriesModel: seriesModel1, // The first model\n\t     *            geoModels: [geoModel1, geoModel2],\n\t     *            geoModel: geoModel1, // The first model\n\t     *            ...\n\t     *        }\n\t     */\n\t    modelUtil.parseFinder = function (ecModel, finder, opt) {\n\t        if (zrUtil.isString(finder)) {\n\t            var obj = {};\n\t            obj[finder + 'Index'] = 0;\n\t            finder = obj;\n\t        }\n\n\t        var defaultMainType = opt && opt.defaultMainType;\n\t        if (defaultMainType\n\t            && !has(finder, defaultMainType + 'Index')\n\t            && !has(finder, defaultMainType + 'Id')\n\t            && !has(finder, defaultMainType + 'Name')\n\t        ) {\n\t            finder[defaultMainType + 'Index'] = 0;\n\t        }\n\n\t        var result = {};\n\n\t        each(finder, function (value, key) {\n\t            var value = finder[key];\n\n\t            // Exclude 'dataIndex' and other illgal keys.\n\t            if (key === 'dataIndex' || key === 'dataIndexInside') {\n\t                result[key] = value;\n\t                return;\n\t            }\n\n\t            var parsedKey = key.match(/^(\\w+)(Index|Id|Name)$/) || [];\n\t            var mainType = parsedKey[1];\n\t            var queryType = parsedKey[2];\n\n\t            if (!mainType || !queryType) {\n\t                return;\n\t            }\n\n\t            var queryParam = {mainType: mainType};\n\t            queryParam[queryType.toLowerCase()] = value;\n\t            var models = ecModel.queryComponents(queryParam);\n\t            result[mainType + 'Models'] = models;\n\t            result[mainType + 'Model'] = models[0];\n\t        });\n\n\t        return result;\n\t    };\n\n\t    function has(obj, prop) {\n\t        return obj && obj.hasOwnProperty(prop);\n\t    }\n\n\t    module.exports = modelUtil;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var numberUtil = __webpack_require__(7);\n\t    var textContain = __webpack_require__(8);\n\n\t    var formatUtil = {};\n\t    /**\n\t     * 每三位默认加,格式化\n\t     * @type {string|number} x\n\t     */\n\t    formatUtil.addCommas = function (x) {\n\t        if (isNaN(x)) {\n\t            return '-';\n\t        }\n\t        x = (x + '').split('.');\n\t        return x[0].replace(/(\\d{1,3})(?=(?:\\d{3})+(?!\\d))/g,'$1,')\n\t               + (x.length > 1 ? ('.' + x[1]) : '');\n\t    };\n\n\t    /**\n\t     * @param {string} str\n\t     * @param {boolean} [upperCaseFirst=false]\n\t     * @return {string} str\n\t     */\n\t    formatUtil.toCamelCase = function (str, upperCaseFirst) {\n\t        str = (str || '').toLowerCase().replace(/-(.)/g, function(match, group1) {\n\t            return group1.toUpperCase();\n\t        });\n\n\t        if (upperCaseFirst && str) {\n\t            str = str.charAt(0).toUpperCase() + str.slice(1);\n\t        }\n\n\t        return str;\n\t    };\n\n\t    /**\n\t     * Normalize css liked array configuration\n\t     * e.g.\n\t     *  3 => [3, 3, 3, 3]\n\t     *  [4, 2] => [4, 2, 4, 2]\n\t     *  [4, 3, 2] => [4, 3, 2, 3]\n\t     * @param {number|Array.<number>} val\n\t     */\n\t    formatUtil.normalizeCssArray = function (val) {\n\t        var len = val.length;\n\t        if (typeof (val) === 'number') {\n\t            return [val, val, val, val];\n\t        }\n\t        else if (len === 2) {\n\t            // vertical | horizontal\n\t            return [val[0], val[1], val[0], val[1]];\n\t        }\n\t        else if (len === 3) {\n\t            // top | horizontal | bottom\n\t            return [val[0], val[1], val[2], val[1]];\n\t        }\n\t        return val;\n\t    };\n\n\t    var encodeHTML = formatUtil.encodeHTML = function (source) {\n\t        return String(source)\n\t            .replace(/&/g, '&amp;')\n\t            .replace(/</g, '&lt;')\n\t            .replace(/>/g, '&gt;')\n\t            .replace(/\"/g, '&quot;')\n\t            .replace(/'/g, '&#39;');\n\t    };\n\n\t    var TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\n\n\t    var wrapVar = function (varName, seriesIdx) {\n\t        return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';\n\t    };\n\n\t    /**\n\t     * Template formatter\n\t     * @param {string} tpl\n\t     * @param {Array.<Object>|Object} paramsList\n\t     * @param {boolean} [encode=false]\n\t     * @return {string}\n\t     */\n\t    formatUtil.formatTpl = function (tpl, paramsList, encode) {\n\t        if (!zrUtil.isArray(paramsList)) {\n\t            paramsList = [paramsList];\n\t        }\n\t        var seriesLen = paramsList.length;\n\t        if (!seriesLen) {\n\t            return '';\n\t        }\n\n\t        var $vars = paramsList[0].$vars || [];\n\t        for (var i = 0; i < $vars.length; i++) {\n\t            var alias = TPL_VAR_ALIAS[i];\n\t            var val = wrapVar(alias, 0);\n\t            tpl = tpl.replace(wrapVar(alias), encode ? encodeHTML(val) : val);\n\t        }\n\t        for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {\n\t            for (var k = 0; k < $vars.length; k++) {\n\t                var val = paramsList[seriesIdx][$vars[k]];\n\t                tpl = tpl.replace(\n\t                    wrapVar(TPL_VAR_ALIAS[k], seriesIdx),\n\t                    encode ? encodeHTML(val) : val\n\t                );\n\t            }\n\t        }\n\n\t        return tpl;\n\t    };\n\n\n\t    /**\n\t     * @param {string} str\n\t     * @return {string}\n\t     * @inner\n\t     */\n\t    var s2d = function (str) {\n\t        return str < 10 ? ('0' + str) : str;\n\t    };\n\n\t    /**\n\t     * ISO Date format\n\t     * @param {string} tpl\n\t     * @param {number} value\n\t     * @inner\n\t     */\n\t    formatUtil.formatTime = function (tpl, value) {\n\t        if (tpl === 'week'\n\t            || tpl === 'month'\n\t            || tpl === 'quarter'\n\t            || tpl === 'half-year'\n\t            || tpl === 'year'\n\t        ) {\n\t            tpl = 'MM-dd\\nyyyy';\n\t        }\n\n\t        var date = numberUtil.parseDate(value);\n\t        var y = date.getFullYear();\n\t        var M = date.getMonth() + 1;\n\t        var d = date.getDate();\n\t        var h = date.getHours();\n\t        var m = date.getMinutes();\n\t        var s = date.getSeconds();\n\n\t        tpl = tpl.replace('MM', s2d(M))\n\t            .toLowerCase()\n\t            .replace('yyyy', y)\n\t            .replace('yy', y % 100)\n\t            .replace('dd', s2d(d))\n\t            .replace('d', d)\n\t            .replace('hh', s2d(h))\n\t            .replace('h', h)\n\t            .replace('mm', s2d(m))\n\t            .replace('m', m)\n\t            .replace('ss', s2d(s))\n\t            .replace('s', s);\n\n\t        return tpl;\n\t    };\n\n\t    /**\n\t     * Capital first\n\t     * @param {string} str\n\t     * @return {string}\n\t     */\n\t    formatUtil.capitalFirst = function (str) {\n\t        return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;\n\t    };\n\n\t    formatUtil.truncateText = textContain.truncateText;\n\n\t    module.exports = formatUtil;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t/**\n\t * 数值处理模块\n\t * @module echarts/util/number\n\t */\n\n\n\n\t    var number = {};\n\n\t    var RADIAN_EPSILON = 1e-4;\n\n\t    function _trim(str) {\n\t        return str.replace(/^\\s+/, '').replace(/\\s+$/, '');\n\t    }\n\n\t    /**\n\t     * Linear mapping a value from domain to range\n\t     * @memberOf module:echarts/util/number\n\t     * @param  {(number|Array.<number>)} val\n\t     * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]\n\t     * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]\n\t     * @param  {boolean} clamp\n\t     * @return {(number|Array.<number>}\n\t     */\n\t    number.linearMap = function (val, domain, range, clamp) {\n\t        var subDomain = domain[1] - domain[0];\n\t        var subRange = range[1] - range[0];\n\n\t        if (subDomain === 0) {\n\t            return subRange === 0\n\t                ? range[0]\n\t                : (range[0] + range[1]) / 2;\n\t        }\n\n\t        // Avoid accuracy problem in edge, such as\n\t        // 146.39 - 62.83 === 83.55999999999999.\n\t        // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError\n\t        // It is a little verbose for efficiency considering this method\n\t        // is a hotspot.\n\t        if (clamp) {\n\t            if (subDomain > 0) {\n\t                if (val <= domain[0]) {\n\t                    return range[0];\n\t                }\n\t                else if (val >= domain[1]) {\n\t                    return range[1];\n\t                }\n\t            }\n\t            else {\n\t                if (val >= domain[0]) {\n\t                    return range[0];\n\t                }\n\t                else if (val <= domain[1]) {\n\t                    return range[1];\n\t                }\n\t            }\n\t        }\n\t        else {\n\t            if (val === domain[0]) {\n\t                return range[0];\n\t            }\n\t            if (val === domain[1]) {\n\t                return range[1];\n\t            }\n\t        }\n\n\t        return (val - domain[0]) / subDomain * subRange + range[0];\n\t    };\n\n\t    /**\n\t     * Convert a percent string to absolute number.\n\t     * Returns NaN if percent is not a valid string or number\n\t     * @memberOf module:echarts/util/number\n\t     * @param {string|number} percent\n\t     * @param {number} all\n\t     * @return {number}\n\t     */\n\t    number.parsePercent = function(percent, all) {\n\t        switch (percent) {\n\t            case 'center':\n\t            case 'middle':\n\t                percent = '50%';\n\t                break;\n\t            case 'left':\n\t            case 'top':\n\t                percent = '0%';\n\t                break;\n\t            case 'right':\n\t            case 'bottom':\n\t                percent = '100%';\n\t                break;\n\t        }\n\t        if (typeof percent === 'string') {\n\t            if (_trim(percent).match(/%$/)) {\n\t                return parseFloat(percent) / 100 * all;\n\t            }\n\n\t            return parseFloat(percent);\n\t        }\n\n\t        return percent == null ? NaN : +percent;\n\t    };\n\n\t    /**\n\t     * Fix rounding error of float numbers\n\t     * @param {number} x\n\t     * @return {number}\n\t     */\n\t    number.round = function (x, precision) {\n\t        if (precision == null) {\n\t            precision = 10;\n\t        }\n\t        // Avoid range error\n\t        precision = Math.min(Math.max(0, precision), 20);\n\t        return +(+x).toFixed(precision);\n\t    };\n\n\t    number.asc = function (arr) {\n\t        arr.sort(function (a, b) {\n\t            return a - b;\n\t        });\n\t        return arr;\n\t    };\n\n\t    /**\n\t     * Get precision\n\t     * @param {number} val\n\t     */\n\t    number.getPrecision = function (val) {\n\t        val = +val;\n\t        if (isNaN(val)) {\n\t            return 0;\n\t        }\n\t        // It is much faster than methods converting number to string as follows\n\t        //      var tmp = val.toString();\n\t        //      return tmp.length - 1 - tmp.indexOf('.');\n\t        // especially when precision is low\n\t        var e = 1;\n\t        var count = 0;\n\t        while (Math.round(val * e) / e !== val) {\n\t            e *= 10;\n\t            count++;\n\t        }\n\t        return count;\n\t    };\n\n\t    number.getPrecisionSafe = function (val) {\n\t        var str = val.toString();\n\t        var dotIndex = str.indexOf('.');\n\t        if (dotIndex < 0) {\n\t            return 0;\n\t        }\n\t        return str.length - 1 - dotIndex;\n\t    };\n\n\t    /**\n\t     * Minimal dicernible data precisioin according to a single pixel.\n\t     * @param {Array.<number>} dataExtent\n\t     * @param {Array.<number>} pixelExtent\n\t     * @return {number} precision\n\t     */\n\t    number.getPixelPrecision = function (dataExtent, pixelExtent) {\n\t        var log = Math.log;\n\t        var LN10 = Math.LN10;\n\t        var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);\n\t        var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10);\n\t        // toFixed() digits argument must be between 0 and 20.\n\t        var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);\n\t        return !isFinite(precision) ? 20 : precision;\n\t    };\n\n\t    // Number.MAX_SAFE_INTEGER, ie do not support.\n\t    number.MAX_SAFE_INTEGER = 9007199254740991;\n\n\t    /**\n\t     * To 0 - 2 * PI, considering negative radian.\n\t     * @param {number} radian\n\t     * @return {number}\n\t     */\n\t    number.remRadian = function (radian) {\n\t        var pi2 = Math.PI * 2;\n\t        return (radian % pi2 + pi2) % pi2;\n\t    };\n\n\t    /**\n\t     * @param {type} radian\n\t     * @return {boolean}\n\t     */\n\t    number.isRadianAroundZero = function (val) {\n\t        return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;\n\t    };\n\n\t    /**\n\t     * @param {string|Date|number} value\n\t     * @return {Date} date\n\t     */\n\t    number.parseDate = function (value) {\n\t        if (value instanceof Date) {\n\t            return value;\n\t        }\n\t        else if (typeof value === 'string') {\n\t            // Treat as ISO format. See issue #3623\n\t            var ret = new Date(value);\n\t            if (isNaN(+ret)) {\n\t                // FIXME new Date('1970-01-01') is UTC, new Date('1970/01/01') is local\n\t                ret = new Date(new Date(value.replace(/-/g, '/')) - new Date('1970/01/01'));\n\t            }\n\t            return ret;\n\t        }\n\n\t        return new Date(Math.round(value));\n\t    };\n\n\t    /**\n\t     * Quantity of a number. e.g. 0.1, 1, 10, 100\n\t     * @param  {number} val\n\t     * @return {number}\n\t     */\n\t    number.quantity = function (val) {\n\t        return Math.pow(10, Math.floor(Math.log(val) / Math.LN10));\n\t    };\n\n\t    // \"Nice Numbers for Graph Labels\" of Graphic Gems\n\t    /**\n\t     * find a “nice” number approximately equal to x. Round the number if round = true, take ceiling if round = false\n\t     * The primary observation is that the “nicest” numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.\n\t     * @param  {number} val\n\t     * @param  {boolean} round\n\t     * @return {number}\n\t     */\n\t    number.nice = function (val, round) {\n\t        var exp10 = number.quantity(val);\n\t        var f = val / exp10; // between 1 and 10\n\t        var nf;\n\t        if (round) {\n\t            if (f < 1.5) { nf = 1; }\n\t            else if (f < 2.5) { nf = 2; }\n\t            else if (f < 4) { nf = 3; }\n\t            else if (f < 7) { nf = 5; }\n\t            else { nf = 10; }\n\t        }\n\t        else {\n\t            if (f < 1) { nf = 1; }\n\t            else if (f < 2) { nf = 2; }\n\t            else if (f < 3) { nf = 3; }\n\t            else if (f < 5) { nf = 5; }\n\t            else { nf = 10; }\n\t        }\n\t        return nf * exp10;\n\t    };\n\n\t    /**\n\t     * Order intervals asc, and split them when overlap.\n\t     * expect(numberUtil.reformIntervals([\n\t     *     {interval: [18, 62], close: [1, 1]},\n\t     *     {interval: [-Infinity, -70], close: [0, 0]},\n\t     *     {interval: [-70, -26], close: [1, 1]},\n\t     *     {interval: [-26, 18], close: [1, 1]},\n\t     *     {interval: [62, 150], close: [1, 1]},\n\t     *     {interval: [106, 150], close: [1, 1]},\n\t     *     {interval: [150, Infinity], close: [0, 0]}\n\t     * ])).toEqual([\n\t     *     {interval: [-Infinity, -70], close: [0, 0]},\n\t     *     {interval: [-70, -26], close: [1, 1]},\n\t     *     {interval: [-26, 18], close: [0, 1]},\n\t     *     {interval: [18, 62], close: [0, 1]},\n\t     *     {interval: [62, 150], close: [0, 1]},\n\t     *     {interval: [150, Infinity], close: [0, 0]}\n\t     * ]);\n\t     * @param {Array.<Object>} list, where `close` mean open or close\n\t     *        of the interval, and Infinity can be used.\n\t     * @return {Array.<Object>} The origin list, which has been reformed.\n\t     */\n\t    number.reformIntervals = function (list) {\n\t        list.sort(function (a, b) {\n\t            return littleThan(a, b, 0) ? -1 : 1;\n\t        });\n\n\t        var curr = -Infinity;\n\t        var currClose = 1;\n\t        for (var i = 0; i < list.length;) {\n\t            var interval = list[i].interval;\n\t            var close = list[i].close;\n\n\t            for (var lg = 0; lg < 2; lg++) {\n\t                if (interval[lg] <= curr) {\n\t                    interval[lg] = curr;\n\t                    close[lg] = !lg ? 1 - currClose : 1;\n\t                }\n\t                curr = interval[lg];\n\t                currClose = close[lg];\n\t            }\n\n\t            if (interval[0] === interval[1] && close[0] * close[1] !== 1) {\n\t                list.splice(i, 1);\n\t            }\n\t            else {\n\t                i++;\n\t            }\n\t        }\n\n\t        return list;\n\n\t        function littleThan(a, b, lg) {\n\t            return a.interval[lg] < b.interval[lg]\n\t                || (\n\t                    a.interval[lg] === b.interval[lg]\n\t                    && (\n\t                        (a.close[lg] - b.close[lg] === (!lg ? 1 : -1))\n\t                        || (!lg && littleThan(a, b, 1))\n\t                    )\n\t                );\n\t        }\n\t    };\n\n\t    /**\n\t     * parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n\t     * ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t     * subtraction forces infinities to NaN\n\t     * @param {*} v\n\t     * @return {boolean}\n\t     */\n\t    number.isNumeric = function (v) {\n\t        return v - parseFloat(v) >= 0;\n\t    };\n\n\t    module.exports = number;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var textWidthCache = {};\n\t    var textWidthCacheCounter = 0;\n\t    var TEXT_CACHE_MAX = 5000;\n\n\t    var util = __webpack_require__(4);\n\t    var BoundingRect = __webpack_require__(9);\n\t    var retrieve = util.retrieve;\n\n\t    function getTextWidth(text, textFont) {\n\t        var key = text + ':' + textFont;\n\t        if (textWidthCache[key]) {\n\t            return textWidthCache[key];\n\t        }\n\n\t        var textLines = (text + '').split('\\n');\n\t        var width = 0;\n\n\t        for (var i = 0, l = textLines.length; i < l; i++) {\n\t            // measureText 可以被覆盖以兼容不支持 Canvas 的环境\n\t            width = Math.max(textContain.measureText(textLines[i], textFont).width, width);\n\t        }\n\n\t        if (textWidthCacheCounter > TEXT_CACHE_MAX) {\n\t            textWidthCacheCounter = 0;\n\t            textWidthCache = {};\n\t        }\n\t        textWidthCacheCounter++;\n\t        textWidthCache[key] = width;\n\n\t        return width;\n\t    }\n\n\t    function getTextRect(text, textFont, textAlign, textBaseline) {\n\t        var textLineLen = ((text || '') + '').split('\\n').length;\n\n\t        var width = getTextWidth(text, textFont);\n\t        // FIXME 高度计算比较粗暴\n\t        var lineHeight = getTextWidth('国', textFont);\n\t        var height = textLineLen * lineHeight;\n\n\t        var rect = new BoundingRect(0, 0, width, height);\n\t        // Text has a special line height property\n\t        rect.lineHeight = lineHeight;\n\n\t        switch (textBaseline) {\n\t            case 'bottom':\n\t            case 'alphabetic':\n\t                rect.y -= lineHeight;\n\t                break;\n\t            case 'middle':\n\t                rect.y -= lineHeight / 2;\n\t                break;\n\t            // case 'hanging':\n\t            // case 'top':\n\t        }\n\n\t        // FIXME Right to left language\n\t        switch (textAlign) {\n\t            case 'end':\n\t            case 'right':\n\t                rect.x -= rect.width;\n\t                break;\n\t            case 'center':\n\t                rect.x -= rect.width / 2;\n\t                break;\n\t            // case 'start':\n\t            // case 'left':\n\t        }\n\n\t        return rect;\n\t    }\n\n\t    function adjustTextPositionOnRect(textPosition, rect, textRect, distance) {\n\n\t        var x = rect.x;\n\t        var y = rect.y;\n\n\t        var height = rect.height;\n\t        var width = rect.width;\n\n\t        var textHeight = textRect.height;\n\n\t        var halfHeight = height / 2 - textHeight / 2;\n\n\t        var textAlign = 'left';\n\n\t        switch (textPosition) {\n\t            case 'left':\n\t                x -= distance;\n\t                y += halfHeight;\n\t                textAlign = 'right';\n\t                break;\n\t            case 'right':\n\t                x += distance + width;\n\t                y += halfHeight;\n\t                textAlign = 'left';\n\t                break;\n\t            case 'top':\n\t                x += width / 2;\n\t                y -= distance + textHeight;\n\t                textAlign = 'center';\n\t                break;\n\t            case 'bottom':\n\t                x += width / 2;\n\t                y += height + distance;\n\t                textAlign = 'center';\n\t                break;\n\t            case 'inside':\n\t                x += width / 2;\n\t                y += halfHeight;\n\t                textAlign = 'center';\n\t                break;\n\t            case 'insideLeft':\n\t                x += distance;\n\t                y += halfHeight;\n\t                textAlign = 'left';\n\t                break;\n\t            case 'insideRight':\n\t                x += width - distance;\n\t                y += halfHeight;\n\t                textAlign = 'right';\n\t                break;\n\t            case 'insideTop':\n\t                x += width / 2;\n\t                y += distance;\n\t                textAlign = 'center';\n\t                break;\n\t            case 'insideBottom':\n\t                x += width / 2;\n\t                y += height - textHeight - distance;\n\t                textAlign = 'center';\n\t                break;\n\t            case 'insideTopLeft':\n\t                x += distance;\n\t                y += distance;\n\t                textAlign = 'left';\n\t                break;\n\t            case 'insideTopRight':\n\t                x += width - distance;\n\t                y += distance;\n\t                textAlign = 'right';\n\t                break;\n\t            case 'insideBottomLeft':\n\t                x += distance;\n\t                y += height - textHeight - distance;\n\t                break;\n\t            case 'insideBottomRight':\n\t                x += width - distance;\n\t                y += height - textHeight - distance;\n\t                textAlign = 'right';\n\t                break;\n\t        }\n\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            textAlign: textAlign,\n\t            textBaseline: 'top'\n\t        };\n\t    }\n\n\t    /**\n\t     * Show ellipsis if overflow.\n\t     *\n\t     * @param  {string} text\n\t     * @param  {string} containerWidth\n\t     * @param  {string} textFont\n\t     * @param  {number} [ellipsis='...']\n\t     * @param  {Object} [options]\n\t     * @param  {number} [options.maxIterations=3]\n\t     * @param  {number} [options.minChar=0] If truncate result are less\n\t     *                  then minChar, ellipsis will not show, which is\n\t     *                  better for user hint in some cases.\n\t     * @param  {number} [options.placeholder=''] When all truncated, use the placeholder.\n\t     * @return {string}\n\t     */\n\t    function truncateText(text, containerWidth, textFont, ellipsis, options) {\n\t        if (!containerWidth) {\n\t            return '';\n\t        }\n\n\t        options = options || {};\n\n\t        ellipsis = retrieve(ellipsis, '...');\n\t        var maxIterations = retrieve(options.maxIterations, 2);\n\t        var minChar = retrieve(options.minChar, 0);\n\t        // FIXME\n\t        // Other languages?\n\t        var cnCharWidth = getTextWidth('国', textFont);\n\t        // FIXME\n\t        // Consider proportional font?\n\t        var ascCharWidth = getTextWidth('a', textFont);\n\t        var placeholder = retrieve(options.placeholder, '');\n\n\t        // Example 1: minChar: 3, text: 'asdfzxcv', truncate result: 'asdf', but not: 'a...'.\n\t        // Example 2: minChar: 3, text: '维度', truncate result: '维', but not: '...'.\n\t        var contentWidth = containerWidth = Math.max(0, containerWidth - 1); // Reserve some gap.\n\t        for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {\n\t            contentWidth -= ascCharWidth;\n\t        }\n\n\t        var ellipsisWidth = getTextWidth(ellipsis);\n\t        if (ellipsisWidth > contentWidth) {\n\t            ellipsis = '';\n\t            ellipsisWidth = 0;\n\t        }\n\n\t        contentWidth = containerWidth - ellipsisWidth;\n\n\t        var textLines = (text + '').split('\\n');\n\n\t        for (var i = 0, len = textLines.length; i < len; i++) {\n\t            var textLine = textLines[i];\n\t            var lineWidth = getTextWidth(textLine, textFont);\n\n\t            if (lineWidth <= containerWidth) {\n\t                continue;\n\t            }\n\n\t            for (var j = 0;; j++) {\n\t                if (lineWidth <= contentWidth || j >= maxIterations) {\n\t                    textLine += ellipsis;\n\t                    break;\n\t                }\n\n\t                var subLength = j === 0\n\t                    ? estimateLength(textLine, contentWidth, ascCharWidth, cnCharWidth)\n\t                    : lineWidth > 0\n\t                    ? Math.floor(textLine.length * contentWidth / lineWidth)\n\t                    : 0;\n\n\t                textLine = textLine.substr(0, subLength);\n\t                lineWidth = getTextWidth(textLine, textFont);\n\t            }\n\n\t            if (textLine === '') {\n\t                textLine = placeholder;\n\t            }\n\n\t            textLines[i] = textLine;\n\t        }\n\n\t        return textLines.join('\\n');\n\t    }\n\n\t    function estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {\n\t        var width = 0;\n\t        var i = 0;\n\t        for (var len = text.length; i < len && width < contentWidth; i++) {\n\t            var charCode = text.charCodeAt(i);\n\t            width += (0 <= charCode && charCode <= 127) ? ascCharWidth : cnCharWidth;\n\t        }\n\t        return i;\n\t    }\n\n\t    var textContain = {\n\n\t        getWidth: getTextWidth,\n\n\t        getBoundingRect: getTextRect,\n\n\t        adjustTextPositionOnRect: adjustTextPositionOnRect,\n\n\t        truncateText: truncateText,\n\n\t        measureText: function (text, textFont) {\n\t            var ctx = util.getContext();\n\t            ctx.font = textFont || '12px sans-serif';\n\t            return ctx.measureText(text);\n\t        }\n\t    };\n\n\t    module.exports = textContain;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * @module echarts/core/BoundingRect\n\t */\n\n\n\t    var vec2 = __webpack_require__(10);\n\t    var matrix = __webpack_require__(11);\n\n\t    var v2ApplyTransform = vec2.applyTransform;\n\t    var mathMin = Math.min;\n\t    var mathMax = Math.max;\n\t    /**\n\t     * @alias module:echarts/core/BoundingRect\n\t     */\n\t    function BoundingRect(x, y, width, height) {\n\n\t        if (width < 0) {\n\t            x = x + width;\n\t            width = -width;\n\t        }\n\t        if (height < 0) {\n\t            y = y + height;\n\t            height = -height;\n\t        }\n\n\t        /**\n\t         * @type {number}\n\t         */\n\t        this.x = x;\n\t        /**\n\t         * @type {number}\n\t         */\n\t        this.y = y;\n\t        /**\n\t         * @type {number}\n\t         */\n\t        this.width = width;\n\t        /**\n\t         * @type {number}\n\t         */\n\t        this.height = height;\n\t    }\n\n\t    BoundingRect.prototype = {\n\n\t        constructor: BoundingRect,\n\n\t        /**\n\t         * @param {module:echarts/core/BoundingRect} other\n\t         */\n\t        union: function (other) {\n\t            var x = mathMin(other.x, this.x);\n\t            var y = mathMin(other.y, this.y);\n\n\t            this.width = mathMax(\n\t                    other.x + other.width,\n\t                    this.x + this.width\n\t                ) - x;\n\t            this.height = mathMax(\n\t                    other.y + other.height,\n\t                    this.y + this.height\n\t                ) - y;\n\t            this.x = x;\n\t            this.y = y;\n\t        },\n\n\t        /**\n\t         * @param {Array.<number>} m\n\t         * @methods\n\t         */\n\t        applyTransform: (function () {\n\t            var lt = [];\n\t            var rb = [];\n\t            var lb = [];\n\t            var rt = [];\n\t            return function (m) {\n\t                // In case usage like this\n\t                // el.getBoundingRect().applyTransform(el.transform)\n\t                // And element has no transform\n\t                if (!m) {\n\t                    return;\n\t                }\n\t                lt[0] = lb[0] = this.x;\n\t                lt[1] = rt[1] = this.y;\n\t                rb[0] = rt[0] = this.x + this.width;\n\t                rb[1] = lb[1] = this.y + this.height;\n\n\t                v2ApplyTransform(lt, lt, m);\n\t                v2ApplyTransform(rb, rb, m);\n\t                v2ApplyTransform(lb, lb, m);\n\t                v2ApplyTransform(rt, rt, m);\n\n\t                this.x = mathMin(lt[0], rb[0], lb[0], rt[0]);\n\t                this.y = mathMin(lt[1], rb[1], lb[1], rt[1]);\n\t                var maxX = mathMax(lt[0], rb[0], lb[0], rt[0]);\n\t                var maxY = mathMax(lt[1], rb[1], lb[1], rt[1]);\n\t                this.width = maxX - this.x;\n\t                this.height = maxY - this.y;\n\t            };\n\t        })(),\n\n\t        /**\n\t         * Calculate matrix of transforming from self to target rect\n\t         * @param  {module:zrender/core/BoundingRect} b\n\t         * @return {Array.<number>}\n\t         */\n\t        calculateTransform: function (b) {\n\t            var a = this;\n\t            var sx = b.width / a.width;\n\t            var sy = b.height / a.height;\n\n\t            var m = matrix.create();\n\n\t            // 矩阵右乘\n\t            matrix.translate(m, m, [-a.x, -a.y]);\n\t            matrix.scale(m, m, [sx, sy]);\n\t            matrix.translate(m, m, [b.x, b.y]);\n\n\t            return m;\n\t        },\n\n\t        /**\n\t         * @param {(module:echarts/core/BoundingRect|Object)} b\n\t         * @return {boolean}\n\t         */\n\t        intersect: function (b) {\n\t            if (!b) {\n\t                return false;\n\t            }\n\n\t            if (!(b instanceof BoundingRect)) {\n\t                // Normalize negative width/height.\n\t                b = BoundingRect.create(b);\n\t            }\n\n\t            var a = this;\n\t            var ax0 = a.x;\n\t            var ax1 = a.x + a.width;\n\t            var ay0 = a.y;\n\t            var ay1 = a.y + a.height;\n\n\t            var bx0 = b.x;\n\t            var bx1 = b.x + b.width;\n\t            var by0 = b.y;\n\t            var by1 = b.y + b.height;\n\n\t            return ! (ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);\n\t        },\n\n\t        contain: function (x, y) {\n\t            var rect = this;\n\t            return x >= rect.x\n\t                && x <= (rect.x + rect.width)\n\t                && y >= rect.y\n\t                && y <= (rect.y + rect.height);\n\t        },\n\n\t        /**\n\t         * @return {module:echarts/core/BoundingRect}\n\t         */\n\t        clone: function () {\n\t            return new BoundingRect(this.x, this.y, this.width, this.height);\n\t        },\n\n\t        /**\n\t         * Copy from another rect\n\t         */\n\t        copy: function (other) {\n\t            this.x = other.x;\n\t            this.y = other.y;\n\t            this.width = other.width;\n\t            this.height = other.height;\n\t        },\n\n\t        plain: function () {\n\t            return {\n\t                x: this.x,\n\t                y: this.y,\n\t                width: this.width,\n\t                height: this.height\n\t            };\n\t        }\n\t    };\n\n\t    /**\n\t     * @param {Object|module:zrender/core/BoundingRect} rect\n\t     * @param {number} rect.x\n\t     * @param {number} rect.y\n\t     * @param {number} rect.width\n\t     * @param {number} rect.height\n\t     * @return {module:zrender/core/BoundingRect}\n\t     */\n\t    BoundingRect.create = function (rect) {\n\t        return new BoundingRect(rect.x, rect.y, rect.width, rect.height);\n\t    };\n\n\t    module.exports = BoundingRect;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t\n\t    var ArrayCtor = typeof Float32Array === 'undefined'\n\t        ? Array\n\t        : Float32Array;\n\n\t    /**\n\t     * @typedef {Float32Array|Array.<number>} Vector2\n\t     */\n\t    /**\n\t     * 二维向量类\n\t     * @exports zrender/tool/vector\n\t     */\n\t    var vector = {\n\t        /**\n\t         * 创建一个向量\n\t         * @param {number} [x=0]\n\t         * @param {number} [y=0]\n\t         * @return {Vector2}\n\t         */\n\t        create: function (x, y) {\n\t            var out = new ArrayCtor(2);\n\t            if (x == null) {\n\t                x = 0;\n\t            }\n\t            if (y == null) {\n\t                y = 0;\n\t            }\n\t            out[0] = x;\n\t            out[1] = y;\n\t            return out;\n\t        },\n\n\t        /**\n\t         * 复制向量数据\n\t         * @param {Vector2} out\n\t         * @param {Vector2} v\n\t         * @return {Vector2}\n\t         */\n\t        copy: function (out, v) {\n\t            out[0] = v[0];\n\t            out[1] = v[1];\n\t            return out;\n\t        },\n\n\t        /**\n\t         * 克隆一个向量\n\t         * @param {Vector2} v\n\t         * @return {Vector2}\n\t         */\n\t        clone: function (v) {\n\t            var out = new ArrayCtor(2);\n\t            out[0] = v[0];\n\t            out[1] = v[1];\n\t            return out;\n\t        },\n\n\t        /**\n\t         * 设置向量的两个项\n\t         * @param {Vector2} out\n\t         * @param {number} a\n\t         * @param {number} b\n\t         * @return {Vector2} 结果\n\t         */\n\t        set: function (out, a, b) {\n\t            out[0] = a;\n\t            out[1] = b;\n\t            return out;\n\t        },\n\n\t        /**\n\t         * 向量相加\n\t         * @param {Vector2} out\n\t         * @param {Vector2} v1\n\t         * @param {Vector2} v2\n\t         */\n\t        add: function (out, v1, v2) {\n\t            out[0] = v1[0] + v2[0];\n\t            out[1] = v1[1] + v2[1];\n\t            return out;\n\t        },\n\n\t        /**\n\t         * 向量缩放后相加\n\t         * @param {Vector2} out\n\t         * @param {Vector2} v1\n\t         * @param {Vector2} v2\n\t         * @param {number} a\n\t         */\n\t        scaleAndAdd: function (out, v1, v2, a) {\n\t            out[0] = v1[0] + v2[0] * a;\n\t            out[1] = v1[1] + v2[1] * a;\n\t            return out;\n\t        },\n\n\t        /**\n\t         * 向量相减\n\t         * @param {Vector2} out\n\t         * @param {Vector2} v1\n\t         * @param {Vector2} v2\n\t         */\n\t        sub: function (out, v1, v2) {\n\t            out[0] = v1[0] - v2[0];\n\t            out[1] = v1[1] - v2[1];\n\t            return out;\n\t        },\n\n\t        /**\n\t         * 向量长度\n\t         * @param {Vector2} v\n\t         * @return {number}\n\t         */\n\t        len: function (v) {\n\t            return Math.sqrt(this.lenSquare(v));\n\t        },\n\n\t        /**\n\t         * 向量长度平方\n\t         * @param {Vector2} v\n\t         * @return {number}\n\t         */\n\t        lenSquare: function (v) {\n\t            return v[0] * v[0] + v[1] * v[1];\n\t        },\n\n\t        /**\n\t         * 向量乘法\n\t         * @param {Vector2} out\n\t         * @param {Vector2} v1\n\t         * @param {Vector2} v2\n\t         */\n\t        mul: function (out, v1, v2) {\n\t            out[0] = v1[0] * v2[0];\n\t            out[1] = v1[1] * v2[1];\n\t            return out;\n\t        },\n\n\t        /**\n\t         * 向量除法\n\t         * @param {Vector2} out\n\t         * @param {Vector2} v1\n\t         * @param {Vector2} v2\n\t         */\n\t        div: function (out, v1, v2) {\n\t            out[0] = v1[0] / v2[0];\n\t            out[1] = v1[1] / v2[1];\n\t            return out;\n\t        },\n\n\t        /**\n\t         * 向量点乘\n\t         * @param {Vector2} v1\n\t         * @param {Vector2} v2\n\t         * @return {number}\n\t         */\n\t        dot: function (v1, v2) {\n\t            return v1[0] * v2[0] + v1[1] * v2[1];\n\t        },\n\n\t        /**\n\t         * 向量缩放\n\t         * @param {Vector2} out\n\t         * @param {Vector2} v\n\t         * @param {number} s\n\t         */\n\t        scale: function (out, v, s) {\n\t            out[0] = v[0] * s;\n\t            out[1] = v[1] * s;\n\t            return out;\n\t        },\n\n\t        /**\n\t         * 向量归一化\n\t         * @param {Vector2} out\n\t         * @param {Vector2} v\n\t         */\n\t        normalize: function (out, v) {\n\t            var d = vector.len(v);\n\t            if (d === 0) {\n\t                out[0] = 0;\n\t                out[1] = 0;\n\t            }\n\t            else {\n\t                out[0] = v[0] / d;\n\t                out[1] = v[1] / d;\n\t            }\n\t            return out;\n\t        },\n\n\t        /**\n\t         * 计算向量间距离\n\t         * @param {Vector2} v1\n\t         * @param {Vector2} v2\n\t         * @return {number}\n\t         */\n\t        distance: function (v1, v2) {\n\t            return Math.sqrt(\n\t                (v1[0] - v2[0]) * (v1[0] - v2[0])\n\t                + (v1[1] - v2[1]) * (v1[1] - v2[1])\n\t            );\n\t        },\n\n\t        /**\n\t         * 向量距离平方\n\t         * @param {Vector2} v1\n\t         * @param {Vector2} v2\n\t         * @return {number}\n\t         */\n\t        distanceSquare: function (v1, v2) {\n\t            return (v1[0] - v2[0]) * (v1[0] - v2[0])\n\t                + (v1[1] - v2[1]) * (v1[1] - v2[1]);\n\t        },\n\n\t        /**\n\t         * 求负向量\n\t         * @param {Vector2} out\n\t         * @param {Vector2} v\n\t         */\n\t        negate: function (out, v) {\n\t            out[0] = -v[0];\n\t            out[1] = -v[1];\n\t            return out;\n\t        },\n\n\t        /**\n\t         * 插值两个点\n\t         * @param {Vector2} out\n\t         * @param {Vector2} v1\n\t         * @param {Vector2} v2\n\t         * @param {number} t\n\t         */\n\t        lerp: function (out, v1, v2, t) {\n\t            out[0] = v1[0] + t * (v2[0] - v1[0]);\n\t            out[1] = v1[1] + t * (v2[1] - v1[1]);\n\t            return out;\n\t        },\n\n\t        /**\n\t         * 矩阵左乘向量\n\t         * @param {Vector2} out\n\t         * @param {Vector2} v\n\t         * @param {Vector2} m\n\t         */\n\t        applyTransform: function (out, v, m) {\n\t            var x = v[0];\n\t            var y = v[1];\n\t            out[0] = m[0] * x + m[2] * y + m[4];\n\t            out[1] = m[1] * x + m[3] * y + m[5];\n\t            return out;\n\t        },\n\t        /**\n\t         * 求两个向量最小值\n\t         * @param  {Vector2} out\n\t         * @param  {Vector2} v1\n\t         * @param  {Vector2} v2\n\t         */\n\t        min: function (out, v1, v2) {\n\t            out[0] = Math.min(v1[0], v2[0]);\n\t            out[1] = Math.min(v1[1], v2[1]);\n\t            return out;\n\t        },\n\t        /**\n\t         * 求两个向量最大值\n\t         * @param  {Vector2} out\n\t         * @param  {Vector2} v1\n\t         * @param  {Vector2} v2\n\t         */\n\t        max: function (out, v1, v2) {\n\t            out[0] = Math.max(v1[0], v2[0]);\n\t            out[1] = Math.max(v1[1], v2[1]);\n\t            return out;\n\t        }\n\t    };\n\n\t    vector.length = vector.len;\n\t    vector.lengthSquare = vector.lenSquare;\n\t    vector.dist = vector.distance;\n\t    vector.distSquare = vector.distanceSquare;\n\n\t    module.exports = vector;\n\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t\n\t    var ArrayCtor = typeof Float32Array === 'undefined'\n\t        ? Array\n\t        : Float32Array;\n\t    /**\n\t     * 3x2矩阵操作类\n\t     * @exports zrender/tool/matrix\n\t     */\n\t    var matrix = {\n\t        /**\n\t         * 创建一个单位矩阵\n\t         * @return {Float32Array|Array.<number>}\n\t         */\n\t        create : function() {\n\t            var out = new ArrayCtor(6);\n\t            matrix.identity(out);\n\n\t            return out;\n\t        },\n\t        /**\n\t         * 设置矩阵为单位矩阵\n\t         * @param {Float32Array|Array.<number>} out\n\t         */\n\t        identity : function(out) {\n\t            out[0] = 1;\n\t            out[1] = 0;\n\t            out[2] = 0;\n\t            out[3] = 1;\n\t            out[4] = 0;\n\t            out[5] = 0;\n\t            return out;\n\t        },\n\t        /**\n\t         * 复制矩阵\n\t         * @param {Float32Array|Array.<number>} out\n\t         * @param {Float32Array|Array.<number>} m\n\t         */\n\t        copy: function(out, m) {\n\t            out[0] = m[0];\n\t            out[1] = m[1];\n\t            out[2] = m[2];\n\t            out[3] = m[3];\n\t            out[4] = m[4];\n\t            out[5] = m[5];\n\t            return out;\n\t        },\n\t        /**\n\t         * 矩阵相乘\n\t         * @param {Float32Array|Array.<number>} out\n\t         * @param {Float32Array|Array.<number>} m1\n\t         * @param {Float32Array|Array.<number>} m2\n\t         */\n\t        mul : function (out, m1, m2) {\n\t            // Consider matrix.mul(m, m2, m);\n\t            // where out is the same as m2.\n\t            // So use temp variable to escape error.\n\t            var out0 = m1[0] * m2[0] + m1[2] * m2[1];\n\t            var out1 = m1[1] * m2[0] + m1[3] * m2[1];\n\t            var out2 = m1[0] * m2[2] + m1[2] * m2[3];\n\t            var out3 = m1[1] * m2[2] + m1[3] * m2[3];\n\t            var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];\n\t            var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];\n\t            out[0] = out0;\n\t            out[1] = out1;\n\t            out[2] = out2;\n\t            out[3] = out3;\n\t            out[4] = out4;\n\t            out[5] = out5;\n\t            return out;\n\t        },\n\t        /**\n\t         * 平移变换\n\t         * @param {Float32Array|Array.<number>} out\n\t         * @param {Float32Array|Array.<number>} a\n\t         * @param {Float32Array|Array.<number>} v\n\t         */\n\t        translate : function(out, a, v) {\n\t            out[0] = a[0];\n\t            out[1] = a[1];\n\t            out[2] = a[2];\n\t            out[3] = a[3];\n\t            out[4] = a[4] + v[0];\n\t            out[5] = a[5] + v[1];\n\t            return out;\n\t        },\n\t        /**\n\t         * 旋转变换\n\t         * @param {Float32Array|Array.<number>} out\n\t         * @param {Float32Array|Array.<number>} a\n\t         * @param {number} rad\n\t         */\n\t        rotate : function(out, a, rad) {\n\t            var aa = a[0];\n\t            var ac = a[2];\n\t            var atx = a[4];\n\t            var ab = a[1];\n\t            var ad = a[3];\n\t            var aty = a[5];\n\t            var st = Math.sin(rad);\n\t            var ct = Math.cos(rad);\n\n\t            out[0] = aa * ct + ab * st;\n\t            out[1] = -aa * st + ab * ct;\n\t            out[2] = ac * ct + ad * st;\n\t            out[3] = -ac * st + ct * ad;\n\t            out[4] = ct * atx + st * aty;\n\t            out[5] = ct * aty - st * atx;\n\t            return out;\n\t        },\n\t        /**\n\t         * 缩放变换\n\t         * @param {Float32Array|Array.<number>} out\n\t         * @param {Float32Array|Array.<number>} a\n\t         * @param {Float32Array|Array.<number>} v\n\t         */\n\t        scale : function(out, a, v) {\n\t            var vx = v[0];\n\t            var vy = v[1];\n\t            out[0] = a[0] * vx;\n\t            out[1] = a[1] * vy;\n\t            out[2] = a[2] * vx;\n\t            out[3] = a[3] * vy;\n\t            out[4] = a[4] * vx;\n\t            out[5] = a[5] * vy;\n\t            return out;\n\t        },\n\t        /**\n\t         * 求逆矩阵\n\t         * @param {Float32Array|Array.<number>} out\n\t         * @param {Float32Array|Array.<number>} a\n\t         */\n\t        invert : function(out, a) {\n\n\t            var aa = a[0];\n\t            var ac = a[2];\n\t            var atx = a[4];\n\t            var ab = a[1];\n\t            var ad = a[3];\n\t            var aty = a[5];\n\n\t            var det = aa * ad - ab * ac;\n\t            if (!det) {\n\t                return null;\n\t            }\n\t            det = 1.0 / det;\n\n\t            out[0] = ad * det;\n\t            out[1] = -ab * det;\n\t            out[2] = -ac * det;\n\t            out[3] = aa * det;\n\t            out[4] = (ac * aty - ad * atx) * det;\n\t            out[5] = (ab * atx - aa * aty) * det;\n\t            return out;\n\t        }\n\t    };\n\n\t    module.exports = matrix;\n\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @module echarts/model/Model\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var clazzUtil = __webpack_require__(13);\n\t    var env = __webpack_require__(2);\n\n\t    /**\n\t     * @alias module:echarts/model/Model\n\t     * @constructor\n\t     * @param {Object} option\n\t     * @param {module:echarts/model/Model} [parentModel]\n\t     * @param {module:echarts/model/Global} [ecModel]\n\t     */\n\t    function Model(option, parentModel, ecModel) {\n\t        /**\n\t         * @type {module:echarts/model/Model}\n\t         * @readOnly\n\t         */\n\t        this.parentModel = parentModel;\n\n\t        /**\n\t         * @type {module:echarts/model/Global}\n\t         * @readOnly\n\t         */\n\t        this.ecModel = ecModel;\n\n\t        /**\n\t         * @type {Object}\n\t         * @protected\n\t         */\n\t        this.option = option;\n\n\t        // Simple optimization\n\t        // if (this.init) {\n\t        //     if (arguments.length <= 4) {\n\t        //         this.init(option, parentModel, ecModel, extraOpt);\n\t        //     }\n\t        //     else {\n\t        //         this.init.apply(this, arguments);\n\t        //     }\n\t        // }\n\t    }\n\n\t    Model.prototype = {\n\n\t        constructor: Model,\n\n\t        /**\n\t         * Model 的初始化函数\n\t         * @param {Object} option\n\t         */\n\t        init: null,\n\n\t        /**\n\t         * 从新的 Option merge\n\t         */\n\t        mergeOption: function (option) {\n\t            zrUtil.merge(this.option, option, true);\n\t        },\n\n\t        /**\n\t         * @param {string|Array.<string>} path\n\t         * @param {boolean} [ignoreParent=false]\n\t         * @return {*}\n\t         */\n\t        get: function (path, ignoreParent) {\n\t            if (path == null) {\n\t                return this.option;\n\t            }\n\n\t            return doGet(\n\t                this.option,\n\t                this.parsePath(path),\n\t                !ignoreParent && getParent(this, path)\n\t            );\n\t        },\n\n\t        /**\n\t         * @param {string} key\n\t         * @param {boolean} [ignoreParent=false]\n\t         * @return {*}\n\t         */\n\t        getShallow: function (key, ignoreParent) {\n\t            var option = this.option;\n\n\t            var val = option == null ? option : option[key];\n\t            var parentModel = !ignoreParent && getParent(this, key);\n\t            if (val == null && parentModel) {\n\t                val = parentModel.getShallow(key);\n\t            }\n\t            return val;\n\t        },\n\n\t        /**\n\t         * @param {string|Array.<string>} path\n\t         * @param {module:echarts/model/Model} [parentModel]\n\t         * @return {module:echarts/model/Model}\n\t         */\n\t        getModel: function (path, parentModel) {\n\t            var obj = path == null\n\t                ? this.option\n\t                : doGet(this.option, path = this.parsePath(path));\n\n\t            var thisParentModel;\n\t            parentModel = parentModel || (\n\t                (thisParentModel = getParent(this, path))\n\t                    && thisParentModel.getModel(path)\n\t            );\n\n\t            return new Model(obj, parentModel, this.ecModel);\n\t        },\n\n\t        /**\n\t         * If model has option\n\t         */\n\t        isEmpty: function () {\n\t            return this.option == null;\n\t        },\n\n\t        restoreData: function () {},\n\n\t        // Pending\n\t        clone: function () {\n\t            var Ctor = this.constructor;\n\t            return new Ctor(zrUtil.clone(this.option));\n\t        },\n\n\t        setReadOnly: function (properties) {\n\t            clazzUtil.setReadOnly(this, properties);\n\t        },\n\n\t        // If path is null/undefined, return null/undefined.\n\t        parsePath: function(path) {\n\t            if (typeof path === 'string') {\n\t                path = path.split('.');\n\t            }\n\t            return path;\n\t        },\n\n\t        /**\n\t         * @param {Function} getParentMethod\n\t         *        param {Array.<string>|string} path\n\t         *        return {module:echarts/model/Model}\n\t         */\n\t        customizeGetParent: function (getParentMethod) {\n\t            clazzUtil.set(this, 'getParent', getParentMethod);\n\t        },\n\n\t        isAnimationEnabled: function () {\n\t            if (!env.node) {\n\t                if (this.option.animation != null) {\n\t                    return !!this.option.animation;\n\t                }\n\t                else if (this.parentModel) {\n\t                    return this.parentModel.isAnimationEnabled();\n\t                }\n\t            }\n\t        }\n\t    };\n\n\t    function doGet(obj, pathArr, parentModel) {\n\t        for (var i = 0; i < pathArr.length; i++) {\n\t            // Ignore empty\n\t            if (!pathArr[i]) {\n\t                continue;\n\t            }\n\t            // obj could be number/string/... (like 0)\n\t            obj = (obj && typeof obj === 'object') ? obj[pathArr[i]] : null;\n\t            if (obj == null) {\n\t                break;\n\t            }\n\t        }\n\t        if (obj == null && parentModel) {\n\t            obj = parentModel.get(pathArr);\n\t        }\n\t        return obj;\n\t    }\n\n\t    function getParent(model, path) {\n\t        var getParentMethod = clazzUtil.get(model, 'getParent');\n\t        return getParentMethod ? getParentMethod.call(model, path) : model.parentModel;\n\t    }\n\n\t    // Enable Model.extend.\n\t    clazzUtil.enableClassExtend(Model);\n\n\t    var mixin = zrUtil.mixin;\n\t    mixin(Model, __webpack_require__(14));\n\t    mixin(Model, __webpack_require__(16));\n\t    mixin(Model, __webpack_require__(17));\n\t    mixin(Model, __webpack_require__(18));\n\n\t    module.exports = Model;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var clazz = {};\n\n\t    var TYPE_DELIMITER = '.';\n\t    var IS_CONTAINER = '___EC__COMPONENT__CONTAINER___';\n\t    var MEMBER_PRIFIX = '\\0ec_\\0';\n\n\t    /**\n\t     * Hide private class member.\n\t     * The same behavior as `host[name] = value;` (can be right-value)\n\t     * @public\n\t     */\n\t    clazz.set = function (host, name, value) {\n\t        return (host[MEMBER_PRIFIX + name] = value);\n\t    };\n\n\t    /**\n\t     * Hide private class member.\n\t     * The same behavior as `host[name];`\n\t     * @public\n\t     */\n\t    clazz.get = function (host, name) {\n\t        return host[MEMBER_PRIFIX + name];\n\t    };\n\n\t    /**\n\t     * For hidden private class member.\n\t     * The same behavior as `host.hasOwnProperty(name);`\n\t     * @public\n\t     */\n\t    clazz.hasOwn = function (host, name) {\n\t        return host.hasOwnProperty(MEMBER_PRIFIX + name);\n\t    };\n\n\t    /**\n\t     * @public\n\t     */\n\t    var parseClassType = clazz.parseClassType = function (componentType) {\n\t        var ret = {main: '', sub: ''};\n\t        if (componentType) {\n\t            componentType = componentType.split(TYPE_DELIMITER);\n\t            ret.main = componentType[0] || '';\n\t            ret.sub = componentType[1] || '';\n\t        }\n\t        return ret;\n\t    };\n\n\t    /**\n\t     * @public\n\t     */\n\t    function checkClassType(componentType) {\n\t        zrUtil.assert(\n\t            /^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(componentType),\n\t            'componentType \"' + componentType + '\" illegal'\n\t        );\n\t    }\n\n\t    /**\n\t     * @public\n\t     */\n\t    clazz.enableClassExtend = function (RootClass, mandatoryMethods) {\n\n\t        RootClass.$constructor = RootClass;\n\t        RootClass.extend = function (proto) {\n\n\t            if (true) {\n\t                zrUtil.each(mandatoryMethods, function (method) {\n\t                    if (!proto[method]) {\n\t                        console.warn(\n\t                            'Method `' + method + '` should be implemented'\n\t                            + (proto.type ? ' in ' + proto.type : '') + '.'\n\t                        );\n\t                    }\n\t                });\n\t            }\n\n\t            var superClass = this;\n\t            var ExtendedClass = function () {\n\t                if (!proto.$constructor) {\n\t                    superClass.apply(this, arguments);\n\t                }\n\t                else {\n\t                    proto.$constructor.apply(this, arguments);\n\t                }\n\t            };\n\n\t            zrUtil.extend(ExtendedClass.prototype, proto);\n\n\t            ExtendedClass.extend = this.extend;\n\t            ExtendedClass.superCall = superCall;\n\t            ExtendedClass.superApply = superApply;\n\t            zrUtil.inherits(ExtendedClass, this);\n\t            ExtendedClass.superClass = superClass;\n\n\t            return ExtendedClass;\n\t        };\n\t    };\n\n\t    // superCall should have class info, which can not be fetch from 'this'.\n\t    // Consider this case:\n\t    // class A has method f,\n\t    // class B inherits class A, overrides method f, f call superApply('f'),\n\t    // class C inherits class B, do not overrides method f,\n\t    // then when method of class C is called, dead loop occured.\n\t    function superCall(context, methodName) {\n\t        var args = zrUtil.slice(arguments, 2);\n\t        return this.superClass.prototype[methodName].apply(context, args);\n\t    }\n\n\t    function superApply(context, methodName, args) {\n\t        return this.superClass.prototype[methodName].apply(context, args);\n\t    }\n\n\t    /**\n\t     * @param {Object} entity\n\t     * @param {Object} options\n\t     * @param {boolean} [options.registerWhenExtend]\n\t     * @public\n\t     */\n\t    clazz.enableClassManagement = function (entity, options) {\n\t        options = options || {};\n\n\t        /**\n\t         * Component model classes\n\t         * key: componentType,\n\t         * value:\n\t         *     componentClass, when componentType is 'xxx'\n\t         *     or Object.<subKey, componentClass>, when componentType is 'xxx.yy'\n\t         * @type {Object}\n\t         */\n\t        var storage = {};\n\n\t        entity.registerClass = function (Clazz, componentType) {\n\t            if (componentType) {\n\t                checkClassType(componentType);\n\t                componentType = parseClassType(componentType);\n\n\t                if (!componentType.sub) {\n\t                    if (true) {\n\t                        if (storage[componentType.main]) {\n\t                            console.warn(componentType.main + ' exists.');\n\t                        }\n\t                    }\n\t                    storage[componentType.main] = Clazz;\n\t                }\n\t                else if (componentType.sub !== IS_CONTAINER) {\n\t                    var container = makeContainer(componentType);\n\t                    container[componentType.sub] = Clazz;\n\t                }\n\t            }\n\t            return Clazz;\n\t        };\n\n\t        entity.getClass = function (componentMainType, subType, throwWhenNotFound) {\n\t            var Clazz = storage[componentMainType];\n\n\t            if (Clazz && Clazz[IS_CONTAINER]) {\n\t                Clazz = subType ? Clazz[subType] : null;\n\t            }\n\n\t            if (throwWhenNotFound && !Clazz) {\n\t                throw new Error(\n\t                    !subType\n\t                        ? componentMainType + '.' + 'type should be specified.'\n\t                        : 'Component ' + componentMainType + '.' + (subType || '') + ' not exists. Load it first.'\n\t                );\n\t            }\n\n\t            return Clazz;\n\t        };\n\n\t        entity.getClassesByMainType = function (componentType) {\n\t            componentType = parseClassType(componentType);\n\n\t            var result = [];\n\t            var obj = storage[componentType.main];\n\n\t            if (obj && obj[IS_CONTAINER]) {\n\t                zrUtil.each(obj, function (o, type) {\n\t                    type !== IS_CONTAINER && result.push(o);\n\t                });\n\t            }\n\t            else {\n\t                result.push(obj);\n\t            }\n\n\t            return result;\n\t        };\n\n\t        entity.hasClass = function (componentType) {\n\t            // Just consider componentType.main.\n\t            componentType = parseClassType(componentType);\n\t            return !!storage[componentType.main];\n\t        };\n\n\t        /**\n\t         * @return {Array.<string>} Like ['aa', 'bb'], but can not be ['aa.xx']\n\t         */\n\t        entity.getAllClassMainTypes = function () {\n\t            var types = [];\n\t            zrUtil.each(storage, function (obj, type) {\n\t                types.push(type);\n\t            });\n\t            return types;\n\t        };\n\n\t        /**\n\t         * If a main type is container and has sub types\n\t         * @param  {string}  mainType\n\t         * @return {boolean}\n\t         */\n\t        entity.hasSubTypes = function (componentType) {\n\t            componentType = parseClassType(componentType);\n\t            var obj = storage[componentType.main];\n\t            return obj && obj[IS_CONTAINER];\n\t        };\n\n\t        entity.parseClassType = parseClassType;\n\n\t        function makeContainer(componentType) {\n\t            var container = storage[componentType.main];\n\t            if (!container || !container[IS_CONTAINER]) {\n\t                container = storage[componentType.main] = {};\n\t                container[IS_CONTAINER] = true;\n\t            }\n\t            return container;\n\t        }\n\n\t        if (options.registerWhenExtend) {\n\t            var originalExtend = entity.extend;\n\t            if (originalExtend) {\n\t                entity.extend = function (proto) {\n\t                    var ExtendedClass = originalExtend.call(this, proto);\n\t                    return entity.registerClass(ExtendedClass, proto.type);\n\t                };\n\t            }\n\t        }\n\n\t        return entity;\n\t    };\n\n\t    /**\n\t     * @param {string|Array.<string>} properties\n\t     */\n\t    clazz.setReadOnly = function (obj, properties) {\n\t        // FIXME It seems broken in IE8 simulation of IE11\n\t        // if (!zrUtil.isArray(properties)) {\n\t        //     properties = properties != null ? [properties] : [];\n\t        // }\n\t        // zrUtil.each(properties, function (prop) {\n\t        //     var value = obj[prop];\n\n\t        //     Object.defineProperty\n\t        //         && Object.defineProperty(obj, prop, {\n\t        //             value: value, writable: false\n\t        //         });\n\t        //     zrUtil.isArray(obj[prop])\n\t        //         && Object.freeze\n\t        //         && Object.freeze(obj[prop]);\n\t        // });\n\t    };\n\n\t    module.exports = clazz;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t    var getLineStyle = __webpack_require__(15)(\n\t        [\n\t            ['lineWidth', 'width'],\n\t            ['stroke', 'color'],\n\t            ['opacity'],\n\t            ['shadowBlur'],\n\t            ['shadowOffsetX'],\n\t            ['shadowOffsetY'],\n\t            ['shadowColor']\n\t        ]\n\t    );\n\t    module.exports = {\n\t        getLineStyle: function (excludes) {\n\t            var style = getLineStyle.call(this, excludes);\n\t            var lineDash = this.getLineDash(style.lineWidth);\n\t            lineDash && (style.lineDash = lineDash);\n\t            return style;\n\t        },\n\n\t        getLineDash: function (lineWidth) {\n\t            if (lineWidth == null) {\n\t                lineWidth = 1;\n\t            }\n\t            var lineType = this.get('type');\n\t            var dotSize = Math.max(lineWidth, 2);\n\t            var dashSize = lineWidth * 4;\n\t            return (lineType === 'solid' || lineType == null) ? null\n\t                : (lineType === 'dashed' ? [dashSize, dashSize] : [dotSize, dotSize]);\n\t        }\n\t    };\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// TODO Parse shadow style\n\t// TODO Only shallow path support\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    module.exports = function (properties) {\n\t        // Normalize\n\t        for (var i = 0; i < properties.length; i++) {\n\t            if (!properties[i][1]) {\n\t               properties[i][1] = properties[i][0];\n\t            }\n\t        }\n\t        return function (excludes) {\n\t            var style = {};\n\t            for (var i = 0; i < properties.length; i++) {\n\t                var propName = properties[i][1];\n\t                if (excludes && zrUtil.indexOf(excludes, propName) >= 0) {\n\t                    continue;\n\t                }\n\t                var val = this.getShallow(propName);\n\t                if (val != null) {\n\t                    style[properties[i][0]] = val;\n\t                }\n\t            }\n\t            return style;\n\t        };\n\t    };\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t    module.exports = {\n\t        getAreaStyle: __webpack_require__(15)(\n\t            [\n\t                ['fill', 'color'],\n\t                ['shadowBlur'],\n\t                ['shadowOffsetX'],\n\t                ['shadowOffsetY'],\n\t                ['opacity'],\n\t                ['shadowColor']\n\t            ]\n\t        )\n\t    };\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var textContain = __webpack_require__(8);\n\n\t    function getShallow(model, path) {\n\t        return model && model.getShallow(path);\n\t    }\n\n\t    module.exports = {\n\t        /**\n\t         * Get color property or get color from option.textStyle.color\n\t         * @return {string}\n\t         */\n\t        getTextColor: function () {\n\t            var ecModel = this.ecModel;\n\t            return this.getShallow('color')\n\t                || (ecModel && ecModel.get('textStyle.color'));\n\t        },\n\n\t        /**\n\t         * Create font string from fontStyle, fontWeight, fontSize, fontFamily\n\t         * @return {string}\n\t         */\n\t        getFont: function () {\n\t            var ecModel = this.ecModel;\n\t            var gTextStyleModel = ecModel && ecModel.getModel('textStyle');\n\t            return [\n\t                // FIXME in node-canvas fontWeight is before fontStyle\n\t                this.getShallow('fontStyle') || getShallow(gTextStyleModel, 'fontStyle'),\n\t                this.getShallow('fontWeight') || getShallow(gTextStyleModel, 'fontWeight'),\n\t                (this.getShallow('fontSize') || getShallow(gTextStyleModel, 'fontSize') || 12) + 'px',\n\t                this.getShallow('fontFamily') || getShallow(gTextStyleModel, 'fontFamily') || 'sans-serif'\n\t            ].join(' ');\n\t        },\n\n\t        getTextRect: function (text) {\n\t            return textContain.getBoundingRect(\n\t                text,\n\t                this.getFont(),\n\t                this.getShallow('align'),\n\t                this.getShallow('baseline')\n\t            );\n\t        },\n\n\t        truncateText: function (text, containerWidth, ellipsis, options) {\n\t            return textContain.truncateText(\n\t                text, containerWidth, this.getFont(), ellipsis, options\n\t            );\n\t        }\n\t    };\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t    var getItemStyle = __webpack_require__(15)(\n\t        [\n\t            ['fill', 'color'],\n\t            ['stroke', 'borderColor'],\n\t            ['lineWidth', 'borderWidth'],\n\t            ['opacity'],\n\t            ['shadowBlur'],\n\t            ['shadowOffsetX'],\n\t            ['shadowOffsetY'],\n\t            ['shadowColor'],\n\t            ['textPosition'],\n\t            ['textAlign']\n\t        ]\n\t    );\n\t    module.exports = {\n\t        getItemStyle: function (excludes) {\n\t            var style = getItemStyle.call(this, excludes);\n\t            var lineDash = this.getBorderLineDash();\n\t            lineDash && (style.lineDash = lineDash);\n\t            return style;\n\t        },\n\n\t        getBorderLineDash: function () {\n\t            var lineType = this.get('borderType');\n\t            return (lineType === 'solid' || lineType == null) ? null\n\t                : (lineType === 'dashed' ? [5, 5] : [1, 1]);\n\t        }\n\t    };\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Component model\n\t *\n\t * @module echarts/model/Component\n\t */\n\n\n\t    var Model = __webpack_require__(12);\n\t    var zrUtil = __webpack_require__(4);\n\t    var arrayPush = Array.prototype.push;\n\t    var componentUtil = __webpack_require__(20);\n\t    var clazzUtil = __webpack_require__(13);\n\t    var layout = __webpack_require__(21);\n\n\t    /**\n\t     * @alias module:echarts/model/Component\n\t     * @constructor\n\t     * @param {Object} option\n\t     * @param {module:echarts/model/Model} parentModel\n\t     * @param {module:echarts/model/Model} ecModel\n\t     */\n\t    var ComponentModel = Model.extend({\n\n\t        type: 'component',\n\n\t        /**\n\t         * @readOnly\n\t         * @type {string}\n\t         */\n\t        id: '',\n\n\t        /**\n\t         * @readOnly\n\t         */\n\t        name: '',\n\n\t        /**\n\t         * @readOnly\n\t         * @type {string}\n\t         */\n\t        mainType: '',\n\n\t        /**\n\t         * @readOnly\n\t         * @type {string}\n\t         */\n\t        subType: '',\n\n\t        /**\n\t         * @readOnly\n\t         * @type {number}\n\t         */\n\t        componentIndex: 0,\n\n\t        /**\n\t         * @type {Object}\n\t         * @protected\n\t         */\n\t        defaultOption: null,\n\n\t        /**\n\t         * @type {module:echarts/model/Global}\n\t         * @readOnly\n\t         */\n\t        ecModel: null,\n\n\t        /**\n\t         * key: componentType\n\t         * value:  Component model list, can not be null.\n\t         * @type {Object.<string, Array.<module:echarts/model/Model>>}\n\t         * @readOnly\n\t         */\n\t        dependentModels: [],\n\n\t        /**\n\t         * @type {string}\n\t         * @readOnly\n\t         */\n\t        uid: null,\n\n\t        /**\n\t         * Support merge layout params.\n\t         * Only support 'box' now (left/right/top/bottom/width/height).\n\t         * @type {string|Object} Object can be {ignoreSize: true}\n\t         * @readOnly\n\t         */\n\t        layoutMode: null,\n\n\t        $constructor: function (option, parentModel, ecModel, extraOpt) {\n\t            Model.call(this, option, parentModel, ecModel, extraOpt);\n\n\t            this.uid = componentUtil.getUID('componentModel');\n\t        },\n\n\n\t        init: function (option, parentModel, ecModel, extraOpt) {\n\t            this.mergeDefaultAndTheme(option, ecModel);\n\t        },\n\n\t        mergeDefaultAndTheme: function (option, ecModel) {\n\t            var layoutMode = this.layoutMode;\n\t            var inputPositionParams = layoutMode\n\t                ? layout.getLayoutParams(option) : {};\n\n\t            var themeModel = ecModel.getTheme();\n\t            zrUtil.merge(option, themeModel.get(this.mainType));\n\t            zrUtil.merge(option, this.getDefaultOption());\n\n\t            if (layoutMode) {\n\t                layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n\t            }\n\t        },\n\n\t        mergeOption: function (option, extraOpt) {\n\t            zrUtil.merge(this.option, option, true);\n\n\t            var layoutMode = this.layoutMode;\n\t            if (layoutMode) {\n\t                layout.mergeLayoutParam(this.option, option, layoutMode);\n\t            }\n\t        },\n\n\t        // Hooker after init or mergeOption\n\t        optionUpdated: function (newCptOption, isInit) {},\n\n\t        getDefaultOption: function () {\n\t            if (!clazzUtil.hasOwn(this, '__defaultOption')) {\n\t                var optList = [];\n\t                var Class = this.constructor;\n\t                while (Class) {\n\t                    var opt = Class.prototype.defaultOption;\n\t                    opt && optList.push(opt);\n\t                    Class = Class.superClass;\n\t                }\n\n\t                var defaultOption = {};\n\t                for (var i = optList.length - 1; i >= 0; i--) {\n\t                    defaultOption = zrUtil.merge(defaultOption, optList[i], true);\n\t                }\n\t                clazzUtil.set(this, '__defaultOption', defaultOption);\n\t            }\n\t            return clazzUtil.get(this, '__defaultOption');\n\t        },\n\n\t        getReferringComponents: function (mainType) {\n\t            return this.ecModel.queryComponents({\n\t                mainType: mainType,\n\t                index: this.get(mainType + 'Index', true),\n\t                id: this.get(mainType + 'Id', true)\n\t            });\n\t        }\n\n\t    });\n\n\t    // Reset ComponentModel.extend, add preConstruct.\n\t    // clazzUtil.enableClassExtend(\n\t    //     ComponentModel,\n\t    //     function (option, parentModel, ecModel, extraOpt) {\n\t    //         // Set dependentModels, componentIndex, name, id, mainType, subType.\n\t    //         zrUtil.extend(this, extraOpt);\n\n\t    //         this.uid = componentUtil.getUID('componentModel');\n\n\t    //         // this.setReadOnly([\n\t    //         //     'type', 'id', 'uid', 'name', 'mainType', 'subType',\n\t    //         //     'dependentModels', 'componentIndex'\n\t    //         // ]);\n\t    //     }\n\t    // );\n\n\t    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n\t    clazzUtil.enableClassManagement(\n\t        ComponentModel, {registerWhenExtend: true}\n\t    );\n\t    componentUtil.enableSubTypeDefaulter(ComponentModel);\n\n\t    // Add capability of ComponentModel.topologicalTravel.\n\t    componentUtil.enableTopologicalTravel(ComponentModel, getDependencies);\n\n\t    function getDependencies(componentType) {\n\t        var deps = [];\n\t        zrUtil.each(ComponentModel.getClassesByMainType(componentType), function (Clazz) {\n\t            arrayPush.apply(deps, Clazz.prototype.dependencies || []);\n\t        });\n\t        // Ensure main type\n\t        return zrUtil.map(deps, function (type) {\n\t            return clazzUtil.parseClassType(type).main;\n\t        });\n\t    }\n\n\t    zrUtil.mixin(ComponentModel, __webpack_require__(22));\n\n\t    module.exports = ComponentModel;\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var clazz = __webpack_require__(13);\n\n\t    var parseClassType = clazz.parseClassType;\n\n\t    var base = 0;\n\n\t    var componentUtil = {};\n\n\t    var DELIMITER = '_';\n\n\t    /**\n\t     * @public\n\t     * @param {string} type\n\t     * @return {string}\n\t     */\n\t    componentUtil.getUID = function (type) {\n\t        // Considering the case of crossing js context,\n\t        // use Math.random to make id as unique as possible.\n\t        return [(type || ''), base++, Math.random()].join(DELIMITER);\n\t    };\n\n\t    /**\n\t     * @inner\n\t     */\n\t    componentUtil.enableSubTypeDefaulter = function (entity) {\n\n\t        var subTypeDefaulters = {};\n\n\t        entity.registerSubTypeDefaulter = function (componentType, defaulter) {\n\t            componentType = parseClassType(componentType);\n\t            subTypeDefaulters[componentType.main] = defaulter;\n\t        };\n\n\t        entity.determineSubType = function (componentType, option) {\n\t            var type = option.type;\n\t            if (!type) {\n\t                var componentTypeMain = parseClassType(componentType).main;\n\t                if (entity.hasSubTypes(componentType) && subTypeDefaulters[componentTypeMain]) {\n\t                    type = subTypeDefaulters[componentTypeMain](option);\n\t                }\n\t            }\n\t            return type;\n\t        };\n\n\t        return entity;\n\t    };\n\n\t    /**\n\t     * Topological travel on Activity Network (Activity On Vertices).\n\t     * Dependencies is defined in Model.prototype.dependencies, like ['xAxis', 'yAxis'].\n\t     *\n\t     * If 'xAxis' or 'yAxis' is absent in componentTypeList, just ignore it in topology.\n\t     *\n\t     * If there is circle dependencey, Error will be thrown.\n\t     *\n\t     */\n\t    componentUtil.enableTopologicalTravel = function (entity, dependencyGetter) {\n\n\t        /**\n\t         * @public\n\t         * @param {Array.<string>} targetNameList Target Component type list.\n\t         *                                           Can be ['aa', 'bb', 'aa.xx']\n\t         * @param {Array.<string>} fullNameList By which we can build dependency graph.\n\t         * @param {Function} callback Params: componentType, dependencies.\n\t         * @param {Object} context Scope of callback.\n\t         */\n\t        entity.topologicalTravel = function (targetNameList, fullNameList, callback, context) {\n\t            if (!targetNameList.length) {\n\t                return;\n\t            }\n\n\t            var result = makeDepndencyGraph(fullNameList);\n\t            var graph = result.graph;\n\t            var stack = result.noEntryList;\n\n\t            var targetNameSet = {};\n\t            zrUtil.each(targetNameList, function (name) {\n\t                targetNameSet[name] = true;\n\t            });\n\n\t            while (stack.length) {\n\t                var currComponentType = stack.pop();\n\t                var currVertex = graph[currComponentType];\n\t                var isInTargetNameSet = !!targetNameSet[currComponentType];\n\t                if (isInTargetNameSet) {\n\t                    callback.call(context, currComponentType, currVertex.originalDeps.slice());\n\t                    delete targetNameSet[currComponentType];\n\t                }\n\t                zrUtil.each(\n\t                    currVertex.successor,\n\t                    isInTargetNameSet ? removeEdgeAndAdd : removeEdge\n\t                );\n\t            }\n\n\t            zrUtil.each(targetNameSet, function () {\n\t                throw new Error('Circle dependency may exists');\n\t            });\n\n\t            function removeEdge(succComponentType) {\n\t                graph[succComponentType].entryCount--;\n\t                if (graph[succComponentType].entryCount === 0) {\n\t                    stack.push(succComponentType);\n\t                }\n\t            }\n\n\t            // Consider this case: legend depends on series, and we call\n\t            // chart.setOption({series: [...]}), where only series is in option.\n\t            // If we do not have 'removeEdgeAndAdd', legendModel.mergeOption will\n\t            // not be called, but only sereis.mergeOption is called. Thus legend\n\t            // have no chance to update its local record about series (like which\n\t            // name of series is available in legend).\n\t            function removeEdgeAndAdd(succComponentType) {\n\t                targetNameSet[succComponentType] = true;\n\t                removeEdge(succComponentType);\n\t            }\n\t        };\n\n\t        /**\n\t         * DepndencyGraph: {Object}\n\t         * key: conponentType,\n\t         * value: {\n\t         *     successor: [conponentTypes...],\n\t         *     originalDeps: [conponentTypes...],\n\t         *     entryCount: {number}\n\t         * }\n\t         */\n\t        function makeDepndencyGraph(fullNameList) {\n\t            var graph = {};\n\t            var noEntryList = [];\n\n\t            zrUtil.each(fullNameList, function (name) {\n\n\t                var thisItem = createDependencyGraphItem(graph, name);\n\t                var originalDeps = thisItem.originalDeps = dependencyGetter(name);\n\n\t                var availableDeps = getAvailableDependencies(originalDeps, fullNameList);\n\t                thisItem.entryCount = availableDeps.length;\n\t                if (thisItem.entryCount === 0) {\n\t                    noEntryList.push(name);\n\t                }\n\n\t                zrUtil.each(availableDeps, function (dependentName) {\n\t                    if (zrUtil.indexOf(thisItem.predecessor, dependentName) < 0) {\n\t                        thisItem.predecessor.push(dependentName);\n\t                    }\n\t                    var thatItem = createDependencyGraphItem(graph, dependentName);\n\t                    if (zrUtil.indexOf(thatItem.successor, dependentName) < 0) {\n\t                        thatItem.successor.push(name);\n\t                    }\n\t                });\n\t            });\n\n\t            return {graph: graph, noEntryList: noEntryList};\n\t        }\n\n\t        function createDependencyGraphItem(graph, name) {\n\t            if (!graph[name]) {\n\t                graph[name] = {predecessor: [], successor: []};\n\t            }\n\t            return graph[name];\n\t        }\n\n\t        function getAvailableDependencies(originalDeps, fullNameList) {\n\t            var availableDeps = [];\n\t            zrUtil.each(originalDeps, function (dep) {\n\t                zrUtil.indexOf(fullNameList, dep) >= 0 && availableDeps.push(dep);\n\t            });\n\t            return availableDeps;\n\t        }\n\t    };\n\n\t    module.exports = componentUtil;\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t// Layout helpers for each component positioning\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var BoundingRect = __webpack_require__(9);\n\t    var numberUtil = __webpack_require__(7);\n\t    var formatUtil = __webpack_require__(6);\n\t    var parsePercent = numberUtil.parsePercent;\n\t    var each = zrUtil.each;\n\n\t    var layout = {};\n\n\t    var LOCATION_PARAMS = layout.LOCATION_PARAMS = [\n\t        'left', 'right', 'top', 'bottom', 'width', 'height'\n\t    ];\n\n\t    function boxLayout(orient, group, gap, maxWidth, maxHeight) {\n\t        var x = 0;\n\t        var y = 0;\n\t        if (maxWidth == null) {\n\t            maxWidth = Infinity;\n\t        }\n\t        if (maxHeight == null) {\n\t            maxHeight = Infinity;\n\t        }\n\t        var currentLineMaxSize = 0;\n\t        group.eachChild(function (child, idx) {\n\t            var position = child.position;\n\t            var rect = child.getBoundingRect();\n\t            var nextChild = group.childAt(idx + 1);\n\t            var nextChildRect = nextChild && nextChild.getBoundingRect();\n\t            var nextX;\n\t            var nextY;\n\t            if (orient === 'horizontal') {\n\t                var moveX = rect.width + (nextChildRect ? (-nextChildRect.x + rect.x) : 0);\n\t                nextX = x + moveX;\n\t                // Wrap when width exceeds maxWidth or meet a `newline` group\n\t                if (nextX > maxWidth || child.newline) {\n\t                    x = 0;\n\t                    nextX = moveX;\n\t                    y += currentLineMaxSize + gap;\n\t                    currentLineMaxSize = rect.height;\n\t                }\n\t                else {\n\t                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);\n\t                }\n\t            }\n\t            else {\n\t                var moveY = rect.height + (nextChildRect ? (-nextChildRect.y + rect.y) : 0);\n\t                nextY = y + moveY;\n\t                // Wrap when width exceeds maxHeight or meet a `newline` group\n\t                if (nextY > maxHeight || child.newline) {\n\t                    x += currentLineMaxSize + gap;\n\t                    y = 0;\n\t                    nextY = moveY;\n\t                    currentLineMaxSize = rect.width;\n\t                }\n\t                else {\n\t                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);\n\t                }\n\t            }\n\n\t            if (child.newline) {\n\t                return;\n\t            }\n\n\t            position[0] = x;\n\t            position[1] = y;\n\n\t            orient === 'horizontal'\n\t                ? (x = nextX + gap)\n\t                : (y = nextY + gap);\n\t        });\n\t    }\n\n\t    /**\n\t     * VBox or HBox layouting\n\t     * @param {string} orient\n\t     * @param {module:zrender/container/Group} group\n\t     * @param {number} gap\n\t     * @param {number} [width=Infinity]\n\t     * @param {number} [height=Infinity]\n\t     */\n\t    layout.box = boxLayout;\n\n\t    /**\n\t     * VBox layouting\n\t     * @param {module:zrender/container/Group} group\n\t     * @param {number} gap\n\t     * @param {number} [width=Infinity]\n\t     * @param {number} [height=Infinity]\n\t     */\n\t    layout.vbox = zrUtil.curry(boxLayout, 'vertical');\n\n\t    /**\n\t     * HBox layouting\n\t     * @param {module:zrender/container/Group} group\n\t     * @param {number} gap\n\t     * @param {number} [width=Infinity]\n\t     * @param {number} [height=Infinity]\n\t     */\n\t    layout.hbox = zrUtil.curry(boxLayout, 'horizontal');\n\n\t    /**\n\t     * If x or x2 is not specified or 'center' 'left' 'right',\n\t     * the width would be as long as possible.\n\t     * If y or y2 is not specified or 'middle' 'top' 'bottom',\n\t     * the height would be as long as possible.\n\t     *\n\t     * @param {Object} positionInfo\n\t     * @param {number|string} [positionInfo.x]\n\t     * @param {number|string} [positionInfo.y]\n\t     * @param {number|string} [positionInfo.x2]\n\t     * @param {number|string} [positionInfo.y2]\n\t     * @param {Object} containerRect\n\t     * @param {string|number} margin\n\t     * @return {Object} {width, height}\n\t     */\n\t    layout.getAvailableSize = function (positionInfo, containerRect, margin) {\n\t        var containerWidth = containerRect.width;\n\t        var containerHeight = containerRect.height;\n\n\t        var x = parsePercent(positionInfo.x, containerWidth);\n\t        var y = parsePercent(positionInfo.y, containerHeight);\n\t        var x2 = parsePercent(positionInfo.x2, containerWidth);\n\t        var y2 = parsePercent(positionInfo.y2, containerHeight);\n\n\t        (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);\n\t        (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);\n\t        (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);\n\t        (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);\n\n\t        margin = formatUtil.normalizeCssArray(margin || 0);\n\n\t        return {\n\t            width: Math.max(x2 - x - margin[1] - margin[3], 0),\n\t            height: Math.max(y2 - y - margin[0] - margin[2], 0)\n\t        };\n\t    };\n\n\t    /**\n\t     * Parse position info.\n\t     *\n\t     * @param {Object} positionInfo\n\t     * @param {number|string} [positionInfo.left]\n\t     * @param {number|string} [positionInfo.top]\n\t     * @param {number|string} [positionInfo.right]\n\t     * @param {number|string} [positionInfo.bottom]\n\t     * @param {number|string} [positionInfo.width]\n\t     * @param {number|string} [positionInfo.height]\n\t     * @param {number|string} [positionInfo.aspect] Aspect is width / height\n\t     * @param {Object} containerRect\n\t     * @param {string|number} [margin]\n\t     *\n\t     * @return {module:zrender/core/BoundingRect}\n\t     */\n\t    layout.getLayoutRect = function (\n\t        positionInfo, containerRect, margin\n\t    ) {\n\t        margin = formatUtil.normalizeCssArray(margin || 0);\n\n\t        var containerWidth = containerRect.width;\n\t        var containerHeight = containerRect.height;\n\n\t        var left = parsePercent(positionInfo.left, containerWidth);\n\t        var top = parsePercent(positionInfo.top, containerHeight);\n\t        var right = parsePercent(positionInfo.right, containerWidth);\n\t        var bottom = parsePercent(positionInfo.bottom, containerHeight);\n\t        var width = parsePercent(positionInfo.width, containerWidth);\n\t        var height = parsePercent(positionInfo.height, containerHeight);\n\n\t        var verticalMargin = margin[2] + margin[0];\n\t        var horizontalMargin = margin[1] + margin[3];\n\t        var aspect = positionInfo.aspect;\n\n\t        // If width is not specified, calculate width from left and right\n\t        if (isNaN(width)) {\n\t            width = containerWidth - right - horizontalMargin - left;\n\t        }\n\t        if (isNaN(height)) {\n\t            height = containerHeight - bottom - verticalMargin - top;\n\t        }\n\n\t        // If width and height are not given\n\t        // 1. Graph should not exceeds the container\n\t        // 2. Aspect must be keeped\n\t        // 3. Graph should take the space as more as possible\n\t        if (isNaN(width) && isNaN(height)) {\n\t            if (aspect > containerWidth / containerHeight) {\n\t                width = containerWidth * 0.8;\n\t            }\n\t            else {\n\t                height = containerHeight * 0.8;\n\t            }\n\t        }\n\n\t        if (aspect != null) {\n\t            // Calculate width or height with given aspect\n\t            if (isNaN(width)) {\n\t                width = aspect * height;\n\t            }\n\t            if (isNaN(height)) {\n\t                height = width / aspect;\n\t            }\n\t        }\n\n\t        // If left is not specified, calculate left from right and width\n\t        if (isNaN(left)) {\n\t            left = containerWidth - right - width - horizontalMargin;\n\t        }\n\t        if (isNaN(top)) {\n\t            top = containerHeight - bottom - height - verticalMargin;\n\t        }\n\n\t        // Align left and top\n\t        switch (positionInfo.left || positionInfo.right) {\n\t            case 'center':\n\t                left = containerWidth / 2 - width / 2 - margin[3];\n\t                break;\n\t            case 'right':\n\t                left = containerWidth - width - horizontalMargin;\n\t                break;\n\t        }\n\t        switch (positionInfo.top || positionInfo.bottom) {\n\t            case 'middle':\n\t            case 'center':\n\t                top = containerHeight / 2 - height / 2 - margin[0];\n\t                break;\n\t            case 'bottom':\n\t                top = containerHeight - height - verticalMargin;\n\t                break;\n\t        }\n\t        // If something is wrong and left, top, width, height are calculated as NaN\n\t        left = left || 0;\n\t        top = top || 0;\n\t        if (isNaN(width)) {\n\t            // Width may be NaN if only one value is given except width\n\t            width = containerWidth - left - (right || 0);\n\t        }\n\t        if (isNaN(height)) {\n\t            // Height may be NaN if only one value is given except height\n\t            height = containerHeight - top - (bottom || 0);\n\t        }\n\n\t        var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);\n\t        rect.margin = margin;\n\t        return rect;\n\t    };\n\n\n\t    /**\n\t     * Position a zr element in viewport\n\t     *  Group position is specified by either\n\t     *  {left, top}, {right, bottom}\n\t     *  If all properties exists, right and bottom will be igonred.\n\t     *\n\t     * Logic:\n\t     *     1. Scale (against origin point in parent coord)\n\t     *     2. Rotate (against origin point in parent coord)\n\t     *     3. Traslate (with el.position by this method)\n\t     * So this method only fixes the last step 'Traslate', which does not affect\n\t     * scaling and rotating.\n\t     *\n\t     * If be called repeatly with the same input el, the same result will be gotten.\n\t     *\n\t     * @param {module:zrender/Element} el Should have `getBoundingRect` method.\n\t     * @param {Object} positionInfo\n\t     * @param {number|string} [positionInfo.left]\n\t     * @param {number|string} [positionInfo.top]\n\t     * @param {number|string} [positionInfo.right]\n\t     * @param {number|string} [positionInfo.bottom]\n\t     * @param {Object} containerRect\n\t     * @param {string|number} margin\n\t     * @param {Object} [opt]\n\t     * @param {Array.<number>} [opt.hv=[1,1]] Only horizontal or only vertical.\n\t     * @param {Array.<number>} [opt.boundingMode='all']\n\t     *        Specify how to calculate boundingRect when locating.\n\t     *        'all': Position the boundingRect that is transformed and uioned\n\t     *               both itself and its descendants.\n\t     *               This mode simplies confine the elements in the bounding\n\t     *               of their container (e.g., using 'right: 0').\n\t     *        'raw': Position the boundingRect that is not transformed and only itself.\n\t     *               This mode is useful when you want a element can overflow its\n\t     *               container. (Consider a rotated circle needs to be located in a corner.)\n\t     *               In this mode positionInfo.width/height can only be number.\n\t     */\n\t    layout.positionElement = function (el, positionInfo, containerRect, margin, opt) {\n\t        var h = !opt || !opt.hv || opt.hv[0];\n\t        var v = !opt || !opt.hv || opt.hv[1];\n\t        var boundingMode = opt && opt.boundingMode || 'all';\n\n\t        if (!h && !v) {\n\t            return;\n\t        }\n\n\t        var rect;\n\t        if (boundingMode === 'raw') {\n\t            rect = el.type === 'group'\n\t                ? new BoundingRect(0, 0, +positionInfo.width || 0, +positionInfo.height || 0)\n\t                : el.getBoundingRect();\n\t        }\n\t        else {\n\t            rect = el.getBoundingRect();\n\t            if (el.needLocalTransform()) {\n\t                var transform = el.getLocalTransform();\n\t                // Notice: raw rect may be inner object of el,\n\t                // which should not be modified.\n\t                rect = rect.clone();\n\t                rect.applyTransform(transform);\n\t            }\n\t        }\n\n\t        positionInfo = layout.getLayoutRect(\n\t            zrUtil.defaults(\n\t                {width: rect.width, height: rect.height},\n\t                positionInfo\n\t            ),\n\t            containerRect,\n\t            margin\n\t        );\n\n\t        // Because 'tranlate' is the last step in transform\n\t        // (see zrender/core/Transformable#getLocalTransfrom),\n\t        // we can just only modify el.position to get final result.\n\t        var elPos = el.position;\n\t        var dx = h ? positionInfo.x - rect.x : 0;\n\t        var dy = v ? positionInfo.y - rect.y : 0;\n\n\t        el.attr('position', boundingMode === 'raw' ? [dx, dy] : [elPos[0] + dx, elPos[1] + dy]);\n\t    };\n\n\t    /**\n\t     * Consider Case:\n\t     * When defulat option has {left: 0, width: 100}, and we set {right: 0}\n\t     * through setOption or media query, using normal zrUtil.merge will cause\n\t     * {right: 0} does not take effect.\n\t     *\n\t     * @example\n\t     * ComponentModel.extend({\n\t     *     init: function () {\n\t     *         ...\n\t     *         var inputPositionParams = layout.getLayoutParams(option);\n\t     *         this.mergeOption(inputPositionParams);\n\t     *     },\n\t     *     mergeOption: function (newOption) {\n\t     *         newOption && zrUtil.merge(thisOption, newOption, true);\n\t     *         layout.mergeLayoutParam(thisOption, newOption);\n\t     *     }\n\t     * });\n\t     *\n\t     * @param {Object} targetOption\n\t     * @param {Object} newOption\n\t     * @param {Object|string} [opt]\n\t     * @param {boolean} [opt.ignoreSize=false] Some component must has width and height.\n\t     */\n\t    layout.mergeLayoutParam = function (targetOption, newOption, opt) {\n\t        !zrUtil.isObject(opt) && (opt = {});\n\t        var hNames = ['width', 'left', 'right']; // Order by priority.\n\t        var vNames = ['height', 'top', 'bottom']; // Order by priority.\n\t        var hResult = merge(hNames);\n\t        var vResult = merge(vNames);\n\n\t        copy(hNames, targetOption, hResult);\n\t        copy(vNames, targetOption, vResult);\n\n\t        function merge(names) {\n\t            var newParams = {};\n\t            var newValueCount = 0;\n\t            var merged = {};\n\t            var mergedValueCount = 0;\n\t            var enoughParamNumber = opt.ignoreSize ? 1 : 2;\n\n\t            each(names, function (name) {\n\t                merged[name] = targetOption[name];\n\t            });\n\t            each(names, function (name) {\n\t                // Consider case: newOption.width is null, which is\n\t                // set by user for removing width setting.\n\t                hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);\n\t                hasValue(newParams, name) && newValueCount++;\n\t                hasValue(merged, name) && mergedValueCount++;\n\t            });\n\n\t            // Case: newOption: {width: ..., right: ...},\n\t            // or targetOption: {right: ...} and newOption: {width: ...},\n\t            // There is no conflict when merged only has params count\n\t            // little than enoughParamNumber.\n\t            if (mergedValueCount === enoughParamNumber || !newValueCount) {\n\t                return merged;\n\t            }\n\t            // Case: newOption: {width: ..., right: ...},\n\t            // Than we can make sure user only want those two, and ignore\n\t            // all origin params in targetOption.\n\t            else if (newValueCount >= enoughParamNumber) {\n\t                return newParams;\n\t            }\n\t            else {\n\t                // Chose another param from targetOption by priority.\n\t                // When 'ignoreSize', enoughParamNumber is 1 and those will not happen.\n\t                for (var i = 0; i < names.length; i++) {\n\t                    var name = names[i];\n\t                    if (!hasProp(newParams, name) && hasProp(targetOption, name)) {\n\t                        newParams[name] = targetOption[name];\n\t                        break;\n\t                    }\n\t                }\n\t                return newParams;\n\t            }\n\t        }\n\n\t        function hasProp(obj, name) {\n\t            return obj.hasOwnProperty(name);\n\t        }\n\n\t        function hasValue(obj, name) {\n\t            return obj[name] != null && obj[name] !== 'auto';\n\t        }\n\n\t        function copy(names, target, source) {\n\t            each(names, function (name) {\n\t                target[name] = source[name];\n\t            });\n\t        }\n\t    };\n\n\t    /**\n\t     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\n\t     * @param {Object} source\n\t     * @return {Object} Result contains those props.\n\t     */\n\t    layout.getLayoutParams = function (source) {\n\t        return layout.copyLayoutParams({}, source);\n\t    };\n\n\t    /**\n\t     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\n\t     * @param {Object} source\n\t     * @return {Object} Result contains those props.\n\t     */\n\t    layout.copyLayoutParams = function (target, source) {\n\t        source && target && each(LOCATION_PARAMS, function (name) {\n\t            source.hasOwnProperty(name) && (target[name] = source[name]);\n\t        });\n\t        return target;\n\t    };\n\n\t    module.exports = layout;\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports) {\n\n\t\n\n\t    module.exports = {\n\t        getBoxLayoutParams: function () {\n\t            return {\n\t                left: this.get('left'),\n\t                top: this.get('top'),\n\t                right: this.get('right'),\n\t                bottom: this.get('bottom'),\n\t                width: this.get('width'),\n\t                height: this.get('height')\n\t            };\n\t        }\n\t    };\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\t\n\t    var platform = '';\n\t    // Navigator not exists in node\n\t    if (typeof navigator !== 'undefined') {\n\t        platform = navigator.platform || '';\n\t    }\n\t    module.exports = {\n\t        // 全图默认背景\n\t        // backgroundColor: 'rgba(0,0,0,0)',\n\n\t        // https://dribbble.com/shots/1065960-Infographic-Pie-chart-visualization\n\t        // color: ['#5793f3', '#d14a61', '#fd9c35', '#675bba', '#fec42c', '#dd4444', '#d4df5a', '#cd4870'],\n\t        // 浅色\n\t        // color: ['#bcd3bb', '#e88f70', '#edc1a5', '#9dc5c8', '#e1e8c8', '#7b7c68', '#e5b5b5', '#f0b489', '#928ea8', '#bda29a'],\n\t        // color: ['#cc5664', '#9bd6ec', '#ea946e', '#8acaaa', '#f1ec64', '#ee8686', '#a48dc1', '#5da6bc', '#b9dcae'],\n\t        // 深色\n\t        color: ['#c23531','#2f4554', '#61a0a8', '#d48265', '#91c7ae','#749f83',  '#ca8622', '#bda29a','#6e7074', '#546570', '#c4ccd3'],\n\n\t        // 默认需要 Grid 配置项\n\t        // grid: {},\n\t        // 主题，主题\n\t        textStyle: {\n\t            // color: '#000',\n\t            // decoration: 'none',\n\t            // PENDING\n\t            fontFamily: platform.match(/^Win/) ? 'Microsoft YaHei' : 'sans-serif',\n\t            // fontFamily: 'Arial, Verdana, sans-serif',\n\t            fontSize: 12,\n\t            fontStyle: 'normal',\n\t            fontWeight: 'normal'\n\t        },\n\n\t        // http://blogs.adobe.com/webplatform/2014/02/24/using-blend-modes-in-html-canvas/\n\t        // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\n\t        // Default is source-over\n\t        blendMode: null,\n\n\t        animation: true,\n\t        animationDuration: 1000,\n\t        animationDurationUpdate: 300,\n\t        animationEasing: 'exponentialOut',\n\t        animationEasingUpdate: 'cubicOut',\n\n\t        animationThreshold: 2000,\n\t        // Configuration for progressive/incremental rendering\n\t        progressiveThreshold: 3000,\n\t        progressive: 400,\n\n\t        // Threshold of if use single hover layer to optimize.\n\t        // It is recommended that `hoverLayerThreshold` is equivalent to or less than\n\t        // `progressiveThreshold`, otherwise hover will cause restart of progressive,\n\t        // which is unexpected.\n\t        // see example <echarts/test/heatmap-large.html>.\n\t        hoverLayerThreshold: 3000\n\t    };\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var classUtil = __webpack_require__(13);\n\t    var set = classUtil.set;\n\t    var get = classUtil.get;\n\n\t    module.exports = {\n\t        clearColorPalette: function () {\n\t            set(this, 'colorIdx', 0);\n\t            set(this, 'colorNameMap', {});\n\t        },\n\n\t        getColorFromPalette: function (name, scope) {\n\t            scope = scope || this;\n\t            var colorIdx = get(scope, 'colorIdx') || 0;\n\t            var colorNameMap = get(scope, 'colorNameMap') || set(scope, 'colorNameMap', {});\n\t            if (colorNameMap[name]) {\n\t                return colorNameMap[name];\n\t            }\n\t            var colorPalette = this.get('color', true) || [];\n\t            if (!colorPalette.length) {\n\t                return;\n\t            }\n\n\t            var color = colorPalette[colorIdx];\n\t            if (name) {\n\t                colorNameMap[name] = color;\n\t            }\n\t            set(scope, 'colorIdx', (colorIdx + 1) % colorPalette.length);\n\n\t            return color;\n\t        }\n\t    };\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var echartsAPIList = [\n\t        'getDom', 'getZr', 'getWidth', 'getHeight', 'dispatchAction', 'isDisposed',\n\t        'on', 'off', 'getDataURL', 'getConnectedDataURL', 'getModel', 'getOption'\n\t    ];\n\n\t    function ExtensionAPI(chartInstance) {\n\t        zrUtil.each(echartsAPIList, function (name) {\n\t            this[name] = zrUtil.bind(chartInstance[name], chartInstance);\n\t        }, this);\n\t    }\n\n\t    module.exports = ExtensionAPI;\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    /**\n\t     * Interface of Coordinate System Class\n\t     *\n\t     * create:\n\t     *     @param {module:echarts/model/Global} ecModel\n\t     *     @param {module:echarts/ExtensionAPI} api\n\t     *     @return {Object} coordinate system instance\n\t     *\n\t     * update:\n\t     *     @param {module:echarts/model/Global} ecModel\n\t     *     @param {module:echarts/ExtensionAPI} api\n\t     *\n\t     * convertToPixel:\n\t     * convertFromPixel:\n\t     *     These two methods is also responsible for determine whether this\n\t     *     coodinate system is applicable to the given `finder`.\n\t     *     Each coordinate system will be tried, util one returns none\n\t     *     null/undefined value.\n\t     *     @param {module:echarts/model/Global} ecModel\n\t     *     @param {Object} finder\n\t     *     @param {Array|number} value\n\t     *     @return {Array|number} convert result.\n\t     *\n\t     * containPoint:\n\t     *     @param {Array.<number>} point In pixel coordinate system.\n\t     *     @return {boolean}\n\t     */\n\n\t    var coordinateSystemCreators = {};\n\n\t    function CoordinateSystemManager() {\n\n\t        this._coordinateSystems = [];\n\t    }\n\n\t    CoordinateSystemManager.prototype = {\n\n\t        constructor: CoordinateSystemManager,\n\n\t        create: function (ecModel, api) {\n\t            var coordinateSystems = [];\n\t            zrUtil.each(coordinateSystemCreators, function (creater, type) {\n\t                var list = creater.create(ecModel, api);\n\t                coordinateSystems = coordinateSystems.concat(list || []);\n\t            });\n\n\t            this._coordinateSystems = coordinateSystems;\n\t        },\n\n\t        update: function (ecModel, api) {\n\t            zrUtil.each(this._coordinateSystems, function (coordSys) {\n\t                // FIXME MUST have\n\t                coordSys.update && coordSys.update(ecModel, api);\n\t            });\n\t        },\n\n\t        getCoordinateSystems: function () {\n\t            return this._coordinateSystems.slice();\n\t        }\n\t    };\n\n\t    CoordinateSystemManager.register = function (type, coordinateSystemCreator) {\n\t        coordinateSystemCreators[type] = coordinateSystemCreator;\n\t    };\n\n\t    CoordinateSystemManager.get = function (type) {\n\t        return coordinateSystemCreators[type];\n\t    };\n\n\t    module.exports = CoordinateSystemManager;\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * ECharts option manager\n\t *\n\t * @module {echarts/model/OptionManager}\n\t */\n\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var modelUtil = __webpack_require__(5);\n\t    var ComponentModel = __webpack_require__(19);\n\t    var each = zrUtil.each;\n\t    var clone = zrUtil.clone;\n\t    var map = zrUtil.map;\n\t    var merge = zrUtil.merge;\n\n\t    var QUERY_REG = /^(min|max)?(.+)$/;\n\n\t    /**\n\t     * TERM EXPLANATIONS:\n\t     *\n\t     * [option]:\n\t     *\n\t     *     An object that contains definitions of components. For example:\n\t     *     var option = {\n\t     *         title: {...},\n\t     *         legend: {...},\n\t     *         visualMap: {...},\n\t     *         series: [\n\t     *             {data: [...]},\n\t     *             {data: [...]},\n\t     *             ...\n\t     *         ]\n\t     *     };\n\t     *\n\t     * [rawOption]:\n\t     *\n\t     *     An object input to echarts.setOption. 'rawOption' may be an\n\t     *     'option', or may be an object contains multi-options. For example:\n\t     *     var option = {\n\t     *         baseOption: {\n\t     *             title: {...},\n\t     *             legend: {...},\n\t     *             series: [\n\t     *                 {data: [...]},\n\t     *                 {data: [...]},\n\t     *                 ...\n\t     *             ]\n\t     *         },\n\t     *         timeline: {...},\n\t     *         options: [\n\t     *             {title: {...}, series: {data: [...]}},\n\t     *             {title: {...}, series: {data: [...]}},\n\t     *             ...\n\t     *         ],\n\t     *         media: [\n\t     *             {\n\t     *                 query: {maxWidth: 320},\n\t     *                 option: {series: {x: 20}, visualMap: {show: false}}\n\t     *             },\n\t     *             {\n\t     *                 query: {minWidth: 320, maxWidth: 720},\n\t     *                 option: {series: {x: 500}, visualMap: {show: true}}\n\t     *             },\n\t     *             {\n\t     *                 option: {series: {x: 1200}, visualMap: {show: true}}\n\t     *             }\n\t     *         ]\n\t     *     };\n\t     *\n\t     * @alias module:echarts/model/OptionManager\n\t     * @param {module:echarts/ExtensionAPI} api\n\t     */\n\t    function OptionManager(api) {\n\n\t        /**\n\t         * @private\n\t         * @type {module:echarts/ExtensionAPI}\n\t         */\n\t        this._api = api;\n\n\t        /**\n\t         * @private\n\t         * @type {Array.<number>}\n\t         */\n\t        this._timelineOptions = [];\n\n\t        /**\n\t         * @private\n\t         * @type {Array.<Object>}\n\t         */\n\t        this._mediaList = [];\n\n\t        /**\n\t         * @private\n\t         * @type {Object}\n\t         */\n\t        this._mediaDefault;\n\n\t        /**\n\t         * -1, means default.\n\t         * empty means no media.\n\t         * @private\n\t         * @type {Array.<number>}\n\t         */\n\t        this._currentMediaIndices = [];\n\n\t        /**\n\t         * @private\n\t         * @type {Object}\n\t         */\n\t        this._optionBackup;\n\n\t        /**\n\t         * @private\n\t         * @type {Object}\n\t         */\n\t        this._newBaseOption;\n\t    }\n\n\t    // timeline.notMerge is not supported in ec3. Firstly there is rearly\n\t    // case that notMerge is needed. Secondly supporting 'notMerge' requires\n\t    // rawOption cloned and backuped when timeline changed, which does no\n\t    // good to performance. What's more, that both timeline and setOption\n\t    // method supply 'notMerge' brings complex and some problems.\n\t    // Consider this case:\n\t    // (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);\n\t    // (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);\n\n\t    OptionManager.prototype = {\n\n\t        constructor: OptionManager,\n\n\t        /**\n\t         * @public\n\t         * @param {Object} rawOption Raw option.\n\t         * @param {module:echarts/model/Global} ecModel\n\t         * @param {Array.<Function>} optionPreprocessorFuncs\n\t         * @return {Object} Init option\n\t         */\n\t        setOption: function (rawOption, optionPreprocessorFuncs) {\n\t            rawOption = clone(rawOption, true);\n\n\t            // FIXME\n\t            // 如果 timeline options 或者 media 中设置了某个属性，而baseOption中没有设置，则进行警告。\n\n\t            var oldOptionBackup = this._optionBackup;\n\t            var newParsedOption = parseRawOption.call(\n\t                this, rawOption, optionPreprocessorFuncs, !oldOptionBackup\n\t            );\n\t            this._newBaseOption = newParsedOption.baseOption;\n\n\t            // For setOption at second time (using merge mode);\n\t            if (oldOptionBackup) {\n\t                // Only baseOption can be merged.\n\t                mergeOption(oldOptionBackup.baseOption, newParsedOption.baseOption);\n\n\t                // For simplicity, timeline options and media options do not support merge,\n\t                // that is, if you `setOption` twice and both has timeline options, the latter\n\t                // timeline opitons will not be merged to the formers, but just substitude them.\n\t                if (newParsedOption.timelineOptions.length) {\n\t                    oldOptionBackup.timelineOptions = newParsedOption.timelineOptions;\n\t                }\n\t                if (newParsedOption.mediaList.length) {\n\t                    oldOptionBackup.mediaList = newParsedOption.mediaList;\n\t                }\n\t                if (newParsedOption.mediaDefault) {\n\t                    oldOptionBackup.mediaDefault = newParsedOption.mediaDefault;\n\t                }\n\t            }\n\t            else {\n\t                this._optionBackup = newParsedOption;\n\t            }\n\t        },\n\n\t        /**\n\t         * @param {boolean} isRecreate\n\t         * @return {Object}\n\t         */\n\t        mountOption: function (isRecreate) {\n\t            var optionBackup = this._optionBackup;\n\n\t            // TODO\n\t            // 如果没有reset功能则不clone。\n\n\t            this._timelineOptions = map(optionBackup.timelineOptions, clone);\n\t            this._mediaList = map(optionBackup.mediaList, clone);\n\t            this._mediaDefault = clone(optionBackup.mediaDefault);\n\t            this._currentMediaIndices = [];\n\n\t            return clone(isRecreate\n\t                // this._optionBackup.baseOption, which is created at the first `setOption`\n\t                // called, and is merged into every new option by inner method `mergeOption`\n\t                // each time `setOption` called, can be only used in `isRecreate`, because\n\t                // its reliability is under suspicion. In other cases option merge is\n\t                // performed by `model.mergeOption`.\n\t                ? optionBackup.baseOption : this._newBaseOption\n\t            );\n\t        },\n\n\t        /**\n\t         * @param {module:echarts/model/Global} ecModel\n\t         * @return {Object}\n\t         */\n\t        getTimelineOption: function (ecModel) {\n\t            var option;\n\t            var timelineOptions = this._timelineOptions;\n\n\t            if (timelineOptions.length) {\n\t                // getTimelineOption can only be called after ecModel inited,\n\t                // so we can get currentIndex from timelineModel.\n\t                var timelineModel = ecModel.getComponent('timeline');\n\t                if (timelineModel) {\n\t                    option = clone(\n\t                        timelineOptions[timelineModel.getCurrentIndex()],\n\t                        true\n\t                    );\n\t                }\n\t            }\n\n\t            return option;\n\t        },\n\n\t        /**\n\t         * @param {module:echarts/model/Global} ecModel\n\t         * @return {Array.<Object>}\n\t         */\n\t        getMediaOption: function (ecModel) {\n\t            var ecWidth = this._api.getWidth();\n\t            var ecHeight = this._api.getHeight();\n\t            var mediaList = this._mediaList;\n\t            var mediaDefault = this._mediaDefault;\n\t            var indices = [];\n\t            var result = [];\n\n\t            // No media defined.\n\t            if (!mediaList.length && !mediaDefault) {\n\t                return result;\n\t            }\n\n\t            // Multi media may be applied, the latter defined media has higher priority.\n\t            for (var i = 0, len = mediaList.length; i < len; i++) {\n\t                if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {\n\t                    indices.push(i);\n\t                }\n\t            }\n\n\t            // FIXME\n\t            // 是否mediaDefault应该强制用户设置，否则可能修改不能回归。\n\t            if (!indices.length && mediaDefault) {\n\t                indices = [-1];\n\t            }\n\n\t            if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {\n\t                result = map(indices, function (index) {\n\t                    return clone(\n\t                        index === -1 ? mediaDefault.option : mediaList[index].option\n\t                    );\n\t                });\n\t            }\n\t            // Otherwise return nothing.\n\n\t            this._currentMediaIndices = indices;\n\n\t            return result;\n\t        }\n\t    };\n\n\t    function parseRawOption(rawOption, optionPreprocessorFuncs, isNew) {\n\t        var timelineOptions = [];\n\t        var mediaList = [];\n\t        var mediaDefault;\n\t        var baseOption;\n\n\t        // Compatible with ec2.\n\t        var timelineOpt = rawOption.timeline;\n\n\t        if (rawOption.baseOption) {\n\t            baseOption = rawOption.baseOption;\n\t        }\n\n\t        // For timeline\n\t        if (timelineOpt || rawOption.options) {\n\t            baseOption = baseOption || {};\n\t            timelineOptions = (rawOption.options || []).slice();\n\t        }\n\n\t        // For media query\n\t        if (rawOption.media) {\n\t            baseOption = baseOption || {};\n\t            var media = rawOption.media;\n\t            each(media, function (singleMedia) {\n\t                if (singleMedia && singleMedia.option) {\n\t                    if (singleMedia.query) {\n\t                        mediaList.push(singleMedia);\n\t                    }\n\t                    else if (!mediaDefault) {\n\t                        // Use the first media default.\n\t                        mediaDefault = singleMedia;\n\t                    }\n\t                }\n\t            });\n\t        }\n\n\t        // For normal option\n\t        if (!baseOption) {\n\t            baseOption = rawOption;\n\t        }\n\n\t        // Set timelineOpt to baseOption in ec3,\n\t        // which is convenient for merge option.\n\t        if (!baseOption.timeline) {\n\t            baseOption.timeline = timelineOpt;\n\t        }\n\n\t        // Preprocess.\n\t        each([baseOption].concat(timelineOptions)\n\t            .concat(zrUtil.map(mediaList, function (media) {\n\t                return media.option;\n\t            })),\n\t            function (option) {\n\t                each(optionPreprocessorFuncs, function (preProcess) {\n\t                    preProcess(option, isNew);\n\t                });\n\t            }\n\t        );\n\n\t        return {\n\t            baseOption: baseOption,\n\t            timelineOptions: timelineOptions,\n\t            mediaDefault: mediaDefault,\n\t            mediaList: mediaList\n\t        };\n\t    }\n\n\t    /**\n\t     * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>\n\t     * Support: width, height, aspectRatio\n\t     * Can use max or min as prefix.\n\t     */\n\t    function applyMediaQuery(query, ecWidth, ecHeight) {\n\t        var realMap = {\n\t            width: ecWidth,\n\t            height: ecHeight,\n\t            aspectratio: ecWidth / ecHeight // lowser case for convenientce.\n\t        };\n\n\t        var applicatable = true;\n\n\t        zrUtil.each(query, function (value, attr) {\n\t            var matched = attr.match(QUERY_REG);\n\n\t            if (!matched || !matched[1] || !matched[2]) {\n\t                return;\n\t            }\n\n\t            var operator = matched[1];\n\t            var realAttr = matched[2].toLowerCase();\n\n\t            if (!compare(realMap[realAttr], value, operator)) {\n\t                applicatable = false;\n\t            }\n\t        });\n\n\t        return applicatable;\n\t    }\n\n\t    function compare(real, expect, operator) {\n\t        if (operator === 'min') {\n\t            return real >= expect;\n\t        }\n\t        else if (operator === 'max') {\n\t            return real <= expect;\n\t        }\n\t        else { // Equals\n\t            return real === expect;\n\t        }\n\t    }\n\n\t    function indicesEquals(indices1, indices2) {\n\t        // indices is always order by asc and has only finite number.\n\t        return indices1.join(',') === indices2.join(',');\n\t    }\n\n\t    /**\n\t     * Consider case:\n\t     * `chart.setOption(opt1);`\n\t     * Then user do some interaction like dataZoom, dataView changing.\n\t     * `chart.setOption(opt2);`\n\t     * Then user press 'reset button' in toolbox.\n\t     *\n\t     * After doing that all of the interaction effects should be reset, the\n\t     * chart should be the same as the result of invoke\n\t     * `chart.setOption(opt1); chart.setOption(opt2);`.\n\t     *\n\t     * Although it is not able ensure that\n\t     * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to\n\t     * `chart.setOption(merge(opt1, opt2));` exactly,\n\t     * this might be the only simple way to implement that feature.\n\t     *\n\t     * MEMO: We've considered some other approaches:\n\t     * 1. Each model handle its self restoration but not uniform treatment.\n\t     *     (Too complex in logic and error-prone)\n\t     * 2. Use a shadow ecModel. (Performace expensive)\n\t     */\n\t    function mergeOption(oldOption, newOption) {\n\t        newOption = newOption || {};\n\n\t        each(newOption, function (newCptOpt, mainType) {\n\t            if (newCptOpt == null) {\n\t                return;\n\t            }\n\n\t            var oldCptOpt = oldOption[mainType];\n\n\t            if (!ComponentModel.hasClass(mainType)) {\n\t                oldOption[mainType] = merge(oldCptOpt, newCptOpt, true);\n\t            }\n\t            else {\n\t                newCptOpt = modelUtil.normalizeToArray(newCptOpt);\n\t                oldCptOpt = modelUtil.normalizeToArray(oldCptOpt);\n\n\t                var mapResult = modelUtil.mappingToExists(oldCptOpt, newCptOpt);\n\n\t                oldOption[mainType] = map(mapResult, function (item) {\n\t                    return (item.option && item.exist)\n\t                        ? merge(item.exist, item.option, true)\n\t                        : (item.exist || item.option);\n\t                });\n\t            }\n\t        });\n\t    }\n\n\t    module.exports = OptionManager;\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var formatUtil = __webpack_require__(6);\n\t    var classUtil = __webpack_require__(13);\n\t    var modelUtil = __webpack_require__(5);\n\t    var ComponentModel = __webpack_require__(19);\n\t    var colorPaletteMixin = __webpack_require__(24);\n\t    var env = __webpack_require__(2);\n\t    var layout = __webpack_require__(21);\n\n\t    var set = classUtil.set;\n\t    var get = classUtil.get;\n\t    var encodeHTML = formatUtil.encodeHTML;\n\t    var addCommas = formatUtil.addCommas;\n\n\t    var SeriesModel = ComponentModel.extend({\n\n\t        type: 'series.__base__',\n\n\t        /**\n\t         * @readOnly\n\t         */\n\t        seriesIndex: 0,\n\n\t        // coodinateSystem will be injected in the echarts/CoordinateSystem\n\t        coordinateSystem: null,\n\n\t        /**\n\t         * @type {Object}\n\t         * @protected\n\t         */\n\t        defaultOption: null,\n\n\t        /**\n\t         * Data provided for legend\n\t         * @type {Function}\n\t         */\n\t        // PENDING\n\t        legendDataProvider: null,\n\n\t        /**\n\t         * Access path of color for visual\n\t         */\n\t        visualColorAccessPath: 'itemStyle.normal.color',\n\n\t        /**\n\t         * Support merge layout params.\n\t         * Only support 'box' now (left/right/top/bottom/width/height).\n\t         * @type {string|Object} Object can be {ignoreSize: true}\n\t         * @readOnly\n\t         */\n\t        layoutMode: null,\n\n\t        init: function (option, parentModel, ecModel, extraOpt) {\n\n\t            /**\n\t             * @type {number}\n\t             * @readOnly\n\t             */\n\t            this.seriesIndex = this.componentIndex;\n\n\t            this.mergeDefaultAndTheme(option, ecModel);\n\n\t            /**\n\t             * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}\n\t             * @private\n\t             */\n\t            set(this, 'dataBeforeProcessed', this.getInitialData(option, ecModel));\n\n\t            // If we reverse the order (make data firstly, and then make\n\t            // dataBeforeProcessed by cloneShallow), cloneShallow will\n\t            // cause data.graph.data !== data when using\n\t            // module:echarts/data/Graph or module:echarts/data/Tree.\n\t            // See module:echarts/data/helper/linkList\n\t            this.restoreData();\n\t        },\n\n\t        /**\n\t         * Util for merge default and theme to option\n\t         * @param  {Object} option\n\t         * @param  {module:echarts/model/Global} ecModel\n\t         */\n\t        mergeDefaultAndTheme: function (option, ecModel) {\n\t            var layoutMode = this.layoutMode;\n\t            var inputPositionParams = layoutMode\n\t                ? layout.getLayoutParams(option) : {};\n\n\t            zrUtil.merge(\n\t                option,\n\t                ecModel.getTheme().get(this.subType)\n\t            );\n\t            zrUtil.merge(option, this.getDefaultOption());\n\n\t            // Default label emphasis `position` and `show`\n\t            // FIXME Set label in mergeOption\n\t            modelUtil.defaultEmphasis(option.label, modelUtil.LABEL_OPTIONS);\n\n\t            this.fillDataTextStyle(option.data);\n\n\t            if (layoutMode) {\n\t                layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n\t            }\n\t        },\n\n\t        mergeOption: function (newSeriesOption, ecModel) {\n\t            newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);\n\t            this.fillDataTextStyle(newSeriesOption.data);\n\n\t            var layoutMode = this.layoutMode;\n\t            if (layoutMode) {\n\t                layout.mergeLayoutParam(this.option, newSeriesOption, layoutMode);\n\t            }\n\n\t            var data = this.getInitialData(newSeriesOption, ecModel);\n\t            // TODO Merge data?\n\t            if (data) {\n\t                set(this, 'data', data);\n\t                set(this, 'dataBeforeProcessed', data.cloneShallow());\n\t            }\n\t        },\n\n\t        fillDataTextStyle: function (data) {\n\t            // Default data label emphasis `position` and `show`\n\t            // FIXME Tree structure data ?\n\t            // FIXME Performance ?\n\t            if (data) {\n\t                for (var i = 0; i < data.length; i++) {\n\t                    if (data[i] && data[i].label) {\n\t                        modelUtil.defaultEmphasis(data[i].label, modelUtil.LABEL_OPTIONS);\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        /**\n\t         * Init a data structure from data related option in series\n\t         * Must be overwritten\n\t         */\n\t        getInitialData: function () {},\n\n\t        /**\n\t         * @param {string} [dataType]\n\t         * @return {module:echarts/data/List}\n\t         */\n\t        getData: function (dataType) {\n\t            var data = get(this, 'data');\n\t            return dataType == null ? data : data.getLinkedData(dataType);\n\t        },\n\n\t        /**\n\t         * @param {module:echarts/data/List} data\n\t         */\n\t        setData: function (data) {\n\t            set(this, 'data', data);\n\t        },\n\n\t        /**\n\t         * Get data before processed\n\t         * @return {module:echarts/data/List}\n\t         */\n\t        getRawData: function () {\n\t            return get(this, 'dataBeforeProcessed');\n\t        },\n\n\t        /**\n\t         * Coord dimension to data dimension.\n\t         *\n\t         * By default the result is the same as dimensions of series data.\n\t         * But in some series data dimensions are different from coord dimensions (i.e.\n\t         * candlestick and boxplot). Override this method to handle those cases.\n\t         *\n\t         * Coord dimension to data dimension can be one-to-many\n\t         *\n\t         * @param {string} coordDim\n\t         * @return {Array.<string>} dimensions on the axis.\n\t         */\n\t        coordDimToDataDim: function (coordDim) {\n\t            return [coordDim];\n\t        },\n\n\t        /**\n\t         * Convert data dimension to coord dimension.\n\t         *\n\t         * @param {string|number} dataDim\n\t         * @return {string}\n\t         */\n\t        dataDimToCoordDim: function (dataDim) {\n\t            return dataDim;\n\t        },\n\n\t        /**\n\t         * Get base axis if has coordinate system and has axis.\n\t         * By default use coordSys.getBaseAxis();\n\t         * Can be overrided for some chart.\n\t         * @return {type} description\n\t         */\n\t        getBaseAxis: function () {\n\t            var coordSys = this.coordinateSystem;\n\t            return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();\n\t        },\n\n\t        // FIXME\n\t        /**\n\t         * Default tooltip formatter\n\t         *\n\t         * @param {number} dataIndex\n\t         * @param {boolean} [multipleSeries=false]\n\t         * @param {number} [dataType]\n\t         */\n\t        formatTooltip: function (dataIndex, multipleSeries, dataType) {\n\t            function formatArrayValue(value) {\n\t                var result = [];\n\n\t                zrUtil.each(value, function (val, idx) {\n\t                    var dimInfo = data.getDimensionInfo(idx);\n\t                    var dimType = dimInfo && dimInfo.type;\n\t                    var valStr;\n\n\t                    if (dimType === 'ordinal') {\n\t                        valStr = val + '';\n\t                    }\n\t                    else if (dimType === 'time') {\n\t                        valStr = multipleSeries ? '' : formatUtil.formatTime('yyyy/MM/dd hh:mm:ss', val);\n\t                    }\n\t                    else {\n\t                        valStr = addCommas(val);\n\t                    }\n\n\t                    valStr && result.push(valStr);\n\t                });\n\n\t                return result.join(', ');\n\t            }\n\n\t            var data = get(this, 'data');\n\n\t            var value = this.getRawValue(dataIndex);\n\t            var formattedValue = encodeHTML(\n\t                zrUtil.isArray(value) ? formatArrayValue(value) : addCommas(value)\n\t            );\n\t            var name = data.getName(dataIndex);\n\n\t            var color = data.getItemVisual(dataIndex, 'color');\n\t            if (zrUtil.isObject(color) && color.colorStops) {\n\t                color = (color.colorStops[0] || {}).color;\n\t            }\n\t            color = color || 'transparent';\n\n\t            var colorEl = '<span style=\"display:inline-block;margin-right:5px;'\n\t                + 'border-radius:10px;width:9px;height:9px;background-color:' + encodeHTML(color) + '\"></span>';\n\n\t            var seriesName = this.name;\n\t            // FIXME\n\t            if (seriesName === '\\0-') {\n\t                // Not show '-'\n\t                seriesName = '';\n\t            }\n\t            return !multipleSeries\n\t                ? ((seriesName && encodeHTML(seriesName) + '<br />') + colorEl\n\t                    + (name\n\t                        ? encodeHTML(name) + ' : ' + formattedValue\n\t                        : formattedValue\n\t                    )\n\t                  )\n\t                : (colorEl + encodeHTML(this.name) + ' : ' + formattedValue);\n\t        },\n\n\t        /**\n\t         * @return {boolean}\n\t         */\n\t        isAnimationEnabled: function () {\n\t            if (env.node) {\n\t                return false;\n\t            }\n\n\t            var animationEnabled = this.getShallow('animation');\n\t            if (animationEnabled) {\n\t                if (this.getData().count() > this.getShallow('animationThreshold')) {\n\t                    animationEnabled = false;\n\t                }\n\t            }\n\t            return animationEnabled;\n\t        },\n\n\t        restoreData: function () {\n\t            set(this, 'data', get(this, 'dataBeforeProcessed').cloneShallow());\n\t        },\n\n\t        getColorFromPalette: function (name, scope) {\n\t            var ecModel = this.ecModel;\n\t            // PENDING\n\t            var color = colorPaletteMixin.getColorFromPalette.call(this, name, scope);\n\t            if (!color) {\n\t                color = ecModel.getColorFromPalette(name, scope);\n\t            }\n\t            return color;\n\t        },\n\n\t        /**\n\t         * Get data indices for show tooltip content. See tooltip.\n\t         * @abstract\n\t         * @param {Array.<string>|string} dim\n\t         * @param {Array.<number>} value\n\t         * @param {module:echarts/coord/single/SingleAxis} baseAxis\n\t         * @return {Array.<number>} data indices.\n\t         */\n\t        getAxisTooltipDataIndex: null,\n\n\t        /**\n\t         * See tooltip.\n\t         * @abstract\n\t         * @param {number} dataIndex\n\t         * @return {Array.<number>} Point of tooltip. null/undefined can be returned.\n\t         */\n\t        getTooltipPosition: null\n\t    });\n\n\t    zrUtil.mixin(SeriesModel, modelUtil.dataFormatMixin);\n\t    zrUtil.mixin(SeriesModel, colorPaletteMixin);\n\n\t    module.exports = SeriesModel;\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var Group = __webpack_require__(30);\n\t    var componentUtil = __webpack_require__(20);\n\t    var clazzUtil = __webpack_require__(13);\n\n\t    var Component = function () {\n\t        /**\n\t         * @type {module:zrender/container/Group}\n\t         * @readOnly\n\t         */\n\t        this.group = new Group();\n\n\t        /**\n\t         * @type {string}\n\t         * @readOnly\n\t         */\n\t        this.uid = componentUtil.getUID('viewComponent');\n\t    };\n\n\t    Component.prototype = {\n\n\t        constructor: Component,\n\n\t        init: function (ecModel, api) {},\n\n\t        render: function (componentModel, ecModel, api, payload) {},\n\n\t        dispose: function () {}\n\n\t    };\n\n\t    var componentProto = Component.prototype;\n\t    componentProto.updateView\n\t        = componentProto.updateLayout\n\t        = componentProto.updateVisual\n\t        = function (seriesModel, ecModel, api, payload) {\n\t            // Do nothing;\n\t        };\n\t    // Enable Component.extend.\n\t    clazzUtil.enableClassExtend(Component);\n\n\t    // Enable capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n\t    clazzUtil.enableClassManagement(Component, {registerWhenExtend: true});\n\n\t    module.exports = Component;\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Group是一个容器，可以插入子节点，Group的变换也会被应用到子节点上\n\t * @module zrender/graphic/Group\n\t * @example\n\t *     var Group = require('zrender/lib/container/Group');\n\t *     var Circle = require('zrender/lib/graphic/shape/Circle');\n\t *     var g = new Group();\n\t *     g.position[0] = 100;\n\t *     g.position[1] = 100;\n\t *     g.add(new Circle({\n\t *         style: {\n\t *             x: 100,\n\t *             y: 100,\n\t *             r: 20,\n\t *         }\n\t *     }));\n\t *     zr.add(g);\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var Element = __webpack_require__(31);\n\t    var BoundingRect = __webpack_require__(9);\n\n\t    /**\n\t     * @alias module:zrender/graphic/Group\n\t     * @constructor\n\t     * @extends module:zrender/mixin/Transformable\n\t     * @extends module:zrender/mixin/Eventful\n\t     */\n\t    var Group = function (opts) {\n\n\t        opts = opts || {};\n\n\t        Element.call(this, opts);\n\n\t        for (var key in opts) {\n\t            if (opts.hasOwnProperty(key)) {\n\t                this[key] = opts[key];\n\t            }\n\t        }\n\n\t        this._children = [];\n\n\t        this.__storage = null;\n\n\t        this.__dirty = true;\n\t    };\n\n\t    Group.prototype = {\n\n\t        constructor: Group,\n\n\t        isGroup: true,\n\n\t        /**\n\t         * @type {string}\n\t         */\n\t        type: 'group',\n\n\t        /**\n\t         * 所有子孙元素是否响应鼠标事件\n\t         * @name module:/zrender/container/Group#silent\n\t         * @type {boolean}\n\t         * @default false\n\t         */\n\t        silent: false,\n\n\t        /**\n\t         * @return {Array.<module:zrender/Element>}\n\t         */\n\t        children: function () {\n\t            return this._children.slice();\n\t        },\n\n\t        /**\n\t         * 获取指定 index 的儿子节点\n\t         * @param  {number} idx\n\t         * @return {module:zrender/Element}\n\t         */\n\t        childAt: function (idx) {\n\t            return this._children[idx];\n\t        },\n\n\t        /**\n\t         * 获取指定名字的儿子节点\n\t         * @param  {string} name\n\t         * @return {module:zrender/Element}\n\t         */\n\t        childOfName: function (name) {\n\t            var children = this._children;\n\t            for (var i = 0; i < children.length; i++) {\n\t                if (children[i].name === name) {\n\t                    return children[i];\n\t                }\n\t             }\n\t        },\n\n\t        /**\n\t         * @return {number}\n\t         */\n\t        childCount: function () {\n\t            return this._children.length;\n\t        },\n\n\t        /**\n\t         * 添加子节点到最后\n\t         * @param {module:zrender/Element} child\n\t         */\n\t        add: function (child) {\n\t            if (child && child !== this && child.parent !== this) {\n\n\t                this._children.push(child);\n\n\t                this._doAdd(child);\n\t            }\n\n\t            return this;\n\t        },\n\n\t        /**\n\t         * 添加子节点在 nextSibling 之前\n\t         * @param {module:zrender/Element} child\n\t         * @param {module:zrender/Element} nextSibling\n\t         */\n\t        addBefore: function (child, nextSibling) {\n\t            if (child && child !== this && child.parent !== this\n\t                && nextSibling && nextSibling.parent === this) {\n\n\t                var children = this._children;\n\t                var idx = children.indexOf(nextSibling);\n\n\t                if (idx >= 0) {\n\t                    children.splice(idx, 0, child);\n\t                    this._doAdd(child);\n\t                }\n\t            }\n\n\t            return this;\n\t        },\n\n\t        _doAdd: function (child) {\n\t            if (child.parent) {\n\t                child.parent.remove(child);\n\t            }\n\n\t            child.parent = this;\n\n\t            var storage = this.__storage;\n\t            var zr = this.__zr;\n\t            if (storage && storage !== child.__storage) {\n\n\t                storage.addToMap(child);\n\n\t                if (child instanceof Group) {\n\t                    child.addChildrenToStorage(storage);\n\t                }\n\t            }\n\n\t            zr && zr.refresh();\n\t        },\n\n\t        /**\n\t         * 移除子节点\n\t         * @param {module:zrender/Element} child\n\t         */\n\t        remove: function (child) {\n\t            var zr = this.__zr;\n\t            var storage = this.__storage;\n\t            var children = this._children;\n\n\t            var idx = zrUtil.indexOf(children, child);\n\t            if (idx < 0) {\n\t                return this;\n\t            }\n\t            children.splice(idx, 1);\n\n\t            child.parent = null;\n\n\t            if (storage) {\n\n\t                storage.delFromMap(child.id);\n\n\t                if (child instanceof Group) {\n\t                    child.delChildrenFromStorage(storage);\n\t                }\n\t            }\n\n\t            zr && zr.refresh();\n\n\t            return this;\n\t        },\n\n\t        /**\n\t         * 移除所有子节点\n\t         */\n\t        removeAll: function () {\n\t            var children = this._children;\n\t            var storage = this.__storage;\n\t            var child;\n\t            var i;\n\t            for (i = 0; i < children.length; i++) {\n\t                child = children[i];\n\t                if (storage) {\n\t                    storage.delFromMap(child.id);\n\t                    if (child instanceof Group) {\n\t                        child.delChildrenFromStorage(storage);\n\t                    }\n\t                }\n\t                child.parent = null;\n\t            }\n\t            children.length = 0;\n\n\t            return this;\n\t        },\n\n\t        /**\n\t         * 遍历所有子节点\n\t         * @param  {Function} cb\n\t         * @param  {}   context\n\t         */\n\t        eachChild: function (cb, context) {\n\t            var children = this._children;\n\t            for (var i = 0; i < children.length; i++) {\n\t                var child = children[i];\n\t                cb.call(context, child, i);\n\t            }\n\t            return this;\n\t        },\n\n\t        /**\n\t         * 深度优先遍历所有子孙节点\n\t         * @param  {Function} cb\n\t         * @param  {}   context\n\t         */\n\t        traverse: function (cb, context) {\n\t            for (var i = 0; i < this._children.length; i++) {\n\t                var child = this._children[i];\n\t                cb.call(context, child);\n\n\t                if (child.type === 'group') {\n\t                    child.traverse(cb, context);\n\t                }\n\t            }\n\t            return this;\n\t        },\n\n\t        addChildrenToStorage: function (storage) {\n\t            for (var i = 0; i < this._children.length; i++) {\n\t                var child = this._children[i];\n\t                storage.addToMap(child);\n\t                if (child instanceof Group) {\n\t                    child.addChildrenToStorage(storage);\n\t                }\n\t            }\n\t        },\n\n\t        delChildrenFromStorage: function (storage) {\n\t            for (var i = 0; i < this._children.length; i++) {\n\t                var child = this._children[i];\n\t                storage.delFromMap(child.id);\n\t                if (child instanceof Group) {\n\t                    child.delChildrenFromStorage(storage);\n\t                }\n\t            }\n\t        },\n\n\t        dirty: function () {\n\t            this.__dirty = true;\n\t            this.__zr && this.__zr.refresh();\n\t            return this;\n\t        },\n\n\t        /**\n\t         * @return {module:zrender/core/BoundingRect}\n\t         */\n\t        getBoundingRect: function (includeChildren) {\n\t            // TODO Caching\n\t            var rect = null;\n\t            var tmpRect = new BoundingRect(0, 0, 0, 0);\n\t            var children = includeChildren || this._children;\n\t            var tmpMat = [];\n\n\t            for (var i = 0; i < children.length; i++) {\n\t                var child = children[i];\n\t                if (child.ignore || child.invisible) {\n\t                    continue;\n\t                }\n\n\t                var childRect = child.getBoundingRect();\n\t                var transform = child.getLocalTransform(tmpMat);\n\t                // TODO\n\t                // The boundingRect cacluated by transforming original\n\t                // rect may be bigger than the actual bundingRect when rotation\n\t                // is used. (Consider a circle rotated aginst its center, where\n\t                // the actual boundingRect should be the same as that not be\n\t                // rotated.) But we can not find better approach to calculate\n\t                // actual boundingRect yet, considering performance.\n\t                if (transform) {\n\t                    tmpRect.copy(childRect);\n\t                    tmpRect.applyTransform(transform);\n\t                    rect = rect || tmpRect.clone();\n\t                    rect.union(tmpRect);\n\t                }\n\t                else {\n\t                    rect = rect || childRect.clone();\n\t                    rect.union(childRect);\n\t                }\n\t            }\n\t            return rect || tmpRect;\n\t        }\n\t    };\n\n\t    zrUtil.inherits(Group, Element);\n\n\t    module.exports = Group;\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * @module zrender/Element\n\t */\n\n\n\t    var guid = __webpack_require__(32);\n\t    var Eventful = __webpack_require__(33);\n\t    var Transformable = __webpack_require__(34);\n\t    var Animatable = __webpack_require__(35);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    /**\n\t     * @alias module:zrender/Element\n\t     * @constructor\n\t     * @extends {module:zrender/mixin/Animatable}\n\t     * @extends {module:zrender/mixin/Transformable}\n\t     * @extends {module:zrender/mixin/Eventful}\n\t     */\n\t    var Element = function (opts) {\n\n\t        Transformable.call(this, opts);\n\t        Eventful.call(this, opts);\n\t        Animatable.call(this, opts);\n\n\t        /**\n\t         * 画布元素ID\n\t         * @type {string}\n\t         */\n\t        this.id = opts.id || guid();\n\t    };\n\n\t    Element.prototype = {\n\n\t        /**\n\t         * 元素类型\n\t         * Element type\n\t         * @type {string}\n\t         */\n\t        type: 'element',\n\n\t        /**\n\t         * 元素名字\n\t         * Element name\n\t         * @type {string}\n\t         */\n\t        name: '',\n\n\t        /**\n\t         * ZRender 实例对象，会在 element 添加到 zrender 实例中后自动赋值\n\t         * ZRender instance will be assigned when element is associated with zrender\n\t         * @name module:/zrender/Element#__zr\n\t         * @type {module:zrender/ZRender}\n\t         */\n\t        __zr: null,\n\n\t        /**\n\t         * 图形是否忽略，为true时忽略图形的绘制以及事件触发\n\t         * If ignore drawing and events of the element object\n\t         * @name module:/zrender/Element#ignore\n\t         * @type {boolean}\n\t         * @default false\n\t         */\n\t        ignore: false,\n\n\t        /**\n\t         * 用于裁剪的路径(shape)，所有 Group 内的路径在绘制时都会被这个路径裁剪\n\t         * 该路径会继承被裁减对象的变换\n\t         * @type {module:zrender/graphic/Path}\n\t         * @see http://www.w3.org/TR/2dcontext/#clipping-region\n\t         * @readOnly\n\t         */\n\t        clipPath: null,\n\n\t        /**\n\t         * Drift element\n\t         * @param  {number} dx dx on the global space\n\t         * @param  {number} dy dy on the global space\n\t         */\n\t        drift: function (dx, dy) {\n\t            switch (this.draggable) {\n\t                case 'horizontal':\n\t                    dy = 0;\n\t                    break;\n\t                case 'vertical':\n\t                    dx = 0;\n\t                    break;\n\t            }\n\n\t            var m = this.transform;\n\t            if (!m) {\n\t                m = this.transform = [1, 0, 0, 1, 0, 0];\n\t            }\n\t            m[4] += dx;\n\t            m[5] += dy;\n\n\t            this.decomposeTransform();\n\t            this.dirty(false);\n\t        },\n\n\t        /**\n\t         * Hook before update\n\t         */\n\t        beforeUpdate: function () {},\n\t        /**\n\t         * Hook after update\n\t         */\n\t        afterUpdate: function () {},\n\t        /**\n\t         * Update each frame\n\t         */\n\t        update: function () {\n\t            this.updateTransform();\n\t        },\n\n\t        /**\n\t         * @param  {Function} cb\n\t         * @param  {}   context\n\t         */\n\t        traverse: function (cb, context) {},\n\n\t        /**\n\t         * @protected\n\t         */\n\t        attrKV: function (key, value) {\n\t            if (key === 'position' || key === 'scale' || key === 'origin') {\n\t                // Copy the array\n\t                if (value) {\n\t                    var target = this[key];\n\t                    if (!target) {\n\t                        target = this[key] = [];\n\t                    }\n\t                    target[0] = value[0];\n\t                    target[1] = value[1];\n\t                }\n\t            }\n\t            else {\n\t                this[key] = value;\n\t            }\n\t        },\n\n\t        /**\n\t         * Hide the element\n\t         */\n\t        hide: function () {\n\t            this.ignore = true;\n\t            this.__zr && this.__zr.refresh();\n\t        },\n\n\t        /**\n\t         * Show the element\n\t         */\n\t        show: function () {\n\t            this.ignore = false;\n\t            this.__zr && this.__zr.refresh();\n\t        },\n\n\t        /**\n\t         * @param {string|Object} key\n\t         * @param {*} value\n\t         */\n\t        attr: function (key, value) {\n\t            if (typeof key === 'string') {\n\t                this.attrKV(key, value);\n\t            }\n\t            else if (zrUtil.isObject(key)) {\n\t                for (var name in key) {\n\t                    if (key.hasOwnProperty(name)) {\n\t                        this.attrKV(name, key[name]);\n\t                    }\n\t                }\n\t            }\n\n\t            this.dirty(false);\n\n\t            return this;\n\t        },\n\n\t        /**\n\t         * @param {module:zrender/graphic/Path} clipPath\n\t         */\n\t        setClipPath: function (clipPath) {\n\t            var zr = this.__zr;\n\t            if (zr) {\n\t                clipPath.addSelfToZr(zr);\n\t            }\n\n\t            // Remove previous clip path\n\t            if (this.clipPath && this.clipPath !== clipPath) {\n\t                this.removeClipPath();\n\t            }\n\n\t            this.clipPath = clipPath;\n\t            clipPath.__zr = zr;\n\t            clipPath.__clipTarget = this;\n\n\t            this.dirty(false);\n\t        },\n\n\t        /**\n\t         */\n\t        removeClipPath: function () {\n\t            var clipPath = this.clipPath;\n\t            if (clipPath) {\n\t                if (clipPath.__zr) {\n\t                    clipPath.removeSelfFromZr(clipPath.__zr);\n\t                }\n\n\t                clipPath.__zr = null;\n\t                clipPath.__clipTarget = null;\n\t                this.clipPath = null;\n\n\t                this.dirty(false);\n\t            }\n\t        },\n\n\t        /**\n\t         * Add self from zrender instance.\n\t         * Not recursively because it will be invoked when element added to storage.\n\t         * @param {module:zrender/ZRender} zr\n\t         */\n\t        addSelfToZr: function (zr) {\n\t            this.__zr = zr;\n\t            // 添加动画\n\t            var animators = this.animators;\n\t            if (animators) {\n\t                for (var i = 0; i < animators.length; i++) {\n\t                    zr.animation.addAnimator(animators[i]);\n\t                }\n\t            }\n\n\t            if (this.clipPath) {\n\t                this.clipPath.addSelfToZr(zr);\n\t            }\n\t        },\n\n\t        /**\n\t         * Remove self from zrender instance.\n\t         * Not recursively because it will be invoked when element added to storage.\n\t         * @param {module:zrender/ZRender} zr\n\t         */\n\t        removeSelfFromZr: function (zr) {\n\t            this.__zr = null;\n\t            // 移除动画\n\t            var animators = this.animators;\n\t            if (animators) {\n\t                for (var i = 0; i < animators.length; i++) {\n\t                    zr.animation.removeAnimator(animators[i]);\n\t                }\n\t            }\n\n\t            if (this.clipPath) {\n\t                this.clipPath.removeSelfFromZr(zr);\n\t            }\n\t        }\n\t    };\n\n\t    zrUtil.mixin(Element, Animatable);\n\t    zrUtil.mixin(Element, Transformable);\n\t    zrUtil.mixin(Element, Eventful);\n\n\t    module.exports = Element;\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports) {\n\n\t/**\n\t * zrender: 生成唯一id\n\t *\n\t * @author errorrik (errorrik@gmail.com)\n\t */\n\n\n\t    var idStart = 0x0907;\n\n\t    module.exports = function () {\n\t        return idStart++;\n\t    };\n\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports) {\n\n\t/**\n\t * 事件扩展\n\t * @module zrender/mixin/Eventful\n\t * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n\t *         pissang (https://www.github.com/pissang)\n\t */\n\n\n\t    var arrySlice = Array.prototype.slice;\n\n\t    /**\n\t     * 事件分发器\n\t     * @alias module:zrender/mixin/Eventful\n\t     * @constructor\n\t     */\n\t    var Eventful = function () {\n\t        this._$handlers = {};\n\t    };\n\n\t    Eventful.prototype = {\n\n\t        constructor: Eventful,\n\n\t        /**\n\t         * 单次触发绑定，trigger后销毁\n\t         *\n\t         * @param {string} event 事件名\n\t         * @param {Function} handler 响应函数\n\t         * @param {Object} context\n\t         */\n\t        one: function (event, handler, context) {\n\t            var _h = this._$handlers;\n\n\t            if (!handler || !event) {\n\t                return this;\n\t            }\n\n\t            if (!_h[event]) {\n\t                _h[event] = [];\n\t            }\n\n\t            for (var i = 0; i < _h[event].length; i++) {\n\t                if (_h[event][i].h === handler) {\n\t                    return this;\n\t                }\n\t            }\n\n\t            _h[event].push({\n\t                h: handler,\n\t                one: true,\n\t                ctx: context || this\n\t            });\n\n\t            return this;\n\t        },\n\n\t        /**\n\t         * 绑定事件\n\t         * @param {string} event 事件名\n\t         * @param {Function} handler 事件处理函数\n\t         * @param {Object} [context]\n\t         */\n\t        on: function (event, handler, context) {\n\t            var _h = this._$handlers;\n\n\t            if (!handler || !event) {\n\t                return this;\n\t            }\n\n\t            if (!_h[event]) {\n\t                _h[event] = [];\n\t            }\n\n\t            for (var i = 0; i < _h[event].length; i++) {\n\t                if (_h[event][i].h === handler) {\n\t                    return this;\n\t                }\n\t            }\n\n\t            _h[event].push({\n\t                h: handler,\n\t                one: false,\n\t                ctx: context || this\n\t            });\n\n\t            return this;\n\t        },\n\n\t        /**\n\t         * 是否绑定了事件\n\t         * @param  {string}  event\n\t         * @return {boolean}\n\t         */\n\t        isSilent: function (event) {\n\t            var _h = this._$handlers;\n\t            return _h[event] && _h[event].length;\n\t        },\n\n\t        /**\n\t         * 解绑事件\n\t         * @param {string} event 事件名\n\t         * @param {Function} [handler] 事件处理函数\n\t         */\n\t        off: function (event, handler) {\n\t            var _h = this._$handlers;\n\n\t            if (!event) {\n\t                this._$handlers = {};\n\t                return this;\n\t            }\n\n\t            if (handler) {\n\t                if (_h[event]) {\n\t                    var newList = [];\n\t                    for (var i = 0, l = _h[event].length; i < l; i++) {\n\t                        if (_h[event][i]['h'] != handler) {\n\t                            newList.push(_h[event][i]);\n\t                        }\n\t                    }\n\t                    _h[event] = newList;\n\t                }\n\n\t                if (_h[event] && _h[event].length === 0) {\n\t                    delete _h[event];\n\t                }\n\t            }\n\t            else {\n\t                delete _h[event];\n\t            }\n\n\t            return this;\n\t        },\n\n\t        /**\n\t         * 事件分发\n\t         *\n\t         * @param {string} type 事件类型\n\t         */\n\t        trigger: function (type) {\n\t            if (this._$handlers[type]) {\n\t                var args = arguments;\n\t                var argLen = args.length;\n\n\t                if (argLen > 3) {\n\t                    args = arrySlice.call(args, 1);\n\t                }\n\n\t                var _h = this._$handlers[type];\n\t                var len = _h.length;\n\t                for (var i = 0; i < len;) {\n\t                    // Optimize advise from backbone\n\t                    switch (argLen) {\n\t                        case 1:\n\t                            _h[i]['h'].call(_h[i]['ctx']);\n\t                            break;\n\t                        case 2:\n\t                            _h[i]['h'].call(_h[i]['ctx'], args[1]);\n\t                            break;\n\t                        case 3:\n\t                            _h[i]['h'].call(_h[i]['ctx'], args[1], args[2]);\n\t                            break;\n\t                        default:\n\t                            // have more than 2 given arguments\n\t                            _h[i]['h'].apply(_h[i]['ctx'], args);\n\t                            break;\n\t                    }\n\n\t                    if (_h[i]['one']) {\n\t                        _h.splice(i, 1);\n\t                        len--;\n\t                    }\n\t                    else {\n\t                        i++;\n\t                    }\n\t                }\n\t            }\n\n\t            return this;\n\t        },\n\n\t        /**\n\t         * 带有context的事件分发, 最后一个参数是事件回调的context\n\t         * @param {string} type 事件类型\n\t         */\n\t        triggerWithContext: function (type) {\n\t            if (this._$handlers[type]) {\n\t                var args = arguments;\n\t                var argLen = args.length;\n\n\t                if (argLen > 4) {\n\t                    args = arrySlice.call(args, 1, args.length - 1);\n\t                }\n\t                var ctx = args[args.length - 1];\n\n\t                var _h = this._$handlers[type];\n\t                var len = _h.length;\n\t                for (var i = 0; i < len;) {\n\t                    // Optimize advise from backbone\n\t                    switch (argLen) {\n\t                        case 1:\n\t                            _h[i]['h'].call(ctx);\n\t                            break;\n\t                        case 2:\n\t                            _h[i]['h'].call(ctx, args[1]);\n\t                            break;\n\t                        case 3:\n\t                            _h[i]['h'].call(ctx, args[1], args[2]);\n\t                            break;\n\t                        default:\n\t                            // have more than 2 given arguments\n\t                            _h[i]['h'].apply(ctx, args);\n\t                            break;\n\t                    }\n\n\t                    if (_h[i]['one']) {\n\t                        _h.splice(i, 1);\n\t                        len--;\n\t                    }\n\t                    else {\n\t                        i++;\n\t                    }\n\t                }\n\t            }\n\n\t            return this;\n\t        }\n\t    };\n\n\t    // 对象可以通过 onxxxx 绑定事件\n\t    /**\n\t     * @event module:zrender/mixin/Eventful#onclick\n\t     * @type {Function}\n\t     * @default null\n\t     */\n\t    /**\n\t     * @event module:zrender/mixin/Eventful#onmouseover\n\t     * @type {Function}\n\t     * @default null\n\t     */\n\t    /**\n\t     * @event module:zrender/mixin/Eventful#onmouseout\n\t     * @type {Function}\n\t     * @default null\n\t     */\n\t    /**\n\t     * @event module:zrender/mixin/Eventful#onmousemove\n\t     * @type {Function}\n\t     * @default null\n\t     */\n\t    /**\n\t     * @event module:zrender/mixin/Eventful#onmousewheel\n\t     * @type {Function}\n\t     * @default null\n\t     */\n\t    /**\n\t     * @event module:zrender/mixin/Eventful#onmousedown\n\t     * @type {Function}\n\t     * @default null\n\t     */\n\t    /**\n\t     * @event module:zrender/mixin/Eventful#onmouseup\n\t     * @type {Function}\n\t     * @default null\n\t     */\n\t    /**\n\t     * @event module:zrender/mixin/Eventful#ondrag\n\t     * @type {Function}\n\t     * @default null\n\t     */\n\t    /**\n\t     * @event module:zrender/mixin/Eventful#ondragstart\n\t     * @type {Function}\n\t     * @default null\n\t     */\n\t    /**\n\t     * @event module:zrender/mixin/Eventful#ondragend\n\t     * @type {Function}\n\t     * @default null\n\t     */\n\t    /**\n\t     * @event module:zrender/mixin/Eventful#ondragenter\n\t     * @type {Function}\n\t     * @default null\n\t     */\n\t    /**\n\t     * @event module:zrender/mixin/Eventful#ondragleave\n\t     * @type {Function}\n\t     * @default null\n\t     */\n\t    /**\n\t     * @event module:zrender/mixin/Eventful#ondragover\n\t     * @type {Function}\n\t     * @default null\n\t     */\n\t    /**\n\t     * @event module:zrender/mixin/Eventful#ondrop\n\t     * @type {Function}\n\t     * @default null\n\t     */\n\n\t    module.exports = Eventful;\n\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * 提供变换扩展\n\t * @module zrender/mixin/Transformable\n\t * @author pissang (https://www.github.com/pissang)\n\t */\n\n\n\t    var matrix = __webpack_require__(11);\n\t    var vector = __webpack_require__(10);\n\t    var mIdentity = matrix.identity;\n\n\t    var EPSILON = 5e-5;\n\n\t    function isNotAroundZero(val) {\n\t        return val > EPSILON || val < -EPSILON;\n\t    }\n\n\t    /**\n\t     * @alias module:zrender/mixin/Transformable\n\t     * @constructor\n\t     */\n\t    var Transformable = function (opts) {\n\t        opts = opts || {};\n\t        // If there are no given position, rotation, scale\n\t        if (!opts.position) {\n\t            /**\n\t             * 平移\n\t             * @type {Array.<number>}\n\t             * @default [0, 0]\n\t             */\n\t            this.position = [0, 0];\n\t        }\n\t        if (opts.rotation == null) {\n\t            /**\n\t             * 旋转\n\t             * @type {Array.<number>}\n\t             * @default 0\n\t             */\n\t            this.rotation = 0;\n\t        }\n\t        if (!opts.scale) {\n\t            /**\n\t             * 缩放\n\t             * @type {Array.<number>}\n\t             * @default [1, 1]\n\t             */\n\t            this.scale = [1, 1];\n\t        }\n\t        /**\n\t         * 旋转和缩放的原点\n\t         * @type {Array.<number>}\n\t         * @default null\n\t         */\n\t        this.origin = this.origin || null;\n\t    };\n\n\t    var transformableProto = Transformable.prototype;\n\t    transformableProto.transform = null;\n\n\t    /**\n\t     * 判断是否需要有坐标变换\n\t     * 如果有坐标变换, 则从position, rotation, scale以及父节点的transform计算出自身的transform矩阵\n\t     */\n\t    transformableProto.needLocalTransform = function () {\n\t        return isNotAroundZero(this.rotation)\n\t            || isNotAroundZero(this.position[0])\n\t            || isNotAroundZero(this.position[1])\n\t            || isNotAroundZero(this.scale[0] - 1)\n\t            || isNotAroundZero(this.scale[1] - 1);\n\t    };\n\n\t    transformableProto.updateTransform = function () {\n\t        var parent = this.parent;\n\t        var parentHasTransform = parent && parent.transform;\n\t        var needLocalTransform = this.needLocalTransform();\n\n\t        var m = this.transform;\n\t        if (!(needLocalTransform || parentHasTransform)) {\n\t            m && mIdentity(m);\n\t            return;\n\t        }\n\n\t        m = m || matrix.create();\n\n\t        if (needLocalTransform) {\n\t            this.getLocalTransform(m);\n\t        }\n\t        else {\n\t            mIdentity(m);\n\t        }\n\n\t        // 应用父节点变换\n\t        if (parentHasTransform) {\n\t            if (needLocalTransform) {\n\t                matrix.mul(m, parent.transform, m);\n\t            }\n\t            else {\n\t                matrix.copy(m, parent.transform);\n\t            }\n\t        }\n\t        // 保存这个变换矩阵\n\t        this.transform = m;\n\n\t        this.invTransform = this.invTransform || matrix.create();\n\t        matrix.invert(this.invTransform, m);\n\t    };\n\n\t    transformableProto.getLocalTransform = function (m) {\n\t        m = m || [];\n\t        mIdentity(m);\n\n\t        var origin = this.origin;\n\n\t        var scale = this.scale;\n\t        var rotation = this.rotation;\n\t        var position = this.position;\n\t        if (origin) {\n\t            // Translate to origin\n\t            m[4] -= origin[0];\n\t            m[5] -= origin[1];\n\t        }\n\t        matrix.scale(m, m, scale);\n\t        if (rotation) {\n\t            matrix.rotate(m, m, rotation);\n\t        }\n\t        if (origin) {\n\t            // Translate back from origin\n\t            m[4] += origin[0];\n\t            m[5] += origin[1];\n\t        }\n\n\t        m[4] += position[0];\n\t        m[5] += position[1];\n\n\t        return m;\n\t    };\n\t    /**\n\t     * 将自己的transform应用到context上\n\t     * @param {Context2D} ctx\n\t     */\n\t    transformableProto.setTransform = function (ctx) {\n\t        var m = this.transform;\n\t        var dpr = ctx.dpr || 1;\n\t        if (m) {\n\t            ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);\n\t        }\n\t        else {\n\t            ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n\t        }\n\t    };\n\n\t    transformableProto.restoreTransform = function (ctx) {\n\t        var m = this.transform;\n\t        var dpr = ctx.dpr || 1;\n\t        ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n\t    }\n\n\t    var tmpTransform = [];\n\n\t    /**\n\t     * 分解`transform`矩阵到`position`, `rotation`, `scale`\n\t     */\n\t    transformableProto.decomposeTransform = function () {\n\t        if (!this.transform) {\n\t            return;\n\t        }\n\t        var parent = this.parent;\n\t        var m = this.transform;\n\t        if (parent && parent.transform) {\n\t            // Get local transform and decompose them to position, scale, rotation\n\t            matrix.mul(tmpTransform, parent.invTransform, m);\n\t            m = tmpTransform;\n\t        }\n\t        var sx = m[0] * m[0] + m[1] * m[1];\n\t        var sy = m[2] * m[2] + m[3] * m[3];\n\t        var position = this.position;\n\t        var scale = this.scale;\n\t        if (isNotAroundZero(sx - 1)) {\n\t            sx = Math.sqrt(sx);\n\t        }\n\t        if (isNotAroundZero(sy - 1)) {\n\t            sy = Math.sqrt(sy);\n\t        }\n\t        if (m[0] < 0) {\n\t            sx = -sx;\n\t        }\n\t        if (m[3] < 0) {\n\t            sy = -sy;\n\t        }\n\t        position[0] = m[4];\n\t        position[1] = m[5];\n\t        scale[0] = sx;\n\t        scale[1] = sy;\n\t        this.rotation = Math.atan2(-m[1] / sy, m[0] / sx);\n\t    };\n\n\t    /**\n\t     * Get global scale\n\t     * @return {Array.<number>}\n\t     */\n\t    transformableProto.getGlobalScale = function () {\n\t        var m = this.transform;\n\t        if (!m) {\n\t            return [1, 1];\n\t        }\n\t        var sx = Math.sqrt(m[0] * m[0] + m[1] * m[1]);\n\t        var sy = Math.sqrt(m[2] * m[2] + m[3] * m[3]);\n\t        if (m[0] < 0) {\n\t            sx = -sx;\n\t        }\n\t        if (m[3] < 0) {\n\t            sy = -sy;\n\t        }\n\t        return [sx, sy];\n\t    };\n\t    /**\n\t     * 变换坐标位置到 shape 的局部坐标空间\n\t     * @method\n\t     * @param {number} x\n\t     * @param {number} y\n\t     * @return {Array.<number>}\n\t     */\n\t    transformableProto.transformCoordToLocal = function (x, y) {\n\t        var v2 = [x, y];\n\t        var invTransform = this.invTransform;\n\t        if (invTransform) {\n\t            vector.applyTransform(v2, v2, invTransform);\n\t        }\n\t        return v2;\n\t    };\n\n\t    /**\n\t     * 变换局部坐标位置到全局坐标空间\n\t     * @method\n\t     * @param {number} x\n\t     * @param {number} y\n\t     * @return {Array.<number>}\n\t     */\n\t    transformableProto.transformCoordToGlobal = function (x, y) {\n\t        var v2 = [x, y];\n\t        var transform = this.transform;\n\t        if (transform) {\n\t            vector.applyTransform(v2, v2, transform);\n\t        }\n\t        return v2;\n\t    };\n\n\t    module.exports = Transformable;\n\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * @module zrender/mixin/Animatable\n\t */\n\n\n\t    var Animator = __webpack_require__(36);\n\t    var util = __webpack_require__(4);\n\t    var isString = util.isString;\n\t    var isFunction = util.isFunction;\n\t    var isObject = util.isObject;\n\t    var log = __webpack_require__(40);\n\n\t    /**\n\t     * @alias modue:zrender/mixin/Animatable\n\t     * @constructor\n\t     */\n\t    var Animatable = function () {\n\n\t        /**\n\t         * @type {Array.<module:zrender/animation/Animator>}\n\t         * @readOnly\n\t         */\n\t        this.animators = [];\n\t    };\n\n\t    Animatable.prototype = {\n\n\t        constructor: Animatable,\n\n\t        /**\n\t         * 动画\n\t         *\n\t         * @param {string} path 需要添加动画的属性获取路径，可以通过a.b.c来获取深层的属性\n\t         * @param {boolean} [loop] 动画是否循环\n\t         * @return {module:zrender/animation/Animator}\n\t         * @example:\n\t         *     el.animate('style', false)\n\t         *         .when(1000, {x: 10} )\n\t         *         .done(function(){ // Animation done })\n\t         *         .start()\n\t         */\n\t        animate: function (path, loop) {\n\t            var target;\n\t            var animatingShape = false;\n\t            var el = this;\n\t            var zr = this.__zr;\n\t            if (path) {\n\t                var pathSplitted = path.split('.');\n\t                var prop = el;\n\t                // If animating shape\n\t                animatingShape = pathSplitted[0] === 'shape';\n\t                for (var i = 0, l = pathSplitted.length; i < l; i++) {\n\t                    if (!prop) {\n\t                        continue;\n\t                    }\n\t                    prop = prop[pathSplitted[i]];\n\t                }\n\t                if (prop) {\n\t                    target = prop;\n\t                }\n\t            }\n\t            else {\n\t                target = el;\n\t            }\n\n\t            if (!target) {\n\t                log(\n\t                    'Property \"'\n\t                    + path\n\t                    + '\" is not existed in element '\n\t                    + el.id\n\t                );\n\t                return;\n\t            }\n\n\t            var animators = el.animators;\n\n\t            var animator = new Animator(target, loop);\n\n\t            animator.during(function (target) {\n\t                el.dirty(animatingShape);\n\t            })\n\t            .done(function () {\n\t                // FIXME Animator will not be removed if use `Animator#stop` to stop animation\n\t                animators.splice(util.indexOf(animators, animator), 1);\n\t            });\n\n\t            animators.push(animator);\n\n\t            // If animate after added to the zrender\n\t            if (zr) {\n\t                zr.animation.addAnimator(animator);\n\t            }\n\n\t            return animator;\n\t        },\n\n\t        /**\n\t         * 停止动画\n\t         * @param {boolean} forwardToLast If move to last frame before stop\n\t         */\n\t        stopAnimation: function (forwardToLast) {\n\t            var animators = this.animators;\n\t            var len = animators.length;\n\t            for (var i = 0; i < len; i++) {\n\t                animators[i].stop(forwardToLast);\n\t            }\n\t            animators.length = 0;\n\n\t            return this;\n\t        },\n\n\t        /**\n\t         * @param {Object} target\n\t         * @param {number} [time=500] Time in ms\n\t         * @param {string} [easing='linear']\n\t         * @param {number} [delay=0]\n\t         * @param {Function} [callback]\n\t         *\n\t         * @example\n\t         *  // Animate position\n\t         *  el.animateTo({\n\t         *      position: [10, 10]\n\t         *  }, function () { // done })\n\t         *\n\t         *  // Animate shape, style and position in 100ms, delayed 100ms, with cubicOut easing\n\t         *  el.animateTo({\n\t         *      shape: {\n\t         *          width: 500\n\t         *      },\n\t         *      style: {\n\t         *          fill: 'red'\n\t         *      }\n\t         *      position: [10, 10]\n\t         *  }, 100, 100, 'cubicOut', function () { // done })\n\t         */\n\t         // TODO Return animation key\n\t        animateTo: function (target, time, delay, easing, callback) {\n\t            // animateTo(target, time, easing, callback);\n\t            if (isString(delay)) {\n\t                callback = easing;\n\t                easing = delay;\n\t                delay = 0;\n\t            }\n\t            // animateTo(target, time, delay, callback);\n\t            else if (isFunction(easing)) {\n\t                callback = easing;\n\t                easing = 'linear';\n\t                delay = 0;\n\t            }\n\t            // animateTo(target, time, callback);\n\t            else if (isFunction(delay)) {\n\t                callback = delay;\n\t                delay = 0;\n\t            }\n\t            // animateTo(target, callback)\n\t            else if (isFunction(time)) {\n\t                callback = time;\n\t                time = 500;\n\t            }\n\t            // animateTo(target)\n\t            else if (!time) {\n\t                time = 500;\n\t            }\n\t            // Stop all previous animations\n\t            this.stopAnimation();\n\t            this._animateToShallow('', this, target, time, delay, easing, callback);\n\n\t            // Animators may be removed immediately after start\n\t            // if there is nothing to animate\n\t            var animators = this.animators.slice();\n\t            var count = animators.length;\n\t            function done() {\n\t                count--;\n\t                if (!count) {\n\t                    callback && callback();\n\t                }\n\t            }\n\n\t            // No animators. This should be checked before animators[i].start(),\n\t            // because 'done' may be executed immediately if no need to animate.\n\t            if (!count) {\n\t                callback && callback();\n\t            }\n\t            // Start after all animators created\n\t            // Incase any animator is done immediately when all animation properties are not changed\n\t            for (var i = 0; i < animators.length; i++) {\n\t                animators[i]\n\t                    .done(done)\n\t                    .start(easing);\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         * @param {string} path=''\n\t         * @param {Object} source=this\n\t         * @param {Object} target\n\t         * @param {number} [time=500]\n\t         * @param {number} [delay=0]\n\t         *\n\t         * @example\n\t         *  // Animate position\n\t         *  el._animateToShallow({\n\t         *      position: [10, 10]\n\t         *  })\n\t         *\n\t         *  // Animate shape, style and position in 100ms, delayed 100ms\n\t         *  el._animateToShallow({\n\t         *      shape: {\n\t         *          width: 500\n\t         *      },\n\t         *      style: {\n\t         *          fill: 'red'\n\t         *      }\n\t         *      position: [10, 10]\n\t         *  }, 100, 100)\n\t         */\n\t        _animateToShallow: function (path, source, target, time, delay) {\n\t            var objShallow = {};\n\t            var propertyCount = 0;\n\t            for (var name in target) {\n\t                if (!target.hasOwnProperty(name)) {\n\t                    continue;\n\t                }\n\n\t                if (source[name] != null) {\n\t                    if (isObject(target[name]) && !util.isArrayLike(target[name])) {\n\t                        this._animateToShallow(\n\t                            path ? path + '.' + name : name,\n\t                            source[name],\n\t                            target[name],\n\t                            time,\n\t                            delay\n\t                        );\n\t                    }\n\t                    else {\n\t                        objShallow[name] = target[name];\n\t                        propertyCount++;\n\t                    }\n\t                }\n\t                else if (target[name] != null) {\n\t                    // Attr directly if not has property\n\t                    // FIXME, if some property not needed for element ?\n\t                    if (!path) {\n\t                        this.attr(name, target[name]);\n\t                    }\n\t                    else {  // Shape or style\n\t                        var props = {};\n\t                        props[path] = {};\n\t                        props[path][name] = target[name];\n\t                        this.attr(props);\n\t                    }\n\t                }\n\t            }\n\n\t            if (propertyCount > 0) {\n\t                this.animate(path, false)\n\t                    .when(time == null ? 500 : time, objShallow)\n\t                    .delay(delay || 0);\n\t            }\n\n\t            return this;\n\t        }\n\t    };\n\n\t    module.exports = Animatable;\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @module echarts/animation/Animator\n\t */\n\n\n\t    var Clip = __webpack_require__(37);\n\t    var color = __webpack_require__(39);\n\t    var util = __webpack_require__(4);\n\t    var isArrayLike = util.isArrayLike;\n\n\t    var arraySlice = Array.prototype.slice;\n\n\t    function defaultGetter(target, key) {\n\t        return target[key];\n\t    }\n\n\t    function defaultSetter(target, key, value) {\n\t        target[key] = value;\n\t    }\n\n\t    /**\n\t     * @param  {number} p0\n\t     * @param  {number} p1\n\t     * @param  {number} percent\n\t     * @return {number}\n\t     */\n\t    function interpolateNumber(p0, p1, percent) {\n\t        return (p1 - p0) * percent + p0;\n\t    }\n\n\t    /**\n\t     * @param  {string} p0\n\t     * @param  {string} p1\n\t     * @param  {number} percent\n\t     * @return {string}\n\t     */\n\t    function interpolateString(p0, p1, percent) {\n\t        return percent > 0.5 ? p1 : p0;\n\t    }\n\n\t    /**\n\t     * @param  {Array} p0\n\t     * @param  {Array} p1\n\t     * @param  {number} percent\n\t     * @param  {Array} out\n\t     * @param  {number} arrDim\n\t     */\n\t    function interpolateArray(p0, p1, percent, out, arrDim) {\n\t        var len = p0.length;\n\t        if (arrDim == 1) {\n\t            for (var i = 0; i < len; i++) {\n\t                out[i] = interpolateNumber(p0[i], p1[i], percent);\n\t            }\n\t        }\n\t        else {\n\t            var len2 = p0[0].length;\n\t            for (var i = 0; i < len; i++) {\n\t                for (var j = 0; j < len2; j++) {\n\t                    out[i][j] = interpolateNumber(\n\t                        p0[i][j], p1[i][j], percent\n\t                    );\n\t                }\n\t            }\n\t        }\n\t    }\n\n\t    // arr0 is source array, arr1 is target array.\n\t    // Do some preprocess to avoid error happened when interpolating from arr0 to arr1\n\t    function fillArr(arr0, arr1, arrDim) {\n\t        var arr0Len = arr0.length;\n\t        var arr1Len = arr1.length;\n\t        if (arr0Len !== arr1Len) {\n\t            // FIXME Not work for TypedArray\n\t            var isPreviousLarger = arr0Len > arr1Len;\n\t            if (isPreviousLarger) {\n\t                // Cut the previous\n\t                arr0.length = arr1Len;\n\t            }\n\t            else {\n\t                // Fill the previous\n\t                for (var i = arr0Len; i < arr1Len; i++) {\n\t                    arr0.push(\n\t                        arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i])\n\t                    );\n\t                }\n\t            }\n\t        }\n\t        // Handling NaN value\n\t        var len2 = arr0[0] && arr0[0].length;\n\t        for (var i = 0; i < arr0.length; i++) {\n\t            if (arrDim === 1) {\n\t                if (isNaN(arr0[i])) {\n\t                    arr0[i] = arr1[i];\n\t                }\n\t            }\n\t            else {\n\t                for (var j = 0; j < len2; j++) {\n\t                    if (isNaN(arr0[i][j])) {\n\t                        arr0[i][j] = arr1[i][j];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\n\t    /**\n\t     * @param  {Array} arr0\n\t     * @param  {Array} arr1\n\t     * @param  {number} arrDim\n\t     * @return {boolean}\n\t     */\n\t    function isArraySame(arr0, arr1, arrDim) {\n\t        if (arr0 === arr1) {\n\t            return true;\n\t        }\n\t        var len = arr0.length;\n\t        if (len !== arr1.length) {\n\t            return false;\n\t        }\n\t        if (arrDim === 1) {\n\t            for (var i = 0; i < len; i++) {\n\t                if (arr0[i] !== arr1[i]) {\n\t                    return false;\n\t                }\n\t            }\n\t        }\n\t        else {\n\t            var len2 = arr0[0].length;\n\t            for (var i = 0; i < len; i++) {\n\t                for (var j = 0; j < len2; j++) {\n\t                    if (arr0[i][j] !== arr1[i][j]) {\n\t                        return false;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return true;\n\t    }\n\n\t    /**\n\t     * Catmull Rom interpolate array\n\t     * @param  {Array} p0\n\t     * @param  {Array} p1\n\t     * @param  {Array} p2\n\t     * @param  {Array} p3\n\t     * @param  {number} t\n\t     * @param  {number} t2\n\t     * @param  {number} t3\n\t     * @param  {Array} out\n\t     * @param  {number} arrDim\n\t     */\n\t    function catmullRomInterpolateArray(\n\t        p0, p1, p2, p3, t, t2, t3, out, arrDim\n\t    ) {\n\t        var len = p0.length;\n\t        if (arrDim == 1) {\n\t            for (var i = 0; i < len; i++) {\n\t                out[i] = catmullRomInterpolate(\n\t                    p0[i], p1[i], p2[i], p3[i], t, t2, t3\n\t                );\n\t            }\n\t        }\n\t        else {\n\t            var len2 = p0[0].length;\n\t            for (var i = 0; i < len; i++) {\n\t                for (var j = 0; j < len2; j++) {\n\t                    out[i][j] = catmullRomInterpolate(\n\t                        p0[i][j], p1[i][j], p2[i][j], p3[i][j],\n\t                        t, t2, t3\n\t                    );\n\t                }\n\t            }\n\t        }\n\t    }\n\n\t    /**\n\t     * Catmull Rom interpolate number\n\t     * @param  {number} p0\n\t     * @param  {number} p1\n\t     * @param  {number} p2\n\t     * @param  {number} p3\n\t     * @param  {number} t\n\t     * @param  {number} t2\n\t     * @param  {number} t3\n\t     * @return {number}\n\t     */\n\t    function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {\n\t        var v0 = (p2 - p0) * 0.5;\n\t        var v1 = (p3 - p1) * 0.5;\n\t        return (2 * (p1 - p2) + v0 + v1) * t3\n\t                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2\n\t                + v0 * t + p1;\n\t    }\n\n\t    function cloneValue(value) {\n\t        if (isArrayLike(value)) {\n\t            var len = value.length;\n\t            if (isArrayLike(value[0])) {\n\t                var ret = [];\n\t                for (var i = 0; i < len; i++) {\n\t                    ret.push(arraySlice.call(value[i]));\n\t                }\n\t                return ret;\n\t            }\n\n\t            return arraySlice.call(value);\n\t        }\n\n\t        return value;\n\t    }\n\n\t    function rgba2String(rgba) {\n\t        rgba[0] = Math.floor(rgba[0]);\n\t        rgba[1] = Math.floor(rgba[1]);\n\t        rgba[2] = Math.floor(rgba[2]);\n\n\t        return 'rgba(' + rgba.join(',') + ')';\n\t    }\n\n\t    function createTrackClip (animator, easing, oneTrackDone, keyframes, propName) {\n\t        var getter = animator._getter;\n\t        var setter = animator._setter;\n\t        var useSpline = easing === 'spline';\n\n\t        var trackLen = keyframes.length;\n\t        if (!trackLen) {\n\t            return;\n\t        }\n\t        // Guess data type\n\t        var firstVal = keyframes[0].value;\n\t        var isValueArray = isArrayLike(firstVal);\n\t        var isValueColor = false;\n\t        var isValueString = false;\n\n\t        // For vertices morphing\n\t        var arrDim = (\n\t                isValueArray\n\t                && isArrayLike(firstVal[0])\n\t            )\n\t            ? 2 : 1;\n\t        var trackMaxTime;\n\t        // Sort keyframe as ascending\n\t        keyframes.sort(function(a, b) {\n\t            return a.time - b.time;\n\t        });\n\n\t        trackMaxTime = keyframes[trackLen - 1].time;\n\t        // Percents of each keyframe\n\t        var kfPercents = [];\n\t        // Value of each keyframe\n\t        var kfValues = [];\n\t        var prevValue = keyframes[0].value;\n\t        var isAllValueEqual = true;\n\t        for (var i = 0; i < trackLen; i++) {\n\t            kfPercents.push(keyframes[i].time / trackMaxTime);\n\t            // Assume value is a color when it is a string\n\t            var value = keyframes[i].value;\n\n\t            // Check if value is equal, deep check if value is array\n\t            if (!((isValueArray && isArraySame(value, prevValue, arrDim))\n\t                || (!isValueArray && value === prevValue))) {\n\t                isAllValueEqual = false;\n\t            }\n\t            prevValue = value;\n\n\t            // Try converting a string to a color array\n\t            if (typeof value == 'string') {\n\t                var colorArray = color.parse(value);\n\t                if (colorArray) {\n\t                    value = colorArray;\n\t                    isValueColor = true;\n\t                }\n\t                else {\n\t                    isValueString = true;\n\t                }\n\t            }\n\t            kfValues.push(value);\n\t        }\n\t        if (isAllValueEqual) {\n\t            return;\n\t        }\n\n\t        var lastValue = kfValues[trackLen - 1];\n\t        // Polyfill array and NaN value\n\t        for (var i = 0; i < trackLen - 1; i++) {\n\t            if (isValueArray) {\n\t                fillArr(kfValues[i], lastValue, arrDim);\n\t            }\n\t            else {\n\t                if (isNaN(kfValues[i]) && !isNaN(lastValue) && !isValueString && !isValueColor) {\n\t                    kfValues[i] = lastValue;\n\t                }\n\t            }\n\t        }\n\t        isValueArray && fillArr(getter(animator._target, propName), lastValue, arrDim);\n\n\t        // Cache the key of last frame to speed up when\n\t        // animation playback is sequency\n\t        var lastFrame = 0;\n\t        var lastFramePercent = 0;\n\t        var start;\n\t        var w;\n\t        var p0;\n\t        var p1;\n\t        var p2;\n\t        var p3;\n\n\t        if (isValueColor) {\n\t            var rgba = [0, 0, 0, 0];\n\t        }\n\n\t        var onframe = function (target, percent) {\n\t            // Find the range keyframes\n\t            // kf1-----kf2---------current--------kf3\n\t            // find kf2 and kf3 and do interpolation\n\t            var frame;\n\t            // In the easing function like elasticOut, percent may less than 0\n\t            if (percent < 0) {\n\t                frame = 0;\n\t            }\n\t            else if (percent < lastFramePercent) {\n\t                // Start from next key\n\t                // PENDING start from lastFrame ?\n\t                start = Math.min(lastFrame + 1, trackLen - 1);\n\t                for (frame = start; frame >= 0; frame--) {\n\t                    if (kfPercents[frame] <= percent) {\n\t                        break;\n\t                    }\n\t                }\n\t                // PENDING really need to do this ?\n\t                frame = Math.min(frame, trackLen - 2);\n\t            }\n\t            else {\n\t                for (frame = lastFrame; frame < trackLen; frame++) {\n\t                    if (kfPercents[frame] > percent) {\n\t                        break;\n\t                    }\n\t                }\n\t                frame = Math.min(frame - 1, trackLen - 2);\n\t            }\n\t            lastFrame = frame;\n\t            lastFramePercent = percent;\n\n\t            var range = (kfPercents[frame + 1] - kfPercents[frame]);\n\t            if (range === 0) {\n\t                return;\n\t            }\n\t            else {\n\t                w = (percent - kfPercents[frame]) / range;\n\t            }\n\t            if (useSpline) {\n\t                p1 = kfValues[frame];\n\t                p0 = kfValues[frame === 0 ? frame : frame - 1];\n\t                p2 = kfValues[frame > trackLen - 2 ? trackLen - 1 : frame + 1];\n\t                p3 = kfValues[frame > trackLen - 3 ? trackLen - 1 : frame + 2];\n\t                if (isValueArray) {\n\t                    catmullRomInterpolateArray(\n\t                        p0, p1, p2, p3, w, w * w, w * w * w,\n\t                        getter(target, propName),\n\t                        arrDim\n\t                    );\n\t                }\n\t                else {\n\t                    var value;\n\t                    if (isValueColor) {\n\t                        value = catmullRomInterpolateArray(\n\t                            p0, p1, p2, p3, w, w * w, w * w * w,\n\t                            rgba, 1\n\t                        );\n\t                        value = rgba2String(rgba);\n\t                    }\n\t                    else if (isValueString) {\n\t                        // String is step(0.5)\n\t                        return interpolateString(p1, p2, w);\n\t                    }\n\t                    else {\n\t                        value = catmullRomInterpolate(\n\t                            p0, p1, p2, p3, w, w * w, w * w * w\n\t                        );\n\t                    }\n\t                    setter(\n\t                        target,\n\t                        propName,\n\t                        value\n\t                    );\n\t                }\n\t            }\n\t            else {\n\t                if (isValueArray) {\n\t                    interpolateArray(\n\t                        kfValues[frame], kfValues[frame + 1], w,\n\t                        getter(target, propName),\n\t                        arrDim\n\t                    );\n\t                }\n\t                else {\n\t                    var value;\n\t                    if (isValueColor) {\n\t                        interpolateArray(\n\t                            kfValues[frame], kfValues[frame + 1], w,\n\t                            rgba, 1\n\t                        );\n\t                        value = rgba2String(rgba);\n\t                    }\n\t                    else if (isValueString) {\n\t                        // String is step(0.5)\n\t                        return interpolateString(kfValues[frame], kfValues[frame + 1], w);\n\t                    }\n\t                    else {\n\t                        value = interpolateNumber(kfValues[frame], kfValues[frame + 1], w);\n\t                    }\n\t                    setter(\n\t                        target,\n\t                        propName,\n\t                        value\n\t                    );\n\t                }\n\t            }\n\t        };\n\n\t        var clip = new Clip({\n\t            target: animator._target,\n\t            life: trackMaxTime,\n\t            loop: animator._loop,\n\t            delay: animator._delay,\n\t            onframe: onframe,\n\t            ondestroy: oneTrackDone\n\t        });\n\n\t        if (easing && easing !== 'spline') {\n\t            clip.easing = easing;\n\t        }\n\n\t        return clip;\n\t    }\n\n\t    /**\n\t     * @alias module:zrender/animation/Animator\n\t     * @constructor\n\t     * @param {Object} target\n\t     * @param {boolean} loop\n\t     * @param {Function} getter\n\t     * @param {Function} setter\n\t     */\n\t    var Animator = function(target, loop, getter, setter) {\n\t        this._tracks = {};\n\t        this._target = target;\n\n\t        this._loop = loop || false;\n\n\t        this._getter = getter || defaultGetter;\n\t        this._setter = setter || defaultSetter;\n\n\t        this._clipCount = 0;\n\n\t        this._delay = 0;\n\n\t        this._doneList = [];\n\n\t        this._onframeList = [];\n\n\t        this._clipList = [];\n\t    };\n\n\t    Animator.prototype = {\n\t        /**\n\t         * 设置动画关键帧\n\t         * @param  {number} time 关键帧时间，单位是ms\n\t         * @param  {Object} props 关键帧的属性值，key-value表示\n\t         * @return {module:zrender/animation/Animator}\n\t         */\n\t        when: function(time /* ms */, props) {\n\t            var tracks = this._tracks;\n\t            for (var propName in props) {\n\t                if (!props.hasOwnProperty(propName)) {\n\t                    continue;\n\t                }\n\n\t                if (!tracks[propName]) {\n\t                    tracks[propName] = [];\n\t                    // Invalid value\n\t                    var value = this._getter(this._target, propName);\n\t                    if (value == null) {\n\t                        // zrLog('Invalid property ' + propName);\n\t                        continue;\n\t                    }\n\t                    // If time is 0\n\t                    //  Then props is given initialize value\n\t                    // Else\n\t                    //  Initialize value from current prop value\n\t                    if (time !== 0) {\n\t                        tracks[propName].push({\n\t                            time: 0,\n\t                            value: cloneValue(value)\n\t                        });\n\t                    }\n\t                }\n\t                tracks[propName].push({\n\t                    time: time,\n\t                    value: props[propName]\n\t                });\n\t            }\n\t            return this;\n\t        },\n\t        /**\n\t         * 添加动画每一帧的回调函数\n\t         * @param  {Function} callback\n\t         * @return {module:zrender/animation/Animator}\n\t         */\n\t        during: function (callback) {\n\t            this._onframeList.push(callback);\n\t            return this;\n\t        },\n\n\t        _doneCallback: function () {\n\t            // Clear all tracks\n\t            this._tracks = {};\n\t            // Clear all clips\n\t            this._clipList.length = 0;\n\n\t            var doneList = this._doneList;\n\t            var len = doneList.length;\n\t            for (var i = 0; i < len; i++) {\n\t                doneList[i].call(this);\n\t            }\n\t        },\n\t        /**\n\t         * 开始执行动画\n\t         * @param  {string|Function} easing\n\t         *         动画缓动函数，详见{@link module:zrender/animation/easing}\n\t         * @return {module:zrender/animation/Animator}\n\t         */\n\t        start: function (easing) {\n\n\t            var self = this;\n\t            var clipCount = 0;\n\n\t            var oneTrackDone = function() {\n\t                clipCount--;\n\t                if (!clipCount) {\n\t                    self._doneCallback();\n\t                }\n\t            };\n\n\t            var lastClip;\n\t            for (var propName in this._tracks) {\n\t                if (!this._tracks.hasOwnProperty(propName)) {\n\t                    continue;\n\t                }\n\t                var clip = createTrackClip(\n\t                    this, easing, oneTrackDone,\n\t                    this._tracks[propName], propName\n\t                );\n\t                if (clip) {\n\t                    this._clipList.push(clip);\n\t                    clipCount++;\n\n\t                    // If start after added to animation\n\t                    if (this.animation) {\n\t                        this.animation.addClip(clip);\n\t                    }\n\n\t                    lastClip = clip;\n\t                }\n\t            }\n\n\t            // Add during callback on the last clip\n\t            if (lastClip) {\n\t                var oldOnFrame = lastClip.onframe;\n\t                lastClip.onframe = function (target, percent) {\n\t                    oldOnFrame(target, percent);\n\n\t                    for (var i = 0; i < self._onframeList.length; i++) {\n\t                        self._onframeList[i](target, percent);\n\t                    }\n\t                };\n\t            }\n\n\t            if (!clipCount) {\n\t                this._doneCallback();\n\t            }\n\t            return this;\n\t        },\n\t        /**\n\t         * 停止动画\n\t         * @param {boolean} forwardToLast If move to last frame before stop\n\t         */\n\t        stop: function (forwardToLast) {\n\t            var clipList = this._clipList;\n\t            var animation = this.animation;\n\t            for (var i = 0; i < clipList.length; i++) {\n\t                var clip = clipList[i];\n\t                if (forwardToLast) {\n\t                    // Move to last frame before stop\n\t                    clip.onframe(this._target, 1);\n\t                }\n\t                animation && animation.removeClip(clip);\n\t            }\n\t            clipList.length = 0;\n\t        },\n\t        /**\n\t         * 设置动画延迟开始的时间\n\t         * @param  {number} time 单位ms\n\t         * @return {module:zrender/animation/Animator}\n\t         */\n\t        delay: function (time) {\n\t            this._delay = time;\n\t            return this;\n\t        },\n\t        /**\n\t         * 添加动画结束的回调\n\t         * @param  {Function} cb\n\t         * @return {module:zrender/animation/Animator}\n\t         */\n\t        done: function(cb) {\n\t            if (cb) {\n\t                this._doneList.push(cb);\n\t            }\n\t            return this;\n\t        },\n\n\t        /**\n\t         * @return {Array.<module:zrender/animation/Clip>}\n\t         */\n\t        getClips: function () {\n\t            return this._clipList;\n\t        }\n\t    };\n\n\t    module.exports = Animator;\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * 动画主控制器\n\t * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件\n\t * @config life(1000) 动画时长\n\t * @config delay(0) 动画延迟时间\n\t * @config loop(true)\n\t * @config gap(0) 循环的间隔时间\n\t * @config onframe\n\t * @config easing(optional)\n\t * @config ondestroy(optional)\n\t * @config onrestart(optional)\n\t *\n\t * TODO pause\n\t */\n\n\n\t    var easingFuncs = __webpack_require__(38);\n\n\t    function Clip(options) {\n\n\t        this._target = options.target;\n\n\t        // 生命周期\n\t        this._life = options.life || 1000;\n\t        // 延时\n\t        this._delay = options.delay || 0;\n\t        // 开始时间\n\t        // this._startTime = new Date().getTime() + this._delay;// 单位毫秒\n\t        this._initialized = false;\n\n\t        // 是否循环\n\t        this.loop = options.loop == null ? false : options.loop;\n\n\t        this.gap = options.gap || 0;\n\n\t        this.easing = options.easing || 'Linear';\n\n\t        this.onframe = options.onframe;\n\t        this.ondestroy = options.ondestroy;\n\t        this.onrestart = options.onrestart;\n\t    }\n\n\t    Clip.prototype = {\n\n\t        constructor: Clip,\n\n\t        step: function (globalTime) {\n\t            // Set startTime on first step, or _startTime may has milleseconds different between clips\n\t            // PENDING\n\t            if (!this._initialized) {\n\t                this._startTime = globalTime + this._delay;\n\t                this._initialized = true;\n\t            }\n\n\t            var percent = (globalTime - this._startTime) / this._life;\n\n\t            // 还没开始\n\t            if (percent < 0) {\n\t                return;\n\t            }\n\n\t            percent = Math.min(percent, 1);\n\n\t            var easing = this.easing;\n\t            var easingFunc = typeof easing == 'string' ? easingFuncs[easing] : easing;\n\t            var schedule = typeof easingFunc === 'function'\n\t                ? easingFunc(percent)\n\t                : percent;\n\n\t            this.fire('frame', schedule);\n\n\t            // 结束\n\t            if (percent == 1) {\n\t                if (this.loop) {\n\t                    this.restart (globalTime);\n\t                    // 重新开始周期\n\t                    // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件\n\t                    return 'restart';\n\t                }\n\n\t                // 动画完成将这个控制器标识为待删除\n\t                // 在Animation.update中进行批量删除\n\t                this._needsRemove = true;\n\t                return 'destroy';\n\t            }\n\n\t            return null;\n\t        },\n\n\t        restart: function (globalTime) {\n\t            var remainder = (globalTime - this._startTime) % this._life;\n\t            this._startTime = globalTime - remainder + this.gap;\n\n\t            this._needsRemove = false;\n\t        },\n\n\t        fire: function(eventType, arg) {\n\t            eventType = 'on' + eventType;\n\t            if (this[eventType]) {\n\t                this[eventType](this._target, arg);\n\t            }\n\t        }\n\t    };\n\n\t    module.exports = Clip;\n\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports) {\n\n\t/**\n\t * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js\n\t * @see http://sole.github.io/tween.js/examples/03_graphs.html\n\t * @exports zrender/animation/easing\n\t */\n\n\t    var easing = {\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        linear: function (k) {\n\t            return k;\n\t        },\n\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        quadraticIn: function (k) {\n\t            return k * k;\n\t        },\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        quadraticOut: function (k) {\n\t            return k * (2 - k);\n\t        },\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        quadraticInOut: function (k) {\n\t            if ((k *= 2) < 1) {\n\t                return 0.5 * k * k;\n\t            }\n\t            return -0.5 * (--k * (k - 2) - 1);\n\t        },\n\n\t        // 三次方的缓动（t^3）\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        cubicIn: function (k) {\n\t            return k * k * k;\n\t        },\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        cubicOut: function (k) {\n\t            return --k * k * k + 1;\n\t        },\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        cubicInOut: function (k) {\n\t            if ((k *= 2) < 1) {\n\t                return 0.5 * k * k * k;\n\t            }\n\t            return 0.5 * ((k -= 2) * k * k + 2);\n\t        },\n\n\t        // 四次方的缓动（t^4）\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        quarticIn: function (k) {\n\t            return k * k * k * k;\n\t        },\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        quarticOut: function (k) {\n\t            return 1 - (--k * k * k * k);\n\t        },\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        quarticInOut: function (k) {\n\t            if ((k *= 2) < 1) {\n\t                return 0.5 * k * k * k * k;\n\t            }\n\t            return -0.5 * ((k -= 2) * k * k * k - 2);\n\t        },\n\n\t        // 五次方的缓动（t^5）\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        quinticIn: function (k) {\n\t            return k * k * k * k * k;\n\t        },\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        quinticOut: function (k) {\n\t            return --k * k * k * k * k + 1;\n\t        },\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        quinticInOut: function (k) {\n\t            if ((k *= 2) < 1) {\n\t                return 0.5 * k * k * k * k * k;\n\t            }\n\t            return 0.5 * ((k -= 2) * k * k * k * k + 2);\n\t        },\n\n\t        // 正弦曲线的缓动（sin(t)）\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        sinusoidalIn: function (k) {\n\t            return 1 - Math.cos(k * Math.PI / 2);\n\t        },\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        sinusoidalOut: function (k) {\n\t            return Math.sin(k * Math.PI / 2);\n\t        },\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        sinusoidalInOut: function (k) {\n\t            return 0.5 * (1 - Math.cos(Math.PI * k));\n\t        },\n\n\t        // 指数曲线的缓动（2^t）\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        exponentialIn: function (k) {\n\t            return k === 0 ? 0 : Math.pow(1024, k - 1);\n\t        },\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        exponentialOut: function (k) {\n\t            return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\n\t        },\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        exponentialInOut: function (k) {\n\t            if (k === 0) {\n\t                return 0;\n\t            }\n\t            if (k === 1) {\n\t                return 1;\n\t            }\n\t            if ((k *= 2) < 1) {\n\t                return 0.5 * Math.pow(1024, k - 1);\n\t            }\n\t            return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\n\t        },\n\n\t        // 圆形曲线的缓动（sqrt(1-t^2)）\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        circularIn: function (k) {\n\t            return 1 - Math.sqrt(1 - k * k);\n\t        },\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        circularOut: function (k) {\n\t            return Math.sqrt(1 - (--k * k));\n\t        },\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        circularInOut: function (k) {\n\t            if ((k *= 2) < 1) {\n\t                return -0.5 * (Math.sqrt(1 - k * k) - 1);\n\t            }\n\t            return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\n\t        },\n\n\t        // 创建类似于弹簧在停止前来回振荡的动画\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        elasticIn: function (k) {\n\t            var s;\n\t            var a = 0.1;\n\t            var p = 0.4;\n\t            if (k === 0) {\n\t                return 0;\n\t            }\n\t            if (k === 1) {\n\t                return 1;\n\t            }\n\t            if (!a || a < 1) {\n\t                a = 1; s = p / 4;\n\t            }\n\t            else {\n\t                s = p * Math.asin(1 / a) / (2 * Math.PI);\n\t            }\n\t            return -(a * Math.pow(2, 10 * (k -= 1)) *\n\t                        Math.sin((k - s) * (2 * Math.PI) / p));\n\t        },\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        elasticOut: function (k) {\n\t            var s;\n\t            var a = 0.1;\n\t            var p = 0.4;\n\t            if (k === 0) {\n\t                return 0;\n\t            }\n\t            if (k === 1) {\n\t                return 1;\n\t            }\n\t            if (!a || a < 1) {\n\t                a = 1; s = p / 4;\n\t            }\n\t            else {\n\t                s = p * Math.asin(1 / a) / (2 * Math.PI);\n\t            }\n\t            return (a * Math.pow(2, -10 * k) *\n\t                    Math.sin((k - s) * (2 * Math.PI) / p) + 1);\n\t        },\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        elasticInOut: function (k) {\n\t            var s;\n\t            var a = 0.1;\n\t            var p = 0.4;\n\t            if (k === 0) {\n\t                return 0;\n\t            }\n\t            if (k === 1) {\n\t                return 1;\n\t            }\n\t            if (!a || a < 1) {\n\t                a = 1; s = p / 4;\n\t            }\n\t            else {\n\t                s = p * Math.asin(1 / a) / (2 * Math.PI);\n\t            }\n\t            if ((k *= 2) < 1) {\n\t                return -0.5 * (a * Math.pow(2, 10 * (k -= 1))\n\t                    * Math.sin((k - s) * (2 * Math.PI) / p));\n\t            }\n\t            return a * Math.pow(2, -10 * (k -= 1))\n\t                    * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\n\t        },\n\n\t        // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        backIn: function (k) {\n\t            var s = 1.70158;\n\t            return k * k * ((s + 1) * k - s);\n\t        },\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        backOut: function (k) {\n\t            var s = 1.70158;\n\t            return --k * k * ((s + 1) * k + s) + 1;\n\t        },\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        backInOut: function (k) {\n\t            var s = 1.70158 * 1.525;\n\t            if ((k *= 2) < 1) {\n\t                return 0.5 * (k * k * ((s + 1) * k - s));\n\t            }\n\t            return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n\t        },\n\n\t        // 创建弹跳效果\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        bounceIn: function (k) {\n\t            return 1 - easing.bounceOut(1 - k);\n\t        },\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        bounceOut: function (k) {\n\t            if (k < (1 / 2.75)) {\n\t                return 7.5625 * k * k;\n\t            }\n\t            else if (k < (2 / 2.75)) {\n\t                return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;\n\t            }\n\t            else if (k < (2.5 / 2.75)) {\n\t                return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;\n\t            }\n\t            else {\n\t                return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;\n\t            }\n\t        },\n\t        /**\n\t        * @param {number} k\n\t        * @return {number}\n\t        */\n\t        bounceInOut: function (k) {\n\t            if (k < 0.5) {\n\t                return easing.bounceIn(k * 2) * 0.5;\n\t            }\n\t            return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;\n\t        }\n\t    };\n\n\t    module.exports = easing;\n\n\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports) {\n\n\t/**\n\t * @module zrender/tool/color\n\t */\n\n\n\t    var kCSSColorTable = {\n\t        'transparent': [0,0,0,0], 'aliceblue': [240,248,255,1],\n\t        'antiquewhite': [250,235,215,1], 'aqua': [0,255,255,1],\n\t        'aquamarine': [127,255,212,1], 'azure': [240,255,255,1],\n\t        'beige': [245,245,220,1], 'bisque': [255,228,196,1],\n\t        'black': [0,0,0,1], 'blanchedalmond': [255,235,205,1],\n\t        'blue': [0,0,255,1], 'blueviolet': [138,43,226,1],\n\t        'brown': [165,42,42,1], 'burlywood': [222,184,135,1],\n\t        'cadetblue': [95,158,160,1], 'chartreuse': [127,255,0,1],\n\t        'chocolate': [210,105,30,1], 'coral': [255,127,80,1],\n\t        'cornflowerblue': [100,149,237,1], 'cornsilk': [255,248,220,1],\n\t        'crimson': [220,20,60,1], 'cyan': [0,255,255,1],\n\t        'darkblue': [0,0,139,1], 'darkcyan': [0,139,139,1],\n\t        'darkgoldenrod': [184,134,11,1], 'darkgray': [169,169,169,1],\n\t        'darkgreen': [0,100,0,1], 'darkgrey': [169,169,169,1],\n\t        'darkkhaki': [189,183,107,1], 'darkmagenta': [139,0,139,1],\n\t        'darkolivegreen': [85,107,47,1], 'darkorange': [255,140,0,1],\n\t        'darkorchid': [153,50,204,1], 'darkred': [139,0,0,1],\n\t        'darksalmon': [233,150,122,1], 'darkseagreen': [143,188,143,1],\n\t        'darkslateblue': [72,61,139,1], 'darkslategray': [47,79,79,1],\n\t        'darkslategrey': [47,79,79,1], 'darkturquoise': [0,206,209,1],\n\t        'darkviolet': [148,0,211,1], 'deeppink': [255,20,147,1],\n\t        'deepskyblue': [0,191,255,1], 'dimgray': [105,105,105,1],\n\t        'dimgrey': [105,105,105,1], 'dodgerblue': [30,144,255,1],\n\t        'firebrick': [178,34,34,1], 'floralwhite': [255,250,240,1],\n\t        'forestgreen': [34,139,34,1], 'fuchsia': [255,0,255,1],\n\t        'gainsboro': [220,220,220,1], 'ghostwhite': [248,248,255,1],\n\t        'gold': [255,215,0,1], 'goldenrod': [218,165,32,1],\n\t        'gray': [128,128,128,1], 'green': [0,128,0,1],\n\t        'greenyellow': [173,255,47,1], 'grey': [128,128,128,1],\n\t        'honeydew': [240,255,240,1], 'hotpink': [255,105,180,1],\n\t        'indianred': [205,92,92,1], 'indigo': [75,0,130,1],\n\t        'ivory': [255,255,240,1], 'khaki': [240,230,140,1],\n\t        'lavender': [230,230,250,1], 'lavenderblush': [255,240,245,1],\n\t        'lawngreen': [124,252,0,1], 'lemonchiffon': [255,250,205,1],\n\t        'lightblue': [173,216,230,1], 'lightcoral': [240,128,128,1],\n\t        'lightcyan': [224,255,255,1], 'lightgoldenrodyellow': [250,250,210,1],\n\t        'lightgray': [211,211,211,1], 'lightgreen': [144,238,144,1],\n\t        'lightgrey': [211,211,211,1], 'lightpink': [255,182,193,1],\n\t        'lightsalmon': [255,160,122,1], 'lightseagreen': [32,178,170,1],\n\t        'lightskyblue': [135,206,250,1], 'lightslategray': [119,136,153,1],\n\t        'lightslategrey': [119,136,153,1], 'lightsteelblue': [176,196,222,1],\n\t        'lightyellow': [255,255,224,1], 'lime': [0,255,0,1],\n\t        'limegreen': [50,205,50,1], 'linen': [250,240,230,1],\n\t        'magenta': [255,0,255,1], 'maroon': [128,0,0,1],\n\t        'mediumaquamarine': [102,205,170,1], 'mediumblue': [0,0,205,1],\n\t        'mediumorchid': [186,85,211,1], 'mediumpurple': [147,112,219,1],\n\t        'mediumseagreen': [60,179,113,1], 'mediumslateblue': [123,104,238,1],\n\t        'mediumspringgreen': [0,250,154,1], 'mediumturquoise': [72,209,204,1],\n\t        'mediumvioletred': [199,21,133,1], 'midnightblue': [25,25,112,1],\n\t        'mintcream': [245,255,250,1], 'mistyrose': [255,228,225,1],\n\t        'moccasin': [255,228,181,1], 'navajowhite': [255,222,173,1],\n\t        'navy': [0,0,128,1], 'oldlace': [253,245,230,1],\n\t        'olive': [128,128,0,1], 'olivedrab': [107,142,35,1],\n\t        'orange': [255,165,0,1], 'orangered': [255,69,0,1],\n\t        'orchid': [218,112,214,1], 'palegoldenrod': [238,232,170,1],\n\t        'palegreen': [152,251,152,1], 'paleturquoise': [175,238,238,1],\n\t        'palevioletred': [219,112,147,1], 'papayawhip': [255,239,213,1],\n\t        'peachpuff': [255,218,185,1], 'peru': [205,133,63,1],\n\t        'pink': [255,192,203,1], 'plum': [221,160,221,1],\n\t        'powderblue': [176,224,230,1], 'purple': [128,0,128,1],\n\t        'red': [255,0,0,1], 'rosybrown': [188,143,143,1],\n\t        'royalblue': [65,105,225,1], 'saddlebrown': [139,69,19,1],\n\t        'salmon': [250,128,114,1], 'sandybrown': [244,164,96,1],\n\t        'seagreen': [46,139,87,1], 'seashell': [255,245,238,1],\n\t        'sienna': [160,82,45,1], 'silver': [192,192,192,1],\n\t        'skyblue': [135,206,235,1], 'slateblue': [106,90,205,1],\n\t        'slategray': [112,128,144,1], 'slategrey': [112,128,144,1],\n\t        'snow': [255,250,250,1], 'springgreen': [0,255,127,1],\n\t        'steelblue': [70,130,180,1], 'tan': [210,180,140,1],\n\t        'teal': [0,128,128,1], 'thistle': [216,191,216,1],\n\t        'tomato': [255,99,71,1], 'turquoise': [64,224,208,1],\n\t        'violet': [238,130,238,1], 'wheat': [245,222,179,1],\n\t        'white': [255,255,255,1], 'whitesmoke': [245,245,245,1],\n\t        'yellow': [255,255,0,1], 'yellowgreen': [154,205,50,1]\n\t    };\n\n\t    function clampCssByte(i) {  // Clamp to integer 0 .. 255.\n\t        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).\n\t        return i < 0 ? 0 : i > 255 ? 255 : i;\n\t    }\n\n\t    function clampCssAngle(i) {  // Clamp to integer 0 .. 360.\n\t        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).\n\t        return i < 0 ? 0 : i > 360 ? 360 : i;\n\t    }\n\n\t    function clampCssFloat(f) {  // Clamp to float 0.0 .. 1.0.\n\t        return f < 0 ? 0 : f > 1 ? 1 : f;\n\t    }\n\n\t    function parseCssInt(str) {  // int or percentage.\n\t        if (str.length && str.charAt(str.length - 1) === '%') {\n\t            return clampCssByte(parseFloat(str) / 100 * 255);\n\t        }\n\t        return clampCssByte(parseInt(str, 10));\n\t    }\n\n\t    function parseCssFloat(str) {  // float or percentage.\n\t        if (str.length && str.charAt(str.length - 1) === '%') {\n\t            return clampCssFloat(parseFloat(str) / 100);\n\t        }\n\t        return clampCssFloat(parseFloat(str));\n\t    }\n\n\t    function cssHueToRgb(m1, m2, h) {\n\t        if (h < 0) {\n\t            h += 1;\n\t        }\n\t        else if (h > 1) {\n\t            h -= 1;\n\t        }\n\n\t        if (h * 6 < 1) {\n\t            return m1 + (m2 - m1) * h * 6;\n\t        }\n\t        if (h * 2 < 1) {\n\t            return m2;\n\t        }\n\t        if (h * 3 < 2) {\n\t            return m1 + (m2 - m1) * (2/3 - h) * 6;\n\t        }\n\t        return m1;\n\t    }\n\n\t    function lerp(a, b, p) {\n\t        return a + (b - a) * p;\n\t    }\n\n\t    /**\n\t     * @param {string} colorStr\n\t     * @return {Array.<number>}\n\t     * @memberOf module:zrender/util/color\n\t     */\n\t    function parse(colorStr) {\n\t        if (!colorStr) {\n\t            return;\n\t        }\n\t        // colorStr may be not string\n\t        colorStr = colorStr + '';\n\t        // Remove all whitespace, not compliant, but should just be more accepting.\n\t        var str = colorStr.replace(/ /g, '').toLowerCase();\n\n\t        // Color keywords (and transparent) lookup.\n\t        if (str in kCSSColorTable) {\n\t            return kCSSColorTable[str].slice();  // dup.\n\t        }\n\n\t        // #abc and #abc123 syntax.\n\t        if (str.charAt(0) === '#') {\n\t            if (str.length === 4) {\n\t                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\n\t                if (!(iv >= 0 && iv <= 0xfff)) {\n\t                    return;  // Covers NaN.\n\t                }\n\t                return [\n\t                    ((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),\n\t                    (iv & 0xf0) | ((iv & 0xf0) >> 4),\n\t                    (iv & 0xf) | ((iv & 0xf) << 4),\n\t                    1\n\t                ];\n\t            }\n\t            else if (str.length === 7) {\n\t                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\n\t                if (!(iv >= 0 && iv <= 0xffffff)) {\n\t                    return;  // Covers NaN.\n\t                }\n\t                return [\n\t                    (iv & 0xff0000) >> 16,\n\t                    (iv & 0xff00) >> 8,\n\t                    iv & 0xff,\n\t                    1\n\t                ];\n\t            }\n\n\t            return;\n\t        }\n\t        var op = str.indexOf('('), ep = str.indexOf(')');\n\t        if (op !== -1 && ep + 1 === str.length) {\n\t            var fname = str.substr(0, op);\n\t            var params = str.substr(op + 1, ep - (op + 1)).split(',');\n\t            var alpha = 1;  // To allow case fallthrough.\n\t            switch (fname) {\n\t                case 'rgba':\n\t                    if (params.length !== 4) {\n\t                        return;\n\t                    }\n\t                    alpha = parseCssFloat(params.pop()); // jshint ignore:line\n\t                // Fall through.\n\t                case 'rgb':\n\t                    if (params.length !== 3) {\n\t                        return;\n\t                    }\n\t                    return [\n\t                        parseCssInt(params[0]),\n\t                        parseCssInt(params[1]),\n\t                        parseCssInt(params[2]),\n\t                        alpha\n\t                    ];\n\t                case 'hsla':\n\t                    if (params.length !== 4) {\n\t                        return;\n\t                    }\n\t                    params[3] = parseCssFloat(params[3]);\n\t                    return hsla2rgba(params);\n\t                case 'hsl':\n\t                    if (params.length !== 3) {\n\t                        return;\n\t                    }\n\t                    return hsla2rgba(params);\n\t                default:\n\t                    return;\n\t            }\n\t        }\n\n\t        return;\n\t    }\n\n\t    /**\n\t     * @param {Array.<number>} hsla\n\t     * @return {Array.<number>} rgba\n\t     */\n\t    function hsla2rgba(hsla) {\n\t        var h = (((parseFloat(hsla[0]) % 360) + 360) % 360) / 360;  // 0 .. 1\n\t        // NOTE(deanm): According to the CSS spec s/l should only be\n\t        // percentages, but we don't bother and let float or percentage.\n\t        var s = parseCssFloat(hsla[1]);\n\t        var l = parseCssFloat(hsla[2]);\n\t        var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n\t        var m1 = l * 2 - m2;\n\n\t        var rgba = [\n\t            clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255),\n\t            clampCssByte(cssHueToRgb(m1, m2, h) * 255),\n\t            clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255)\n\t        ];\n\n\t        if (hsla.length === 4) {\n\t            rgba[3] = hsla[3];\n\t        }\n\n\t        return rgba;\n\t    }\n\n\t    /**\n\t     * @param {Array.<number>} rgba\n\t     * @return {Array.<number>} hsla\n\t     */\n\t    function rgba2hsla(rgba) {\n\t        if (!rgba) {\n\t            return;\n\t        }\n\n\t        // RGB from 0 to 255\n\t        var R = rgba[0] / 255;\n\t        var G = rgba[1] / 255;\n\t        var B = rgba[2] / 255;\n\n\t        var vMin = Math.min(R, G, B); // Min. value of RGB\n\t        var vMax = Math.max(R, G, B); // Max. value of RGB\n\t        var delta = vMax - vMin; // Delta RGB value\n\n\t        var L = (vMax + vMin) / 2;\n\t        var H;\n\t        var S;\n\t        // HSL results from 0 to 1\n\t        if (delta === 0) {\n\t            H = 0;\n\t            S = 0;\n\t        }\n\t        else {\n\t            if (L < 0.5) {\n\t                S = delta / (vMax + vMin);\n\t            }\n\t            else {\n\t                S = delta / (2 - vMax - vMin);\n\t            }\n\n\t            var deltaR = (((vMax - R) / 6) + (delta / 2)) / delta;\n\t            var deltaG = (((vMax - G) / 6) + (delta / 2)) / delta;\n\t            var deltaB = (((vMax - B) / 6) + (delta / 2)) / delta;\n\n\t            if (R === vMax) {\n\t                H = deltaB - deltaG;\n\t            }\n\t            else if (G === vMax) {\n\t                H = (1 / 3) + deltaR - deltaB;\n\t            }\n\t            else if (B === vMax) {\n\t                H = (2 / 3) + deltaG - deltaR;\n\t            }\n\n\t            if (H < 0) {\n\t                H += 1;\n\t            }\n\n\t            if (H > 1) {\n\t                H -= 1;\n\t            }\n\t        }\n\n\t        var hsla = [H * 360, S, L];\n\n\t        if (rgba[3] != null) {\n\t            hsla.push(rgba[3]);\n\t        }\n\n\t        return hsla;\n\t    }\n\n\t    /**\n\t     * @param {string} color\n\t     * @param {number} level\n\t     * @return {string}\n\t     * @memberOf module:zrender/util/color\n\t     */\n\t    function lift(color, level) {\n\t        var colorArr = parse(color);\n\t        if (colorArr) {\n\t            for (var i = 0; i < 3; i++) {\n\t                if (level < 0) {\n\t                    colorArr[i] = colorArr[i] * (1 - level) | 0;\n\t                }\n\t                else {\n\t                    colorArr[i] = ((255 - colorArr[i]) * level + colorArr[i]) | 0;\n\t                }\n\t            }\n\t            return stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');\n\t        }\n\t    }\n\n\t    /**\n\t     * @param {string} color\n\t     * @return {string}\n\t     * @memberOf module:zrender/util/color\n\t     */\n\t    function toHex(color, level) {\n\t        var colorArr = parse(color);\n\t        if (colorArr) {\n\t            return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + (+colorArr[2])).toString(16).slice(1);\n\t        }\n\t    }\n\n\t    /**\n\t     * Map value to color. Faster than mapToColor methods because color is represented by rgba array\n\t     * @param {number} normalizedValue A float between 0 and 1.\n\t     * @param {Array.<Array.<number>>} colors List of rgba color array\n\t     * @param {Array.<number>} [out] Mapped gba color array\n\t     * @return {Array.<number>}\n\t     */\n\t    function fastMapToColor(normalizedValue, colors, out) {\n\t        if (!(colors && colors.length)\n\t            || !(normalizedValue >= 0 && normalizedValue <= 1)\n\t        ) {\n\t            return;\n\t        }\n\t        out = out || [0, 0, 0, 0];\n\t        var value = normalizedValue * (colors.length - 1);\n\t        var leftIndex = Math.floor(value);\n\t        var rightIndex = Math.ceil(value);\n\t        var leftColor = colors[leftIndex];\n\t        var rightColor = colors[rightIndex];\n\t        var dv = value - leftIndex;\n\t        out[0] = clampCssByte(lerp(leftColor[0], rightColor[0], dv));\n\t        out[1] = clampCssByte(lerp(leftColor[1], rightColor[1], dv));\n\t        out[2] = clampCssByte(lerp(leftColor[2], rightColor[2], dv));\n\t        out[3] = clampCssByte(lerp(leftColor[3], rightColor[3], dv));\n\t        return out;\n\t    }\n\t    /**\n\t     * @param {number} normalizedValue A float between 0 and 1.\n\t     * @param {Array.<string>} colors Color list.\n\t     * @param {boolean=} fullOutput Default false.\n\t     * @return {(string|Object)} Result color. If fullOutput,\n\t     *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},\n\t     * @memberOf module:zrender/util/color\n\t     */\n\t    function mapToColor(normalizedValue, colors, fullOutput) {\n\t        if (!(colors && colors.length)\n\t            || !(normalizedValue >= 0 && normalizedValue <= 1)\n\t        ) {\n\t            return;\n\t        }\n\n\t        var value = normalizedValue * (colors.length - 1);\n\t        var leftIndex = Math.floor(value);\n\t        var rightIndex = Math.ceil(value);\n\t        var leftColor = parse(colors[leftIndex]);\n\t        var rightColor = parse(colors[rightIndex]);\n\t        var dv = value - leftIndex;\n\n\t        var color = stringify(\n\t            [\n\t                clampCssByte(lerp(leftColor[0], rightColor[0], dv)),\n\t                clampCssByte(lerp(leftColor[1], rightColor[1], dv)),\n\t                clampCssByte(lerp(leftColor[2], rightColor[2], dv)),\n\t                clampCssFloat(lerp(leftColor[3], rightColor[3], dv))\n\t            ],\n\t            'rgba'\n\t        );\n\n\t        return fullOutput\n\t            ? {\n\t                color: color,\n\t                leftIndex: leftIndex,\n\t                rightIndex: rightIndex,\n\t                value: value\n\t            }\n\t            : color;\n\t    }\n\n\t    /**\n\t     * @param {string} color\n\t     * @param {number=} h 0 ~ 360, ignore when null.\n\t     * @param {number=} s 0 ~ 1, ignore when null.\n\t     * @param {number=} l 0 ~ 1, ignore when null.\n\t     * @return {string} Color string in rgba format.\n\t     * @memberOf module:zrender/util/color\n\t     */\n\t    function modifyHSL(color, h, s, l) {\n\t        color = parse(color);\n\n\t        if (color) {\n\t            color = rgba2hsla(color);\n\t            h != null && (color[0] = clampCssAngle(h));\n\t            s != null && (color[1] = parseCssFloat(s));\n\t            l != null && (color[2] = parseCssFloat(l));\n\n\t            return stringify(hsla2rgba(color), 'rgba');\n\t        }\n\t    }\n\n\t    /**\n\t     * @param {string} color\n\t     * @param {number=} alpha 0 ~ 1\n\t     * @return {string} Color string in rgba format.\n\t     * @memberOf module:zrender/util/color\n\t     */\n\t    function modifyAlpha(color, alpha) {\n\t        color = parse(color);\n\n\t        if (color && alpha != null) {\n\t            color[3] = clampCssFloat(alpha);\n\t            return stringify(color, 'rgba');\n\t        }\n\t    }\n\n\t    /**\n\t     * @param {Array.<string>} colors Color list.\n\t     * @param {string} type 'rgba', 'hsva', ...\n\t     * @return {string} Result color.\n\t     */\n\t    function stringify(arrColor, type) {\n\t        var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];\n\t        if (type === 'rgba' || type === 'hsva' || type === 'hsla') {\n\t            colorStr += ',' + arrColor[3];\n\t        }\n\t        return type + '(' + colorStr + ')';\n\t    }\n\n\t    module.exports = {\n\t        parse: parse,\n\t        lift: lift,\n\t        toHex: toHex,\n\t        fastMapToColor: fastMapToColor,\n\t        mapToColor: mapToColor,\n\t        modifyHSL: modifyHSL,\n\t        modifyAlpha: modifyAlpha,\n\t        stringify: stringify\n\t    };\n\n\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t        var config = __webpack_require__(41);\n\n\t        /**\n\t         * @exports zrender/tool/log\n\t         * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n\t         */\n\t        module.exports = function() {\n\t            if (config.debugMode === 0) {\n\t                return;\n\t            }\n\t            else if (config.debugMode == 1) {\n\t                for (var k in arguments) {\n\t                    throw new Error(arguments[k]);\n\t                }\n\t            }\n\t            else if (config.debugMode > 1) {\n\t                for (var k in arguments) {\n\t                    console.log(arguments[k]);\n\t                }\n\t            }\n\t        };\n\n\t        /* for debug\n\t        return function(mes) {\n\t            document.getElementById('wrong-message').innerHTML =\n\t                mes + ' ' + (new Date() - 0)\n\t                + '<br/>'\n\t                + document.getElementById('wrong-message').innerHTML;\n\t        };\n\t        */\n\t    \n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports) {\n\n\t\n\t    var dpr = 1;\n\t    // If in browser environment\n\t    if (typeof window !== 'undefined') {\n\t        dpr = Math.max(window.devicePixelRatio || 1, 1);\n\t    }\n\t    /**\n\t     * config默认配置项\n\t     * @exports zrender/config\n\t     * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n\t     */\n\t    var config = {\n\t        /**\n\t         * debug日志选项：catchBrushException为true下有效\n\t         * 0 : 不生成debug数据，发布用\n\t         * 1 : 异常抛出，调试用\n\t         * 2 : 控制台输出，调试用\n\t         */\n\t        debugMode: 0,\n\n\t        // retina 屏幕优化\n\t        devicePixelRatio: dpr\n\t    };\n\t    module.exports = config;\n\n\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var Group = __webpack_require__(30);\n\t    var componentUtil = __webpack_require__(20);\n\t    var clazzUtil = __webpack_require__(13);\n\t    var modelUtil = __webpack_require__(5);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    function Chart() {\n\n\t        /**\n\t         * @type {module:zrender/container/Group}\n\t         * @readOnly\n\t         */\n\t        this.group = new Group();\n\n\t        /**\n\t         * @type {string}\n\t         * @readOnly\n\t         */\n\t        this.uid = componentUtil.getUID('viewChart');\n\t    }\n\n\t    Chart.prototype = {\n\n\t        type: 'chart',\n\n\t        /**\n\t         * Init the chart\n\t         * @param  {module:echarts/model/Global} ecModel\n\t         * @param  {module:echarts/ExtensionAPI} api\n\t         */\n\t        init: function (ecModel, api) {},\n\n\t        /**\n\t         * Render the chart\n\t         * @param  {module:echarts/model/Series} seriesModel\n\t         * @param  {module:echarts/model/Global} ecModel\n\t         * @param  {module:echarts/ExtensionAPI} api\n\t         * @param  {Object} payload\n\t         */\n\t        render: function (seriesModel, ecModel, api, payload) {},\n\n\t        /**\n\t         * Highlight series or specified data item\n\t         * @param  {module:echarts/model/Series} seriesModel\n\t         * @param  {module:echarts/model/Global} ecModel\n\t         * @param  {module:echarts/ExtensionAPI} api\n\t         * @param  {Object} payload\n\t         */\n\t        highlight: function (seriesModel, ecModel, api, payload) {\n\t            toggleHighlight(seriesModel.getData(), payload, 'emphasis');\n\t        },\n\n\t        /**\n\t         * Downplay series or specified data item\n\t         * @param  {module:echarts/model/Series} seriesModel\n\t         * @param  {module:echarts/model/Global} ecModel\n\t         * @param  {module:echarts/ExtensionAPI} api\n\t         * @param  {Object} payload\n\t         */\n\t        downplay: function (seriesModel, ecModel, api, payload) {\n\t            toggleHighlight(seriesModel.getData(), payload, 'normal');\n\t        },\n\n\t        /**\n\t         * Remove self\n\t         * @param  {module:echarts/model/Global} ecModel\n\t         * @param  {module:echarts/ExtensionAPI} api\n\t         */\n\t        remove: function (ecModel, api) {\n\t            this.group.removeAll();\n\t        },\n\n\t        /**\n\t         * Dispose self\n\t         * @param  {module:echarts/model/Global} ecModel\n\t         * @param  {module:echarts/ExtensionAPI} api\n\t         */\n\t        dispose: function () {}\n\n\t        /**\n\t         * The view contains the given point.\n\t         * @interface\n\t         * @param {Array.<number>} point\n\t         * @return {boolean}\n\t         */\n\t        // containPoint: function () {}\n\n\t    };\n\n\t    var chartProto = Chart.prototype;\n\t    chartProto.updateView\n\t        = chartProto.updateLayout\n\t        = chartProto.updateVisual\n\t        = function (seriesModel, ecModel, api, payload) {\n\t            this.render(seriesModel, ecModel, api, payload);\n\t        };\n\n\t    /**\n\t     * Set state of single element\n\t     * @param  {module:zrender/Element} el\n\t     * @param  {string} state\n\t     */\n\t    function elSetState(el, state) {\n\t        if (el) {\n\t            el.trigger(state);\n\t            if (el.type === 'group') {\n\t                for (var i = 0; i < el.childCount(); i++) {\n\t                    elSetState(el.childAt(i), state);\n\t                }\n\t            }\n\t        }\n\t    }\n\t    /**\n\t     * @param  {module:echarts/data/List} data\n\t     * @param  {Object} payload\n\t     * @param  {string} state 'normal'|'emphasis'\n\t     * @inner\n\t     */\n\t    function toggleHighlight(data, payload, state) {\n\t        var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n\t        if (dataIndex != null) {\n\t            zrUtil.each(modelUtil.normalizeToArray(dataIndex), function (dataIdx) {\n\t                elSetState(data.getItemGraphicEl(dataIdx), state);\n\t            });\n\t        }\n\t        else {\n\t            data.eachItemGraphicEl(function (el) {\n\t                elSetState(el, state);\n\t            });\n\t        }\n\t    }\n\n\t    // Enable Chart.extend.\n\t    clazzUtil.enableClassExtend(Chart, ['dispose']);\n\n\t    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n\t    clazzUtil.enableClassManagement(Chart, {registerWhenExtend: true});\n\n\t    module.exports = Chart;\n\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var pathTool = __webpack_require__(44);\n\t    var round = Math.round;\n\t    var Path = __webpack_require__(45);\n\t    var colorTool = __webpack_require__(39);\n\t    var matrix = __webpack_require__(11);\n\t    var vector = __webpack_require__(10);\n\n\t    var graphic = {};\n\n\t    graphic.Group = __webpack_require__(30);\n\n\t    graphic.Image = __webpack_require__(61);\n\n\t    graphic.Text = __webpack_require__(63);\n\n\t    graphic.Circle = __webpack_require__(64);\n\n\t    graphic.Sector = __webpack_require__(65);\n\n\t    graphic.Ring = __webpack_require__(66);\n\n\t    graphic.Polygon = __webpack_require__(67);\n\n\t    graphic.Polyline = __webpack_require__(71);\n\n\t    graphic.Rect = __webpack_require__(72);\n\n\t    graphic.Line = __webpack_require__(74);\n\n\t    graphic.BezierCurve = __webpack_require__(75);\n\n\t    graphic.Arc = __webpack_require__(76);\n\n\t    graphic.CompoundPath = __webpack_require__(77);\n\n\t    graphic.LinearGradient = __webpack_require__(78);\n\n\t    graphic.RadialGradient = __webpack_require__(80);\n\n\t    graphic.BoundingRect = __webpack_require__(9);\n\n\t    /**\n\t     * Extend shape with parameters\n\t     */\n\t    graphic.extendShape = function (opts) {\n\t        return Path.extend(opts);\n\t    };\n\n\t    /**\n\t     * Extend path\n\t     */\n\t    graphic.extendPath = function (pathData, opts) {\n\t        return pathTool.extendFromString(pathData, opts);\n\t    };\n\n\t    /**\n\t     * Create a path element from path data string\n\t     * @param {string} pathData\n\t     * @param {Object} opts\n\t     * @param {module:zrender/core/BoundingRect} rect\n\t     * @param {string} [layout=cover] 'center' or 'cover'\n\t     */\n\t    graphic.makePath = function (pathData, opts, rect, layout) {\n\t        var path = pathTool.createFromString(pathData, opts);\n\t        var boundingRect = path.getBoundingRect();\n\t        if (rect) {\n\t            var aspect = boundingRect.width / boundingRect.height;\n\n\t            if (layout === 'center') {\n\t                // Set rect to center, keep width / height ratio.\n\t                var width = rect.height * aspect;\n\t                var height;\n\t                if (width <= rect.width) {\n\t                    height = rect.height;\n\t                }\n\t                else {\n\t                    width = rect.width;\n\t                    height = width / aspect;\n\t                }\n\t                var cx = rect.x + rect.width / 2;\n\t                var cy = rect.y + rect.height / 2;\n\n\t                rect.x = cx - width / 2;\n\t                rect.y = cy - height / 2;\n\t                rect.width = width;\n\t                rect.height = height;\n\t            }\n\n\t            graphic.resizePath(path, rect);\n\t        }\n\t        return path;\n\t    };\n\n\t    graphic.mergePath = pathTool.mergePath,\n\n\t    /**\n\t     * Resize a path to fit the rect\n\t     * @param {module:zrender/graphic/Path} path\n\t     * @param {Object} rect\n\t     */\n\t    graphic.resizePath = function (path, rect) {\n\t        if (!path.applyTransform) {\n\t            return;\n\t        }\n\n\t        var pathRect = path.getBoundingRect();\n\n\t        var m = pathRect.calculateTransform(rect);\n\n\t        path.applyTransform(m);\n\t    };\n\n\t    /**\n\t     * Sub pixel optimize line for canvas\n\t     *\n\t     * @param {Object} param\n\t     * @param {Object} [param.shape]\n\t     * @param {number} [param.shape.x1]\n\t     * @param {number} [param.shape.y1]\n\t     * @param {number} [param.shape.x2]\n\t     * @param {number} [param.shape.y2]\n\t     * @param {Object} [param.style]\n\t     * @param {number} [param.style.lineWidth]\n\t     * @return {Object} Modified param\n\t     */\n\t    graphic.subPixelOptimizeLine = function (param) {\n\t        var subPixelOptimize = graphic.subPixelOptimize;\n\t        var shape = param.shape;\n\t        var lineWidth = param.style.lineWidth;\n\n\t        if (round(shape.x1 * 2) === round(shape.x2 * 2)) {\n\t            shape.x1 = shape.x2 = subPixelOptimize(shape.x1, lineWidth, true);\n\t        }\n\t        if (round(shape.y1 * 2) === round(shape.y2 * 2)) {\n\t            shape.y1 = shape.y2 = subPixelOptimize(shape.y1, lineWidth, true);\n\t        }\n\t        return param;\n\t    };\n\n\t    /**\n\t     * Sub pixel optimize rect for canvas\n\t     *\n\t     * @param {Object} param\n\t     * @param {Object} [param.shape]\n\t     * @param {number} [param.shape.x]\n\t     * @param {number} [param.shape.y]\n\t     * @param {number} [param.shape.width]\n\t     * @param {number} [param.shape.height]\n\t     * @param {Object} [param.style]\n\t     * @param {number} [param.style.lineWidth]\n\t     * @return {Object} Modified param\n\t     */\n\t    graphic.subPixelOptimizeRect = function (param) {\n\t        var subPixelOptimize = graphic.subPixelOptimize;\n\t        var shape = param.shape;\n\t        var lineWidth = param.style.lineWidth;\n\t        var originX = shape.x;\n\t        var originY = shape.y;\n\t        var originWidth = shape.width;\n\t        var originHeight = shape.height;\n\t        shape.x = subPixelOptimize(shape.x, lineWidth, true);\n\t        shape.y = subPixelOptimize(shape.y, lineWidth, true);\n\t        shape.width = Math.max(\n\t            subPixelOptimize(originX + originWidth, lineWidth, false) - shape.x,\n\t            originWidth === 0 ? 0 : 1\n\t        );\n\t        shape.height = Math.max(\n\t            subPixelOptimize(originY + originHeight, lineWidth, false) - shape.y,\n\t            originHeight === 0 ? 0 : 1\n\t        );\n\t        return param;\n\t    };\n\n\t    /**\n\t     * Sub pixel optimize for canvas\n\t     *\n\t     * @param {number} position Coordinate, such as x, y\n\t     * @param {number} lineWidth Should be nonnegative integer.\n\t     * @param {boolean=} positiveOrNegative Default false (negative).\n\t     * @return {number} Optimized position.\n\t     */\n\t    graphic.subPixelOptimize = function (position, lineWidth, positiveOrNegative) {\n\t        // Assure that (position + lineWidth / 2) is near integer edge,\n\t        // otherwise line will be fuzzy in canvas.\n\t        var doubledPosition = round(position * 2);\n\t        return (doubledPosition + round(lineWidth)) % 2 === 0\n\t            ? doubledPosition / 2\n\t            : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;\n\t    };\n\n\t    function hasFillOrStroke(fillOrStroke) {\n\t        return fillOrStroke != null && fillOrStroke != 'none';\n\t    }\n\n\t    function liftColor(color) {\n\t        return typeof color === 'string' ? colorTool.lift(color, -0.1) : color;\n\t    }\n\n\t    /**\n\t     * @private\n\t     */\n\t    function cacheElementStl(el) {\n\t        if (el.__hoverStlDirty) {\n\t            var stroke = el.style.stroke;\n\t            var fill = el.style.fill;\n\n\t            // Create hoverStyle on mouseover\n\t            var hoverStyle = el.__hoverStl;\n\t            hoverStyle.fill = hoverStyle.fill\n\t                || (hasFillOrStroke(fill) ? liftColor(fill) : null);\n\t            hoverStyle.stroke = hoverStyle.stroke\n\t                || (hasFillOrStroke(stroke) ? liftColor(stroke) : null);\n\n\t            var normalStyle = {};\n\t            for (var name in hoverStyle) {\n\t                if (hoverStyle.hasOwnProperty(name)) {\n\t                    normalStyle[name] = el.style[name];\n\t                }\n\t            }\n\n\t            el.__normalStl = normalStyle;\n\n\t            el.__hoverStlDirty = false;\n\t        }\n\t    }\n\n\t    /**\n\t     * @private\n\t     */\n\t    function doSingleEnterHover(el) {\n\t        if (el.__isHover) {\n\t            return;\n\t        }\n\n\t        cacheElementStl(el);\n\n\t        if (el.useHoverLayer) {\n\t            el.__zr && el.__zr.addHover(el, el.__hoverStl);\n\t        }\n\t        else {\n\t            el.setStyle(el.__hoverStl);\n\t            el.z2 += 1;\n\t        }\n\n\t        el.__isHover = true;\n\t    }\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function doSingleLeaveHover(el) {\n\t        if (!el.__isHover) {\n\t            return;\n\t        }\n\n\t        var normalStl = el.__normalStl;\n\t        if (el.useHoverLayer) {\n\t            el.__zr && el.__zr.removeHover(el);\n\t        }\n\t        else {\n\t            normalStl && el.setStyle(normalStl);\n\t            el.z2 -= 1;\n\t        }\n\n\t        el.__isHover = false;\n\t    }\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function doEnterHover(el) {\n\t        el.type === 'group'\n\t            ? el.traverse(function (child) {\n\t                if (child.type !== 'group') {\n\t                    doSingleEnterHover(child);\n\t                }\n\t            })\n\t            : doSingleEnterHover(el);\n\t    }\n\n\t    function doLeaveHover(el) {\n\t        el.type === 'group'\n\t            ? el.traverse(function (child) {\n\t                if (child.type !== 'group') {\n\t                    doSingleLeaveHover(child);\n\t                }\n\t            })\n\t            : doSingleLeaveHover(el);\n\t    }\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function setElementHoverStl(el, hoverStl) {\n\t        // If element has sepcified hoverStyle, then use it instead of given hoverStyle\n\t        // Often used when item group has a label element and it's hoverStyle is different\n\t        el.__hoverStl = el.hoverStyle || hoverStl || {};\n\t        el.__hoverStlDirty = true;\n\n\t        if (el.__isHover) {\n\t            cacheElementStl(el);\n\t        }\n\t    }\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function onElementMouseOver(e) {\n\t        if (this.__hoverSilentOnTouch && e.zrByTouch) {\n\t            return;\n\t        }\n\n\t        // Only if element is not in emphasis status\n\t        !this.__isEmphasis && doEnterHover(this);\n\t    }\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function onElementMouseOut(e) {\n\t        if (this.__hoverSilentOnTouch && e.zrByTouch) {\n\t            return;\n\t        }\n\n\t        // Only if element is not in emphasis status\n\t        !this.__isEmphasis && doLeaveHover(this);\n\t    }\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function enterEmphasis() {\n\t        this.__isEmphasis = true;\n\t        doEnterHover(this);\n\t    }\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function leaveEmphasis() {\n\t        this.__isEmphasis = false;\n\t        doLeaveHover(this);\n\t    }\n\n\t    /**\n\t     * Set hover style of element\n\t     * @param {module:zrender/Element} el\n\t     * @param {Object} [hoverStyle]\n\t     * @param {Object} [opt]\n\t     * @param {boolean} [opt.hoverSilentOnTouch=false]\n\t     *        In touch device, mouseover event will be trigger on touchstart event\n\t     *        (see module:zrender/dom/HandlerProxy). By this mechanism, we can\n\t     *        conviniently use hoverStyle when tap on touch screen without additional\n\t     *        code for compatibility.\n\t     *        But if the chart/component has select feature, which usually also use\n\t     *        hoverStyle, there might be conflict between 'select-highlight' and\n\t     *        'hover-highlight' especially when roam is enabled (see geo for example).\n\t     *        In this case, hoverSilentOnTouch should be used to disable hover-highlight\n\t     *        on touch device.\n\t     */\n\t    graphic.setHoverStyle = function (el, hoverStyle, opt) {\n\t        el.__hoverSilentOnTouch = opt && opt.hoverSilentOnTouch;\n\n\t        el.type === 'group'\n\t            ? el.traverse(function (child) {\n\t                if (child.type !== 'group') {\n\t                    setElementHoverStl(child, hoverStyle);\n\t                }\n\t            })\n\t            : setElementHoverStl(el, hoverStyle);\n\n\t        // Duplicated function will be auto-ignored, see Eventful.js.\n\t        el.on('mouseover', onElementMouseOver)\n\t          .on('mouseout', onElementMouseOut);\n\n\t        // Emphasis, normal can be triggered manually\n\t        el.on('emphasis', enterEmphasis)\n\t          .on('normal', leaveEmphasis);\n\t    };\n\n\t    /**\n\t     * Set text option in the style\n\t     * @param {Object} textStyle\n\t     * @param {module:echarts/model/Model} labelModel\n\t     * @param {string} color\n\t     */\n\t    graphic.setText = function (textStyle, labelModel, color) {\n\t        var labelPosition = labelModel.getShallow('position') || 'inside';\n\t        var labelOffset = labelModel.getShallow('offset');\n\t        var labelColor = labelPosition.indexOf('inside') >= 0 ? 'white' : color;\n\t        var textStyleModel = labelModel.getModel('textStyle');\n\t        zrUtil.extend(textStyle, {\n\t            textDistance: labelModel.getShallow('distance') || 5,\n\t            textFont: textStyleModel.getFont(),\n\t            textPosition: labelPosition,\n\t            textOffset: labelOffset,\n\t            textFill: textStyleModel.getTextColor() || labelColor\n\t        });\n\t    };\n\n\t    function animateOrSetProps(isUpdate, el, props, animatableModel, dataIndex, cb) {\n\t        if (typeof dataIndex === 'function') {\n\t            cb = dataIndex;\n\t            dataIndex = null;\n\t        }\n\t        // Do not check 'animation' property directly here. Consider this case:\n\t        // animation model is an `itemModel`, whose does not have `isAnimationEnabled`\n\t        // but its parent model (`seriesModel`) does.\n\t        var animationEnabled = animatableModel && animatableModel.isAnimationEnabled();\n\n\t        if (animationEnabled) {\n\t            var postfix = isUpdate ? 'Update' : '';\n\t            var duration = animatableModel.getShallow('animationDuration' + postfix);\n\t            var animationEasing = animatableModel.getShallow('animationEasing' + postfix);\n\t            var animationDelay = animatableModel.getShallow('animationDelay' + postfix);\n\t            if (typeof animationDelay === 'function') {\n\t                animationDelay = animationDelay(\n\t                    dataIndex,\n\t                    animatableModel.getAnimationDelayParams\n\t                        ? animatableModel.getAnimationDelayParams(el, dataIndex)\n\t                        : null\n\t                );\n\t            }\n\t            if (typeof duration === 'function') {\n\t                duration = duration(dataIndex);\n\t            }\n\n\t            duration > 0\n\t                ? el.animateTo(props, duration, animationDelay || 0, animationEasing, cb)\n\t                : (el.attr(props), cb && cb());\n\t        }\n\t        else {\n\t            el.attr(props);\n\t            cb && cb();\n\t        }\n\t    }\n\n\t    /**\n\t     * Update graphic element properties with or without animation according to the configuration in series\n\t     * @param {module:zrender/Element} el\n\t     * @param {Object} props\n\t     * @param {module:echarts/model/Model} [animatableModel]\n\t     * @param {number} [dataIndex]\n\t     * @param {Function} [cb]\n\t     * @example\n\t     *     graphic.updateProps(el, {\n\t     *         position: [100, 100]\n\t     *     }, seriesModel, dataIndex, function () { console.log('Animation done!'); });\n\t     *     // Or\n\t     *     graphic.updateProps(el, {\n\t     *         position: [100, 100]\n\t     *     }, seriesModel, function () { console.log('Animation done!'); });\n\t     */\n\t    graphic.updateProps = function (el, props, animatableModel, dataIndex, cb) {\n\t        animateOrSetProps(true, el, props, animatableModel, dataIndex, cb);\n\t    };\n\n\t    /**\n\t     * Init graphic element properties with or without animation according to the configuration in series\n\t     * @param {module:zrender/Element} el\n\t     * @param {Object} props\n\t     * @param {module:echarts/model/Model} [animatableModel]\n\t     * @param {number} [dataIndex]\n\t     * @param {Function} cb\n\t     */\n\t    graphic.initProps = function (el, props, animatableModel, dataIndex, cb) {\n\t        animateOrSetProps(false, el, props, animatableModel, dataIndex, cb);\n\t    };\n\n\t    /**\n\t     * Get transform matrix of target (param target),\n\t     * in coordinate of its ancestor (param ancestor)\n\t     *\n\t     * @param {module:zrender/mixin/Transformable} target\n\t     * @param {module:zrender/mixin/Transformable} [ancestor]\n\t     */\n\t    graphic.getTransform = function (target, ancestor) {\n\t        var mat = matrix.identity([]);\n\n\t        while (target && target !== ancestor) {\n\t            matrix.mul(mat, target.getLocalTransform(), mat);\n\t            target = target.parent;\n\t        }\n\n\t        return mat;\n\t    };\n\n\t    /**\n\t     * Apply transform to an vertex.\n\t     * @param {Array.<number>} vertex [x, y]\n\t     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]\n\t     * @param {boolean=} invert Whether use invert matrix.\n\t     * @return {Array.<number>} [x, y]\n\t     */\n\t    graphic.applyTransform = function (vertex, transform, invert) {\n\t        if (invert) {\n\t            transform = matrix.invert([], transform);\n\t        }\n\t        return vector.applyTransform([], vertex, transform);\n\t    };\n\n\t    /**\n\t     * @param {string} direction 'left' 'right' 'top' 'bottom'\n\t     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]\n\t     * @param {boolean=} invert Whether use invert matrix.\n\t     * @return {string} Transformed direction. 'left' 'right' 'top' 'bottom'\n\t     */\n\t    graphic.transformDirection = function (direction, transform, invert) {\n\n\t        // Pick a base, ensure that transform result will not be (0, 0).\n\t        var hBase = (transform[4] === 0 || transform[5] === 0 || transform[0] === 0)\n\t            ? 1 : Math.abs(2 * transform[4] / transform[0]);\n\t        var vBase = (transform[4] === 0 || transform[5] === 0 || transform[2] === 0)\n\t            ? 1 : Math.abs(2 * transform[4] / transform[2]);\n\n\t        var vertex = [\n\t            direction === 'left' ? -hBase : direction === 'right' ? hBase : 0,\n\t            direction === 'top' ? -vBase : direction === 'bottom' ? vBase : 0\n\t        ];\n\n\t        vertex = graphic.applyTransform(vertex, transform, invert);\n\n\t        return Math.abs(vertex[0]) > Math.abs(vertex[1])\n\t            ? (vertex[0] > 0 ? 'right' : 'left')\n\t            : (vertex[1] > 0 ? 'bottom' : 'top');\n\t    };\n\n\t    /**\n\t     * Apply group transition animation from g1 to g2\n\t     */\n\t    graphic.groupTransition = function (g1, g2, animatableModel, cb) {\n\t        if (!g1 || !g2) {\n\t            return;\n\t        }\n\n\t        function getElMap(g) {\n\t            var elMap = {};\n\t            g.traverse(function (el) {\n\t                if (!el.isGroup && el.anid) {\n\t                    elMap[el.anid] = el;\n\t                }\n\t            });\n\t            return elMap;\n\t        }\n\t        function getAnimatableProps(el) {\n\t            var obj = {\n\t                position: vector.clone(el.position),\n\t                rotation: el.rotation\n\t            };\n\t            if (el.shape) {\n\t                obj.shape = zrUtil.extend({}, el.shape);\n\t            }\n\t            return obj;\n\t        }\n\t        var elMap1 = getElMap(g1);\n\n\t        g2.traverse(function (el) {\n\t            if (!el.isGroup && el.anid) {\n\t                var oldEl = elMap1[el.anid];\n\t                if (oldEl) {\n\t                    var newProp = getAnimatableProps(el);\n\t                    el.attr(getAnimatableProps(oldEl));\n\t                    graphic.updateProps(el, newProp, animatableModel, el.dataIndex);\n\t                }\n\t                // else {\n\t                //     if (el.previousProps) {\n\t                //         graphic.updateProps\n\t                //     }\n\t                // }\n\t            }\n\t        });\n\t    };\n\n\t    module.exports = graphic;\n\n\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var Path = __webpack_require__(45);\n\t    var PathProxy = __webpack_require__(49);\n\t    var transformPath = __webpack_require__(60);\n\t    var matrix = __webpack_require__(11);\n\n\t    // command chars\n\t    var cc = [\n\t        'm', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z',\n\t        'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'\n\t    ];\n\n\t    var mathSqrt = Math.sqrt;\n\t    var mathSin = Math.sin;\n\t    var mathCos = Math.cos;\n\t    var PI = Math.PI;\n\n\t    var vMag = function(v) {\n\t        return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n\t    };\n\t    var vRatio = function(u, v) {\n\t        return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));\n\t    };\n\t    var vAngle = function(u, v) {\n\t        return (u[0] * v[1] < u[1] * v[0] ? -1 : 1)\n\t                * Math.acos(vRatio(u, v));\n\t    };\n\n\t    function processArc(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg, cmd, path) {\n\t        var psi = psiDeg * (PI / 180.0);\n\t        var xp = mathCos(psi) * (x1 - x2) / 2.0\n\t                 + mathSin(psi) * (y1 - y2) / 2.0;\n\t        var yp = -1 * mathSin(psi) * (x1 - x2) / 2.0\n\t                 + mathCos(psi) * (y1 - y2) / 2.0;\n\n\t        var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);\n\n\t        if (lambda > 1) {\n\t            rx *= mathSqrt(lambda);\n\t            ry *= mathSqrt(lambda);\n\t        }\n\n\t        var f = (fa === fs ? -1 : 1)\n\t            * mathSqrt((((rx * rx) * (ry * ry))\n\t                    - ((rx * rx) * (yp * yp))\n\t                    - ((ry * ry) * (xp * xp))) / ((rx * rx) * (yp * yp)\n\t                    + (ry * ry) * (xp * xp))\n\t                ) || 0;\n\n\t        var cxp = f * rx * yp / ry;\n\t        var cyp = f * -ry * xp / rx;\n\n\t        var cx = (x1 + x2) / 2.0\n\t                 + mathCos(psi) * cxp\n\t                 - mathSin(psi) * cyp;\n\t        var cy = (y1 + y2) / 2.0\n\t                + mathSin(psi) * cxp\n\t                + mathCos(psi) * cyp;\n\n\t        var theta = vAngle([ 1, 0 ], [ (xp - cxp) / rx, (yp - cyp) / ry ]);\n\t        var u = [ (xp - cxp) / rx, (yp - cyp) / ry ];\n\t        var v = [ (-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry ];\n\t        var dTheta = vAngle(u, v);\n\n\t        if (vRatio(u, v) <= -1) {\n\t            dTheta = PI;\n\t        }\n\t        if (vRatio(u, v) >= 1) {\n\t            dTheta = 0;\n\t        }\n\t        if (fs === 0 && dTheta > 0) {\n\t            dTheta = dTheta - 2 * PI;\n\t        }\n\t        if (fs === 1 && dTheta < 0) {\n\t            dTheta = dTheta + 2 * PI;\n\t        }\n\n\t        path.addData(cmd, cx, cy, rx, ry, theta, dTheta, psi, fs);\n\t    }\n\n\t    function createPathProxyFromString(data) {\n\t        if (!data) {\n\t            return [];\n\t        }\n\n\t        // command string\n\t        var cs = data.replace(/-/g, ' -')\n\t            .replace(/  /g, ' ')\n\t            .replace(/ /g, ',')\n\t            .replace(/,,/g, ',');\n\n\t        var n;\n\t        // create pipes so that we can split the data\n\t        for (n = 0; n < cc.length; n++) {\n\t            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);\n\t        }\n\n\t        // create array\n\t        var arr = cs.split('|');\n\t        // init context point\n\t        var cpx = 0;\n\t        var cpy = 0;\n\n\t        var path = new PathProxy();\n\t        var CMD = PathProxy.CMD;\n\n\t        var prevCmd;\n\t        for (n = 1; n < arr.length; n++) {\n\t            var str = arr[n];\n\t            var c = str.charAt(0);\n\t            var off = 0;\n\t            var p = str.slice(1).replace(/e,-/g, 'e-').split(',');\n\t            var cmd;\n\n\t            if (p.length > 0 && p[0] === '') {\n\t                p.shift();\n\t            }\n\n\t            for (var i = 0; i < p.length; i++) {\n\t                p[i] = parseFloat(p[i]);\n\t            }\n\t            while (off < p.length && !isNaN(p[off])) {\n\t                if (isNaN(p[0])) {\n\t                    break;\n\t                }\n\t                var ctlPtx;\n\t                var ctlPty;\n\n\t                var rx;\n\t                var ry;\n\t                var psi;\n\t                var fa;\n\t                var fs;\n\n\t                var x1 = cpx;\n\t                var y1 = cpy;\n\n\t                // convert l, H, h, V, and v to L\n\t                switch (c) {\n\t                    case 'l':\n\t                        cpx += p[off++];\n\t                        cpy += p[off++];\n\t                        cmd = CMD.L;\n\t                        path.addData(cmd, cpx, cpy);\n\t                        break;\n\t                    case 'L':\n\t                        cpx = p[off++];\n\t                        cpy = p[off++];\n\t                        cmd = CMD.L;\n\t                        path.addData(cmd, cpx, cpy);\n\t                        break;\n\t                    case 'm':\n\t                        cpx += p[off++];\n\t                        cpy += p[off++];\n\t                        cmd = CMD.M;\n\t                        path.addData(cmd, cpx, cpy);\n\t                        c = 'l';\n\t                        break;\n\t                    case 'M':\n\t                        cpx = p[off++];\n\t                        cpy = p[off++];\n\t                        cmd = CMD.M;\n\t                        path.addData(cmd, cpx, cpy);\n\t                        c = 'L';\n\t                        break;\n\t                    case 'h':\n\t                        cpx += p[off++];\n\t                        cmd = CMD.L;\n\t                        path.addData(cmd, cpx, cpy);\n\t                        break;\n\t                    case 'H':\n\t                        cpx = p[off++];\n\t                        cmd = CMD.L;\n\t                        path.addData(cmd, cpx, cpy);\n\t                        break;\n\t                    case 'v':\n\t                        cpy += p[off++];\n\t                        cmd = CMD.L;\n\t                        path.addData(cmd, cpx, cpy);\n\t                        break;\n\t                    case 'V':\n\t                        cpy = p[off++];\n\t                        cmd = CMD.L;\n\t                        path.addData(cmd, cpx, cpy);\n\t                        break;\n\t                    case 'C':\n\t                        cmd = CMD.C;\n\t                        path.addData(\n\t                            cmd, p[off++], p[off++], p[off++], p[off++], p[off++], p[off++]\n\t                        );\n\t                        cpx = p[off - 2];\n\t                        cpy = p[off - 1];\n\t                        break;\n\t                    case 'c':\n\t                        cmd = CMD.C;\n\t                        path.addData(\n\t                            cmd,\n\t                            p[off++] + cpx, p[off++] + cpy,\n\t                            p[off++] + cpx, p[off++] + cpy,\n\t                            p[off++] + cpx, p[off++] + cpy\n\t                        );\n\t                        cpx += p[off - 2];\n\t                        cpy += p[off - 1];\n\t                        break;\n\t                    case 'S':\n\t                        ctlPtx = cpx;\n\t                        ctlPty = cpy;\n\t                        var len = path.len();\n\t                        var pathData = path.data;\n\t                        if (prevCmd === CMD.C) {\n\t                            ctlPtx += cpx - pathData[len - 4];\n\t                            ctlPty += cpy - pathData[len - 3];\n\t                        }\n\t                        cmd = CMD.C;\n\t                        x1 = p[off++];\n\t                        y1 = p[off++];\n\t                        cpx = p[off++];\n\t                        cpy = p[off++];\n\t                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);\n\t                        break;\n\t                    case 's':\n\t                        ctlPtx = cpx;\n\t                        ctlPty = cpy;\n\t                        var len = path.len();\n\t                        var pathData = path.data;\n\t                        if (prevCmd === CMD.C) {\n\t                            ctlPtx += cpx - pathData[len - 4];\n\t                            ctlPty += cpy - pathData[len - 3];\n\t                        }\n\t                        cmd = CMD.C;\n\t                        x1 = cpx + p[off++];\n\t                        y1 = cpy + p[off++];\n\t                        cpx += p[off++];\n\t                        cpy += p[off++];\n\t                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);\n\t                        break;\n\t                    case 'Q':\n\t                        x1 = p[off++];\n\t                        y1 = p[off++];\n\t                        cpx = p[off++];\n\t                        cpy = p[off++];\n\t                        cmd = CMD.Q;\n\t                        path.addData(cmd, x1, y1, cpx, cpy);\n\t                        break;\n\t                    case 'q':\n\t                        x1 = p[off++] + cpx;\n\t                        y1 = p[off++] + cpy;\n\t                        cpx += p[off++];\n\t                        cpy += p[off++];\n\t                        cmd = CMD.Q;\n\t                        path.addData(cmd, x1, y1, cpx, cpy);\n\t                        break;\n\t                    case 'T':\n\t                        ctlPtx = cpx;\n\t                        ctlPty = cpy;\n\t                        var len = path.len();\n\t                        var pathData = path.data;\n\t                        if (prevCmd === CMD.Q) {\n\t                            ctlPtx += cpx - pathData[len - 4];\n\t                            ctlPty += cpy - pathData[len - 3];\n\t                        }\n\t                        cpx = p[off++];\n\t                        cpy = p[off++];\n\t                        cmd = CMD.Q;\n\t                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);\n\t                        break;\n\t                    case 't':\n\t                        ctlPtx = cpx;\n\t                        ctlPty = cpy;\n\t                        var len = path.len();\n\t                        var pathData = path.data;\n\t                        if (prevCmd === CMD.Q) {\n\t                            ctlPtx += cpx - pathData[len - 4];\n\t                            ctlPty += cpy - pathData[len - 3];\n\t                        }\n\t                        cpx += p[off++];\n\t                        cpy += p[off++];\n\t                        cmd = CMD.Q;\n\t                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);\n\t                        break;\n\t                    case 'A':\n\t                        rx = p[off++];\n\t                        ry = p[off++];\n\t                        psi = p[off++];\n\t                        fa = p[off++];\n\t                        fs = p[off++];\n\n\t                        x1 = cpx, y1 = cpy;\n\t                        cpx = p[off++];\n\t                        cpy = p[off++];\n\t                        cmd = CMD.A;\n\t                        processArc(\n\t                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path\n\t                        );\n\t                        break;\n\t                    case 'a':\n\t                        rx = p[off++];\n\t                        ry = p[off++];\n\t                        psi = p[off++];\n\t                        fa = p[off++];\n\t                        fs = p[off++];\n\n\t                        x1 = cpx, y1 = cpy;\n\t                        cpx += p[off++];\n\t                        cpy += p[off++];\n\t                        cmd = CMD.A;\n\t                        processArc(\n\t                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path\n\t                        );\n\t                        break;\n\t                }\n\t            }\n\n\t            if (c === 'z' || c === 'Z') {\n\t                cmd = CMD.Z;\n\t                path.addData(cmd);\n\t            }\n\n\t            prevCmd = cmd;\n\t        }\n\n\t        path.toStatic();\n\n\t        return path;\n\t    }\n\n\t    // TODO Optimize double memory cost problem\n\t    function createPathOptions(str, opts) {\n\t        var pathProxy = createPathProxyFromString(str);\n\t        var transform;\n\t        opts = opts || {};\n\t        opts.buildPath = function (path) {\n\t            path.setData(pathProxy.data);\n\t            transform && transformPath(path, transform);\n\t            // Svg and vml renderer don't have context\n\t            var ctx = path.getContext();\n\t            if (ctx) {\n\t                path.rebuildPath(ctx);\n\t            }\n\t        };\n\n\t        opts.applyTransform = function (m) {\n\t            if (!transform) {\n\t                transform = matrix.create();\n\t            }\n\t            matrix.mul(transform, m, transform);\n\t            this.dirty(true);\n\t        };\n\n\t        return opts;\n\t    }\n\n\t    module.exports = {\n\t        /**\n\t         * Create a Path object from path string data\n\t         * http://www.w3.org/TR/SVG/paths.html#PathData\n\t         * @param  {Object} opts Other options\n\t         */\n\t        createFromString: function (str, opts) {\n\t            return new Path(createPathOptions(str, opts));\n\t        },\n\n\t        /**\n\t         * Create a Path class from path string data\n\t         * @param  {string} str\n\t         * @param  {Object} opts Other options\n\t         */\n\t        extendFromString: function (str, opts) {\n\t            return Path.extend(createPathOptions(str, opts));\n\t        },\n\n\t        /**\n\t         * Merge multiple paths\n\t         */\n\t        // TODO Apply transform\n\t        // TODO stroke dash\n\t        // TODO Optimize double memory cost problem\n\t        mergePath: function (pathEls, opts) {\n\t            var pathList = [];\n\t            var len = pathEls.length;\n\t            for (var i = 0; i < len; i++) {\n\t                var pathEl = pathEls[i];\n\t                if (pathEl.__dirty) {\n\t                    pathEl.buildPath(pathEl.path, pathEl.shape, true);\n\t                }\n\t                pathList.push(pathEl.path);\n\t            }\n\n\t            var pathBundle = new Path(opts);\n\t            pathBundle.buildPath = function (path) {\n\t                path.appendPath(pathList);\n\t                // Svg and vml renderer don't have context\n\t                var ctx = path.getContext();\n\t                if (ctx) {\n\t                    path.rebuildPath(ctx);\n\t                }\n\t            };\n\n\t            return pathBundle;\n\t        }\n\t    };\n\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Path element\n\t * @module zrender/graphic/Path\n\t */\n\n\n\n\t    var Displayable = __webpack_require__(46);\n\t    var zrUtil = __webpack_require__(4);\n\t    var PathProxy = __webpack_require__(49);\n\t    var pathContain = __webpack_require__(52);\n\n\t    var Pattern = __webpack_require__(59);\n\t    var getCanvasPattern = Pattern.prototype.getCanvasPattern;\n\n\t    var abs = Math.abs;\n\n\t    /**\n\t     * @alias module:zrender/graphic/Path\n\t     * @extends module:zrender/graphic/Displayable\n\t     * @constructor\n\t     * @param {Object} opts\n\t     */\n\t    function Path(opts) {\n\t        Displayable.call(this, opts);\n\n\t        /**\n\t         * @type {module:zrender/core/PathProxy}\n\t         * @readOnly\n\t         */\n\t        this.path = new PathProxy();\n\t    }\n\n\t    Path.prototype = {\n\n\t        constructor: Path,\n\n\t        type: 'path',\n\n\t        __dirtyPath: true,\n\n\t        strokeContainThreshold: 5,\n\n\t        brush: function (ctx, prevEl) {\n\t            var style = this.style;\n\t            var path = this.path;\n\t            var hasStroke = style.hasStroke();\n\t            var hasFill = style.hasFill();\n\t            var fill = style.fill;\n\t            var stroke = style.stroke;\n\t            var hasFillGradient = hasFill && !!(fill.colorStops);\n\t            var hasStrokeGradient = hasStroke && !!(stroke.colorStops);\n\t            var hasFillPattern = hasFill && !!(fill.image);\n\t            var hasStrokePattern = hasStroke && !!(stroke.image);\n\n\t            style.bind(ctx, this, prevEl);\n\t            this.setTransform(ctx);\n\n\t            if (this.__dirty) {\n\t                var rect = this.getBoundingRect();\n\t                // Update gradient because bounding rect may changed\n\t                if (hasFillGradient) {\n\t                    this._fillGradient = style.getGradient(ctx, fill, rect);\n\t                }\n\t                if (hasStrokeGradient) {\n\t                    this._strokeGradient = style.getGradient(ctx, stroke, rect);\n\t                }\n\t            }\n\t            // Use the gradient or pattern\n\t            if (hasFillGradient) {\n\t                // PENDING If may have affect the state\n\t                ctx.fillStyle = this._fillGradient;\n\t            }\n\t            else if (hasFillPattern) {\n\t                ctx.fillStyle = getCanvasPattern.call(fill, ctx);\n\t            }\n\t            if (hasStrokeGradient) {\n\t                ctx.strokeStyle = this._strokeGradient;\n\t            }\n\t            else if (hasStrokePattern) {\n\t                ctx.strokeStyle = getCanvasPattern.call(stroke, ctx);\n\t            }\n\n\t            var lineDash = style.lineDash;\n\t            var lineDashOffset = style.lineDashOffset;\n\n\t            var ctxLineDash = !!ctx.setLineDash;\n\n\t            // Update path sx, sy\n\t            var scale = this.getGlobalScale();\n\t            path.setScale(scale[0], scale[1]);\n\n\t            // Proxy context\n\t            // Rebuild path in following 2 cases\n\t            // 1. Path is dirty\n\t            // 2. Path needs javascript implemented lineDash stroking.\n\t            //    In this case, lineDash information will not be saved in PathProxy\n\t            if (this.__dirtyPath || (\n\t                lineDash && !ctxLineDash && hasStroke\n\t            )) {\n\t                path = this.path.beginPath(ctx);\n\n\t                // Setting line dash before build path\n\t                if (lineDash && !ctxLineDash) {\n\t                    path.setLineDash(lineDash);\n\t                    path.setLineDashOffset(lineDashOffset);\n\t                }\n\n\t                this.buildPath(path, this.shape, false);\n\n\t                // Clear path dirty flag\n\t                this.__dirtyPath = false;\n\t            }\n\t            else {\n\t                // Replay path building\n\t                ctx.beginPath();\n\t                this.path.rebuildPath(ctx);\n\t            }\n\n\t            hasFill && path.fill(ctx);\n\n\t            if (lineDash && ctxLineDash) {\n\t                ctx.setLineDash(lineDash);\n\t                ctx.lineDashOffset = lineDashOffset;\n\t            }\n\n\t            hasStroke && path.stroke(ctx);\n\n\t            if (lineDash && ctxLineDash) {\n\t                // PENDING\n\t                // Remove lineDash\n\t                ctx.setLineDash([]);\n\t            }\n\n\n\t            this.restoreTransform(ctx);\n\n\t            // Draw rect text\n\t            if (style.text != null) {\n\t                // var rect = this.getBoundingRect();\n\t                this.drawRectText(ctx, this.getBoundingRect());\n\t            }\n\t        },\n\n\t        // When bundling path, some shape may decide if use moveTo to begin a new subpath or closePath\n\t        // Like in circle\n\t        buildPath: function (ctx, shapeCfg, inBundle) {},\n\n\t        getBoundingRect: function () {\n\t            var rect = this._rect;\n\t            var style = this.style;\n\t            var needsUpdateRect = !rect;\n\t            if (needsUpdateRect) {\n\t                var path = this.path;\n\t                if (this.__dirtyPath) {\n\t                    path.beginPath();\n\t                    this.buildPath(path, this.shape, false);\n\t                }\n\t                rect = path.getBoundingRect();\n\t            }\n\t            this._rect = rect;\n\n\t            if (style.hasStroke()) {\n\t                // Needs update rect with stroke lineWidth when\n\t                // 1. Element changes scale or lineWidth\n\t                // 2. Shape is changed\n\t                var rectWithStroke = this._rectWithStroke || (this._rectWithStroke = rect.clone());\n\t                if (this.__dirty || needsUpdateRect) {\n\t                    rectWithStroke.copy(rect);\n\t                    // FIXME Must after updateTransform\n\t                    var w = style.lineWidth;\n\t                    // PENDING, Min line width is needed when line is horizontal or vertical\n\t                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;\n\n\t                    // Only add extra hover lineWidth when there are no fill\n\t                    if (!style.hasFill()) {\n\t                        w = Math.max(w, this.strokeContainThreshold || 4);\n\t                    }\n\t                    // Consider line width\n\t                    // Line scale can't be 0;\n\t                    if (lineScale > 1e-10) {\n\t                        rectWithStroke.width += w / lineScale;\n\t                        rectWithStroke.height += w / lineScale;\n\t                        rectWithStroke.x -= w / lineScale / 2;\n\t                        rectWithStroke.y -= w / lineScale / 2;\n\t                    }\n\t                }\n\n\t                // Return rect with stroke\n\t                return rectWithStroke;\n\t            }\n\n\t            return rect;\n\t        },\n\n\t        contain: function (x, y) {\n\t            var localPos = this.transformCoordToLocal(x, y);\n\t            var rect = this.getBoundingRect();\n\t            var style = this.style;\n\t            x = localPos[0];\n\t            y = localPos[1];\n\n\t            if (rect.contain(x, y)) {\n\t                var pathData = this.path.data;\n\t                if (style.hasStroke()) {\n\t                    var lineWidth = style.lineWidth;\n\t                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;\n\t                    // Line scale can't be 0;\n\t                    if (lineScale > 1e-10) {\n\t                        // Only add extra hover lineWidth when there are no fill\n\t                        if (!style.hasFill()) {\n\t                            lineWidth = Math.max(lineWidth, this.strokeContainThreshold);\n\t                        }\n\t                        if (pathContain.containStroke(\n\t                            pathData, lineWidth / lineScale, x, y\n\t                        )) {\n\t                            return true;\n\t                        }\n\t                    }\n\t                }\n\t                if (style.hasFill()) {\n\t                    return pathContain.contain(pathData, x, y);\n\t                }\n\t            }\n\t            return false;\n\t        },\n\n\t        /**\n\t         * @param  {boolean} dirtyPath\n\t         */\n\t        dirty: function (dirtyPath) {\n\t            if (dirtyPath == null) {\n\t                dirtyPath = true;\n\t            }\n\t            // Only mark dirty, not mark clean\n\t            if (dirtyPath) {\n\t                this.__dirtyPath = dirtyPath;\n\t                this._rect = null;\n\t            }\n\n\t            this.__dirty = true;\n\n\t            this.__zr && this.__zr.refresh();\n\n\t            // Used as a clipping path\n\t            if (this.__clipTarget) {\n\t                this.__clipTarget.dirty();\n\t            }\n\t        },\n\n\t        /**\n\t         * Alias for animate('shape')\n\t         * @param {boolean} loop\n\t         */\n\t        animateShape: function (loop) {\n\t            return this.animate('shape', loop);\n\t        },\n\n\t        // Overwrite attrKV\n\t        attrKV: function (key, value) {\n\t            // FIXME\n\t            if (key === 'shape') {\n\t                this.setShape(value);\n\t                this.__dirtyPath = true;\n\t                this._rect = null;\n\t            }\n\t            else {\n\t                Displayable.prototype.attrKV.call(this, key, value);\n\t            }\n\t        },\n\n\t        /**\n\t         * @param {Object|string} key\n\t         * @param {*} value\n\t         */\n\t        setShape: function (key, value) {\n\t            var shape = this.shape;\n\t            // Path from string may not have shape\n\t            if (shape) {\n\t                if (zrUtil.isObject(key)) {\n\t                    for (var name in key) {\n\t                        if (key.hasOwnProperty(name)) {\n\t                            shape[name] = key[name];\n\t                        }\n\t                    }\n\t                }\n\t                else {\n\t                    shape[key] = value;\n\t                }\n\t                this.dirty(true);\n\t            }\n\t            return this;\n\t        },\n\n\t        getLineScale: function () {\n\t            var m = this.transform;\n\t            // Get the line scale.\n\t            // Determinant of `m` means how much the area is enlarged by the\n\t            // transformation. So its square root can be used as a scale factor\n\t            // for width.\n\t            return m && abs(m[0] - 1) > 1e-10 && abs(m[3] - 1) > 1e-10\n\t                ? Math.sqrt(abs(m[0] * m[3] - m[2] * m[1]))\n\t                : 1;\n\t        }\n\t    };\n\n\t    /**\n\t     * 扩展一个 Path element, 比如星形，圆等。\n\t     * Extend a path element\n\t     * @param {Object} props\n\t     * @param {string} props.type Path type\n\t     * @param {Function} props.init Initialize\n\t     * @param {Function} props.buildPath Overwrite buildPath method\n\t     * @param {Object} [props.style] Extended default style config\n\t     * @param {Object} [props.shape] Extended default shape config\n\t     */\n\t    Path.extend = function (defaults) {\n\t        var Sub = function (opts) {\n\t            Path.call(this, opts);\n\n\t            if (defaults.style) {\n\t                // Extend default style\n\t                this.style.extendFrom(defaults.style, false);\n\t            }\n\n\t            // Extend default shape\n\t            var defaultShape = defaults.shape;\n\t            if (defaultShape) {\n\t                this.shape = this.shape || {};\n\t                var thisShape = this.shape;\n\t                for (var name in defaultShape) {\n\t                    if (\n\t                        ! thisShape.hasOwnProperty(name)\n\t                        && defaultShape.hasOwnProperty(name)\n\t                    ) {\n\t                        thisShape[name] = defaultShape[name];\n\t                    }\n\t                }\n\t            }\n\n\t            defaults.init && defaults.init.call(this, opts);\n\t        };\n\n\t        zrUtil.inherits(Sub, Path);\n\n\t        // FIXME 不能 extend position, rotation 等引用对象\n\t        for (var name in defaults) {\n\t            // Extending prototype values and methods\n\t            if (name !== 'style' && name !== 'shape') {\n\t                Sub.prototype[name] = defaults[name];\n\t            }\n\t        }\n\n\t        return Sub;\n\t    };\n\n\t    zrUtil.inherits(Path, Displayable);\n\n\t    module.exports = Path;\n\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * 可绘制的图形基类\n\t * Base class of all displayable graphic objects\n\t * @module zrender/graphic/Displayable\n\t */\n\n\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var Style = __webpack_require__(47);\n\n\t    var Element = __webpack_require__(31);\n\t    var RectText = __webpack_require__(48);\n\t    // var Stateful = require('./mixin/Stateful');\n\n\t    /**\n\t     * @alias module:zrender/graphic/Displayable\n\t     * @extends module:zrender/Element\n\t     * @extends module:zrender/graphic/mixin/RectText\n\t     */\n\t    function Displayable(opts) {\n\n\t        opts = opts || {};\n\n\t        Element.call(this, opts);\n\n\t        // Extend properties\n\t        for (var name in opts) {\n\t            if (\n\t                opts.hasOwnProperty(name) &&\n\t                name !== 'style'\n\t            ) {\n\t                this[name] = opts[name];\n\t            }\n\t        }\n\n\t        /**\n\t         * @type {module:zrender/graphic/Style}\n\t         */\n\t        this.style = new Style(opts.style);\n\n\t        this._rect = null;\n\t        // Shapes for cascade clipping.\n\t        this.__clipPaths = [];\n\n\t        // FIXME Stateful must be mixined after style is setted\n\t        // Stateful.call(this, opts);\n\t    }\n\n\t    Displayable.prototype = {\n\n\t        constructor: Displayable,\n\n\t        type: 'displayable',\n\n\t        /**\n\t         * Displayable 是否为脏，Painter 中会根据该标记判断是否需要是否需要重新绘制\n\t         * Dirty flag. From which painter will determine if this displayable object needs brush\n\t         * @name module:zrender/graphic/Displayable#__dirty\n\t         * @type {boolean}\n\t         */\n\t        __dirty: true,\n\n\t        /**\n\t         * 图形是否可见，为true时不绘制图形，但是仍能触发鼠标事件\n\t         * If ignore drawing of the displayable object. Mouse event will still be triggered\n\t         * @name module:/zrender/graphic/Displayable#invisible\n\t         * @type {boolean}\n\t         * @default false\n\t         */\n\t        invisible: false,\n\n\t        /**\n\t         * @name module:/zrender/graphic/Displayable#z\n\t         * @type {number}\n\t         * @default 0\n\t         */\n\t        z: 0,\n\n\t        /**\n\t         * @name module:/zrender/graphic/Displayable#z\n\t         * @type {number}\n\t         * @default 0\n\t         */\n\t        z2: 0,\n\n\t        /**\n\t         * z层level，决定绘画在哪层canvas中\n\t         * @name module:/zrender/graphic/Displayable#zlevel\n\t         * @type {number}\n\t         * @default 0\n\t         */\n\t        zlevel: 0,\n\n\t        /**\n\t         * 是否可拖拽\n\t         * @name module:/zrender/graphic/Displayable#draggable\n\t         * @type {boolean}\n\t         * @default false\n\t         */\n\t        draggable: false,\n\n\t        /**\n\t         * 是否正在拖拽\n\t         * @name module:/zrender/graphic/Displayable#draggable\n\t         * @type {boolean}\n\t         * @default false\n\t         */\n\t        dragging: false,\n\n\t        /**\n\t         * 是否相应鼠标事件\n\t         * @name module:/zrender/graphic/Displayable#silent\n\t         * @type {boolean}\n\t         * @default false\n\t         */\n\t        silent: false,\n\n\t        /**\n\t         * If enable culling\n\t         * @type {boolean}\n\t         * @default false\n\t         */\n\t        culling: false,\n\n\t        /**\n\t         * Mouse cursor when hovered\n\t         * @name module:/zrender/graphic/Displayable#cursor\n\t         * @type {string}\n\t         */\n\t        cursor: 'pointer',\n\n\t        /**\n\t         * If hover area is bounding rect\n\t         * @name module:/zrender/graphic/Displayable#rectHover\n\t         * @type {string}\n\t         */\n\t        rectHover: false,\n\n\t        /**\n\t         * Render the element progressively when the value >= 0,\n\t         * usefull for large data.\n\t         * @type {number}\n\t         */\n\t        progressive: -1,\n\n\t        beforeBrush: function (ctx) {},\n\n\t        afterBrush: function (ctx) {},\n\n\t        /**\n\t         * 图形绘制方法\n\t         * @param {Canvas2DRenderingContext} ctx\n\t         */\n\t        // Interface\n\t        brush: function (ctx, prevEl) {},\n\n\t        /**\n\t         * 获取最小包围盒\n\t         * @return {module:zrender/core/BoundingRect}\n\t         */\n\t        // Interface\n\t        getBoundingRect: function () {},\n\n\t        /**\n\t         * 判断坐标 x, y 是否在图形上\n\t         * If displayable element contain coord x, y\n\t         * @param  {number} x\n\t         * @param  {number} y\n\t         * @return {boolean}\n\t         */\n\t        contain: function (x, y) {\n\t            return this.rectContain(x, y);\n\t        },\n\n\t        /**\n\t         * @param  {Function} cb\n\t         * @param  {}   context\n\t         */\n\t        traverse: function (cb, context) {\n\t            cb.call(context, this);\n\t        },\n\n\t        /**\n\t         * 判断坐标 x, y 是否在图形的包围盒上\n\t         * If bounding rect of element contain coord x, y\n\t         * @param  {number} x\n\t         * @param  {number} y\n\t         * @return {boolean}\n\t         */\n\t        rectContain: function (x, y) {\n\t            var coord = this.transformCoordToLocal(x, y);\n\t            var rect = this.getBoundingRect();\n\t            return rect.contain(coord[0], coord[1]);\n\t        },\n\n\t        /**\n\t         * 标记图形元素为脏，并且在下一帧重绘\n\t         * Mark displayable element dirty and refresh next frame\n\t         */\n\t        dirty: function () {\n\t            this.__dirty = true;\n\n\t            this._rect = null;\n\n\t            this.__zr && this.__zr.refresh();\n\t        },\n\n\t        /**\n\t         * 图形是否会触发事件\n\t         * If displayable object binded any event\n\t         * @return {boolean}\n\t         */\n\t        // TODO, 通过 bind 绑定的事件\n\t        // isSilent: function () {\n\t        //     return !(\n\t        //         this.hoverable || this.draggable\n\t        //         || this.onmousemove || this.onmouseover || this.onmouseout\n\t        //         || this.onmousedown || this.onmouseup || this.onclick\n\t        //         || this.ondragenter || this.ondragover || this.ondragleave\n\t        //         || this.ondrop\n\t        //     );\n\t        // },\n\t        /**\n\t         * Alias for animate('style')\n\t         * @param {boolean} loop\n\t         */\n\t        animateStyle: function (loop) {\n\t            return this.animate('style', loop);\n\t        },\n\n\t        attrKV: function (key, value) {\n\t            if (key !== 'style') {\n\t                Element.prototype.attrKV.call(this, key, value);\n\t            }\n\t            else {\n\t                this.style.set(value);\n\t            }\n\t        },\n\n\t        /**\n\t         * @param {Object|string} key\n\t         * @param {*} value\n\t         */\n\t        setStyle: function (key, value) {\n\t            this.style.set(key, value);\n\t            this.dirty(false);\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Use given style object\n\t         * @param  {Object} obj\n\t         */\n\t        useStyle: function (obj) {\n\t            this.style = new Style(obj);\n\t            this.dirty(false);\n\t            return this;\n\t        }\n\t    };\n\n\t    zrUtil.inherits(Displayable, Element);\n\n\t    zrUtil.mixin(Displayable, RectText);\n\t    // zrUtil.mixin(Displayable, Stateful);\n\n\t    module.exports = Displayable;\n\n\n/***/ },\n/* 47 */\n/***/ function(module, exports) {\n\n\t/**\n\t * @module zrender/graphic/Style\n\t */\n\n\n\t    var STYLE_COMMON_PROPS = [\n\t        ['shadowBlur', 0], ['shadowOffsetX', 0], ['shadowOffsetY', 0], ['shadowColor', '#000'],\n\t        ['lineCap', 'butt'], ['lineJoin', 'miter'], ['miterLimit', 10]\n\t    ];\n\n\t    // var SHADOW_PROPS = STYLE_COMMON_PROPS.slice(0, 4);\n\t    // var LINE_PROPS = STYLE_COMMON_PROPS.slice(4);\n\n\t    var Style = function (opts) {\n\t        this.extendFrom(opts);\n\t    };\n\n\t    function createLinearGradient(ctx, obj, rect) {\n\t        // var size =\n\t        var x = obj.x;\n\t        var x2 = obj.x2;\n\t        var y = obj.y;\n\t        var y2 = obj.y2;\n\n\t        if (!obj.global) {\n\t            x = x * rect.width + rect.x;\n\t            x2 = x2 * rect.width + rect.x;\n\t            y = y * rect.height + rect.y;\n\t            y2 = y2 * rect.height + rect.y;\n\t        }\n\n\t        var canvasGradient = ctx.createLinearGradient(x, y, x2, y2);\n\n\t        return canvasGradient;\n\t    }\n\n\t    function createRadialGradient(ctx, obj, rect) {\n\t        var width = rect.width;\n\t        var height = rect.height;\n\t        var min = Math.min(width, height);\n\n\t        var x = obj.x;\n\t        var y = obj.y;\n\t        var r = obj.r;\n\t        if (!obj.global) {\n\t            x = x * width + rect.x;\n\t            y = y * height + rect.y;\n\t            r = r * min;\n\t        }\n\n\t        var canvasGradient = ctx.createRadialGradient(x, y, 0, x, y, r);\n\n\t        return canvasGradient;\n\t    }\n\n\n\t    Style.prototype = {\n\n\t        constructor: Style,\n\n\t        /**\n\t         * @type {string}\n\t         */\n\t        fill: '#000000',\n\n\t        /**\n\t         * @type {string}\n\t         */\n\t        stroke: null,\n\n\t        /**\n\t         * @type {number}\n\t         */\n\t        opacity: 1,\n\n\t        /**\n\t         * @type {Array.<number>}\n\t         */\n\t        lineDash: null,\n\n\t        /**\n\t         * @type {number}\n\t         */\n\t        lineDashOffset: 0,\n\n\t        /**\n\t         * @type {number}\n\t         */\n\t        shadowBlur: 0,\n\n\t        /**\n\t         * @type {number}\n\t         */\n\t        shadowOffsetX: 0,\n\n\t        /**\n\t         * @type {number}\n\t         */\n\t        shadowOffsetY: 0,\n\n\t        /**\n\t         * @type {number}\n\t         */\n\t        lineWidth: 1,\n\n\t        /**\n\t         * If stroke ignore scale\n\t         * @type {Boolean}\n\t         */\n\t        strokeNoScale: false,\n\n\t        // Bounding rect text configuration\n\t        // Not affected by element transform\n\t        /**\n\t         * @type {string}\n\t         */\n\t        text: null,\n\n\t        /**\n\t         * @type {string}\n\t         */\n\t        textFill: '#000',\n\n\t        /**\n\t         * @type {string}\n\t         */\n\t        textStroke: null,\n\n\t        /**\n\t         * 'inside', 'left', 'right', 'top', 'bottom'\n\t         * [x, y]\n\t         * @type {string|Array.<number>}\n\t         * @default 'inside'\n\t         */\n\t        textPosition: 'inside',\n\n\t        /**\n\t         * [x, y]\n\t         * @type {Array.<number>}\n\t         */\n\t        textOffset: null,\n\n\t        /**\n\t         * @type {string}\n\t         */\n\t        textBaseline: null,\n\n\t        /**\n\t         * @type {string}\n\t         */\n\t        textAlign: null,\n\n\t        /**\n\t         * @type {string}\n\t         */\n\t        textVerticalAlign: null,\n\n\t        /**\n\t         * Only useful in Path and Image element\n\t         * @type {number}\n\t         */\n\t        textDistance: 5,\n\n\t        /**\n\t         * Only useful in Path and Image element\n\t         * @type {number}\n\t         */\n\t        textShadowBlur: 0,\n\n\t        /**\n\t         * Only useful in Path and Image element\n\t         * @type {number}\n\t         */\n\t        textShadowOffsetX: 0,\n\n\t        /**\n\t         * Only useful in Path and Image element\n\t         * @type {number}\n\t         */\n\t        textShadowOffsetY: 0,\n\n\t        /**\n\t         * If transform text\n\t         * Only useful in Path and Image element\n\t         * @type {boolean}\n\t         */\n\t        textTransform: false,\n\n\t        /**\n\t         * Text rotate around position of Path or Image\n\t         * Only useful in Path and Image element and textTransform is false.\n\t         */\n\t        textRotation: 0,\n\n\t        /**\n\t         * @type {string}\n\t         * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\n\t         */\n\t        blend: null,\n\n\t        /**\n\t         * @param {CanvasRenderingContext2D} ctx\n\t         */\n\t        bind: function (ctx, el, prevEl) {\n\t            var style = this;\n\t            var prevStyle = prevEl && prevEl.style;\n\t            var firstDraw = !prevStyle;\n\n\t            for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {\n\t                var prop = STYLE_COMMON_PROPS[i];\n\t                var styleName = prop[0];\n\n\t                if (firstDraw || style[styleName] !== prevStyle[styleName]) {\n\t                    // FIXME Invalid property value will cause style leak from previous element.\n\t                    ctx[styleName] = style[styleName] || prop[1];\n\t                }\n\t            }\n\n\t            if ((firstDraw || style.fill !== prevStyle.fill)) {\n\t                ctx.fillStyle = style.fill;\n\t            }\n\t            if ((firstDraw || style.stroke !== prevStyle.stroke)) {\n\t                ctx.strokeStyle = style.stroke;\n\t            }\n\t            if ((firstDraw || style.opacity !== prevStyle.opacity)) {\n\t                ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;\n\t            }\n\n\t            if ((firstDraw || style.blend !== prevStyle.blend)) {\n\t                ctx.globalCompositeOperation = style.blend || 'source-over';\n\t            }\n\t            if (this.hasStroke()) {\n\t                var lineWidth = style.lineWidth;\n\t                ctx.lineWidth = lineWidth / (\n\t                    (this.strokeNoScale && el && el.getLineScale) ? el.getLineScale() : 1\n\t                );\n\t            }\n\t        },\n\n\t        hasFill: function () {\n\t            var fill = this.fill;\n\t            return fill != null && fill !== 'none';\n\t        },\n\n\t        hasStroke: function () {\n\t            var stroke = this.stroke;\n\t            return stroke != null && stroke !== 'none' && this.lineWidth > 0;\n\t        },\n\n\t        /**\n\t         * Extend from other style\n\t         * @param {zrender/graphic/Style} otherStyle\n\t         * @param {boolean} overwrite\n\t         */\n\t        extendFrom: function (otherStyle, overwrite) {\n\t            if (otherStyle) {\n\t                var target = this;\n\t                for (var name in otherStyle) {\n\t                    if (otherStyle.hasOwnProperty(name)\n\t                        && (overwrite || ! target.hasOwnProperty(name))\n\t                    ) {\n\t                        target[name] = otherStyle[name];\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        /**\n\t         * Batch setting style with a given object\n\t         * @param {Object|string} obj\n\t         * @param {*} [obj]\n\t         */\n\t        set: function (obj, value) {\n\t            if (typeof obj === 'string') {\n\t                this[obj] = value;\n\t            }\n\t            else {\n\t                this.extendFrom(obj, true);\n\t            }\n\t        },\n\n\t        /**\n\t         * Clone\n\t         * @return {zrender/graphic/Style} [description]\n\t         */\n\t        clone: function () {\n\t            var newStyle = new this.constructor();\n\t            newStyle.extendFrom(this, true);\n\t            return newStyle;\n\t        },\n\n\t        getGradient: function (ctx, obj, rect) {\n\t            var method = obj.type === 'radial' ? createRadialGradient : createLinearGradient;\n\t            var canvasGradient = method(ctx, obj, rect);\n\t            var colorStops = obj.colorStops;\n\t            for (var i = 0; i < colorStops.length; i++) {\n\t                canvasGradient.addColorStop(\n\t                    colorStops[i].offset, colorStops[i].color\n\t                );\n\t            }\n\t            return canvasGradient;\n\t        }\n\t    };\n\n\t    var styleProto = Style.prototype;\n\t    for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {\n\t        var prop = STYLE_COMMON_PROPS[i];\n\t        if (!(prop[0] in styleProto)) {\n\t            styleProto[prop[0]] = prop[1];\n\t        }\n\t    }\n\n\t    // Provide for others\n\t    Style.getGradient = styleProto.getGradient;\n\n\t    module.exports = Style;\n\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Mixin for drawing text in a element bounding rect\n\t * @module zrender/mixin/RectText\n\t */\n\n\n\n\t    var textContain = __webpack_require__(8);\n\t    var BoundingRect = __webpack_require__(9);\n\n\t    var tmpRect = new BoundingRect();\n\n\t    var RectText = function () {};\n\n\t    function parsePercent(value, maxValue) {\n\t        if (typeof value === 'string') {\n\t            if (value.lastIndexOf('%') >= 0) {\n\t                return parseFloat(value) / 100 * maxValue;\n\t            }\n\t            return parseFloat(value);\n\t        }\n\t        return value;\n\t    }\n\n\t    RectText.prototype = {\n\n\t        constructor: RectText,\n\n\t        /**\n\t         * Draw text in a rect with specified position.\n\t         * @param  {CanvasRenderingContext} ctx\n\t         * @param  {Object} rect Displayable rect\n\t         * @return {Object} textRect Alternative precalculated text bounding rect\n\t         */\n\t        drawRectText: function (ctx, rect, textRect) {\n\t            var style = this.style;\n\t            var text = style.text;\n\t            // Convert to string\n\t            text != null && (text += '');\n\t            if (!text) {\n\t                return;\n\t            }\n\n\t            // FIXME\n\t            ctx.save();\n\n\t            var x;\n\t            var y;\n\t            var textPosition = style.textPosition;\n\t            var textOffset = style.textOffset;\n\t            var distance = style.textDistance;\n\t            var align = style.textAlign;\n\t            var font = style.textFont || style.font;\n\t            var baseline = style.textBaseline;\n\t            var verticalAlign = style.textVerticalAlign;\n\n\t            textRect = textRect || textContain.getBoundingRect(text, font, align, baseline);\n\n\t            // Transform rect to view space\n\t            var transform = this.transform;\n\t            if (!style.textTransform) {\n\t                if (transform) {\n\t                    tmpRect.copy(rect);\n\t                    tmpRect.applyTransform(transform);\n\t                    rect = tmpRect;\n\t                }\n\t            }\n\t            else {\n\t                this.setTransform(ctx);\n\t            }\n\n\t            // Text position represented by coord\n\t            if (textPosition instanceof Array) {\n\t                // Percent\n\t                x = rect.x + parsePercent(textPosition[0], rect.width);\n\t                y = rect.y + parsePercent(textPosition[1], rect.height);\n\t                align = align || 'left';\n\t                baseline = baseline || 'top';\n\n\t                if (verticalAlign) {\n\t                    switch (verticalAlign) {\n\t                        case 'middle':\n\t                            y -= textRect.height / 2 - textRect.lineHeight / 2;\n\t                            break;\n\t                        case 'bottom':\n\t                            y -= textRect.height - textRect.lineHeight / 2;\n\t                            break;\n\t                        default:\n\t                            y += textRect.lineHeight / 2;\n\t                    }\n\t                    // Force bseline to be middle\n\t                    baseline = 'middle';\n\t                }\n\t            }\n\t            else {\n\t                var res = textContain.adjustTextPositionOnRect(\n\t                    textPosition, rect, textRect, distance\n\t                );\n\t                x = res.x;\n\t                y = res.y;\n\t                // Default align and baseline when has textPosition\n\t                align = align || res.textAlign;\n\t                baseline = baseline || res.textBaseline;\n\t            }\n\n\t            if (textOffset) {\n\t                x += textOffset[0];\n\t                y += textOffset[1];\n\t            }\n\n\t            // Use canvas default left textAlign. Giving invalid value will cause state not change\n\t            ctx.textAlign = align || 'left';\n\t            // Use canvas default alphabetic baseline\n\t            ctx.textBaseline = baseline || 'alphabetic';\n\n\t            var textFill = style.textFill;\n\t            var textStroke = style.textStroke;\n\t            textFill && (ctx.fillStyle = textFill);\n\t            textStroke && (ctx.strokeStyle = textStroke);\n\n\t            // TODO Invalid font\n\t            ctx.font = font || '12px sans-serif';\n\n\t            // Text shadow\n\t            // Always set shadowBlur and shadowOffset to avoid leak from displayable\n\t            ctx.shadowBlur = style.textShadowBlur;\n\t            ctx.shadowColor = style.textShadowColor || 'transparent';\n\t            ctx.shadowOffsetX = style.textShadowOffsetX;\n\t            ctx.shadowOffsetY = style.textShadowOffsetY;\n\n\t            var textLines = text.split('\\n');\n\n\t            if (style.textRotation) {\n\t                transform && ctx.translate(transform[4], transform[5]);\n\t                ctx.rotate(style.textRotation);\n\t                transform && ctx.translate(-transform[4], -transform[5]);\n\t            }\n\n\t            for (var i = 0; i < textLines.length; i++) {\n\t                textFill && ctx.fillText(textLines[i], x, y);\n\t                textStroke && ctx.strokeText(textLines[i], x, y);\n\t                y += textRect.lineHeight;\n\t            }\n\n\t            ctx.restore();\n\t        }\n\t    };\n\n\t    module.exports = RectText;\n\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * Path 代理，可以在`buildPath`中用于替代`ctx`, 会保存每个path操作的命令到pathCommands属性中\n\t * 可以用于 isInsidePath 判断以及获取boundingRect\n\t *\n\t * @module zrender/core/PathProxy\n\t * @author Yi Shen (http://www.github.com/pissang)\n\t */\n\n\t // TODO getTotalLength, getPointAtLength\n\n\n\t    var curve = __webpack_require__(50);\n\t    var vec2 = __webpack_require__(10);\n\t    var bbox = __webpack_require__(51);\n\t    var BoundingRect = __webpack_require__(9);\n\t    var dpr = __webpack_require__(41).devicePixelRatio;\n\n\t    var CMD = {\n\t        M: 1,\n\t        L: 2,\n\t        C: 3,\n\t        Q: 4,\n\t        A: 5,\n\t        Z: 6,\n\t        // Rect\n\t        R: 7\n\t    };\n\n\t    var min = [];\n\t    var max = [];\n\t    var min2 = [];\n\t    var max2 = [];\n\t    var mathMin = Math.min;\n\t    var mathMax = Math.max;\n\t    var mathCos = Math.cos;\n\t    var mathSin = Math.sin;\n\t    var mathSqrt = Math.sqrt;\n\t    var mathAbs = Math.abs;\n\n\t    var hasTypedArray = typeof Float32Array != 'undefined';\n\n\t    /**\n\t     * @alias module:zrender/core/PathProxy\n\t     * @constructor\n\t     */\n\t    var PathProxy = function () {\n\n\t        /**\n\t         * Path data. Stored as flat array\n\t         * @type {Array.<Object>}\n\t         */\n\t        this.data = [];\n\n\t        this._len = 0;\n\n\t        this._ctx = null;\n\n\t        this._xi = 0;\n\t        this._yi = 0;\n\n\t        this._x0 = 0;\n\t        this._y0 = 0;\n\n\t        // Unit x, Unit y. Provide for avoiding drawing that too short line segment\n\t        this._ux = 0;\n\t        this._uy = 0;\n\t    };\n\n\t    /**\n\t     * 快速计算Path包围盒（并不是最小包围盒）\n\t     * @return {Object}\n\t     */\n\t    PathProxy.prototype = {\n\n\t        constructor: PathProxy,\n\n\t        _lineDash: null,\n\n\t        _dashOffset: 0,\n\n\t        _dashIdx: 0,\n\n\t        _dashSum: 0,\n\n\t        /**\n\t         * @readOnly\n\t         */\n\t        setScale: function (sx, sy) {\n\t            this._ux = mathAbs(1 / dpr / sx) || 0;\n\t            this._uy = mathAbs(1 / dpr / sy) || 0;\n\t        },\n\n\t        getContext: function () {\n\t            return this._ctx;\n\t        },\n\n\t        /**\n\t         * @param  {CanvasRenderingContext2D} ctx\n\t         * @return {module:zrender/core/PathProxy}\n\t         */\n\t        beginPath: function (ctx) {\n\n\t            this._ctx = ctx;\n\n\t            ctx && ctx.beginPath();\n\n\t            ctx && (this.dpr = ctx.dpr);\n\n\t            // Reset\n\t            this._len = 0;\n\n\t            if (this._lineDash) {\n\t                this._lineDash = null;\n\n\t                this._dashOffset = 0;\n\t            }\n\n\t            return this;\n\t        },\n\n\t        /**\n\t         * @param  {number} x\n\t         * @param  {number} y\n\t         * @return {module:zrender/core/PathProxy}\n\t         */\n\t        moveTo: function (x, y) {\n\t            this.addData(CMD.M, x, y);\n\t            this._ctx && this._ctx.moveTo(x, y);\n\n\t            // x0, y0, xi, yi 是记录在 _dashedXXXXTo 方法中使用\n\t            // xi, yi 记录当前点, x0, y0 在 closePath 的时候回到起始点。\n\t            // 有可能在 beginPath 之后直接调用 lineTo，这时候 x0, y0 需要\n\t            // 在 lineTo 方法中记录，这里先不考虑这种情况，dashed line 也只在 IE10- 中不支持\n\t            this._x0 = x;\n\t            this._y0 = y;\n\n\t            this._xi = x;\n\t            this._yi = y;\n\n\t            return this;\n\t        },\n\n\t        /**\n\t         * @param  {number} x\n\t         * @param  {number} y\n\t         * @return {module:zrender/core/PathProxy}\n\t         */\n\t        lineTo: function (x, y) {\n\t            var exceedUnit = mathAbs(x - this._xi) > this._ux\n\t                || mathAbs(y - this._yi) > this._uy\n\t                // Force draw the first segment\n\t                || this._len < 5;\n\n\t            this.addData(CMD.L, x, y);\n\n\t            if (this._ctx && exceedUnit) {\n\t                this._needsDash() ? this._dashedLineTo(x, y)\n\t                    : this._ctx.lineTo(x, y);\n\t            }\n\t            if (exceedUnit) {\n\t                this._xi = x;\n\t                this._yi = y;\n\t            }\n\n\t            return this;\n\t        },\n\n\t        /**\n\t         * @param  {number} x1\n\t         * @param  {number} y1\n\t         * @param  {number} x2\n\t         * @param  {number} y2\n\t         * @param  {number} x3\n\t         * @param  {number} y3\n\t         * @return {module:zrender/core/PathProxy}\n\t         */\n\t        bezierCurveTo: function (x1, y1, x2, y2, x3, y3) {\n\t            this.addData(CMD.C, x1, y1, x2, y2, x3, y3);\n\t            if (this._ctx) {\n\t                this._needsDash() ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3)\n\t                    : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);\n\t            }\n\t            this._xi = x3;\n\t            this._yi = y3;\n\t            return this;\n\t        },\n\n\t        /**\n\t         * @param  {number} x1\n\t         * @param  {number} y1\n\t         * @param  {number} x2\n\t         * @param  {number} y2\n\t         * @return {module:zrender/core/PathProxy}\n\t         */\n\t        quadraticCurveTo: function (x1, y1, x2, y2) {\n\t            this.addData(CMD.Q, x1, y1, x2, y2);\n\t            if (this._ctx) {\n\t                this._needsDash() ? this._dashedQuadraticTo(x1, y1, x2, y2)\n\t                    : this._ctx.quadraticCurveTo(x1, y1, x2, y2);\n\t            }\n\t            this._xi = x2;\n\t            this._yi = y2;\n\t            return this;\n\t        },\n\n\t        /**\n\t         * @param  {number} cx\n\t         * @param  {number} cy\n\t         * @param  {number} r\n\t         * @param  {number} startAngle\n\t         * @param  {number} endAngle\n\t         * @param  {boolean} anticlockwise\n\t         * @return {module:zrender/core/PathProxy}\n\t         */\n\t        arc: function (cx, cy, r, startAngle, endAngle, anticlockwise) {\n\t            this.addData(\n\t                CMD.A, cx, cy, r, r, startAngle, endAngle - startAngle, 0, anticlockwise ? 0 : 1\n\t            );\n\t            this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);\n\n\t            this._xi = mathCos(endAngle) * r + cx;\n\t            this._yi = mathSin(endAngle) * r + cx;\n\t            return this;\n\t        },\n\n\t        // TODO\n\t        arcTo: function (x1, y1, x2, y2, radius) {\n\t            if (this._ctx) {\n\t                this._ctx.arcTo(x1, y1, x2, y2, radius);\n\t            }\n\t            return this;\n\t        },\n\n\t        // TODO\n\t        rect: function (x, y, w, h) {\n\t            this._ctx && this._ctx.rect(x, y, w, h);\n\t            this.addData(CMD.R, x, y, w, h);\n\t            return this;\n\t        },\n\n\t        /**\n\t         * @return {module:zrender/core/PathProxy}\n\t         */\n\t        closePath: function () {\n\t            this.addData(CMD.Z);\n\n\t            var ctx = this._ctx;\n\t            var x0 = this._x0;\n\t            var y0 = this._y0;\n\t            if (ctx) {\n\t                this._needsDash() && this._dashedLineTo(x0, y0);\n\t                ctx.closePath();\n\t            }\n\n\t            this._xi = x0;\n\t            this._yi = y0;\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Context 从外部传入，因为有可能是 rebuildPath 完之后再 fill。\n\t         * stroke 同样\n\t         * @param {CanvasRenderingContext2D} ctx\n\t         * @return {module:zrender/core/PathProxy}\n\t         */\n\t        fill: function (ctx) {\n\t            ctx && ctx.fill();\n\t            this.toStatic();\n\t        },\n\n\t        /**\n\t         * @param {CanvasRenderingContext2D} ctx\n\t         * @return {module:zrender/core/PathProxy}\n\t         */\n\t        stroke: function (ctx) {\n\t            ctx && ctx.stroke();\n\t            this.toStatic();\n\t        },\n\n\t        /**\n\t         * 必须在其它绘制命令前调用\n\t         * Must be invoked before all other path drawing methods\n\t         * @return {module:zrender/core/PathProxy}\n\t         */\n\t        setLineDash: function (lineDash) {\n\t            if (lineDash instanceof Array) {\n\t                this._lineDash = lineDash;\n\n\t                this._dashIdx = 0;\n\n\t                var lineDashSum = 0;\n\t                for (var i = 0; i < lineDash.length; i++) {\n\t                    lineDashSum += lineDash[i];\n\t                }\n\t                this._dashSum = lineDashSum;\n\t            }\n\t            return this;\n\t        },\n\n\t        /**\n\t         * 必须在其它绘制命令前调用\n\t         * Must be invoked before all other path drawing methods\n\t         * @return {module:zrender/core/PathProxy}\n\t         */\n\t        setLineDashOffset: function (offset) {\n\t            this._dashOffset = offset;\n\t            return this;\n\t        },\n\n\t        /**\n\t         *\n\t         * @return {boolean}\n\t         */\n\t        len: function () {\n\t            return this._len;\n\t        },\n\n\t        /**\n\t         * 直接设置 Path 数据\n\t         */\n\t        setData: function (data) {\n\n\t            var len = data.length;\n\n\t            if (! (this.data && this.data.length == len) && hasTypedArray) {\n\t                this.data = new Float32Array(len);\n\t            }\n\n\t            for (var i = 0; i < len; i++) {\n\t                this.data[i] = data[i];\n\t            }\n\n\t            this._len = len;\n\t        },\n\n\t        /**\n\t         * 添加子路径\n\t         * @param {module:zrender/core/PathProxy|Array.<module:zrender/core/PathProxy>} path\n\t         */\n\t        appendPath: function (path) {\n\t            if (!(path instanceof Array)) {\n\t                path = [path];\n\t            }\n\t            var len = path.length;\n\t            var appendSize = 0;\n\t            var offset = this._len;\n\t            for (var i = 0; i < len; i++) {\n\t                appendSize += path[i].len();\n\t            }\n\t            if (hasTypedArray && (this.data instanceof Float32Array)) {\n\t                this.data = new Float32Array(offset + appendSize);\n\t            }\n\t            for (var i = 0; i < len; i++) {\n\t                var appendPathData = path[i].data;\n\t                for (var k = 0; k < appendPathData.length; k++) {\n\t                    this.data[offset++] = appendPathData[k];\n\t                }\n\t            }\n\t            this._len = offset;\n\t        },\n\n\t        /**\n\t         * 填充 Path 数据。\n\t         * 尽量复用而不申明新的数组。大部分图形重绘的指令数据长度都是不变的。\n\t         */\n\t        addData: function (cmd) {\n\t            var data = this.data;\n\t            if (this._len + arguments.length > data.length) {\n\t                // 因为之前的数组已经转换成静态的 Float32Array\n\t                // 所以不够用时需要扩展一个新的动态数组\n\t                this._expandData();\n\t                data = this.data;\n\t            }\n\t            for (var i = 0; i < arguments.length; i++) {\n\t                data[this._len++] = arguments[i];\n\t            }\n\n\t            this._prevCmd = cmd;\n\t        },\n\n\t        _expandData: function () {\n\t            // Only if data is Float32Array\n\t            if (!(this.data instanceof Array)) {\n\t                var newData = [];\n\t                for (var i = 0; i < this._len; i++) {\n\t                    newData[i] = this.data[i];\n\t                }\n\t                this.data = newData;\n\t            }\n\t        },\n\n\t        /**\n\t         * If needs js implemented dashed line\n\t         * @return {boolean}\n\t         * @private\n\t         */\n\t        _needsDash: function () {\n\t            return this._lineDash;\n\t        },\n\n\t        _dashedLineTo: function (x1, y1) {\n\t            var dashSum = this._dashSum;\n\t            var offset = this._dashOffset;\n\t            var lineDash = this._lineDash;\n\t            var ctx = this._ctx;\n\n\t            var x0 = this._xi;\n\t            var y0 = this._yi;\n\t            var dx = x1 - x0;\n\t            var dy = y1 - y0;\n\t            var dist = mathSqrt(dx * dx + dy * dy);\n\t            var x = x0;\n\t            var y = y0;\n\t            var dash;\n\t            var nDash = lineDash.length;\n\t            var idx;\n\t            dx /= dist;\n\t            dy /= dist;\n\n\t            if (offset < 0) {\n\t                // Convert to positive offset\n\t                offset = dashSum + offset;\n\t            }\n\t            offset %= dashSum;\n\t            x -= offset * dx;\n\t            y -= offset * dy;\n\n\t            while ((dx > 0 && x <= x1) || (dx < 0 && x >= x1)\n\t            || (dx == 0 && ((dy > 0 && y <= y1) || (dy < 0 && y >= y1)))) {\n\t                idx = this._dashIdx;\n\t                dash = lineDash[idx];\n\t                x += dx * dash;\n\t                y += dy * dash;\n\t                this._dashIdx = (idx + 1) % nDash;\n\t                // Skip positive offset\n\t                if ((dx > 0 && x < x0) || (dx < 0 && x > x0) || (dy > 0 && y < y0) || (dy < 0 && y > y0)) {\n\t                    continue;\n\t                }\n\t                ctx[idx % 2 ? 'moveTo' : 'lineTo'](\n\t                    dx >= 0 ? mathMin(x, x1) : mathMax(x, x1),\n\t                    dy >= 0 ? mathMin(y, y1) : mathMax(y, y1)\n\t                );\n\t            }\n\t            // Offset for next lineTo\n\t            dx = x - x1;\n\t            dy = y - y1;\n\t            this._dashOffset = -mathSqrt(dx * dx + dy * dy);\n\t        },\n\n\t        // Not accurate dashed line to\n\t        _dashedBezierTo: function (x1, y1, x2, y2, x3, y3) {\n\t            var dashSum = this._dashSum;\n\t            var offset = this._dashOffset;\n\t            var lineDash = this._lineDash;\n\t            var ctx = this._ctx;\n\n\t            var x0 = this._xi;\n\t            var y0 = this._yi;\n\t            var t;\n\t            var dx;\n\t            var dy;\n\t            var cubicAt = curve.cubicAt;\n\t            var bezierLen = 0;\n\t            var idx = this._dashIdx;\n\t            var nDash = lineDash.length;\n\n\t            var x;\n\t            var y;\n\n\t            var tmpLen = 0;\n\n\t            if (offset < 0) {\n\t                // Convert to positive offset\n\t                offset = dashSum + offset;\n\t            }\n\t            offset %= dashSum;\n\t            // Bezier approx length\n\t            for (t = 0; t < 1; t += 0.1) {\n\t                dx = cubicAt(x0, x1, x2, x3, t + 0.1)\n\t                    - cubicAt(x0, x1, x2, x3, t);\n\t                dy = cubicAt(y0, y1, y2, y3, t + 0.1)\n\t                    - cubicAt(y0, y1, y2, y3, t);\n\t                bezierLen += mathSqrt(dx * dx + dy * dy);\n\t            }\n\n\t            // Find idx after add offset\n\t            for (; idx < nDash; idx++) {\n\t                tmpLen += lineDash[idx];\n\t                if (tmpLen > offset) {\n\t                    break;\n\t                }\n\t            }\n\t            t = (tmpLen - offset) / bezierLen;\n\n\t            while (t <= 1) {\n\n\t                x = cubicAt(x0, x1, x2, x3, t);\n\t                y = cubicAt(y0, y1, y2, y3, t);\n\n\t                // Use line to approximate dashed bezier\n\t                // Bad result if dash is long\n\t                idx % 2 ? ctx.moveTo(x, y)\n\t                    : ctx.lineTo(x, y);\n\n\t                t += lineDash[idx] / bezierLen;\n\n\t                idx = (idx + 1) % nDash;\n\t            }\n\n\t            // Finish the last segment and calculate the new offset\n\t            (idx % 2 !== 0) && ctx.lineTo(x3, y3);\n\t            dx = x3 - x;\n\t            dy = y3 - y;\n\t            this._dashOffset = -mathSqrt(dx * dx + dy * dy);\n\t        },\n\n\t        _dashedQuadraticTo: function (x1, y1, x2, y2) {\n\t            // Convert quadratic to cubic using degree elevation\n\t            var x3 = x2;\n\t            var y3 = y2;\n\t            x2 = (x2 + 2 * x1) / 3;\n\t            y2 = (y2 + 2 * y1) / 3;\n\t            x1 = (this._xi + 2 * x1) / 3;\n\t            y1 = (this._yi + 2 * y1) / 3;\n\n\t            this._dashedBezierTo(x1, y1, x2, y2, x3, y3);\n\t        },\n\n\t        /**\n\t         * 转成静态的 Float32Array 减少堆内存占用\n\t         * Convert dynamic array to static Float32Array\n\t         */\n\t        toStatic: function () {\n\t            var data = this.data;\n\t            if (data instanceof Array) {\n\t                data.length = this._len;\n\t                if (hasTypedArray) {\n\t                    this.data = new Float32Array(data);\n\t                }\n\t            }\n\t        },\n\n\t        /**\n\t         * @return {module:zrender/core/BoundingRect}\n\t         */\n\t        getBoundingRect: function () {\n\t            min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;\n\t            max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;\n\n\t            var data = this.data;\n\t            var xi = 0;\n\t            var yi = 0;\n\t            var x0 = 0;\n\t            var y0 = 0;\n\n\t            for (var i = 0; i < data.length;) {\n\t                var cmd = data[i++];\n\n\t                if (i == 1) {\n\t                    // 如果第一个命令是 L, C, Q\n\t                    // 则 previous point 同绘制命令的第一个 point\n\t                    //\n\t                    // 第一个命令为 Arc 的情况下会在后面特殊处理\n\t                    xi = data[i];\n\t                    yi = data[i + 1];\n\n\t                    x0 = xi;\n\t                    y0 = yi;\n\t                }\n\n\t                switch (cmd) {\n\t                    case CMD.M:\n\t                        // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点\n\t                        // 在 closePath 的时候使用\n\t                        x0 = data[i++];\n\t                        y0 = data[i++];\n\t                        xi = x0;\n\t                        yi = y0;\n\t                        min2[0] = x0;\n\t                        min2[1] = y0;\n\t                        max2[0] = x0;\n\t                        max2[1] = y0;\n\t                        break;\n\t                    case CMD.L:\n\t                        bbox.fromLine(xi, yi, data[i], data[i + 1], min2, max2);\n\t                        xi = data[i++];\n\t                        yi = data[i++];\n\t                        break;\n\t                    case CMD.C:\n\t                        bbox.fromCubic(\n\t                            xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\n\t                            min2, max2\n\t                        );\n\t                        xi = data[i++];\n\t                        yi = data[i++];\n\t                        break;\n\t                    case CMD.Q:\n\t                        bbox.fromQuadratic(\n\t                            xi, yi, data[i++], data[i++], data[i], data[i + 1],\n\t                            min2, max2\n\t                        );\n\t                        xi = data[i++];\n\t                        yi = data[i++];\n\t                        break;\n\t                    case CMD.A:\n\t                        // TODO Arc 判断的开销比较大\n\t                        var cx = data[i++];\n\t                        var cy = data[i++];\n\t                        var rx = data[i++];\n\t                        var ry = data[i++];\n\t                        var startAngle = data[i++];\n\t                        var endAngle = data[i++] + startAngle;\n\t                        // TODO Arc 旋转\n\t                        var psi = data[i++];\n\t                        var anticlockwise = 1 - data[i++];\n\n\t                        if (i == 1) {\n\t                            // 直接使用 arc 命令\n\t                            // 第一个命令起点还未定义\n\t                            x0 = mathCos(startAngle) * rx + cx;\n\t                            y0 = mathSin(startAngle) * ry + cy;\n\t                        }\n\n\t                        bbox.fromArc(\n\t                            cx, cy, rx, ry, startAngle, endAngle,\n\t                            anticlockwise, min2, max2\n\t                        );\n\n\t                        xi = mathCos(endAngle) * rx + cx;\n\t                        yi = mathSin(endAngle) * ry + cy;\n\t                        break;\n\t                    case CMD.R:\n\t                        x0 = xi = data[i++];\n\t                        y0 = yi = data[i++];\n\t                        var width = data[i++];\n\t                        var height = data[i++];\n\t                        // Use fromLine\n\t                        bbox.fromLine(x0, y0, x0 + width, y0 + height, min2, max2);\n\t                        break;\n\t                    case CMD.Z:\n\t                        xi = x0;\n\t                        yi = y0;\n\t                        break;\n\t                }\n\n\t                // Union\n\t                vec2.min(min, min, min2);\n\t                vec2.max(max, max, max2);\n\t            }\n\n\t            // No data\n\t            if (i === 0) {\n\t                min[0] = min[1] = max[0] = max[1] = 0;\n\t            }\n\n\t            return new BoundingRect(\n\t                min[0], min[1], max[0] - min[0], max[1] - min[1]\n\t            );\n\t        },\n\n\t        /**\n\t         * Rebuild path from current data\n\t         * Rebuild path will not consider javascript implemented line dash.\n\t         * @param {CanvasRenderingContext} ctx\n\t         */\n\t        rebuildPath: function (ctx) {\n\t            var d = this.data;\n\t            var x0, y0;\n\t            var xi, yi;\n\t            var x, y;\n\t            var ux = this._ux;\n\t            var uy = this._uy;\n\t            var len = this._len;\n\t            for (var i = 0; i < len;) {\n\t                var cmd = d[i++];\n\n\t                if (i == 1) {\n\t                    // 如果第一个命令是 L, C, Q\n\t                    // 则 previous point 同绘制命令的第一个 point\n\t                    //\n\t                    // 第一个命令为 Arc 的情况下会在后面特殊处理\n\t                    xi = d[i];\n\t                    yi = d[i + 1];\n\n\t                    x0 = xi;\n\t                    y0 = yi;\n\t                }\n\t                switch (cmd) {\n\t                    case CMD.M:\n\t                        x0 = xi = d[i++];\n\t                        y0 = yi = d[i++];\n\t                        ctx.moveTo(xi, yi);\n\t                        break;\n\t                    case CMD.L:\n\t                        x = d[i++];\n\t                        y = d[i++];\n\t                        // Not draw too small seg between\n\t                        if (mathAbs(x - xi) > ux || mathAbs(y - yi) > uy || i === len - 1) {\n\t                            ctx.lineTo(x, y);\n\t                            xi = x;\n\t                            yi = y;\n\t                        }\n\t                        break;\n\t                    case CMD.C:\n\t                        ctx.bezierCurveTo(\n\t                            d[i++], d[i++], d[i++], d[i++], d[i++], d[i++]\n\t                        );\n\t                        xi = d[i - 2];\n\t                        yi = d[i - 1];\n\t                        break;\n\t                    case CMD.Q:\n\t                        ctx.quadraticCurveTo(d[i++], d[i++], d[i++], d[i++]);\n\t                        xi = d[i - 2];\n\t                        yi = d[i - 1];\n\t                        break;\n\t                    case CMD.A:\n\t                        var cx = d[i++];\n\t                        var cy = d[i++];\n\t                        var rx = d[i++];\n\t                        var ry = d[i++];\n\t                        var theta = d[i++];\n\t                        var dTheta = d[i++];\n\t                        var psi = d[i++];\n\t                        var fs = d[i++];\n\t                        var r = (rx > ry) ? rx : ry;\n\t                        var scaleX = (rx > ry) ? 1 : rx / ry;\n\t                        var scaleY = (rx > ry) ? ry / rx : 1;\n\t                        var isEllipse = Math.abs(rx - ry) > 1e-3;\n\t                        var endAngle = theta + dTheta;\n\t                        if (isEllipse) {\n\t                            ctx.translate(cx, cy);\n\t                            ctx.rotate(psi);\n\t                            ctx.scale(scaleX, scaleY);\n\t                            ctx.arc(0, 0, r, theta, endAngle, 1 - fs);\n\t                            ctx.scale(1 / scaleX, 1 / scaleY);\n\t                            ctx.rotate(-psi);\n\t                            ctx.translate(-cx, -cy);\n\t                        }\n\t                        else {\n\t                            ctx.arc(cx, cy, r, theta, endAngle, 1 - fs);\n\t                        }\n\n\t                        if (i == 1) {\n\t                            // 直接使用 arc 命令\n\t                            // 第一个命令起点还未定义\n\t                            x0 = mathCos(theta) * rx + cx;\n\t                            y0 = mathSin(theta) * ry + cy;\n\t                        }\n\t                        xi = mathCos(endAngle) * rx + cx;\n\t                        yi = mathSin(endAngle) * ry + cy;\n\t                        break;\n\t                    case CMD.R:\n\t                        x0 = xi = d[i];\n\t                        y0 = yi = d[i + 1];\n\t                        ctx.rect(d[i++], d[i++], d[i++], d[i++]);\n\t                        break;\n\t                    case CMD.Z:\n\t                        ctx.closePath();\n\t                        xi = x0;\n\t                        yi = y0;\n\t                }\n\t            }\n\t        }\n\t    };\n\n\t    PathProxy.CMD = CMD;\n\n\t    module.exports = PathProxy;\n\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * 曲线辅助模块\n\t * @module zrender/core/curve\n\t * @author pissang(https://www.github.com/pissang)\n\t */\n\n\n\t    var vec2 = __webpack_require__(10);\n\t    var v2Create = vec2.create;\n\t    var v2DistSquare = vec2.distSquare;\n\t    var mathPow = Math.pow;\n\t    var mathSqrt = Math.sqrt;\n\n\t    var EPSILON = 1e-8;\n\t    var EPSILON_NUMERIC = 1e-4;\n\n\t    var THREE_SQRT = mathSqrt(3);\n\t    var ONE_THIRD = 1 / 3;\n\n\t    // 临时变量\n\t    var _v0 = v2Create();\n\t    var _v1 = v2Create();\n\t    var _v2 = v2Create();\n\t    // var _v3 = vec2.create();\n\n\t    function isAroundZero(val) {\n\t        return val > -EPSILON && val < EPSILON;\n\t    }\n\t    function isNotAroundZero(val) {\n\t        return val > EPSILON || val < -EPSILON;\n\t    }\n\t    /**\n\t     * 计算三次贝塞尔值\n\t     * @memberOf module:zrender/core/curve\n\t     * @param  {number} p0\n\t     * @param  {number} p1\n\t     * @param  {number} p2\n\t     * @param  {number} p3\n\t     * @param  {number} t\n\t     * @return {number}\n\t     */\n\t    function cubicAt(p0, p1, p2, p3, t) {\n\t        var onet = 1 - t;\n\t        return onet * onet * (onet * p0 + 3 * t * p1)\n\t             + t * t * (t * p3 + 3 * onet * p2);\n\t    }\n\n\t    /**\n\t     * 计算三次贝塞尔导数值\n\t     * @memberOf module:zrender/core/curve\n\t     * @param  {number} p0\n\t     * @param  {number} p1\n\t     * @param  {number} p2\n\t     * @param  {number} p3\n\t     * @param  {number} t\n\t     * @return {number}\n\t     */\n\t    function cubicDerivativeAt(p0, p1, p2, p3, t) {\n\t        var onet = 1 - t;\n\t        return 3 * (\n\t            ((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet\n\t            + (p3 - p2) * t * t\n\t        );\n\t    }\n\n\t    /**\n\t     * 计算三次贝塞尔方程根，使用盛金公式\n\t     * @memberOf module:zrender/core/curve\n\t     * @param  {number} p0\n\t     * @param  {number} p1\n\t     * @param  {number} p2\n\t     * @param  {number} p3\n\t     * @param  {number} val\n\t     * @param  {Array.<number>} roots\n\t     * @return {number} 有效根数目\n\t     */\n\t    function cubicRootAt(p0, p1, p2, p3, val, roots) {\n\t        // Evaluate roots of cubic functions\n\t        var a = p3 + 3 * (p1 - p2) - p0;\n\t        var b = 3 * (p2 - p1 * 2 + p0);\n\t        var c = 3 * (p1  - p0);\n\t        var d = p0 - val;\n\n\t        var A = b * b - 3 * a * c;\n\t        var B = b * c - 9 * a * d;\n\t        var C = c * c - 3 * b * d;\n\n\t        var n = 0;\n\n\t        if (isAroundZero(A) && isAroundZero(B)) {\n\t            if (isAroundZero(b)) {\n\t                roots[0] = 0;\n\t            }\n\t            else {\n\t                var t1 = -c / b;  //t1, t2, t3, b is not zero\n\t                if (t1 >= 0 && t1 <= 1) {\n\t                    roots[n++] = t1;\n\t                }\n\t            }\n\t        }\n\t        else {\n\t            var disc = B * B - 4 * A * C;\n\n\t            if (isAroundZero(disc)) {\n\t                var K = B / A;\n\t                var t1 = -b / a + K;  // t1, a is not zero\n\t                var t2 = -K / 2;  // t2, t3\n\t                if (t1 >= 0 && t1 <= 1) {\n\t                    roots[n++] = t1;\n\t                }\n\t                if (t2 >= 0 && t2 <= 1) {\n\t                    roots[n++] = t2;\n\t                }\n\t            }\n\t            else if (disc > 0) {\n\t                var discSqrt = mathSqrt(disc);\n\t                var Y1 = A * b + 1.5 * a * (-B + discSqrt);\n\t                var Y2 = A * b + 1.5 * a * (-B - discSqrt);\n\t                if (Y1 < 0) {\n\t                    Y1 = -mathPow(-Y1, ONE_THIRD);\n\t                }\n\t                else {\n\t                    Y1 = mathPow(Y1, ONE_THIRD);\n\t                }\n\t                if (Y2 < 0) {\n\t                    Y2 = -mathPow(-Y2, ONE_THIRD);\n\t                }\n\t                else {\n\t                    Y2 = mathPow(Y2, ONE_THIRD);\n\t                }\n\t                var t1 = (-b - (Y1 + Y2)) / (3 * a);\n\t                if (t1 >= 0 && t1 <= 1) {\n\t                    roots[n++] = t1;\n\t                }\n\t            }\n\t            else {\n\t                var T = (2 * A * b - 3 * a * B) / (2 * mathSqrt(A * A * A));\n\t                var theta = Math.acos(T) / 3;\n\t                var ASqrt = mathSqrt(A);\n\t                var tmp = Math.cos(theta);\n\n\t                var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);\n\t                var t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);\n\t                var t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);\n\t                if (t1 >= 0 && t1 <= 1) {\n\t                    roots[n++] = t1;\n\t                }\n\t                if (t2 >= 0 && t2 <= 1) {\n\t                    roots[n++] = t2;\n\t                }\n\t                if (t3 >= 0 && t3 <= 1) {\n\t                    roots[n++] = t3;\n\t                }\n\t            }\n\t        }\n\t        return n;\n\t    }\n\n\t    /**\n\t     * 计算三次贝塞尔方程极限值的位置\n\t     * @memberOf module:zrender/core/curve\n\t     * @param  {number} p0\n\t     * @param  {number} p1\n\t     * @param  {number} p2\n\t     * @param  {number} p3\n\t     * @param  {Array.<number>} extrema\n\t     * @return {number} 有效数目\n\t     */\n\t    function cubicExtrema(p0, p1, p2, p3, extrema) {\n\t        var b = 6 * p2 - 12 * p1 + 6 * p0;\n\t        var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;\n\t        var c = 3 * p1 - 3 * p0;\n\n\t        var n = 0;\n\t        if (isAroundZero(a)) {\n\t            if (isNotAroundZero(b)) {\n\t                var t1 = -c / b;\n\t                if (t1 >= 0 && t1 <=1) {\n\t                    extrema[n++] = t1;\n\t                }\n\t            }\n\t        }\n\t        else {\n\t            var disc = b * b - 4 * a * c;\n\t            if (isAroundZero(disc)) {\n\t                extrema[0] = -b / (2 * a);\n\t            }\n\t            else if (disc > 0) {\n\t                var discSqrt = mathSqrt(disc);\n\t                var t1 = (-b + discSqrt) / (2 * a);\n\t                var t2 = (-b - discSqrt) / (2 * a);\n\t                if (t1 >= 0 && t1 <= 1) {\n\t                    extrema[n++] = t1;\n\t                }\n\t                if (t2 >= 0 && t2 <= 1) {\n\t                    extrema[n++] = t2;\n\t                }\n\t            }\n\t        }\n\t        return n;\n\t    }\n\n\t    /**\n\t     * 细分三次贝塞尔曲线\n\t     * @memberOf module:zrender/core/curve\n\t     * @param  {number} p0\n\t     * @param  {number} p1\n\t     * @param  {number} p2\n\t     * @param  {number} p3\n\t     * @param  {number} t\n\t     * @param  {Array.<number>} out\n\t     */\n\t    function cubicSubdivide(p0, p1, p2, p3, t, out) {\n\t        var p01 = (p1 - p0) * t + p0;\n\t        var p12 = (p2 - p1) * t + p1;\n\t        var p23 = (p3 - p2) * t + p2;\n\n\t        var p012 = (p12 - p01) * t + p01;\n\t        var p123 = (p23 - p12) * t + p12;\n\n\t        var p0123 = (p123 - p012) * t + p012;\n\t        // Seg0\n\t        out[0] = p0;\n\t        out[1] = p01;\n\t        out[2] = p012;\n\t        out[3] = p0123;\n\t        // Seg1\n\t        out[4] = p0123;\n\t        out[5] = p123;\n\t        out[6] = p23;\n\t        out[7] = p3;\n\t    }\n\n\t    /**\n\t     * 投射点到三次贝塞尔曲线上，返回投射距离。\n\t     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。\n\t     * @param {number} x0\n\t     * @param {number} y0\n\t     * @param {number} x1\n\t     * @param {number} y1\n\t     * @param {number} x2\n\t     * @param {number} y2\n\t     * @param {number} x3\n\t     * @param {number} y3\n\t     * @param {number} x\n\t     * @param {number} y\n\t     * @param {Array.<number>} [out] 投射点\n\t     * @return {number}\n\t     */\n\t    function cubicProjectPoint(\n\t        x0, y0, x1, y1, x2, y2, x3, y3,\n\t        x, y, out\n\t    ) {\n\t        // http://pomax.github.io/bezierinfo/#projections\n\t        var t;\n\t        var interval = 0.005;\n\t        var d = Infinity;\n\t        var prev;\n\t        var next;\n\t        var d1;\n\t        var d2;\n\n\t        _v0[0] = x;\n\t        _v0[1] = y;\n\n\t        // 先粗略估计一下可能的最小距离的 t 值\n\t        // PENDING\n\t        for (var _t = 0; _t < 1; _t += 0.05) {\n\t            _v1[0] = cubicAt(x0, x1, x2, x3, _t);\n\t            _v1[1] = cubicAt(y0, y1, y2, y3, _t);\n\t            d1 = v2DistSquare(_v0, _v1);\n\t            if (d1 < d) {\n\t                t = _t;\n\t                d = d1;\n\t            }\n\t        }\n\t        d = Infinity;\n\n\t        // At most 32 iteration\n\t        for (var i = 0; i < 32; i++) {\n\t            if (interval < EPSILON_NUMERIC) {\n\t                break;\n\t            }\n\t            prev = t - interval;\n\t            next = t + interval;\n\t            // t - interval\n\t            _v1[0] = cubicAt(x0, x1, x2, x3, prev);\n\t            _v1[1] = cubicAt(y0, y1, y2, y3, prev);\n\n\t            d1 = v2DistSquare(_v1, _v0);\n\n\t            if (prev >= 0 && d1 < d) {\n\t                t = prev;\n\t                d = d1;\n\t            }\n\t            else {\n\t                // t + interval\n\t                _v2[0] = cubicAt(x0, x1, x2, x3, next);\n\t                _v2[1] = cubicAt(y0, y1, y2, y3, next);\n\t                d2 = v2DistSquare(_v2, _v0);\n\n\t                if (next <= 1 && d2 < d) {\n\t                    t = next;\n\t                    d = d2;\n\t                }\n\t                else {\n\t                    interval *= 0.5;\n\t                }\n\t            }\n\t        }\n\t        // t\n\t        if (out) {\n\t            out[0] = cubicAt(x0, x1, x2, x3, t);\n\t            out[1] = cubicAt(y0, y1, y2, y3, t);\n\t        }\n\t        // console.log(interval, i);\n\t        return mathSqrt(d);\n\t    }\n\n\t    /**\n\t     * 计算二次方贝塞尔值\n\t     * @param  {number} p0\n\t     * @param  {number} p1\n\t     * @param  {number} p2\n\t     * @param  {number} t\n\t     * @return {number}\n\t     */\n\t    function quadraticAt(p0, p1, p2, t) {\n\t        var onet = 1 - t;\n\t        return onet * (onet * p0 + 2 * t * p1) + t * t * p2;\n\t    }\n\n\t    /**\n\t     * 计算二次方贝塞尔导数值\n\t     * @param  {number} p0\n\t     * @param  {number} p1\n\t     * @param  {number} p2\n\t     * @param  {number} t\n\t     * @return {number}\n\t     */\n\t    function quadraticDerivativeAt(p0, p1, p2, t) {\n\t        return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));\n\t    }\n\n\t    /**\n\t     * 计算二次方贝塞尔方程根\n\t     * @param  {number} p0\n\t     * @param  {number} p1\n\t     * @param  {number} p2\n\t     * @param  {number} t\n\t     * @param  {Array.<number>} roots\n\t     * @return {number} 有效根数目\n\t     */\n\t    function quadraticRootAt(p0, p1, p2, val, roots) {\n\t        var a = p0 - 2 * p1 + p2;\n\t        var b = 2 * (p1 - p0);\n\t        var c = p0 - val;\n\n\t        var n = 0;\n\t        if (isAroundZero(a)) {\n\t            if (isNotAroundZero(b)) {\n\t                var t1 = -c / b;\n\t                if (t1 >= 0 && t1 <= 1) {\n\t                    roots[n++] = t1;\n\t                }\n\t            }\n\t        }\n\t        else {\n\t            var disc = b * b - 4 * a * c;\n\t            if (isAroundZero(disc)) {\n\t                var t1 = -b / (2 * a);\n\t                if (t1 >= 0 && t1 <= 1) {\n\t                    roots[n++] = t1;\n\t                }\n\t            }\n\t            else if (disc > 0) {\n\t                var discSqrt = mathSqrt(disc);\n\t                var t1 = (-b + discSqrt) / (2 * a);\n\t                var t2 = (-b - discSqrt) / (2 * a);\n\t                if (t1 >= 0 && t1 <= 1) {\n\t                    roots[n++] = t1;\n\t                }\n\t                if (t2 >= 0 && t2 <= 1) {\n\t                    roots[n++] = t2;\n\t                }\n\t            }\n\t        }\n\t        return n;\n\t    }\n\n\t    /**\n\t     * 计算二次贝塞尔方程极限值\n\t     * @memberOf module:zrender/core/curve\n\t     * @param  {number} p0\n\t     * @param  {number} p1\n\t     * @param  {number} p2\n\t     * @return {number}\n\t     */\n\t    function quadraticExtremum(p0, p1, p2) {\n\t        var divider = p0 + p2 - 2 * p1;\n\t        if (divider === 0) {\n\t            // p1 is center of p0 and p2\n\t            return 0.5;\n\t        }\n\t        else {\n\t            return (p0 - p1) / divider;\n\t        }\n\t    }\n\n\t    /**\n\t     * 细分二次贝塞尔曲线\n\t     * @memberOf module:zrender/core/curve\n\t     * @param  {number} p0\n\t     * @param  {number} p1\n\t     * @param  {number} p2\n\t     * @param  {number} t\n\t     * @param  {Array.<number>} out\n\t     */\n\t    function quadraticSubdivide(p0, p1, p2, t, out) {\n\t        var p01 = (p1 - p0) * t + p0;\n\t        var p12 = (p2 - p1) * t + p1;\n\t        var p012 = (p12 - p01) * t + p01;\n\n\t        // Seg0\n\t        out[0] = p0;\n\t        out[1] = p01;\n\t        out[2] = p012;\n\n\t        // Seg1\n\t        out[3] = p012;\n\t        out[4] = p12;\n\t        out[5] = p2;\n\t    }\n\n\t    /**\n\t     * 投射点到二次贝塞尔曲线上，返回投射距离。\n\t     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。\n\t     * @param {number} x0\n\t     * @param {number} y0\n\t     * @param {number} x1\n\t     * @param {number} y1\n\t     * @param {number} x2\n\t     * @param {number} y2\n\t     * @param {number} x\n\t     * @param {number} y\n\t     * @param {Array.<number>} out 投射点\n\t     * @return {number}\n\t     */\n\t    function quadraticProjectPoint(\n\t        x0, y0, x1, y1, x2, y2,\n\t        x, y, out\n\t    ) {\n\t        // http://pomax.github.io/bezierinfo/#projections\n\t        var t;\n\t        var interval = 0.005;\n\t        var d = Infinity;\n\n\t        _v0[0] = x;\n\t        _v0[1] = y;\n\n\t        // 先粗略估计一下可能的最小距离的 t 值\n\t        // PENDING\n\t        for (var _t = 0; _t < 1; _t += 0.05) {\n\t            _v1[0] = quadraticAt(x0, x1, x2, _t);\n\t            _v1[1] = quadraticAt(y0, y1, y2, _t);\n\t            var d1 = v2DistSquare(_v0, _v1);\n\t            if (d1 < d) {\n\t                t = _t;\n\t                d = d1;\n\t            }\n\t        }\n\t        d = Infinity;\n\n\t        // At most 32 iteration\n\t        for (var i = 0; i < 32; i++) {\n\t            if (interval < EPSILON_NUMERIC) {\n\t                break;\n\t            }\n\t            var prev = t - interval;\n\t            var next = t + interval;\n\t            // t - interval\n\t            _v1[0] = quadraticAt(x0, x1, x2, prev);\n\t            _v1[1] = quadraticAt(y0, y1, y2, prev);\n\n\t            var d1 = v2DistSquare(_v1, _v0);\n\n\t            if (prev >= 0 && d1 < d) {\n\t                t = prev;\n\t                d = d1;\n\t            }\n\t            else {\n\t                // t + interval\n\t                _v2[0] = quadraticAt(x0, x1, x2, next);\n\t                _v2[1] = quadraticAt(y0, y1, y2, next);\n\t                var d2 = v2DistSquare(_v2, _v0);\n\t                if (next <= 1 && d2 < d) {\n\t                    t = next;\n\t                    d = d2;\n\t                }\n\t                else {\n\t                    interval *= 0.5;\n\t                }\n\t            }\n\t        }\n\t        // t\n\t        if (out) {\n\t            out[0] = quadraticAt(x0, x1, x2, t);\n\t            out[1] = quadraticAt(y0, y1, y2, t);\n\t        }\n\t        // console.log(interval, i);\n\t        return mathSqrt(d);\n\t    }\n\n\t    module.exports = {\n\n\t        cubicAt: cubicAt,\n\n\t        cubicDerivativeAt: cubicDerivativeAt,\n\n\t        cubicRootAt: cubicRootAt,\n\n\t        cubicExtrema: cubicExtrema,\n\n\t        cubicSubdivide: cubicSubdivide,\n\n\t        cubicProjectPoint: cubicProjectPoint,\n\n\t        quadraticAt: quadraticAt,\n\n\t        quadraticDerivativeAt: quadraticDerivativeAt,\n\n\t        quadraticRootAt: quadraticRootAt,\n\n\t        quadraticExtremum: quadraticExtremum,\n\n\t        quadraticSubdivide: quadraticSubdivide,\n\n\t        quadraticProjectPoint: quadraticProjectPoint\n\t    };\n\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @author Yi Shen(https://github.com/pissang)\n\t */\n\n\n\t    var vec2 = __webpack_require__(10);\n\t    var curve = __webpack_require__(50);\n\n\t    var bbox = {};\n\t    var mathMin = Math.min;\n\t    var mathMax = Math.max;\n\t    var mathSin = Math.sin;\n\t    var mathCos = Math.cos;\n\n\t    var start = vec2.create();\n\t    var end = vec2.create();\n\t    var extremity = vec2.create();\n\n\t    var PI2 = Math.PI * 2;\n\t    /**\n\t     * 从顶点数组中计算出最小包围盒，写入`min`和`max`中\n\t     * @module zrender/core/bbox\n\t     * @param {Array<Object>} points 顶点数组\n\t     * @param {number} min\n\t     * @param {number} max\n\t     */\n\t    bbox.fromPoints = function(points, min, max) {\n\t        if (points.length === 0) {\n\t            return;\n\t        }\n\t        var p = points[0];\n\t        var left = p[0];\n\t        var right = p[0];\n\t        var top = p[1];\n\t        var bottom = p[1];\n\t        var i;\n\n\t        for (i = 1; i < points.length; i++) {\n\t            p = points[i];\n\t            left = mathMin(left, p[0]);\n\t            right = mathMax(right, p[0]);\n\t            top = mathMin(top, p[1]);\n\t            bottom = mathMax(bottom, p[1]);\n\t        }\n\n\t        min[0] = left;\n\t        min[1] = top;\n\t        max[0] = right;\n\t        max[1] = bottom;\n\t    };\n\n\t    /**\n\t     * @memberOf module:zrender/core/bbox\n\t     * @param {number} x0\n\t     * @param {number} y0\n\t     * @param {number} x1\n\t     * @param {number} y1\n\t     * @param {Array.<number>} min\n\t     * @param {Array.<number>} max\n\t     */\n\t    bbox.fromLine = function (x0, y0, x1, y1, min, max) {\n\t        min[0] = mathMin(x0, x1);\n\t        min[1] = mathMin(y0, y1);\n\t        max[0] = mathMax(x0, x1);\n\t        max[1] = mathMax(y0, y1);\n\t    };\n\n\t    var xDim = [];\n\t    var yDim = [];\n\t    /**\n\t     * 从三阶贝塞尔曲线(p0, p1, p2, p3)中计算出最小包围盒，写入`min`和`max`中\n\t     * @memberOf module:zrender/core/bbox\n\t     * @param {number} x0\n\t     * @param {number} y0\n\t     * @param {number} x1\n\t     * @param {number} y1\n\t     * @param {number} x2\n\t     * @param {number} y2\n\t     * @param {number} x3\n\t     * @param {number} y3\n\t     * @param {Array.<number>} min\n\t     * @param {Array.<number>} max\n\t     */\n\t    bbox.fromCubic = function(\n\t        x0, y0, x1, y1, x2, y2, x3, y3, min, max\n\t    ) {\n\t        var cubicExtrema = curve.cubicExtrema;\n\t        var cubicAt = curve.cubicAt;\n\t        var i;\n\t        var n = cubicExtrema(x0, x1, x2, x3, xDim);\n\t        min[0] = Infinity;\n\t        min[1] = Infinity;\n\t        max[0] = -Infinity;\n\t        max[1] = -Infinity;\n\n\t        for (i = 0; i < n; i++) {\n\t            var x = cubicAt(x0, x1, x2, x3, xDim[i]);\n\t            min[0] = mathMin(x, min[0]);\n\t            max[0] = mathMax(x, max[0]);\n\t        }\n\t        n = cubicExtrema(y0, y1, y2, y3, yDim);\n\t        for (i = 0; i < n; i++) {\n\t            var y = cubicAt(y0, y1, y2, y3, yDim[i]);\n\t            min[1] = mathMin(y, min[1]);\n\t            max[1] = mathMax(y, max[1]);\n\t        }\n\n\t        min[0] = mathMin(x0, min[0]);\n\t        max[0] = mathMax(x0, max[0]);\n\t        min[0] = mathMin(x3, min[0]);\n\t        max[0] = mathMax(x3, max[0]);\n\n\t        min[1] = mathMin(y0, min[1]);\n\t        max[1] = mathMax(y0, max[1]);\n\t        min[1] = mathMin(y3, min[1]);\n\t        max[1] = mathMax(y3, max[1]);\n\t    };\n\n\t    /**\n\t     * 从二阶贝塞尔曲线(p0, p1, p2)中计算出最小包围盒，写入`min`和`max`中\n\t     * @memberOf module:zrender/core/bbox\n\t     * @param {number} x0\n\t     * @param {number} y0\n\t     * @param {number} x1\n\t     * @param {number} y1\n\t     * @param {number} x2\n\t     * @param {number} y2\n\t     * @param {Array.<number>} min\n\t     * @param {Array.<number>} max\n\t     */\n\t    bbox.fromQuadratic = function(x0, y0, x1, y1, x2, y2, min, max) {\n\t        var quadraticExtremum = curve.quadraticExtremum;\n\t        var quadraticAt = curve.quadraticAt;\n\t        // Find extremities, where derivative in x dim or y dim is zero\n\t        var tx =\n\t            mathMax(\n\t                mathMin(quadraticExtremum(x0, x1, x2), 1), 0\n\t            );\n\t        var ty =\n\t            mathMax(\n\t                mathMin(quadraticExtremum(y0, y1, y2), 1), 0\n\t            );\n\n\t        var x = quadraticAt(x0, x1, x2, tx);\n\t        var y = quadraticAt(y0, y1, y2, ty);\n\n\t        min[0] = mathMin(x0, x2, x);\n\t        min[1] = mathMin(y0, y2, y);\n\t        max[0] = mathMax(x0, x2, x);\n\t        max[1] = mathMax(y0, y2, y);\n\t    };\n\n\t    /**\n\t     * 从圆弧中计算出最小包围盒，写入`min`和`max`中\n\t     * @method\n\t     * @memberOf module:zrender/core/bbox\n\t     * @param {number} x\n\t     * @param {number} y\n\t     * @param {number} rx\n\t     * @param {number} ry\n\t     * @param {number} startAngle\n\t     * @param {number} endAngle\n\t     * @param {number} anticlockwise\n\t     * @param {Array.<number>} min\n\t     * @param {Array.<number>} max\n\t     */\n\t    bbox.fromArc = function (\n\t        x, y, rx, ry, startAngle, endAngle, anticlockwise, min, max\n\t    ) {\n\t        var vec2Min = vec2.min;\n\t        var vec2Max = vec2.max;\n\n\t        var diff = Math.abs(startAngle - endAngle);\n\n\n\t        if (diff % PI2 < 1e-4 && diff > 1e-4) {\n\t            // Is a circle\n\t            min[0] = x - rx;\n\t            min[1] = y - ry;\n\t            max[0] = x + rx;\n\t            max[1] = y + ry;\n\t            return;\n\t        }\n\n\t        start[0] = mathCos(startAngle) * rx + x;\n\t        start[1] = mathSin(startAngle) * ry + y;\n\n\t        end[0] = mathCos(endAngle) * rx + x;\n\t        end[1] = mathSin(endAngle) * ry + y;\n\n\t        vec2Min(min, start, end);\n\t        vec2Max(max, start, end);\n\n\t        // Thresh to [0, Math.PI * 2]\n\t        startAngle = startAngle % (PI2);\n\t        if (startAngle < 0) {\n\t            startAngle = startAngle + PI2;\n\t        }\n\t        endAngle = endAngle % (PI2);\n\t        if (endAngle < 0) {\n\t            endAngle = endAngle + PI2;\n\t        }\n\n\t        if (startAngle > endAngle && !anticlockwise) {\n\t            endAngle += PI2;\n\t        }\n\t        else if (startAngle < endAngle && anticlockwise) {\n\t            startAngle += PI2;\n\t        }\n\t        if (anticlockwise) {\n\t            var tmp = endAngle;\n\t            endAngle = startAngle;\n\t            startAngle = tmp;\n\t        }\n\n\t        // var number = 0;\n\t        // var step = (anticlockwise ? -Math.PI : Math.PI) / 2;\n\t        for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {\n\t            if (angle > startAngle) {\n\t                extremity[0] = mathCos(angle) * rx + x;\n\t                extremity[1] = mathSin(angle) * ry + y;\n\n\t                vec2Min(min, extremity, min);\n\t                vec2Max(max, extremity, max);\n\t            }\n\t        }\n\t    };\n\n\t    module.exports = bbox;\n\n\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var CMD = __webpack_require__(49).CMD;\n\t    var line = __webpack_require__(53);\n\t    var cubic = __webpack_require__(54);\n\t    var quadratic = __webpack_require__(55);\n\t    var arc = __webpack_require__(56);\n\t    var normalizeRadian = __webpack_require__(57).normalizeRadian;\n\t    var curve = __webpack_require__(50);\n\n\t    var windingLine = __webpack_require__(58);\n\n\t    var containStroke = line.containStroke;\n\n\t    var PI2 = Math.PI * 2;\n\n\t    var EPSILON = 1e-4;\n\n\t    function isAroundEqual(a, b) {\n\t        return Math.abs(a - b) < EPSILON;\n\t    }\n\n\t    // 临时数组\n\t    var roots = [-1, -1, -1];\n\t    var extrema = [-1, -1];\n\n\t    function swapExtrema() {\n\t        var tmp = extrema[0];\n\t        extrema[0] = extrema[1];\n\t        extrema[1] = tmp;\n\t    }\n\n\t    function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {\n\t        // Quick reject\n\t        if (\n\t            (y > y0 && y > y1 && y > y2 && y > y3)\n\t            || (y < y0 && y < y1 && y < y2 && y < y3)\n\t        ) {\n\t            return 0;\n\t        }\n\t        var nRoots = curve.cubicRootAt(y0, y1, y2, y3, y, roots);\n\t        if (nRoots === 0) {\n\t            return 0;\n\t        }\n\t        else {\n\t            var w = 0;\n\t            var nExtrema = -1;\n\t            var y0_, y1_;\n\t            for (var i = 0; i < nRoots; i++) {\n\t                var t = roots[i];\n\n\t                // Avoid winding error when intersection point is the connect point of two line of polygon\n\t                var unit = (t === 0 || t === 1) ? 0.5 : 1;\n\n\t                var x_ = curve.cubicAt(x0, x1, x2, x3, t);\n\t                if (x_ < x) { // Quick reject\n\t                    continue;\n\t                }\n\t                if (nExtrema < 0) {\n\t                    nExtrema = curve.cubicExtrema(y0, y1, y2, y3, extrema);\n\t                    if (extrema[1] < extrema[0] && nExtrema > 1) {\n\t                        swapExtrema();\n\t                    }\n\t                    y0_ = curve.cubicAt(y0, y1, y2, y3, extrema[0]);\n\t                    if (nExtrema > 1) {\n\t                        y1_ = curve.cubicAt(y0, y1, y2, y3, extrema[1]);\n\t                    }\n\t                }\n\t                if (nExtrema == 2) {\n\t                    // 分成三段单调函数\n\t                    if (t < extrema[0]) {\n\t                        w += y0_ < y0 ? unit : -unit;\n\t                    }\n\t                    else if (t < extrema[1]) {\n\t                        w += y1_ < y0_ ? unit : -unit;\n\t                    }\n\t                    else {\n\t                        w += y3 < y1_ ? unit : -unit;\n\t                    }\n\t                }\n\t                else {\n\t                    // 分成两段单调函数\n\t                    if (t < extrema[0]) {\n\t                        w += y0_ < y0 ? unit : -unit;\n\t                    }\n\t                    else {\n\t                        w += y3 < y0_ ? unit : -unit;\n\t                    }\n\t                }\n\t            }\n\t            return w;\n\t        }\n\t    }\n\n\t    function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {\n\t        // Quick reject\n\t        if (\n\t            (y > y0 && y > y1 && y > y2)\n\t            || (y < y0 && y < y1 && y < y2)\n\t        ) {\n\t            return 0;\n\t        }\n\t        var nRoots = curve.quadraticRootAt(y0, y1, y2, y, roots);\n\t        if (nRoots === 0) {\n\t            return 0;\n\t        }\n\t        else {\n\t            var t = curve.quadraticExtremum(y0, y1, y2);\n\t            if (t >= 0 && t <= 1) {\n\t                var w = 0;\n\t                var y_ = curve.quadraticAt(y0, y1, y2, t);\n\t                for (var i = 0; i < nRoots; i++) {\n\t                    // Remove one endpoint.\n\t                    var unit = (roots[i] === 0 || roots[i] === 1) ? 0.5 : 1;\n\n\t                    var x_ = curve.quadraticAt(x0, x1, x2, roots[i]);\n\t                    if (x_ < x) {   // Quick reject\n\t                        continue;\n\t                    }\n\t                    if (roots[i] < t) {\n\t                        w += y_ < y0 ? unit : -unit;\n\t                    }\n\t                    else {\n\t                        w += y2 < y_ ? unit : -unit;\n\t                    }\n\t                }\n\t                return w;\n\t            }\n\t            else {\n\t                // Remove one endpoint.\n\t                var unit = (roots[0] === 0 || roots[0] === 1) ? 0.5 : 1;\n\n\t                var x_ = curve.quadraticAt(x0, x1, x2, roots[0]);\n\t                if (x_ < x) {   // Quick reject\n\t                    return 0;\n\t                }\n\t                return y2 < y0 ? unit : -unit;\n\t            }\n\t        }\n\t    }\n\n\t    // TODO\n\t    // Arc 旋转\n\t    function windingArc(\n\t        cx, cy, r, startAngle, endAngle, anticlockwise, x, y\n\t    ) {\n\t        y -= cy;\n\t        if (y > r || y < -r) {\n\t            return 0;\n\t        }\n\t        var tmp = Math.sqrt(r * r - y * y);\n\t        roots[0] = -tmp;\n\t        roots[1] = tmp;\n\n\t        var diff = Math.abs(startAngle - endAngle);\n\t        if (diff < 1e-4) {\n\t            return 0;\n\t        }\n\t        if (diff % PI2 < 1e-4) {\n\t            // Is a circle\n\t            startAngle = 0;\n\t            endAngle = PI2;\n\t            var dir = anticlockwise ? 1 : -1;\n\t            if (x >= roots[0] + cx && x <= roots[1] + cx) {\n\t                return dir;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\n\t        if (anticlockwise) {\n\t            var tmp = startAngle;\n\t            startAngle = normalizeRadian(endAngle);\n\t            endAngle = normalizeRadian(tmp);\n\t        }\n\t        else {\n\t            startAngle = normalizeRadian(startAngle);\n\t            endAngle = normalizeRadian(endAngle);\n\t        }\n\t        if (startAngle > endAngle) {\n\t            endAngle += PI2;\n\t        }\n\n\t        var w = 0;\n\t        for (var i = 0; i < 2; i++) {\n\t            var x_ = roots[i];\n\t            if (x_ + cx > x) {\n\t                var angle = Math.atan2(y, x_);\n\t                var dir = anticlockwise ? 1 : -1;\n\t                if (angle < 0) {\n\t                    angle = PI2 + angle;\n\t                }\n\t                if (\n\t                    (angle >= startAngle && angle <= endAngle)\n\t                    || (angle + PI2 >= startAngle && angle + PI2 <= endAngle)\n\t                ) {\n\t                    if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {\n\t                        dir = -dir;\n\t                    }\n\t                    w += dir;\n\t                }\n\t            }\n\t        }\n\t        return w;\n\t    }\n\n\t    function containPath(data, lineWidth, isStroke, x, y) {\n\t        var w = 0;\n\t        var xi = 0;\n\t        var yi = 0;\n\t        var x0 = 0;\n\t        var y0 = 0;\n\n\t        for (var i = 0; i < data.length;) {\n\t            var cmd = data[i++];\n\t            // Begin a new subpath\n\t            if (cmd === CMD.M && i > 1) {\n\t                // Close previous subpath\n\t                if (!isStroke) {\n\t                    w += windingLine(xi, yi, x0, y0, x, y);\n\t                }\n\t                // 如果被任何一个 subpath 包含\n\t                // if (w !== 0) {\n\t                //     return true;\n\t                // }\n\t            }\n\n\t            if (i == 1) {\n\t                // 如果第一个命令是 L, C, Q\n\t                // 则 previous point 同绘制命令的第一个 point\n\t                //\n\t                // 第一个命令为 Arc 的情况下会在后面特殊处理\n\t                xi = data[i];\n\t                yi = data[i + 1];\n\n\t                x0 = xi;\n\t                y0 = yi;\n\t            }\n\n\t            switch (cmd) {\n\t                case CMD.M:\n\t                    // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点\n\t                    // 在 closePath 的时候使用\n\t                    x0 = data[i++];\n\t                    y0 = data[i++];\n\t                    xi = x0;\n\t                    yi = y0;\n\t                    break;\n\t                case CMD.L:\n\t                    if (isStroke) {\n\t                        if (containStroke(xi, yi, data[i], data[i + 1], lineWidth, x, y)) {\n\t                            return true;\n\t                        }\n\t                    }\n\t                    else {\n\t                        // NOTE 在第一个命令为 L, C, Q 的时候会计算出 NaN\n\t                        w += windingLine(xi, yi, data[i], data[i + 1], x, y) || 0;\n\t                    }\n\t                    xi = data[i++];\n\t                    yi = data[i++];\n\t                    break;\n\t                case CMD.C:\n\t                    if (isStroke) {\n\t                        if (cubic.containStroke(xi, yi,\n\t                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\n\t                            lineWidth, x, y\n\t                        )) {\n\t                            return true;\n\t                        }\n\t                    }\n\t                    else {\n\t                        w += windingCubic(\n\t                            xi, yi,\n\t                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\n\t                            x, y\n\t                        ) || 0;\n\t                    }\n\t                    xi = data[i++];\n\t                    yi = data[i++];\n\t                    break;\n\t                case CMD.Q:\n\t                    if (isStroke) {\n\t                        if (quadratic.containStroke(xi, yi,\n\t                            data[i++], data[i++], data[i], data[i + 1],\n\t                            lineWidth, x, y\n\t                        )) {\n\t                            return true;\n\t                        }\n\t                    }\n\t                    else {\n\t                        w += windingQuadratic(\n\t                            xi, yi,\n\t                            data[i++], data[i++], data[i], data[i + 1],\n\t                            x, y\n\t                        ) || 0;\n\t                    }\n\t                    xi = data[i++];\n\t                    yi = data[i++];\n\t                    break;\n\t                case CMD.A:\n\t                    // TODO Arc 判断的开销比较大\n\t                    var cx = data[i++];\n\t                    var cy = data[i++];\n\t                    var rx = data[i++];\n\t                    var ry = data[i++];\n\t                    var theta = data[i++];\n\t                    var dTheta = data[i++];\n\t                    // TODO Arc 旋转\n\t                    var psi = data[i++];\n\t                    var anticlockwise = 1 - data[i++];\n\t                    var x1 = Math.cos(theta) * rx + cx;\n\t                    var y1 = Math.sin(theta) * ry + cy;\n\t                    // 不是直接使用 arc 命令\n\t                    if (i > 1) {\n\t                        w += windingLine(xi, yi, x1, y1, x, y);\n\t                    }\n\t                    else {\n\t                        // 第一个命令起点还未定义\n\t                        x0 = x1;\n\t                        y0 = y1;\n\t                    }\n\t                    // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放\n\t                    var _x = (x - cx) * ry / rx + cx;\n\t                    if (isStroke) {\n\t                        if (arc.containStroke(\n\t                            cx, cy, ry, theta, theta + dTheta, anticlockwise,\n\t                            lineWidth, _x, y\n\t                        )) {\n\t                            return true;\n\t                        }\n\t                    }\n\t                    else {\n\t                        w += windingArc(\n\t                            cx, cy, ry, theta, theta + dTheta, anticlockwise,\n\t                            _x, y\n\t                        );\n\t                    }\n\t                    xi = Math.cos(theta + dTheta) * rx + cx;\n\t                    yi = Math.sin(theta + dTheta) * ry + cy;\n\t                    break;\n\t                case CMD.R:\n\t                    x0 = xi = data[i++];\n\t                    y0 = yi = data[i++];\n\t                    var width = data[i++];\n\t                    var height = data[i++];\n\t                    var x1 = x0 + width;\n\t                    var y1 = y0 + height;\n\t                    if (isStroke) {\n\t                        if (containStroke(x0, y0, x1, y0, lineWidth, x, y)\n\t                          || containStroke(x1, y0, x1, y1, lineWidth, x, y)\n\t                          || containStroke(x1, y1, x0, y1, lineWidth, x, y)\n\t                          || containStroke(x0, y1, x0, y0, lineWidth, x, y)\n\t                        ) {\n\t                            return true;\n\t                        }\n\t                    }\n\t                    else {\n\t                        // FIXME Clockwise ?\n\t                        w += windingLine(x1, y0, x1, y1, x, y);\n\t                        w += windingLine(x0, y1, x0, y0, x, y);\n\t                    }\n\t                    break;\n\t                case CMD.Z:\n\t                    if (isStroke) {\n\t                        if (containStroke(\n\t                            xi, yi, x0, y0, lineWidth, x, y\n\t                        )) {\n\t                            return true;\n\t                        }\n\t                    }\n\t                    else {\n\t                        // Close a subpath\n\t                        w += windingLine(xi, yi, x0, y0, x, y);\n\t                        // 如果被任何一个 subpath 包含\n\t                        // FIXME subpaths may overlap\n\t                        // if (w !== 0) {\n\t                        //     return true;\n\t                        // }\n\t                    }\n\t                    xi = x0;\n\t                    yi = y0;\n\t                    break;\n\t            }\n\t        }\n\t        if (!isStroke && !isAroundEqual(yi, y0)) {\n\t            w += windingLine(xi, yi, x0, y0, x, y) || 0;\n\t        }\n\t        return w !== 0;\n\t    }\n\n\t    module.exports = {\n\t        contain: function (pathData, x, y) {\n\t            return containPath(pathData, 0, false, x, y);\n\t        },\n\n\t        containStroke: function (pathData, lineWidth, x, y) {\n\t            return containPath(pathData, lineWidth, true, x, y);\n\t        }\n\t    };\n\n\n/***/ },\n/* 53 */\n/***/ function(module, exports) {\n\n\t\n\t    module.exports = {\n\t        /**\n\t         * 线段包含判断\n\t         * @param  {number}  x0\n\t         * @param  {number}  y0\n\t         * @param  {number}  x1\n\t         * @param  {number}  y1\n\t         * @param  {number}  lineWidth\n\t         * @param  {number}  x\n\t         * @param  {number}  y\n\t         * @return {boolean}\n\t         */\n\t        containStroke: function (x0, y0, x1, y1, lineWidth, x, y) {\n\t            if (lineWidth === 0) {\n\t                return false;\n\t            }\n\t            var _l = lineWidth;\n\t            var _a = 0;\n\t            var _b = x0;\n\t            // Quick reject\n\t            if (\n\t                (y > y0 + _l && y > y1 + _l)\n\t                || (y < y0 - _l && y < y1 - _l)\n\t                || (x > x0 + _l && x > x1 + _l)\n\t                || (x < x0 - _l && x < x1 - _l)\n\t            ) {\n\t                return false;\n\t            }\n\n\t            if (x0 !== x1) {\n\t                _a = (y0 - y1) / (x0 - x1);\n\t                _b = (x0 * y1 - x1 * y0) / (x0 - x1) ;\n\t            }\n\t            else {\n\t                return Math.abs(x - x0) <= _l / 2;\n\t            }\n\t            var tmp = _a * x - y + _b;\n\t            var _s = tmp * tmp / (_a * _a + 1);\n\t            return _s <= _l / 2 * _l / 2;\n\t        }\n\t    };\n\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var curve = __webpack_require__(50);\n\n\t    module.exports = {\n\t        /**\n\t         * 三次贝塞尔曲线描边包含判断\n\t         * @param  {number}  x0\n\t         * @param  {number}  y0\n\t         * @param  {number}  x1\n\t         * @param  {number}  y1\n\t         * @param  {number}  x2\n\t         * @param  {number}  y2\n\t         * @param  {number}  x3\n\t         * @param  {number}  y3\n\t         * @param  {number}  lineWidth\n\t         * @param  {number}  x\n\t         * @param  {number}  y\n\t         * @return {boolean}\n\t         */\n\t        containStroke: function(x0, y0, x1, y1, x2, y2, x3, y3, lineWidth, x, y) {\n\t            if (lineWidth === 0) {\n\t                return false;\n\t            }\n\t            var _l = lineWidth;\n\t            // Quick reject\n\t            if (\n\t                (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l)\n\t                || (y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l)\n\t                || (x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l)\n\t                || (x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l)\n\t            ) {\n\t                return false;\n\t            }\n\t            var d = curve.cubicProjectPoint(\n\t                x0, y0, x1, y1, x2, y2, x3, y3,\n\t                x, y, null\n\t            );\n\t            return d <= _l / 2;\n\t        }\n\t    };\n\n\n/***/ },\n/* 55 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var curve = __webpack_require__(50);\n\n\t    module.exports = {\n\t        /**\n\t         * 二次贝塞尔曲线描边包含判断\n\t         * @param  {number}  x0\n\t         * @param  {number}  y0\n\t         * @param  {number}  x1\n\t         * @param  {number}  y1\n\t         * @param  {number}  x2\n\t         * @param  {number}  y2\n\t         * @param  {number}  lineWidth\n\t         * @param  {number}  x\n\t         * @param  {number}  y\n\t         * @return {boolean}\n\t         */\n\t        containStroke: function (x0, y0, x1, y1, x2, y2, lineWidth, x, y) {\n\t            if (lineWidth === 0) {\n\t                return false;\n\t            }\n\t            var _l = lineWidth;\n\t            // Quick reject\n\t            if (\n\t                (y > y0 + _l && y > y1 + _l && y > y2 + _l)\n\t                || (y < y0 - _l && y < y1 - _l && y < y2 - _l)\n\t                || (x > x0 + _l && x > x1 + _l && x > x2 + _l)\n\t                || (x < x0 - _l && x < x1 - _l && x < x2 - _l)\n\t            ) {\n\t                return false;\n\t            }\n\t            var d = curve.quadraticProjectPoint(\n\t                x0, y0, x1, y1, x2, y2,\n\t                x, y, null\n\t            );\n\t            return d <= _l / 2;\n\t        }\n\t    };\n\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var normalizeRadian = __webpack_require__(57).normalizeRadian;\n\t    var PI2 = Math.PI * 2;\n\n\t    module.exports = {\n\t        /**\n\t         * 圆弧描边包含判断\n\t         * @param  {number}  cx\n\t         * @param  {number}  cy\n\t         * @param  {number}  r\n\t         * @param  {number}  startAngle\n\t         * @param  {number}  endAngle\n\t         * @param  {boolean}  anticlockwise\n\t         * @param  {number} lineWidth\n\t         * @param  {number}  x\n\t         * @param  {number}  y\n\t         * @return {Boolean}\n\t         */\n\t        containStroke: function (\n\t            cx, cy, r, startAngle, endAngle, anticlockwise,\n\t            lineWidth, x, y\n\t        ) {\n\n\t            if (lineWidth === 0) {\n\t                return false;\n\t            }\n\t            var _l = lineWidth;\n\n\t            x -= cx;\n\t            y -= cy;\n\t            var d = Math.sqrt(x * x + y * y);\n\n\t            if ((d - _l > r) || (d + _l < r)) {\n\t                return false;\n\t            }\n\t            if (Math.abs(startAngle - endAngle) % PI2 < 1e-4) {\n\t                // Is a circle\n\t                return true;\n\t            }\n\t            if (anticlockwise) {\n\t                var tmp = startAngle;\n\t                startAngle = normalizeRadian(endAngle);\n\t                endAngle = normalizeRadian(tmp);\n\t            } else {\n\t                startAngle = normalizeRadian(startAngle);\n\t                endAngle = normalizeRadian(endAngle);\n\t            }\n\t            if (startAngle > endAngle) {\n\t                endAngle += PI2;\n\t            }\n\n\t            var angle = Math.atan2(y, x);\n\t            if (angle < 0) {\n\t                angle += PI2;\n\t            }\n\t            return (angle >= startAngle && angle <= endAngle)\n\t                || (angle + PI2 >= startAngle && angle + PI2 <= endAngle);\n\t        }\n\t    };\n\n\n/***/ },\n/* 57 */\n/***/ function(module, exports) {\n\n\t\n\n\t    var PI2 = Math.PI * 2;\n\t    module.exports = {\n\t        normalizeRadian: function(angle) {\n\t            angle %= PI2;\n\t            if (angle < 0) {\n\t                angle += PI2;\n\t            }\n\t            return angle;\n\t        }\n\t    };\n\n\n/***/ },\n/* 58 */\n/***/ function(module, exports) {\n\n\t\n\t    module.exports = function windingLine(x0, y0, x1, y1, x, y) {\n\t        if ((y > y0 && y > y1) || (y < y0 && y < y1)) {\n\t            return 0;\n\t        }\n\t        // Ignore horizontal line\n\t        if (y1 === y0) {\n\t            return 0;\n\t        }\n\t        var dir = y1 < y0 ? 1 : -1;\n\t        var t = (y - y0) / (y1 - y0);\n\n\t        // Avoid winding error when intersection point is the connect point of two line of polygon\n\t        if (t === 1 || t === 0) {\n\t            dir = y1 < y0 ? 0.5 : -0.5;\n\t        }\n\n\t        var x_ = t * (x1 - x0) + x0;\n\n\t        return x_ > x ? dir : 0;\n\t    };\n\n\n/***/ },\n/* 59 */\n/***/ function(module, exports) {\n\n\t\n\n\t    var Pattern = function (image, repeat) {\n\t        this.image = image;\n\t        this.repeat = repeat;\n\n\t        // Can be cloned\n\t        this.type = 'pattern';\n\t    };\n\n\t    Pattern.prototype.getCanvasPattern = function (ctx) {\n\n\t        return this._canvasPattern\n\t            || (this._canvasPattern = ctx.createPattern(this.image, this.repeat));\n\t    };\n\n\t    module.exports = Pattern;\n\n\n/***/ },\n/* 60 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var CMD = __webpack_require__(49).CMD;\n\t    var vec2 = __webpack_require__(10);\n\t    var v2ApplyTransform = vec2.applyTransform;\n\n\t    var points = [[], [], []];\n\t    var mathSqrt = Math.sqrt;\n\t    var mathAtan2 = Math.atan2;\n\t    function transformPath(path, m) {\n\t        var data = path.data;\n\t        var cmd;\n\t        var nPoint;\n\t        var i;\n\t        var j;\n\t        var k;\n\t        var p;\n\n\t        var M = CMD.M;\n\t        var C = CMD.C;\n\t        var L = CMD.L;\n\t        var R = CMD.R;\n\t        var A = CMD.A;\n\t        var Q = CMD.Q;\n\n\t        for (i = 0, j = 0; i < data.length;) {\n\t            cmd = data[i++];\n\t            j = i;\n\t            nPoint = 0;\n\n\t            switch (cmd) {\n\t                case M:\n\t                    nPoint = 1;\n\t                    break;\n\t                case L:\n\t                    nPoint = 1;\n\t                    break;\n\t                case C:\n\t                    nPoint = 3;\n\t                    break;\n\t                case Q:\n\t                    nPoint = 2;\n\t                    break;\n\t                case A:\n\t                    var x = m[4];\n\t                    var y = m[5];\n\t                    var sx = mathSqrt(m[0] * m[0] + m[1] * m[1]);\n\t                    var sy = mathSqrt(m[2] * m[2] + m[3] * m[3]);\n\t                    var angle = mathAtan2(-m[1] / sy, m[0] / sx);\n\t                    // cx\n\t                    data[i++] += x;\n\t                    // cy\n\t                    data[i++] += y;\n\t                    // Scale rx and ry\n\t                    // FIXME Assume psi is 0 here\n\t                    data[i++] *= sx;\n\t                    data[i++] *= sy;\n\n\t                    // Start angle\n\t                    data[i++] += angle;\n\t                    // end angle\n\t                    data[i++] += angle;\n\t                    // FIXME psi\n\t                    i += 2;\n\t                    j = i;\n\t                    break;\n\t                case R:\n\t                    // x0, y0\n\t                    p[0] = data[i++];\n\t                    p[1] = data[i++];\n\t                    v2ApplyTransform(p, p, m);\n\t                    data[j++] = p[0];\n\t                    data[j++] = p[1];\n\t                    // x1, y1\n\t                    p[0] += data[i++];\n\t                    p[1] += data[i++];\n\t                    v2ApplyTransform(p, p, m);\n\t                    data[j++] = p[0];\n\t                    data[j++] = p[1];\n\t            }\n\n\t            for (k = 0; k < nPoint; k++) {\n\t                var p = points[k];\n\t                p[0] = data[i++];\n\t                p[1] = data[i++];\n\n\t                v2ApplyTransform(p, p, m);\n\t                // Write back\n\t                data[j++] = p[0];\n\t                data[j++] = p[1];\n\t            }\n\t        }\n\t    }\n\n\t    module.exports = transformPath;\n\n\n/***/ },\n/* 61 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Image element\n\t * @module zrender/graphic/Image\n\t */\n\n\n\n\t    var Displayable = __webpack_require__(46);\n\t    var BoundingRect = __webpack_require__(9);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var LRU = __webpack_require__(62);\n\t    var globalImageCache = new LRU(50);\n\t    /**\n\t     * @alias zrender/graphic/Image\n\t     * @extends module:zrender/graphic/Displayable\n\t     * @constructor\n\t     * @param {Object} opts\n\t     */\n\t    function ZImage(opts) {\n\t        Displayable.call(this, opts);\n\t    }\n\n\t    ZImage.prototype = {\n\n\t        constructor: ZImage,\n\n\t        type: 'image',\n\n\t        brush: function (ctx, prevEl) {\n\t            var style = this.style;\n\t            var src = style.image;\n\t            var image;\n\n\t            // Must bind each time\n\t            style.bind(ctx, this, prevEl);\n\t            // style.image is a url string\n\t            if (typeof src === 'string') {\n\t                image = this._image;\n\t            }\n\t            // style.image is an HTMLImageElement or HTMLCanvasElement or Canvas\n\t            else {\n\t                image = src;\n\t            }\n\t            // FIXME Case create many images with src\n\t            if (!image && src) {\n\t                // Try get from global image cache\n\t                var cachedImgObj = globalImageCache.get(src);\n\t                if (!cachedImgObj) {\n\t                    // Create a new image\n\t                    image = new Image();\n\t                    image.onload = function () {\n\t                        image.onload = null;\n\t                        for (var i = 0; i < cachedImgObj.pending.length; i++) {\n\t                            cachedImgObj.pending[i].dirty();\n\t                        }\n\t                    };\n\t                    cachedImgObj = {\n\t                        image: image,\n\t                        pending: [this]\n\t                    };\n\t                    image.src = src;\n\t                    globalImageCache.put(src, cachedImgObj);\n\t                    this._image = image;\n\t                    return;\n\t                }\n\t                else {\n\t                    image = cachedImgObj.image;\n\t                    this._image = image;\n\t                    // Image is not complete finish, add to pending list\n\t                    if (!image.width || !image.height) {\n\t                        cachedImgObj.pending.push(this);\n\t                        return;\n\t                    }\n\t                }\n\t            }\n\n\t            if (image) {\n\t                // 图片已经加载完成\n\t                // if (image.nodeName.toUpperCase() == 'IMG') {\n\t                //     if (!image.complete) {\n\t                //         return;\n\t                //     }\n\t                // }\n\t                // Else is canvas\n\n\t                var width = style.width || image.width;\n\t                var height = style.height || image.height;\n\t                var x = style.x || 0;\n\t                var y = style.y || 0;\n\t                // 图片加载失败\n\t                if (!image.width || !image.height) {\n\t                    return;\n\t                }\n\n\t                // 设置transform\n\t                this.setTransform(ctx);\n\n\n\t                if (style.sWidth && style.sHeight) {\n\t                    var sx = style.sx || 0;\n\t                    var sy = style.sy || 0;\n\t                    ctx.drawImage(\n\t                        image,\n\t                        sx, sy, style.sWidth, style.sHeight,\n\t                        x, y, width, height\n\t                    );\n\t                }\n\t                else if (style.sx && style.sy) {\n\t                    var sx = style.sx;\n\t                    var sy = style.sy;\n\t                    var sWidth = width - sx;\n\t                    var sHeight = height - sy;\n\t                    ctx.drawImage(\n\t                        image,\n\t                        sx, sy, sWidth, sHeight,\n\t                        x, y, width, height\n\t                    );\n\t                }\n\t                else {\n\t                    ctx.drawImage(image, x, y, width, height);\n\t                }\n\n\t                // 如果没设置宽和高的话自动根据图片宽高设置\n\t                if (style.width == null) {\n\t                    style.width = width;\n\t                }\n\t                if (style.height == null) {\n\t                    style.height = height;\n\t                }\n\n\t                this.restoreTransform(ctx);\n\n\t                // Draw rect text\n\t                if (style.text != null) {\n\t                    this.drawRectText(ctx, this.getBoundingRect());\n\t                }\n\n\t            }\n\t        },\n\n\t        getBoundingRect: function () {\n\t            var style = this.style;\n\t            if (! this._rect) {\n\t                this._rect = new BoundingRect(\n\t                    style.x || 0, style.y || 0, style.width || 0, style.height || 0\n\t                );\n\t            }\n\t            return this._rect;\n\t        }\n\t    };\n\n\t    zrUtil.inherits(ZImage, Displayable);\n\n\t    module.exports = ZImage;\n\n\n/***/ },\n/* 62 */\n/***/ function(module, exports) {\n\n\t// Simple LRU cache use doubly linked list\n\t// @module zrender/core/LRU\n\n\n\t    /**\n\t     * Simple double linked list. Compared with array, it has O(1) remove operation.\n\t     * @constructor\n\t     */\n\t    var LinkedList = function() {\n\n\t        /**\n\t         * @type {module:zrender/core/LRU~Entry}\n\t         */\n\t        this.head = null;\n\n\t        /**\n\t         * @type {module:zrender/core/LRU~Entry}\n\t         */\n\t        this.tail = null;\n\n\t        this._len = 0;\n\t    };\n\n\t    var linkedListProto = LinkedList.prototype;\n\t    /**\n\t     * Insert a new value at the tail\n\t     * @param  {} val\n\t     * @return {module:zrender/core/LRU~Entry}\n\t     */\n\t    linkedListProto.insert = function(val) {\n\t        var entry = new Entry(val);\n\t        this.insertEntry(entry);\n\t        return entry;\n\t    };\n\n\t    /**\n\t     * Insert an entry at the tail\n\t     * @param  {module:zrender/core/LRU~Entry} entry\n\t     */\n\t    linkedListProto.insertEntry = function(entry) {\n\t        if (!this.head) {\n\t            this.head = this.tail = entry;\n\t        }\n\t        else {\n\t            this.tail.next = entry;\n\t            entry.prev = this.tail;\n\t            this.tail = entry;\n\t        }\n\t        this._len++;\n\t    };\n\n\t    /**\n\t     * Remove entry.\n\t     * @param  {module:zrender/core/LRU~Entry} entry\n\t     */\n\t    linkedListProto.remove = function(entry) {\n\t        var prev = entry.prev;\n\t        var next = entry.next;\n\t        if (prev) {\n\t            prev.next = next;\n\t        }\n\t        else {\n\t            // Is head\n\t            this.head = next;\n\t        }\n\t        if (next) {\n\t            next.prev = prev;\n\t        }\n\t        else {\n\t            // Is tail\n\t            this.tail = prev;\n\t        }\n\t        entry.next = entry.prev = null;\n\t        this._len--;\n\t    };\n\n\t    /**\n\t     * @return {number}\n\t     */\n\t    linkedListProto.len = function() {\n\t        return this._len;\n\t    };\n\n\t    /**\n\t     * @constructor\n\t     * @param {} val\n\t     */\n\t    var Entry = function(val) {\n\t        /**\n\t         * @type {}\n\t         */\n\t        this.value = val;\n\n\t        /**\n\t         * @type {module:zrender/core/LRU~Entry}\n\t         */\n\t        this.next;\n\n\t        /**\n\t         * @type {module:zrender/core/LRU~Entry}\n\t         */\n\t        this.prev;\n\t    };\n\n\t    /**\n\t     * LRU Cache\n\t     * @constructor\n\t     * @alias module:zrender/core/LRU\n\t     */\n\t    var LRU = function(maxSize) {\n\n\t        this._list = new LinkedList();\n\n\t        this._map = {};\n\n\t        this._maxSize = maxSize || 10;\n\t    };\n\n\t    var LRUProto = LRU.prototype;\n\n\t    /**\n\t     * @param  {string} key\n\t     * @param  {} value\n\t     */\n\t    LRUProto.put = function(key, value) {\n\t        var list = this._list;\n\t        var map = this._map;\n\t        if (map[key] == null) {\n\t            var len = list.len();\n\t            if (len >= this._maxSize && len > 0) {\n\t                // Remove the least recently used\n\t                var leastUsedEntry = list.head;\n\t                list.remove(leastUsedEntry);\n\t                delete map[leastUsedEntry.key];\n\t            }\n\n\t            var entry = list.insert(value);\n\t            entry.key = key;\n\t            map[key] = entry;\n\t        }\n\t    };\n\n\t    /**\n\t     * @param  {string} key\n\t     * @return {}\n\t     */\n\t    LRUProto.get = function(key) {\n\t        var entry = this._map[key];\n\t        var list = this._list;\n\t        if (entry != null) {\n\t            // Put the latest used entry in the tail\n\t            if (entry !== list.tail) {\n\t                list.remove(entry);\n\t                list.insertEntry(entry);\n\t            }\n\n\t            return entry.value;\n\t        }\n\t    };\n\n\t    /**\n\t     * Clear the cache\n\t     */\n\t    LRUProto.clear = function() {\n\t        this._list.clear();\n\t        this._map = {};\n\t    };\n\n\t    module.exports = LRU;\n\n\n/***/ },\n/* 63 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Text element\n\t * @module zrender/graphic/Text\n\t *\n\t * TODO Wrapping\n\t *\n\t * Text not support gradient\n\t */\n\n\n\n\t    var Displayable = __webpack_require__(46);\n\t    var zrUtil = __webpack_require__(4);\n\t    var textContain = __webpack_require__(8);\n\n\t    /**\n\t     * @alias zrender/graphic/Text\n\t     * @extends module:zrender/graphic/Displayable\n\t     * @constructor\n\t     * @param {Object} opts\n\t     */\n\t    var Text = function (opts) {\n\t        Displayable.call(this, opts);\n\t    };\n\n\t    Text.prototype = {\n\n\t        constructor: Text,\n\n\t        type: 'text',\n\n\t        brush: function (ctx, prevEl) {\n\t            var style = this.style;\n\t            var x = style.x || 0;\n\t            var y = style.y || 0;\n\t            // Convert to string\n\t            var text = style.text;\n\n\t            // Convert to string\n\t            text != null && (text += '');\n\n\t            // Always bind style\n\t            style.bind(ctx, this, prevEl);\n\n\t            if (text) {\n\n\t                this.setTransform(ctx);\n\n\t                var textBaseline;\n\t                var textAlign = style.textAlign;\n\t                var font = style.textFont || style.font;\n\t                if (style.textVerticalAlign) {\n\t                    var rect = textContain.getBoundingRect(\n\t                        text, font, style.textAlign, 'top'\n\t                    );\n\t                    // Ignore textBaseline\n\t                    textBaseline = 'middle';\n\t                    switch (style.textVerticalAlign) {\n\t                        case 'middle':\n\t                            y -= rect.height / 2 - rect.lineHeight / 2;\n\t                            break;\n\t                        case 'bottom':\n\t                            y -= rect.height - rect.lineHeight / 2;\n\t                            break;\n\t                        default:\n\t                            y += rect.lineHeight / 2;\n\t                    }\n\t                }\n\t                else {\n\t                    textBaseline = style.textBaseline;\n\t                }\n\n\t                // TODO Invalid font\n\t                ctx.font = font || '12px sans-serif';\n\t                ctx.textAlign = textAlign || 'left';\n\t                // Use canvas default left textAlign. Giving invalid value will cause state not change\n\t                if (ctx.textAlign !== textAlign) {\n\t                    ctx.textAlign = 'left';\n\t                }\n\t                ctx.textBaseline = textBaseline || 'alphabetic';\n\t                // Use canvas default alphabetic baseline\n\t                if (ctx.textBaseline !== textBaseline) {\n\t                    ctx.textBaseline = 'alphabetic';\n\t                }\n\n\t                var lineHeight = textContain.measureText('国', ctx.font).width;\n\n\t                var textLines = text.split('\\n');\n\t                for (var i = 0; i < textLines.length; i++) {\n\t                    style.hasFill() && ctx.fillText(textLines[i], x, y);\n\t                    style.hasStroke() && ctx.strokeText(textLines[i], x, y);\n\t                    y += lineHeight;\n\t                }\n\n\t                this.restoreTransform(ctx);\n\t            }\n\t        },\n\n\t        getBoundingRect: function () {\n\t            if (!this._rect) {\n\t                var style = this.style;\n\t                var textVerticalAlign = style.textVerticalAlign;\n\t                var rect = textContain.getBoundingRect(\n\t                    style.text + '', style.textFont || style.font, style.textAlign,\n\t                    textVerticalAlign ? 'top' : style.textBaseline\n\t                );\n\t                switch (textVerticalAlign) {\n\t                    case 'middle':\n\t                        rect.y -= rect.height / 2;\n\t                        break;\n\t                    case 'bottom':\n\t                        rect.y -= rect.height;\n\t                        break;\n\t                }\n\t                rect.x += style.x || 0;\n\t                rect.y += style.y || 0;\n\t                this._rect = rect;\n\t            }\n\t            return this._rect;\n\t        }\n\t    };\n\n\t    zrUtil.inherits(Text, Displayable);\n\n\t    module.exports = Text;\n\n\n/***/ },\n/* 64 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * 圆形\n\t * @module zrender/shape/Circle\n\t */\n\n\n\n\t    module.exports = __webpack_require__(45).extend({\n\n\t        type: 'circle',\n\n\t        shape: {\n\t            cx: 0,\n\t            cy: 0,\n\t            r: 0\n\t        },\n\n\n\t        buildPath : function (ctx, shape, inBundle) {\n\t            // Better stroking in ShapeBundle\n\t            // Always do it may have performence issue ( fill may be 2x more cost)\n\t            if (inBundle) {\n\t                ctx.moveTo(shape.cx + shape.r, shape.cy);\n\t            }\n\t            // Better stroking in ShapeBundle\n\t            // ctx.moveTo(shape.cx + shape.r, shape.cy);\n\t            ctx.arc(shape.cx, shape.cy, shape.r, 0, Math.PI * 2, true);\n\t        }\n\t    });\n\n\n\n/***/ },\n/* 65 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * 扇形\n\t * @module zrender/graphic/shape/Sector\n\t */\n\n\n\n\t    var env = __webpack_require__(2);\n\t    var Path = __webpack_require__(45);\n\n\t    var shadowTemp = [\n\t        ['shadowBlur', 0],\n\t        ['shadowColor', '#000'],\n\t        ['shadowOffsetX', 0],\n\t        ['shadowOffsetY', 0]\n\t    ];\n\n\t    module.exports = Path.extend({\n\n\t        type: 'sector',\n\n\t        shape: {\n\n\t            cx: 0,\n\n\t            cy: 0,\n\n\t            r0: 0,\n\n\t            r: 0,\n\n\t            startAngle: 0,\n\n\t            endAngle: Math.PI * 2,\n\n\t            clockwise: true\n\t        },\n\n\t        brush: (env.browser.ie && env.browser.version >= 11) // version: '11.0'\n\t            // Fix weird bug in some version of IE11 (like 11.0.9600.17801),\n\t            // where exception \"unexpected call to method or property access\"\n\t            // might be thrown when calling ctx.fill after a path whose area size\n\t            // is zero is drawn and ctx.clip() is called and shadowBlur is set.\n\t            // (e.g.,\n\t            //  ctx.moveTo(10, 10);\n\t            //  ctx.lineTo(20, 10);\n\t            //  ctx.closePath();\n\t            //  ctx.clip();\n\t            //  ctx.shadowBlur = 10;\n\t            //  ...\n\t            //  ctx.fill();\n\t            // )\n\t            ? function () {\n\t                var clipPaths = this.__clipPaths;\n\t                var style = this.style;\n\t                var modified;\n\n\t                if (clipPaths) {\n\t                    for (var i = 0; i < clipPaths.length; i++) {\n\t                        var shape = clipPaths[i] && clipPaths[i].shape;\n\t                        if (shape && shape.startAngle === shape.endAngle) {\n\t                            for (var j = 0; j < shadowTemp.length; j++) {\n\t                                shadowTemp[j][2] = style[shadowTemp[j][0]];\n\t                                style[shadowTemp[j][0]] = shadowTemp[j][1];\n\t                            }\n\t                            modified = true;\n\t                            break;\n\t                        }\n\t                    }\n\t                }\n\n\t                Path.prototype.brush.apply(this, arguments);\n\n\t                if (modified) {\n\t                    for (var j = 0; j < shadowTemp.length; j++) {\n\t                        style[shadowTemp[j][0]] = shadowTemp[j][2];\n\t                    }\n\t                }\n\t            }\n\t            : Path.prototype.brush,\n\n\t        buildPath: function (ctx, shape) {\n\n\t            var x = shape.cx;\n\t            var y = shape.cy;\n\t            var r0 = Math.max(shape.r0 || 0, 0);\n\t            var r = Math.max(shape.r, 0);\n\t            var startAngle = shape.startAngle;\n\t            var endAngle = shape.endAngle;\n\t            var clockwise = shape.clockwise;\n\n\t            var unitX = Math.cos(startAngle);\n\t            var unitY = Math.sin(startAngle);\n\n\t            ctx.moveTo(unitX * r0 + x, unitY * r0 + y);\n\n\t            ctx.lineTo(unitX * r + x, unitY * r + y);\n\n\t            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);\n\n\t            ctx.lineTo(\n\t                Math.cos(endAngle) * r0 + x,\n\t                Math.sin(endAngle) * r0 + y\n\t            );\n\n\t            if (r0 !== 0) {\n\t                ctx.arc(x, y, r0, endAngle, startAngle, clockwise);\n\t            }\n\n\t            ctx.closePath();\n\t        }\n\t    });\n\n\n\n/***/ },\n/* 66 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * 圆环\n\t * @module zrender/graphic/shape/Ring\n\t */\n\n\n\t    module.exports = __webpack_require__(45).extend({\n\n\t        type: 'ring',\n\n\t        shape: {\n\t            cx: 0,\n\t            cy: 0,\n\t            r: 0,\n\t            r0: 0\n\t        },\n\n\t        buildPath: function (ctx, shape) {\n\t            var x = shape.cx;\n\t            var y = shape.cy;\n\t            var PI2 = Math.PI * 2;\n\t            ctx.moveTo(x + shape.r, y);\n\t            ctx.arc(x, y, shape.r, 0, PI2, false);\n\t            ctx.moveTo(x + shape.r0, y);\n\t            ctx.arc(x, y, shape.r0, 0, PI2, true);\n\t        }\n\t    });\n\n\n\n/***/ },\n/* 67 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * 多边形\n\t * @module zrender/shape/Polygon\n\t */\n\n\n\t    var polyHelper = __webpack_require__(68);\n\n\t    module.exports = __webpack_require__(45).extend({\n\t        \n\t        type: 'polygon',\n\n\t        shape: {\n\t            points: null,\n\n\t            smooth: false,\n\n\t            smoothConstraint: null\n\t        },\n\n\t        buildPath: function (ctx, shape) {\n\t            polyHelper.buildPath(ctx, shape, true);\n\t        }\n\t    });\n\n\n/***/ },\n/* 68 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var smoothSpline = __webpack_require__(69);\n\t    var smoothBezier = __webpack_require__(70);\n\n\t    module.exports = {\n\t        buildPath: function (ctx, shape, closePath) {\n\t            var points = shape.points;\n\t            var smooth = shape.smooth;\n\t            if (points && points.length >= 2) {\n\t                if (smooth && smooth !== 'spline') {\n\t                    var controlPoints = smoothBezier(\n\t                        points, smooth, closePath, shape.smoothConstraint\n\t                    );\n\n\t                    ctx.moveTo(points[0][0], points[0][1]);\n\t                    var len = points.length;\n\t                    for (var i = 0; i < (closePath ? len : len - 1); i++) {\n\t                        var cp1 = controlPoints[i * 2];\n\t                        var cp2 = controlPoints[i * 2 + 1];\n\t                        var p = points[(i + 1) % len];\n\t                        ctx.bezierCurveTo(\n\t                            cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]\n\t                        );\n\t                    }\n\t                }\n\t                else {\n\t                    if (smooth === 'spline') {\n\t                        points = smoothSpline(points, closePath);\n\t                    }\n\n\t                    ctx.moveTo(points[0][0], points[0][1]);\n\t                    for (var i = 1, l = points.length; i < l; i++) {\n\t                        ctx.lineTo(points[i][0], points[i][1]);\n\t                    }\n\t                }\n\n\t                closePath && ctx.closePath();\n\t            }\n\t        }\n\t    };\n\n\n/***/ },\n/* 69 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Catmull-Rom spline 插值折线\n\t * @module zrender/shape/util/smoothSpline\n\t * @author pissang (https://www.github.com/pissang)\n\t *         Kener (@Kener-林峰, kener.linfeng@gmail.com)\n\t *         errorrik (errorrik@gmail.com)\n\t */\n\n\t    var vec2 = __webpack_require__(10);\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function interpolate(p0, p1, p2, p3, t, t2, t3) {\n\t        var v0 = (p2 - p0) * 0.5;\n\t        var v1 = (p3 - p1) * 0.5;\n\t        return (2 * (p1 - p2) + v0 + v1) * t3\n\t                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2\n\t                + v0 * t + p1;\n\t    }\n\n\t    /**\n\t     * @alias module:zrender/shape/util/smoothSpline\n\t     * @param {Array} points 线段顶点数组\n\t     * @param {boolean} isLoop\n\t     * @return {Array}\n\t     */\n\t    module.exports = function (points, isLoop) {\n\t        var len = points.length;\n\t        var ret = [];\n\n\t        var distance = 0;\n\t        for (var i = 1; i < len; i++) {\n\t            distance += vec2.distance(points[i - 1], points[i]);\n\t        }\n\n\t        var segs = distance / 2;\n\t        segs = segs < len ? len : segs;\n\t        for (var i = 0; i < segs; i++) {\n\t            var pos = i / (segs - 1) * (isLoop ? len : len - 1);\n\t            var idx = Math.floor(pos);\n\n\t            var w = pos - idx;\n\n\t            var p0;\n\t            var p1 = points[idx % len];\n\t            var p2;\n\t            var p3;\n\t            if (!isLoop) {\n\t                p0 = points[idx === 0 ? idx : idx - 1];\n\t                p2 = points[idx > len - 2 ? len - 1 : idx + 1];\n\t                p3 = points[idx > len - 3 ? len - 1 : idx + 2];\n\t            }\n\t            else {\n\t                p0 = points[(idx - 1 + len) % len];\n\t                p2 = points[(idx + 1) % len];\n\t                p3 = points[(idx + 2) % len];\n\t            }\n\n\t            var w2 = w * w;\n\t            var w3 = w * w2;\n\n\t            ret.push([\n\t                interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3),\n\t                interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)\n\t            ]);\n\t        }\n\t        return ret;\n\t    };\n\n\n\n/***/ },\n/* 70 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * 贝塞尔平滑曲线\n\t * @module zrender/shape/util/smoothBezier\n\t * @author pissang (https://www.github.com/pissang)\n\t *         Kener (@Kener-林峰, kener.linfeng@gmail.com)\n\t *         errorrik (errorrik@gmail.com)\n\t */\n\n\n\t    var vec2 = __webpack_require__(10);\n\t    var v2Min = vec2.min;\n\t    var v2Max = vec2.max;\n\t    var v2Scale = vec2.scale;\n\t    var v2Distance = vec2.distance;\n\t    var v2Add = vec2.add;\n\n\t    /**\n\t     * 贝塞尔平滑曲线\n\t     * @alias module:zrender/shape/util/smoothBezier\n\t     * @param {Array} points 线段顶点数组\n\t     * @param {number} smooth 平滑等级, 0-1\n\t     * @param {boolean} isLoop\n\t     * @param {Array} constraint 将计算出来的控制点约束在一个包围盒内\n\t     *                           比如 [[0, 0], [100, 100]], 这个包围盒会与\n\t     *                           整个折线的包围盒做一个并集用来约束控制点。\n\t     * @param {Array} 计算出来的控制点数组\n\t     */\n\t    module.exports = function (points, smooth, isLoop, constraint) {\n\t        var cps = [];\n\n\t        var v = [];\n\t        var v1 = [];\n\t        var v2 = [];\n\t        var prevPoint;\n\t        var nextPoint;\n\n\t        var min, max;\n\t        if (constraint) {\n\t            min = [Infinity, Infinity];\n\t            max = [-Infinity, -Infinity];\n\t            for (var i = 0, len = points.length; i < len; i++) {\n\t                v2Min(min, min, points[i]);\n\t                v2Max(max, max, points[i]);\n\t            }\n\t            // 与指定的包围盒做并集\n\t            v2Min(min, min, constraint[0]);\n\t            v2Max(max, max, constraint[1]);\n\t        }\n\n\t        for (var i = 0, len = points.length; i < len; i++) {\n\t            var point = points[i];\n\n\t            if (isLoop) {\n\t                prevPoint = points[i ? i - 1 : len - 1];\n\t                nextPoint = points[(i + 1) % len];\n\t            }\n\t            else {\n\t                if (i === 0 || i === len - 1) {\n\t                    cps.push(vec2.clone(points[i]));\n\t                    continue;\n\t                }\n\t                else {\n\t                    prevPoint = points[i - 1];\n\t                    nextPoint = points[i + 1];\n\t                }\n\t            }\n\n\t            vec2.sub(v, nextPoint, prevPoint);\n\n\t            // use degree to scale the handle length\n\t            v2Scale(v, v, smooth);\n\n\t            var d0 = v2Distance(point, prevPoint);\n\t            var d1 = v2Distance(point, nextPoint);\n\t            var sum = d0 + d1;\n\t            if (sum !== 0) {\n\t                d0 /= sum;\n\t                d1 /= sum;\n\t            }\n\n\t            v2Scale(v1, v, -d0);\n\t            v2Scale(v2, v, d1);\n\t            var cp0 = v2Add([], point, v1);\n\t            var cp1 = v2Add([], point, v2);\n\t            if (constraint) {\n\t                v2Max(cp0, cp0, min);\n\t                v2Min(cp0, cp0, max);\n\t                v2Max(cp1, cp1, min);\n\t                v2Min(cp1, cp1, max);\n\t            }\n\t            cps.push(cp0);\n\t            cps.push(cp1);\n\t        }\n\n\t        if (isLoop) {\n\t            cps.push(cps.shift());\n\t        }\n\n\t        return cps;\n\t    };\n\n\n\n/***/ },\n/* 71 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @module zrender/graphic/shape/Polyline\n\t */\n\n\n\t    var polyHelper = __webpack_require__(68);\n\n\t    module.exports = __webpack_require__(45).extend({\n\t        \n\t        type: 'polyline',\n\n\t        shape: {\n\t            points: null,\n\n\t            smooth: false,\n\n\t            smoothConstraint: null\n\t        },\n\n\t        style: {\n\t            stroke: '#000',\n\n\t            fill: null\n\t        },\n\n\t        buildPath: function (ctx, shape) {\n\t            polyHelper.buildPath(ctx, shape, false);\n\t        }\n\t    });\n\n\n/***/ },\n/* 72 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * 矩形\n\t * @module zrender/graphic/shape/Rect\n\t */\n\n\n\t    var roundRectHelper = __webpack_require__(73);\n\n\t    module.exports = __webpack_require__(45).extend({\n\n\t        type: 'rect',\n\n\t        shape: {\n\t            // 左上、右上、右下、左下角的半径依次为r1、r2、r3、r4\n\t            // r缩写为1         相当于 [1, 1, 1, 1]\n\t            // r缩写为[1]       相当于 [1, 1, 1, 1]\n\t            // r缩写为[1, 2]    相当于 [1, 2, 1, 2]\n\t            // r缩写为[1, 2, 3] 相当于 [1, 2, 3, 2]\n\t            r: 0,\n\n\t            x: 0,\n\t            y: 0,\n\t            width: 0,\n\t            height: 0\n\t        },\n\n\t        buildPath: function (ctx, shape) {\n\t            var x = shape.x;\n\t            var y = shape.y;\n\t            var width = shape.width;\n\t            var height = shape.height;\n\t            if (!shape.r) {\n\t                ctx.rect(x, y, width, height);\n\t            }\n\t            else {\n\t                roundRectHelper.buildPath(ctx, shape);\n\t            }\n\t            ctx.closePath();\n\t            return;\n\t        }\n\t    });\n\n\n\n/***/ },\n/* 73 */\n/***/ function(module, exports) {\n\n\t\n\n\t    module.exports = {\n\t        buildPath: function (ctx, shape) {\n\t            var x = shape.x;\n\t            var y = shape.y;\n\t            var width = shape.width;\n\t            var height = shape.height;\n\t            var r = shape.r;\n\t            var r1;\n\t            var r2;\n\t            var r3;\n\t            var r4;\n\n\t            // Convert width and height to positive for better borderRadius\n\t            if (width < 0) {\n\t                x = x + width;\n\t                width = -width;\n\t            }\n\t            if (height < 0) {\n\t                y = y + height;\n\t                height = -height;\n\t            }\n\n\t            if (typeof r === 'number') {\n\t                r1 = r2 = r3 = r4 = r;\n\t            }\n\t            else if (r instanceof Array) {\n\t                if (r.length === 1) {\n\t                    r1 = r2 = r3 = r4 = r[0];\n\t                }\n\t                else if (r.length === 2) {\n\t                    r1 = r3 = r[0];\n\t                    r2 = r4 = r[1];\n\t                }\n\t                else if (r.length === 3) {\n\t                    r1 = r[0];\n\t                    r2 = r4 = r[1];\n\t                    r3 = r[2];\n\t                }\n\t                else {\n\t                    r1 = r[0];\n\t                    r2 = r[1];\n\t                    r3 = r[2];\n\t                    r4 = r[3];\n\t                }\n\t            }\n\t            else {\n\t                r1 = r2 = r3 = r4 = 0;\n\t            }\n\n\t            var total;\n\t            if (r1 + r2 > width) {\n\t                total = r1 + r2;\n\t                r1 *= width / total;\n\t                r2 *= width / total;\n\t            }\n\t            if (r3 + r4 > width) {\n\t                total = r3 + r4;\n\t                r3 *= width / total;\n\t                r4 *= width / total;\n\t            }\n\t            if (r2 + r3 > height) {\n\t                total = r2 + r3;\n\t                r2 *= height / total;\n\t                r3 *= height / total;\n\t            }\n\t            if (r1 + r4 > height) {\n\t                total = r1 + r4;\n\t                r1 *= height / total;\n\t                r4 *= height / total;\n\t            }\n\t            ctx.moveTo(x + r1, y);\n\t            ctx.lineTo(x + width - r2, y);\n\t            r2 !== 0 && ctx.quadraticCurveTo(\n\t                x + width, y, x + width, y + r2\n\t            );\n\t            ctx.lineTo(x + width, y + height - r3);\n\t            r3 !== 0 && ctx.quadraticCurveTo(\n\t                x + width, y + height, x + width - r3, y + height\n\t            );\n\t            ctx.lineTo(x + r4, y + height);\n\t            r4 !== 0 && ctx.quadraticCurveTo(\n\t                x, y + height, x, y + height - r4\n\t            );\n\t            ctx.lineTo(x, y + r1);\n\t            r1 !== 0 && ctx.quadraticCurveTo(x, y, x + r1, y);\n\t        }\n\t    };\n\n\n/***/ },\n/* 74 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * 直线\n\t * @module zrender/graphic/shape/Line\n\t */\n\n\t    module.exports = __webpack_require__(45).extend({\n\n\t        type: 'line',\n\n\t        shape: {\n\t            // Start point\n\t            x1: 0,\n\t            y1: 0,\n\t            // End point\n\t            x2: 0,\n\t            y2: 0,\n\n\t            percent: 1\n\t        },\n\n\t        style: {\n\t            stroke: '#000',\n\t            fill: null\n\t        },\n\n\t        buildPath: function (ctx, shape) {\n\t            var x1 = shape.x1;\n\t            var y1 = shape.y1;\n\t            var x2 = shape.x2;\n\t            var y2 = shape.y2;\n\t            var percent = shape.percent;\n\n\t            if (percent === 0) {\n\t                return;\n\t            }\n\n\t            ctx.moveTo(x1, y1);\n\n\t            if (percent < 1) {\n\t                x2 = x1 * (1 - percent) + x2 * percent;\n\t                y2 = y1 * (1 - percent) + y2 * percent;\n\t            }\n\t            ctx.lineTo(x2, y2);\n\t        },\n\n\t        /**\n\t         * Get point at percent\n\t         * @param  {number} percent\n\t         * @return {Array.<number>}\n\t         */\n\t        pointAt: function (p) {\n\t            var shape = this.shape;\n\t            return [\n\t                shape.x1 * (1 - p) + shape.x2 * p,\n\t                shape.y1 * (1 - p) + shape.y2 * p\n\t            ];\n\t        }\n\t    });\n\n\n\n/***/ },\n/* 75 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * 贝塞尔曲线\n\t * @module zrender/shape/BezierCurve\n\t */\n\n\n\t    var curveTool = __webpack_require__(50);\n\t    var vec2 = __webpack_require__(10);\n\t    var quadraticSubdivide = curveTool.quadraticSubdivide;\n\t    var cubicSubdivide = curveTool.cubicSubdivide;\n\t    var quadraticAt = curveTool.quadraticAt;\n\t    var cubicAt = curveTool.cubicAt;\n\t    var quadraticDerivativeAt = curveTool.quadraticDerivativeAt;\n\t    var cubicDerivativeAt = curveTool.cubicDerivativeAt;\n\n\t    var out = [];\n\n\t    function someVectorAt(shape, t, isTangent) {\n\t        var cpx2 = shape.cpx2;\n\t        var cpy2 = shape.cpy2;\n\t        if (cpx2 === null || cpy2 === null) {\n\t            return [\n\t                (isTangent ? cubicDerivativeAt : cubicAt)(shape.x1, shape.cpx1, shape.cpx2, shape.x2, t),\n\t                (isTangent ? cubicDerivativeAt : cubicAt)(shape.y1, shape.cpy1, shape.cpy2, shape.y2, t)\n\t            ];\n\t        }\n\t        else {\n\t            return [\n\t                (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.x1, shape.cpx1, shape.x2, t),\n\t                (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.y1, shape.cpy1, shape.y2, t)\n\t            ];\n\t        }\n\t    }\n\t    module.exports = __webpack_require__(45).extend({\n\n\t        type: 'bezier-curve',\n\n\t        shape: {\n\t            x1: 0,\n\t            y1: 0,\n\t            x2: 0,\n\t            y2: 0,\n\t            cpx1: 0,\n\t            cpy1: 0,\n\t            // cpx2: 0,\n\t            // cpy2: 0\n\n\t            // Curve show percent, for animating\n\t            percent: 1\n\t        },\n\n\t        style: {\n\t            stroke: '#000',\n\t            fill: null\n\t        },\n\n\t        buildPath: function (ctx, shape) {\n\t            var x1 = shape.x1;\n\t            var y1 = shape.y1;\n\t            var x2 = shape.x2;\n\t            var y2 = shape.y2;\n\t            var cpx1 = shape.cpx1;\n\t            var cpy1 = shape.cpy1;\n\t            var cpx2 = shape.cpx2;\n\t            var cpy2 = shape.cpy2;\n\t            var percent = shape.percent;\n\t            if (percent === 0) {\n\t                return;\n\t            }\n\n\t            ctx.moveTo(x1, y1);\n\n\t            if (cpx2 == null || cpy2 == null) {\n\t                if (percent < 1) {\n\t                    quadraticSubdivide(\n\t                        x1, cpx1, x2, percent, out\n\t                    );\n\t                    cpx1 = out[1];\n\t                    x2 = out[2];\n\t                    quadraticSubdivide(\n\t                        y1, cpy1, y2, percent, out\n\t                    );\n\t                    cpy1 = out[1];\n\t                    y2 = out[2];\n\t                }\n\n\t                ctx.quadraticCurveTo(\n\t                    cpx1, cpy1,\n\t                    x2, y2\n\t                );\n\t            }\n\t            else {\n\t                if (percent < 1) {\n\t                    cubicSubdivide(\n\t                        x1, cpx1, cpx2, x2, percent, out\n\t                    );\n\t                    cpx1 = out[1];\n\t                    cpx2 = out[2];\n\t                    x2 = out[3];\n\t                    cubicSubdivide(\n\t                        y1, cpy1, cpy2, y2, percent, out\n\t                    );\n\t                    cpy1 = out[1];\n\t                    cpy2 = out[2];\n\t                    y2 = out[3];\n\t                }\n\t                ctx.bezierCurveTo(\n\t                    cpx1, cpy1,\n\t                    cpx2, cpy2,\n\t                    x2, y2\n\t                );\n\t            }\n\t        },\n\n\t        /**\n\t         * Get point at percent\n\t         * @param  {number} t\n\t         * @return {Array.<number>}\n\t         */\n\t        pointAt: function (t) {\n\t            return someVectorAt(this.shape, t, false);\n\t        },\n\n\t        /**\n\t         * Get tangent at percent\n\t         * @param  {number} t\n\t         * @return {Array.<number>}\n\t         */\n\t        tangentAt: function (t) {\n\t            var p = someVectorAt(this.shape, t, true);\n\t            return vec2.normalize(p, p);\n\t        }\n\t    });\n\n\n\n/***/ },\n/* 76 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * 圆弧\n\t * @module zrender/graphic/shape/Arc\n\t */\n\t \n\n\t    module.exports = __webpack_require__(45).extend({\n\n\t        type: 'arc',\n\n\t        shape: {\n\n\t            cx: 0,\n\n\t            cy: 0,\n\n\t            r: 0,\n\n\t            startAngle: 0,\n\n\t            endAngle: Math.PI * 2,\n\n\t            clockwise: true\n\t        },\n\n\t        style: {\n\n\t            stroke: '#000',\n\n\t            fill: null\n\t        },\n\n\t        buildPath: function (ctx, shape) {\n\n\t            var x = shape.cx;\n\t            var y = shape.cy;\n\t            var r = Math.max(shape.r, 0);\n\t            var startAngle = shape.startAngle;\n\t            var endAngle = shape.endAngle;\n\t            var clockwise = shape.clockwise;\n\n\t            var unitX = Math.cos(startAngle);\n\t            var unitY = Math.sin(startAngle);\n\n\t            ctx.moveTo(unitX * r + x, unitY * r + y);\n\t            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);\n\t        }\n\t    });\n\n\n/***/ },\n/* 77 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// CompoundPath to improve performance\n\n\n\t    var Path = __webpack_require__(45);\n\t    module.exports = Path.extend({\n\n\t        type: 'compound',\n\n\t        shape: {\n\n\t            paths: null\n\t        },\n\n\t        _updatePathDirty: function () {\n\t            var dirtyPath = this.__dirtyPath;\n\t            var paths = this.shape.paths;\n\t            for (var i = 0; i < paths.length; i++) {\n\t                // Mark as dirty if any subpath is dirty\n\t                dirtyPath = dirtyPath || paths[i].__dirtyPath;\n\t            }\n\t            this.__dirtyPath = dirtyPath;\n\t            this.__dirty = this.__dirty || dirtyPath;\n\t        },\n\n\t        beforeBrush: function () {\n\t            this._updatePathDirty();\n\t            var paths = this.shape.paths || [];\n\t            var scale = this.getGlobalScale();\n\t            // Update path scale\n\t            for (var i = 0; i < paths.length; i++) {\n\t                paths[i].path.setScale(scale[0], scale[1]);\n\t            }\n\t        },\n\n\t        buildPath: function (ctx, shape) {\n\t            var paths = shape.paths || [];\n\t            for (var i = 0; i < paths.length; i++) {\n\t                paths[i].buildPath(ctx, paths[i].shape, true);\n\t            }\n\t        },\n\n\t        afterBrush: function () {\n\t            var paths = this.shape.paths;\n\t            for (var i = 0; i < paths.length; i++) {\n\t                paths[i].__dirtyPath = false;\n\t            }\n\t        },\n\n\t        getBoundingRect: function () {\n\t            this._updatePathDirty();\n\t            return Path.prototype.getBoundingRect.call(this);\n\t        }\n\t    });\n\n\n/***/ },\n/* 78 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var Gradient = __webpack_require__(79);\n\n\t    /**\n\t     * x, y, x2, y2 are all percent from 0 to 1\n\t     * @param {number} [x=0]\n\t     * @param {number} [y=0]\n\t     * @param {number} [x2=1]\n\t     * @param {number} [y2=0]\n\t     * @param {Array.<Object>} colorStops\n\t     * @param {boolean} [globalCoord=false]\n\t     */\n\t    var LinearGradient = function (x, y, x2, y2, colorStops, globalCoord) {\n\t        this.x = x == null ? 0 : x;\n\n\t        this.y = y == null ? 0 : y;\n\n\t        this.x2 = x2 == null ? 1 : x2;\n\n\t        this.y2 = y2 == null ? 0 : y2;\n\n\t        // Can be cloned\n\t        this.type = 'linear';\n\n\t        // If use global coord\n\t        this.global = globalCoord || false;\n\n\t        Gradient.call(this, colorStops);\n\t    };\n\n\t    LinearGradient.prototype = {\n\n\t        constructor: LinearGradient\n\t    };\n\n\t    zrUtil.inherits(LinearGradient, Gradient);\n\n\t    module.exports = LinearGradient;\n\n\n/***/ },\n/* 79 */\n/***/ function(module, exports) {\n\n\t\n\n\t    /**\n\t     * @param {Array.<Object>} colorStops\n\t     */\n\t    var Gradient = function (colorStops) {\n\n\t        this.colorStops = colorStops || [];\n\t    };\n\n\t    Gradient.prototype = {\n\n\t        constructor: Gradient,\n\n\t        addColorStop: function (offset, color) {\n\t            this.colorStops.push({\n\n\t                offset: offset,\n\n\t                color: color\n\t            });\n\t        }\n\t    };\n\n\t    module.exports = Gradient;\n\n\n/***/ },\n/* 80 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var Gradient = __webpack_require__(79);\n\n\t    /**\n\t     * x, y, r are all percent from 0 to 1\n\t     * @param {number} [x=0.5]\n\t     * @param {number} [y=0.5]\n\t     * @param {number} [r=0.5]\n\t     * @param {Array.<Object>} [colorStops]\n\t     * @param {boolean} [globalCoord=false]\n\t     */\n\t    var RadialGradient = function (x, y, r, colorStops, globalCoord) {\n\t        this.x = x == null ? 0.5 : x;\n\n\t        this.y = y == null ? 0.5 : y;\n\n\t        this.r = r == null ? 0.5 : r;\n\n\t        // Can be cloned\n\t        this.type = 'radial';\n\n\t        // If use global coord\n\t        this.global = globalCoord || false;\n\n\t        Gradient.call(this, colorStops);\n\t    };\n\n\t    RadialGradient.prototype = {\n\n\t        constructor: RadialGradient\n\t    };\n\n\t    zrUtil.inherits(RadialGradient, Gradient);\n\n\t    module.exports = RadialGradient;\n\n\n/***/ },\n/* 81 */\n/***/ function(module, exports) {\n\n\t\n\n\t    var lib = {};\n\n\t    var ORIGIN_METHOD = '\\0__throttleOriginMethod';\n\t    var RATE = '\\0__throttleRate';\n\t    var THROTTLE_TYPE = '\\0__throttleType';\n\n\t    /**\n\t     * @public\n\t     * @param {(Function)} fn\n\t     * @param {number} [delay=0] Unit: ms.\n\t     * @param {boolean} [debounce=false]\n\t     *        true: If call interval less than `delay`, only the last call works.\n\t     *        false: If call interval less than `delay, call works on fixed rate.\n\t     * @return {(Function)} throttled fn.\n\t     */\n\t    lib.throttle = function (fn, delay, debounce) {\n\n\t        var currCall;\n\t        var lastCall = 0;\n\t        var lastExec = 0;\n\t        var timer = null;\n\t        var diff;\n\t        var scope;\n\t        var args;\n\n\t        delay = delay || 0;\n\n\t        function exec() {\n\t            lastExec = (new Date()).getTime();\n\t            timer = null;\n\t            fn.apply(scope, args || []);\n\t        }\n\n\t        var cb = function () {\n\t            currCall = (new Date()).getTime();\n\t            scope = this;\n\t            args = arguments;\n\t            diff = currCall - (debounce ? lastCall : lastExec) - delay;\n\n\t            clearTimeout(timer);\n\n\t            if (debounce) {\n\t                timer = setTimeout(exec, delay);\n\t            }\n\t            else {\n\t                if (diff >= 0) {\n\t                    exec();\n\t                }\n\t                else {\n\t                    timer = setTimeout(exec, -diff);\n\t                }\n\t            }\n\n\t            lastCall = currCall;\n\t        };\n\n\t        /**\n\t         * Clear throttle.\n\t         * @public\n\t         */\n\t        cb.clear = function () {\n\t            if (timer) {\n\t                clearTimeout(timer);\n\t                timer = null;\n\t            }\n\t        };\n\n\t        return cb;\n\t    };\n\n\t    /**\n\t     * Create throttle method or update throttle rate.\n\t     *\n\t     * @example\n\t     * ComponentView.prototype.render = function () {\n\t     *     ...\n\t     *     throttle.createOrUpdate(\n\t     *         this,\n\t     *         '_dispatchAction',\n\t     *         this.model.get('throttle'),\n\t     *         'fixRate'\n\t     *     );\n\t     * };\n\t     * ComponentView.prototype.remove = function () {\n\t     *     throttle.clear(this, '_dispatchAction');\n\t     * };\n\t     * ComponentView.prototype.dispose = function () {\n\t     *     throttle.clear(this, '_dispatchAction');\n\t     * };\n\t     *\n\t     * @public\n\t     * @param {Object} obj\n\t     * @param {string} fnAttr\n\t     * @param {number} [rate]\n\t     * @param {string} [throttleType='fixRate'] 'fixRate' or 'debounce'\n\t     * @return {Function} throttled function.\n\t     */\n\t    lib.createOrUpdate = function (obj, fnAttr, rate, throttleType) {\n\t        var fn = obj[fnAttr];\n\n\t        if (!fn) {\n\t            return;\n\t        }\n\n\t        var originFn = fn[ORIGIN_METHOD] || fn;\n\t        var lastThrottleType = fn[THROTTLE_TYPE];\n\t        var lastRate = fn[RATE];\n\n\t        if (lastRate !== rate || lastThrottleType !== throttleType) {\n\t            if (rate == null || !throttleType) {\n\t                return (obj[fnAttr] = originFn);\n\t            }\n\n\t            fn = obj[fnAttr] = lib.throttle(\n\t                originFn, rate, throttleType === 'debounce'\n\t            );\n\t            fn[ORIGIN_METHOD] = originFn;\n\t            fn[THROTTLE_TYPE] = throttleType;\n\t            fn[RATE] = rate;\n\t        }\n\n\t        return fn;\n\t    };\n\n\t    /**\n\t     * Clear throttle. Example see throttle.createOrUpdate.\n\t     *\n\t     * @public\n\t     * @param {Object} obj\n\t     * @param {string} fnAttr\n\t     */\n\t    lib.clear = function (obj, fnAttr) {\n\t        var fn = obj[fnAttr];\n\t        if (fn && fn[ORIGIN_METHOD]) {\n\t            obj[fnAttr] = fn[ORIGIN_METHOD];\n\t        }\n\t    };\n\n\t    module.exports = lib;\n\n\n\n/***/ },\n/* 82 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * ZRender, a high performance 2d drawing library.\n\t *\n\t * Copyright (c) 2013, Baidu Inc.\n\t * All rights reserved.\n\t *\n\t * LICENSE\n\t * https://github.com/ecomfe/zrender/blob/master/LICENSE.txt\n\t */\n\t// Global defines\n\n\t    var guid = __webpack_require__(32);\n\t    var env = __webpack_require__(2);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var Handler = __webpack_require__(83);\n\t    var Storage = __webpack_require__(85);\n\t    var Animation = __webpack_require__(87);\n\t    var HandlerProxy = __webpack_require__(90);\n\n\t    var useVML = !env.canvasSupported;\n\n\t    var painterCtors = {\n\t        canvas: __webpack_require__(92)\n\t    };\n\n\t    var instances = {};    // ZRender实例map索引\n\n\t    var zrender = {};\n\n\t    /**\n\t     * @type {string}\n\t     */\n\t    zrender.version = '3.3.0';\n\n\t    /**\n\t     * Initializing a zrender instance\n\t     * @param {HTMLElement} dom\n\t     * @param {Object} opts\n\t     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'\n\t     * @param {number} [opts.devicePixelRatio]\n\t     * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)\n\t     * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)\n\t     * @return {module:zrender/ZRender}\n\t     */\n\t    zrender.init = function(dom, opts) {\n\t        var zr = new ZRender(guid(), dom, opts);\n\t        instances[zr.id] = zr;\n\t        return zr;\n\t    };\n\n\t    /**\n\t     * Dispose zrender instance\n\t     * @param {module:zrender/ZRender} zr\n\t     */\n\t    zrender.dispose = function (zr) {\n\t        if (zr) {\n\t            zr.dispose();\n\t        }\n\t        else {\n\t            for (var key in instances) {\n\t                if (instances.hasOwnProperty(key)) {\n\t                    instances[key].dispose();\n\t                }\n\t            }\n\t            instances = {};\n\t        }\n\n\t        return zrender;\n\t    };\n\n\t    /**\n\t     * Get zrender instance by id\n\t     * @param {string} id zrender instance id\n\t     * @return {module:zrender/ZRender}\n\t     */\n\t    zrender.getInstance = function (id) {\n\t        return instances[id];\n\t    };\n\n\t    zrender.registerPainter = function (name, Ctor) {\n\t        painterCtors[name] = Ctor;\n\t    };\n\n\t    function delInstance(id) {\n\t        delete instances[id];\n\t    }\n\n\t    /**\n\t     * @module zrender/ZRender\n\t     */\n\t    /**\n\t     * @constructor\n\t     * @alias module:zrender/ZRender\n\t     * @param {string} id\n\t     * @param {HTMLDomElement} dom\n\t     * @param {Object} opts\n\t     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'\n\t     * @param {number} [opts.devicePixelRatio]\n\t     * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)\n\t     * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)\n\t     */\n\t    var ZRender = function(id, dom, opts) {\n\n\t        opts = opts || {};\n\n\t        /**\n\t         * @type {HTMLDomElement}\n\t         */\n\t        this.dom = dom;\n\n\t        /**\n\t         * @type {string}\n\t         */\n\t        this.id = id;\n\n\t        var self = this;\n\t        var storage = new Storage();\n\n\t        var rendererType = opts.renderer;\n\t        if (useVML) {\n\t            if (!painterCtors.vml) {\n\t                throw new Error('You need to require \\'zrender/vml/vml\\' to support IE8');\n\t            }\n\t            rendererType = 'vml';\n\t        }\n\t        else if (!rendererType || !painterCtors[rendererType]) {\n\t            rendererType = 'canvas';\n\t        }\n\t        var painter = new painterCtors[rendererType](dom, storage, opts);\n\n\t        this.storage = storage;\n\t        this.painter = painter;\n\n\t        var handerProxy = !env.node ? new HandlerProxy(painter.getViewportRoot()) : null;\n\t        this.handler = new Handler(storage, painter, handerProxy, painter.root);\n\n\t        /**\n\t         * @type {module:zrender/animation/Animation}\n\t         */\n\t        this.animation = new Animation({\n\t            stage: {\n\t                update: zrUtil.bind(this.flush, this)\n\t            }\n\t        });\n\t        this.animation.start();\n\n\t        /**\n\t         * @type {boolean}\n\t         * @private\n\t         */\n\t        this._needsRefresh;\n\n\t        // 修改 storage.delFromMap, 每次删除元素之前删除动画\n\t        // FIXME 有点ugly\n\t        var oldDelFromMap = storage.delFromMap;\n\t        var oldAddToMap = storage.addToMap;\n\n\t        storage.delFromMap = function (elId) {\n\t            var el = storage.get(elId);\n\n\t            oldDelFromMap.call(storage, elId);\n\n\t            el && el.removeSelfFromZr(self);\n\t        };\n\n\t        storage.addToMap = function (el) {\n\t            oldAddToMap.call(storage, el);\n\n\t            el.addSelfToZr(self);\n\t        };\n\t    };\n\n\t    ZRender.prototype = {\n\n\t        constructor: ZRender,\n\t        /**\n\t         * 获取实例唯一标识\n\t         * @return {string}\n\t         */\n\t        getId: function () {\n\t            return this.id;\n\t        },\n\n\t        /**\n\t         * 添加元素\n\t         * @param  {module:zrender/Element} el\n\t         */\n\t        add: function (el) {\n\t            this.storage.addRoot(el);\n\t            this._needsRefresh = true;\n\t        },\n\n\t        /**\n\t         * 删除元素\n\t         * @param  {module:zrender/Element} el\n\t         */\n\t        remove: function (el) {\n\t            this.storage.delRoot(el);\n\t            this._needsRefresh = true;\n\t        },\n\n\t        /**\n\t         * Change configuration of layer\n\t         * @param {string} zLevel\n\t         * @param {Object} config\n\t         * @param {string} [config.clearColor=0] Clear color\n\t         * @param {string} [config.motionBlur=false] If enable motion blur\n\t         * @param {number} [config.lastFrameAlpha=0.7] Motion blur factor. Larger value cause longer trailer\n\t        */\n\t        configLayer: function (zLevel, config) {\n\t            this.painter.configLayer(zLevel, config);\n\t            this._needsRefresh = true;\n\t        },\n\n\t        /**\n\t         * Repaint the canvas immediately\n\t         */\n\t        refreshImmediately: function () {\n\t            // Clear needsRefresh ahead to avoid something wrong happens in refresh\n\t            // Or it will cause zrender refreshes again and again.\n\t            this._needsRefresh = false;\n\t            this.painter.refresh();\n\t            /**\n\t             * Avoid trigger zr.refresh in Element#beforeUpdate hook\n\t             */\n\t            this._needsRefresh = false;\n\t        },\n\n\t        /**\n\t         * Mark and repaint the canvas in the next frame of browser\n\t         */\n\t        refresh: function() {\n\t            this._needsRefresh = true;\n\t        },\n\n\t        /**\n\t         * Perform all refresh\n\t         */\n\t        flush: function () {\n\t            if (this._needsRefresh) {\n\t                this.refreshImmediately();\n\t            }\n\t            if (this._needsRefreshHover) {\n\t                this.refreshHoverImmediately();\n\t            }\n\t        },\n\n\t        /**\n\t         * Add element to hover layer\n\t         * @param  {module:zrender/Element} el\n\t         * @param {Object} style\n\t         */\n\t        addHover: function (el, style) {\n\t            if (this.painter.addHover) {\n\t                this.painter.addHover(el, style);\n\t                this.refreshHover();\n\t            }\n\t        },\n\n\t        /**\n\t         * Add element from hover layer\n\t         * @param  {module:zrender/Element} el\n\t         */\n\t        removeHover: function (el) {\n\t            if (this.painter.removeHover) {\n\t                this.painter.removeHover(el);\n\t                this.refreshHover();\n\t            }\n\t        },\n\n\t        /**\n\t         * Clear all hover elements in hover layer\n\t         * @param  {module:zrender/Element} el\n\t         */\n\t        clearHover: function () {\n\t            if (this.painter.clearHover) {\n\t                this.painter.clearHover();\n\t                this.refreshHover();\n\t            }\n\t        },\n\n\t        /**\n\t         * Refresh hover in next frame\n\t         */\n\t        refreshHover: function () {\n\t            this._needsRefreshHover = true;\n\t        },\n\n\t        /**\n\t         * Refresh hover immediately\n\t         */\n\t        refreshHoverImmediately: function () {\n\t            this._needsRefreshHover = false;\n\t            this.painter.refreshHover && this.painter.refreshHover();\n\t        },\n\n\t        /**\n\t         * Resize the canvas.\n\t         * Should be invoked when container size is changed\n\t         * @param {Object} [opts]\n\t         * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)\n\t         * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)\n\t         */\n\t        resize: function(opts) {\n\t            opts = opts || {};\n\t            this.painter.resize(opts.width, opts.height);\n\t            this.handler.resize();\n\t        },\n\n\t        /**\n\t         * Stop and clear all animation immediately\n\t         */\n\t        clearAnimation: function () {\n\t            this.animation.clear();\n\t        },\n\n\t        /**\n\t         * Get container width\n\t         */\n\t        getWidth: function() {\n\t            return this.painter.getWidth();\n\t        },\n\n\t        /**\n\t         * Get container height\n\t         */\n\t        getHeight: function() {\n\t            return this.painter.getHeight();\n\t        },\n\n\t        /**\n\t         * Export the canvas as Base64 URL\n\t         * @param {string} type\n\t         * @param {string} [backgroundColor='#fff']\n\t         * @return {string} Base64 URL\n\t         */\n\t        // toDataURL: function(type, backgroundColor) {\n\t        //     return this.painter.getRenderedCanvas({\n\t        //         backgroundColor: backgroundColor\n\t        //     }).toDataURL(type);\n\t        // },\n\n\t        /**\n\t         * Converting a path to image.\n\t         * It has much better performance of drawing image rather than drawing a vector path.\n\t         * @param {module:zrender/graphic/Path} e\n\t         * @param {number} width\n\t         * @param {number} height\n\t         */\n\t        pathToImage: function(e, width, height) {\n\t            var id = guid();\n\t            return this.painter.pathToImage(id, e, width, height);\n\t        },\n\n\t        /**\n\t         * Set default cursor\n\t         * @param {string} [cursorStyle='default'] 例如 crosshair\n\t         */\n\t        setCursorStyle: function (cursorStyle) {\n\t            this.handler.setCursorStyle(cursorStyle);\n\t        },\n\n\t        /**\n\t         * Bind event\n\t         *\n\t         * @param {string} eventName Event name\n\t         * @param {Function} eventHandler Handler function\n\t         * @param {Object} [context] Context object\n\t         */\n\t        on: function(eventName, eventHandler, context) {\n\t            this.handler.on(eventName, eventHandler, context);\n\t        },\n\n\t        /**\n\t         * Unbind event\n\t         * @param {string} eventName Event name\n\t         * @param {Function} [eventHandler] Handler function\n\t         */\n\t        off: function(eventName, eventHandler) {\n\t            this.handler.off(eventName, eventHandler);\n\t        },\n\n\t        /**\n\t         * Trigger event manually\n\t         *\n\t         * @param {string} eventName Event name\n\t         * @param {event=} event Event object\n\t         */\n\t        trigger: function (eventName, event) {\n\t            this.handler.trigger(eventName, event);\n\t        },\n\n\n\t        /**\n\t         * Clear all objects and the canvas.\n\t         */\n\t        clear: function () {\n\t            this.storage.delRoot();\n\t            this.painter.clear();\n\t        },\n\n\t        /**\n\t         * Dispose self.\n\t         */\n\t        dispose: function () {\n\t            this.animation.stop();\n\n\t            this.clear();\n\t            this.storage.dispose();\n\t            this.painter.dispose();\n\t            this.handler.dispose();\n\n\t            this.animation =\n\t            this.storage =\n\t            this.painter =\n\t            this.handler = null;\n\n\t            delInstance(this.id);\n\t        }\n\t    };\n\n\t    module.exports = zrender;\n\n\n\n/***/ },\n/* 83 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * Handler\n\t * @module zrender/Handler\n\t * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n\t *         errorrik (errorrik@gmail.com)\n\t *         pissang (shenyi.914@gmail.com)\n\t */\n\n\n\t    var util = __webpack_require__(4);\n\t    var Draggable = __webpack_require__(84);\n\n\t    var Eventful = __webpack_require__(33);\n\n\t    function makeEventPacket(eveType, target, event) {\n\t        return {\n\t            type: eveType,\n\t            event: event,\n\t            target: target,\n\t            cancelBubble: false,\n\t            offsetX: event.zrX,\n\t            offsetY: event.zrY,\n\t            gestureEvent: event.gestureEvent,\n\t            pinchX: event.pinchX,\n\t            pinchY: event.pinchY,\n\t            pinchScale: event.pinchScale,\n\t            wheelDelta: event.zrDelta,\n\t            zrByTouch: event.zrByTouch\n\t        };\n\t    }\n\n\t    function EmptyProxy () {}\n\t    EmptyProxy.prototype.dispose = function () {};\n\n\t    var handlerNames = [\n\t        'click', 'dblclick', 'mousewheel', 'mouseout',\n\t        'mouseup', 'mousedown', 'mousemove', 'contextmenu'\n\t    ];\n\t    /**\n\t     * @alias module:zrender/Handler\n\t     * @constructor\n\t     * @extends module:zrender/mixin/Eventful\n\t     * @param {module:zrender/Storage} storage Storage instance.\n\t     * @param {module:zrender/Painter} painter Painter instance.\n\t     * @param {module:zrender/dom/HandlerProxy} proxy HandlerProxy instance.\n\t     * @param {HTMLElement} painterRoot painter.root (not painter.getViewportRoot()).\n\t     */\n\t    var Handler = function(storage, painter, proxy, painterRoot) {\n\t        Eventful.call(this);\n\n\t        this.storage = storage;\n\n\t        this.painter = painter;\n\n\t        this.painterRoot = painterRoot;\n\n\t        proxy = proxy || new EmptyProxy();\n\n\t        /**\n\t         * Proxy of event. can be Dom, WebGLSurface, etc.\n\t         */\n\t        this.proxy = proxy;\n\n\t        // Attach handler\n\t        proxy.handler = this;\n\n\t        /**\n\t         * @private\n\t         * @type {boolean}\n\t         */\n\t        this._hovered;\n\n\t        /**\n\t         * @private\n\t         * @type {Date}\n\t         */\n\t        this._lastTouchMoment;\n\n\t        /**\n\t         * @private\n\t         * @type {number}\n\t         */\n\t        this._lastX;\n\n\t        /**\n\t         * @private\n\t         * @type {number}\n\t         */\n\t        this._lastY;\n\n\n\t        Draggable.call(this);\n\n\t        util.each(handlerNames, function (name) {\n\t            proxy.on && proxy.on(name, this[name], this);\n\t        }, this);\n\t    };\n\n\t    Handler.prototype = {\n\n\t        constructor: Handler,\n\n\t        mousemove: function (event) {\n\t            var x = event.zrX;\n\t            var y = event.zrY;\n\n\t            var hovered = this.findHover(x, y, null);\n\t            var lastHovered = this._hovered;\n\t            var proxy = this.proxy;\n\n\t            this._hovered = hovered;\n\n\t            proxy.setCursor && proxy.setCursor(hovered ? hovered.cursor : 'default');\n\n\t            // Mouse out on previous hovered element\n\t            if (lastHovered && hovered !== lastHovered && lastHovered.__zr) {\n\t                this.dispatchToElement(lastHovered, 'mouseout', event);\n\t            }\n\n\t            // Mouse moving on one element\n\t            this.dispatchToElement(hovered, 'mousemove', event);\n\n\t            // Mouse over on a new element\n\t            if (hovered && hovered !== lastHovered) {\n\t                this.dispatchToElement(hovered, 'mouseover', event);\n\t            }\n\t        },\n\n\t        mouseout: function (event) {\n\t            this.dispatchToElement(this._hovered, 'mouseout', event);\n\n\t            // There might be some doms created by upper layer application\n\t            // at the same level of painter.getViewportRoot() (e.g., tooltip\n\t            // dom created by echarts), where 'globalout' event should not\n\t            // be triggered when mouse enters these doms. (But 'mouseout'\n\t            // should be triggered at the original hovered element as usual).\n\t            var element = event.toElement || event.relatedTarget;\n\t            var innerDom;\n\t            do {\n\t                element = element && element.parentNode;\n\t            }\n\t            while (element && element.nodeType != 9 && !(\n\t                innerDom = element === this.painterRoot\n\t            ));\n\n\t            !innerDom && this.trigger('globalout', {event: event});\n\t        },\n\n\t        /**\n\t         * Resize\n\t         */\n\t        resize: function (event) {\n\t            this._hovered = null;\n\t        },\n\n\t        /**\n\t         * Dispatch event\n\t         * @param {string} eventName\n\t         * @param {event=} eventArgs\n\t         */\n\t        dispatch: function (eventName, eventArgs) {\n\t            var handler = this[eventName];\n\t            handler && handler.call(this, eventArgs);\n\t        },\n\n\t        /**\n\t         * Dispose\n\t         */\n\t        dispose: function () {\n\n\t            this.proxy.dispose();\n\n\t            this.storage =\n\t            this.proxy =\n\t            this.painter = null;\n\t        },\n\n\t        /**\n\t         * 设置默认的cursor style\n\t         * @param {string} [cursorStyle='default'] 例如 crosshair\n\t         */\n\t        setCursorStyle: function (cursorStyle) {\n\t            var proxy = this.proxy;\n\t            proxy.setCursor && proxy.setCursor(cursorStyle);\n\t        },\n\n\t        /**\n\t         * 事件分发代理\n\t         *\n\t         * @private\n\t         * @param {Object} targetEl 目标图形元素\n\t         * @param {string} eventName 事件名称\n\t         * @param {Object} event 事件对象\n\t         */\n\t        dispatchToElement: function (targetEl, eventName, event) {\n\t            var eventHandler = 'on' + eventName;\n\t            var eventPacket = makeEventPacket(eventName, targetEl, event);\n\n\t            var el = targetEl;\n\n\t            while (el) {\n\t                el[eventHandler]\n\t                    && (eventPacket.cancelBubble = el[eventHandler].call(el, eventPacket));\n\n\t                el.trigger(eventName, eventPacket);\n\n\t                el = el.parent;\n\n\t                if (eventPacket.cancelBubble) {\n\t                    break;\n\t                }\n\t            }\n\n\t            if (!eventPacket.cancelBubble) {\n\t                // 冒泡到顶级 zrender 对象\n\t                this.trigger(eventName, eventPacket);\n\t                // 分发事件到用户自定义层\n\t                // 用户有可能在全局 click 事件中 dispose，所以需要判断下 painter 是否存在\n\t                this.painter && this.painter.eachOtherLayer(function (layer) {\n\t                    if (typeof(layer[eventHandler]) == 'function') {\n\t                        layer[eventHandler].call(layer, eventPacket);\n\t                    }\n\t                    if (layer.trigger) {\n\t                        layer.trigger(eventName, eventPacket);\n\t                    }\n\t                });\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         * @param {number} x\n\t         * @param {number} y\n\t         * @param {module:zrender/graphic/Displayable} exclude\n\t         * @method\n\t         */\n\t        findHover: function(x, y, exclude) {\n\t            var list = this.storage.getDisplayList();\n\t            for (var i = list.length - 1; i >= 0 ; i--) {\n\t                if (!list[i].silent\n\t                 && list[i] !== exclude\n\t                 // getDisplayList may include ignored item in VML mode\n\t                 && !list[i].ignore\n\t                 && isHover(list[i], x, y)) {\n\t                    return list[i];\n\t                }\n\t            }\n\t        }\n\t    };\n\n\t    // Common handlers\n\t    util.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n\t        Handler.prototype[name] = function (event) {\n\t            // Find hover again to avoid click event is dispatched manually. Or click is triggered without mouseover\n\t            var hovered = this.findHover(event.zrX, event.zrY, null);\n\n\t            if (name === 'mousedown') {\n\t                this._downel = hovered;\n\t                // In case click triggered before mouseup\n\t                this._upel = hovered;\n\t            }\n\t            else if (name === 'mosueup') {\n\t                this._upel = hovered;\n\t            }\n\t            else if (name === 'click') {\n\t                if (this._downel !== this._upel) {\n\t                    return;\n\t                }\n\t            }\n\n\t            this.dispatchToElement(hovered, name, event);\n\t        };\n\t    });\n\n\t    function isHover(displayable, x, y) {\n\t        if (displayable[displayable.rectHover ? 'rectContain' : 'contain'](x, y)) {\n\t            var el = displayable;\n\t            while (el) {\n\t                // If ancestor is silent or clipped by ancestor\n\t                if (el.silent || (el.clipPath && !el.clipPath.contain(x, y)))  {\n\t                    return false;\n\t                }\n\t                el = el.parent;\n\t            }\n\t            return true;\n\t        }\n\n\t        return false;\n\t    }\n\n\t    util.mixin(Handler, Eventful);\n\t    util.mixin(Handler, Draggable);\n\n\t    module.exports = Handler;\n\n\n/***/ },\n/* 84 */\n/***/ function(module, exports) {\n\n\t// TODO Draggable for group\n\t// FIXME Draggable on element which has parent rotation or scale\n\n\t    function Draggable() {\n\n\t        this.on('mousedown', this._dragStart, this);\n\t        this.on('mousemove', this._drag, this);\n\t        this.on('mouseup', this._dragEnd, this);\n\t        this.on('globalout', this._dragEnd, this);\n\t        // this._dropTarget = null;\n\t        // this._draggingTarget = null;\n\n\t        // this._x = 0;\n\t        // this._y = 0;\n\t    }\n\n\t    Draggable.prototype = {\n\n\t        constructor: Draggable,\n\n\t        _dragStart: function (e) {\n\t            var draggingTarget = e.target;\n\t            if (draggingTarget && draggingTarget.draggable) {\n\t                this._draggingTarget = draggingTarget;\n\t                draggingTarget.dragging = true;\n\t                this._x = e.offsetX;\n\t                this._y = e.offsetY;\n\n\t                this.dispatchToElement(draggingTarget, 'dragstart', e.event);\n\t            }\n\t        },\n\n\t        _drag: function (e) {\n\t            var draggingTarget = this._draggingTarget;\n\t            if (draggingTarget) {\n\n\t                var x = e.offsetX;\n\t                var y = e.offsetY;\n\n\t                var dx = x - this._x;\n\t                var dy = y - this._y;\n\t                this._x = x;\n\t                this._y = y;\n\n\t                draggingTarget.drift(dx, dy, e);\n\t                this.dispatchToElement(draggingTarget, 'drag', e.event);\n\n\t                var dropTarget = this.findHover(x, y, draggingTarget);\n\t                var lastDropTarget = this._dropTarget;\n\t                this._dropTarget = dropTarget;\n\n\t                if (draggingTarget !== dropTarget) {\n\t                    if (lastDropTarget && dropTarget !== lastDropTarget) {\n\t                        this.dispatchToElement(lastDropTarget, 'dragleave', e.event);\n\t                    }\n\t                    if (dropTarget && dropTarget !== lastDropTarget) {\n\t                        this.dispatchToElement(dropTarget, 'dragenter', e.event);\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        _dragEnd: function (e) {\n\t            var draggingTarget = this._draggingTarget;\n\n\t            if (draggingTarget) {\n\t                draggingTarget.dragging = false;\n\t            }\n\n\t            this.dispatchToElement(draggingTarget, 'dragend', e.event);\n\n\t            if (this._dropTarget) {\n\t                this.dispatchToElement(this._dropTarget, 'drop', e.event);\n\t            }\n\n\t            this._draggingTarget = null;\n\t            this._dropTarget = null;\n\t        }\n\n\t    };\n\n\t    module.exports = Draggable;\n\n\n/***/ },\n/* 85 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * Storage内容仓库模块\n\t * @module zrender/Storage\n\t * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n\t * @author errorrik (errorrik@gmail.com)\n\t * @author pissang (https://github.com/pissang/)\n\t */\n\n\n\t    var util = __webpack_require__(4);\n\t    var env = __webpack_require__(2);\n\n\t    var Group = __webpack_require__(30);\n\n\t    // Use timsort because in most case elements are partially sorted\n\t    // https://jsfiddle.net/pissang/jr4x7mdm/8/\n\t    var timsort = __webpack_require__(86);\n\n\t    function shapeCompareFunc(a, b) {\n\t        if (a.zlevel === b.zlevel) {\n\t            if (a.z === b.z) {\n\t                // if (a.z2 === b.z2) {\n\t                //     // FIXME Slow has renderidx compare\n\t                //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement\n\t                //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012\n\t                //     return a.__renderidx - b.__renderidx;\n\t                // }\n\t                return a.z2 - b.z2;\n\t            }\n\t            return a.z - b.z;\n\t        }\n\t        return a.zlevel - b.zlevel;\n\t    }\n\t    /**\n\t     * 内容仓库 (M)\n\t     * @alias module:zrender/Storage\n\t     * @constructor\n\t     */\n\t    var Storage = function () {\n\t        // 所有常规形状，id索引的map\n\t        this._elements = {};\n\n\t        this._roots = [];\n\n\t        this._displayList = [];\n\n\t        this._displayListLen = 0;\n\t    };\n\n\t    Storage.prototype = {\n\n\t        constructor: Storage,\n\n\t        /**\n\t         * @param  {Function} cb\n\t         *\n\t         */\n\t        traverse: function (cb, context) {\n\t            for (var i = 0; i < this._roots.length; i++) {\n\t                this._roots[i].traverse(cb, context);\n\t            }\n\t        },\n\n\t        /**\n\t         * 返回所有图形的绘制队列\n\t         * @param {boolean} [update=false] 是否在返回前更新该数组\n\t         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效\n\t         *\n\t         * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}\n\t         * @return {Array.<module:zrender/graphic/Displayable>}\n\t         */\n\t        getDisplayList: function (update, includeIgnore) {\n\t            includeIgnore = includeIgnore || false;\n\t            if (update) {\n\t                this.updateDisplayList(includeIgnore);\n\t            }\n\t            return this._displayList;\n\t        },\n\n\t        /**\n\t         * 更新图形的绘制队列。\n\t         * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，\n\t         * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列\n\t         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组\n\t         */\n\t        updateDisplayList: function (includeIgnore) {\n\t            this._displayListLen = 0;\n\t            var roots = this._roots;\n\t            var displayList = this._displayList;\n\t            for (var i = 0, len = roots.length; i < len; i++) {\n\t                this._updateAndAddDisplayable(roots[i], null, includeIgnore);\n\t            }\n\t            displayList.length = this._displayListLen;\n\n\t            // for (var i = 0, len = displayList.length; i < len; i++) {\n\t            //     displayList[i].__renderidx = i;\n\t            // }\n\n\t            // displayList.sort(shapeCompareFunc);\n\t            env.canvasSupported && timsort(displayList, shapeCompareFunc);\n\t        },\n\n\t        _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {\n\n\t            if (el.ignore && !includeIgnore) {\n\t                return;\n\t            }\n\n\t            el.beforeUpdate();\n\n\t            if (el.__dirty) {\n\n\t                el.update();\n\n\t            }\n\n\t            el.afterUpdate();\n\n\t            var userSetClipPath = el.clipPath;\n\t            if (userSetClipPath) {\n\n\t                // FIXME 效率影响\n\t                if (clipPaths) {\n\t                    clipPaths = clipPaths.slice();\n\t                }\n\t                else {\n\t                    clipPaths = [];\n\t                }\n\n\t                var currentClipPath = userSetClipPath;\n\t                var parentClipPath = el;\n\t                // Recursively add clip path\n\t                while (currentClipPath) {\n\t                    // clipPath 的变换是基于使用这个 clipPath 的元素\n\t                    currentClipPath.parent = parentClipPath;\n\t                    currentClipPath.updateTransform();\n\n\t                    clipPaths.push(currentClipPath);\n\n\t                    parentClipPath = currentClipPath;\n\t                    currentClipPath = currentClipPath.clipPath;\n\t                }\n\t            }\n\n\t            if (el.isGroup) {\n\t                var children = el._children;\n\n\t                for (var i = 0; i < children.length; i++) {\n\t                    var child = children[i];\n\n\t                    // Force to mark as dirty if group is dirty\n\t                    // FIXME __dirtyPath ?\n\t                    if (el.__dirty) {\n\t                        child.__dirty = true;\n\t                    }\n\n\t                    this._updateAndAddDisplayable(child, clipPaths, includeIgnore);\n\t                }\n\n\t                // Mark group clean here\n\t                el.__dirty = false;\n\n\t            }\n\t            else {\n\t                el.__clipPaths = clipPaths;\n\n\t                this._displayList[this._displayListLen++] = el;\n\t            }\n\t        },\n\n\t        /**\n\t         * 添加图形(Shape)或者组(Group)到根节点\n\t         * @param {module:zrender/Element} el\n\t         */\n\t        addRoot: function (el) {\n\t            // Element has been added\n\t            if (this._elements[el.id]) {\n\t                return;\n\t            }\n\n\t            if (el instanceof Group) {\n\t                el.addChildrenToStorage(this);\n\t            }\n\n\t            this.addToMap(el);\n\t            this._roots.push(el);\n\t        },\n\n\t        /**\n\t         * 删除指定的图形(Shape)或者组(Group)\n\t         * @param {string|Array.<string>} [elId] 如果为空清空整个Storage\n\t         */\n\t        delRoot: function (elId) {\n\t            if (elId == null) {\n\t                // 不指定elId清空\n\t                for (var i = 0; i < this._roots.length; i++) {\n\t                    var root = this._roots[i];\n\t                    if (root instanceof Group) {\n\t                        root.delChildrenFromStorage(this);\n\t                    }\n\t                }\n\n\t                this._elements = {};\n\t                this._roots = [];\n\t                this._displayList = [];\n\t                this._displayListLen = 0;\n\n\t                return;\n\t            }\n\n\t            if (elId instanceof Array) {\n\t                for (var i = 0, l = elId.length; i < l; i++) {\n\t                    this.delRoot(elId[i]);\n\t                }\n\t                return;\n\t            }\n\n\t            var el;\n\t            if (typeof(elId) == 'string') {\n\t                el = this._elements[elId];\n\t            }\n\t            else {\n\t                el = elId;\n\t            }\n\n\t            var idx = util.indexOf(this._roots, el);\n\t            if (idx >= 0) {\n\t                this.delFromMap(el.id);\n\t                this._roots.splice(idx, 1);\n\t                if (el instanceof Group) {\n\t                    el.delChildrenFromStorage(this);\n\t                }\n\t            }\n\t        },\n\n\t        addToMap: function (el) {\n\t            if (el instanceof Group) {\n\t                el.__storage = this;\n\t            }\n\t            el.dirty(false);\n\n\t            this._elements[el.id] = el;\n\n\t            return this;\n\t        },\n\n\t        get: function (elId) {\n\t            return this._elements[elId];\n\t        },\n\n\t        delFromMap: function (elId) {\n\t            var elements = this._elements;\n\t            var el = elements[elId];\n\t            if (el) {\n\t                delete elements[elId];\n\t                if (el instanceof Group) {\n\t                    el.__storage = null;\n\t                }\n\t            }\n\n\t            return this;\n\t        },\n\n\t        /**\n\t         * 清空并且释放Storage\n\t         */\n\t        dispose: function () {\n\t            this._elements =\n\t            this._renderList =\n\t            this._roots = null;\n\t        },\n\n\t        displayableSortFunc: shapeCompareFunc\n\t    };\n\n\t    module.exports = Storage;\n\n\n\n/***/ },\n/* 86 */\n/***/ function(module, exports) {\n\n\t// https://github.com/mziccard/node-timsort\n\n\t    var DEFAULT_MIN_MERGE = 32;\n\n\t    var DEFAULT_MIN_GALLOPING = 7;\n\n\t    var DEFAULT_TMP_STORAGE_LENGTH = 256;\n\n\t    function minRunLength(n) {\n\t        var r = 0;\n\n\t        while (n >= DEFAULT_MIN_MERGE) {\n\t            r |= n & 1;\n\t            n >>= 1;\n\t        }\n\n\t        return n + r;\n\t    }\n\n\t    function makeAscendingRun(array, lo, hi, compare) {\n\t        var runHi = lo + 1;\n\n\t        if (runHi === hi) {\n\t            return 1;\n\t        }\n\n\t        if (compare(array[runHi++], array[lo]) < 0) {\n\t            while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {\n\t                runHi++;\n\t            }\n\n\t            reverseRun(array, lo, runHi);\n\t        }\n\t        else {\n\t            while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {\n\t                runHi++;\n\t            }\n\t        }\n\n\t        return runHi - lo;\n\t    }\n\n\t    function reverseRun(array, lo, hi) {\n\t        hi--;\n\n\t        while (lo < hi) {\n\t            var t = array[lo];\n\t            array[lo++] = array[hi];\n\t            array[hi--] = t;\n\t        }\n\t    }\n\n\t    function binaryInsertionSort(array, lo, hi, start, compare) {\n\t        if (start === lo) {\n\t            start++;\n\t        }\n\n\t        for (; start < hi; start++) {\n\t            var pivot = array[start];\n\n\t            var left = lo;\n\t            var right = start;\n\t            var mid;\n\n\t            while (left < right) {\n\t                mid = left + right >>> 1;\n\n\t                if (compare(pivot, array[mid]) < 0) {\n\t                    right = mid;\n\t                }\n\t                else {\n\t                    left = mid + 1;\n\t                }\n\t            }\n\n\t            var n = start - left;\n\n\t            switch (n) {\n\t                case 3:\n\t                    array[left + 3] = array[left + 2];\n\n\t                case 2:\n\t                    array[left + 2] = array[left + 1];\n\n\t                case 1:\n\t                    array[left + 1] = array[left];\n\t                    break;\n\t                default:\n\t                    while (n > 0) {\n\t                        array[left + n] = array[left + n - 1];\n\t                        n--;\n\t                    }\n\t            }\n\n\t            array[left] = pivot;\n\t        }\n\t    }\n\n\t    function gallopLeft(value, array, start, length, hint, compare) {\n\t        var lastOffset = 0;\n\t        var maxOffset = 0;\n\t        var offset = 1;\n\n\t        if (compare(value, array[start + hint]) > 0) {\n\t            maxOffset = length - hint;\n\n\t            while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {\n\t                lastOffset = offset;\n\t                offset = (offset << 1) + 1;\n\n\t                if (offset <= 0) {\n\t                    offset = maxOffset;\n\t                }\n\t            }\n\n\t            if (offset > maxOffset) {\n\t                offset = maxOffset;\n\t            }\n\n\t            lastOffset += hint;\n\t            offset += hint;\n\t        }\n\t        else {\n\t            maxOffset = hint + 1;\n\t            while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {\n\t                lastOffset = offset;\n\t                offset = (offset << 1) + 1;\n\n\t                if (offset <= 0) {\n\t                    offset = maxOffset;\n\t                }\n\t            }\n\t            if (offset > maxOffset) {\n\t                offset = maxOffset;\n\t            }\n\n\t            var tmp = lastOffset;\n\t            lastOffset = hint - offset;\n\t            offset = hint - tmp;\n\t        }\n\n\t        lastOffset++;\n\t        while (lastOffset < offset) {\n\t            var m = lastOffset + (offset - lastOffset >>> 1);\n\n\t            if (compare(value, array[start + m]) > 0) {\n\t                lastOffset = m + 1;\n\t            }\n\t            else {\n\t                offset = m;\n\t            }\n\t        }\n\t        return offset;\n\t    }\n\n\t    function gallopRight(value, array, start, length, hint, compare) {\n\t        var lastOffset = 0;\n\t        var maxOffset = 0;\n\t        var offset = 1;\n\n\t        if (compare(value, array[start + hint]) < 0) {\n\t            maxOffset = hint + 1;\n\n\t            while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {\n\t                lastOffset = offset;\n\t                offset = (offset << 1) + 1;\n\n\t                if (offset <= 0) {\n\t                    offset = maxOffset;\n\t                }\n\t            }\n\n\t            if (offset > maxOffset) {\n\t                offset = maxOffset;\n\t            }\n\n\t            var tmp = lastOffset;\n\t            lastOffset = hint - offset;\n\t            offset = hint - tmp;\n\t        }\n\t        else {\n\t            maxOffset = length - hint;\n\n\t            while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {\n\t                lastOffset = offset;\n\t                offset = (offset << 1) + 1;\n\n\t                if (offset <= 0) {\n\t                    offset = maxOffset;\n\t                }\n\t            }\n\n\t            if (offset > maxOffset) {\n\t                offset = maxOffset;\n\t            }\n\n\t            lastOffset += hint;\n\t            offset += hint;\n\t        }\n\n\t        lastOffset++;\n\n\t        while (lastOffset < offset) {\n\t            var m = lastOffset + (offset - lastOffset >>> 1);\n\n\t            if (compare(value, array[start + m]) < 0) {\n\t                offset = m;\n\t            }\n\t            else {\n\t                lastOffset = m + 1;\n\t            }\n\t        }\n\n\t        return offset;\n\t    }\n\n\t    function TimSort(array, compare) {\n\t        var minGallop = DEFAULT_MIN_GALLOPING;\n\t        var length = 0;\n\t        var tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;\n\t        var stackLength = 0;\n\t        var runStart;\n\t        var runLength;\n\t        var stackSize = 0;\n\n\t        length = array.length;\n\n\t        if (length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {\n\t            tmpStorageLength = length >>> 1;\n\t        }\n\n\t        var tmp = [];\n\n\t        stackLength = length < 120 ? 5 : length < 1542 ? 10 : length < 119151 ? 19 : 40;\n\n\t        runStart = [];\n\t        runLength = [];\n\n\t        function pushRun(_runStart, _runLength) {\n\t            runStart[stackSize] = _runStart;\n\t            runLength[stackSize] = _runLength;\n\t            stackSize += 1;\n\t        }\n\n\t        function mergeRuns() {\n\t            while (stackSize > 1) {\n\t                var n = stackSize - 2;\n\n\t                if (n >= 1 && runLength[n - 1] <= runLength[n] + runLength[n + 1] || n >= 2 && runLength[n - 2] <= runLength[n] + runLength[n - 1]) {\n\t                    if (runLength[n - 1] < runLength[n + 1]) {\n\t                        n--;\n\t                    }\n\t                }\n\t                else if (runLength[n] > runLength[n + 1]) {\n\t                    break;\n\t                }\n\t                mergeAt(n);\n\t            }\n\t        }\n\n\t        function forceMergeRuns() {\n\t            while (stackSize > 1) {\n\t                var n = stackSize - 2;\n\n\t                if (n > 0 && runLength[n - 1] < runLength[n + 1]) {\n\t                    n--;\n\t                }\n\n\t                mergeAt(n);\n\t            }\n\t        }\n\n\t        function mergeAt(i) {\n\t            var start1 = runStart[i];\n\t            var length1 = runLength[i];\n\t            var start2 = runStart[i + 1];\n\t            var length2 = runLength[i + 1];\n\n\t            runLength[i] = length1 + length2;\n\n\t            if (i === stackSize - 3) {\n\t                runStart[i + 1] = runStart[i + 2];\n\t                runLength[i + 1] = runLength[i + 2];\n\t            }\n\n\t            stackSize--;\n\n\t            var k = gallopRight(array[start2], array, start1, length1, 0, compare);\n\t            start1 += k;\n\t            length1 -= k;\n\n\t            if (length1 === 0) {\n\t                return;\n\t            }\n\n\t            length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);\n\n\t            if (length2 === 0) {\n\t                return;\n\t            }\n\n\t            if (length1 <= length2) {\n\t                mergeLow(start1, length1, start2, length2);\n\t            }\n\t            else {\n\t                mergeHigh(start1, length1, start2, length2);\n\t            }\n\t        }\n\n\t        function mergeLow(start1, length1, start2, length2) {\n\t            var i = 0;\n\n\t            for (i = 0; i < length1; i++) {\n\t                tmp[i] = array[start1 + i];\n\t            }\n\n\t            var cursor1 = 0;\n\t            var cursor2 = start2;\n\t            var dest = start1;\n\n\t            array[dest++] = array[cursor2++];\n\n\t            if (--length2 === 0) {\n\t                for (i = 0; i < length1; i++) {\n\t                    array[dest + i] = tmp[cursor1 + i];\n\t                }\n\t                return;\n\t            }\n\n\t            if (length1 === 1) {\n\t                for (i = 0; i < length2; i++) {\n\t                    array[dest + i] = array[cursor2 + i];\n\t                }\n\t                array[dest + length2] = tmp[cursor1];\n\t                return;\n\t            }\n\n\t            var _minGallop = minGallop;\n\t            var count1, count2, exit;\n\n\t            while (1) {\n\t                count1 = 0;\n\t                count2 = 0;\n\t                exit = false;\n\n\t                do {\n\t                    if (compare(array[cursor2], tmp[cursor1]) < 0) {\n\t                        array[dest++] = array[cursor2++];\n\t                        count2++;\n\t                        count1 = 0;\n\n\t                        if (--length2 === 0) {\n\t                            exit = true;\n\t                            break;\n\t                        }\n\t                    }\n\t                    else {\n\t                        array[dest++] = tmp[cursor1++];\n\t                        count1++;\n\t                        count2 = 0;\n\t                        if (--length1 === 1) {\n\t                            exit = true;\n\t                            break;\n\t                        }\n\t                    }\n\t                } while ((count1 | count2) < _minGallop);\n\n\t                if (exit) {\n\t                    break;\n\t                }\n\n\t                do {\n\t                    count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);\n\n\t                    if (count1 !== 0) {\n\t                        for (i = 0; i < count1; i++) {\n\t                            array[dest + i] = tmp[cursor1 + i];\n\t                        }\n\n\t                        dest += count1;\n\t                        cursor1 += count1;\n\t                        length1 -= count1;\n\t                        if (length1 <= 1) {\n\t                            exit = true;\n\t                            break;\n\t                        }\n\t                    }\n\n\t                    array[dest++] = array[cursor2++];\n\n\t                    if (--length2 === 0) {\n\t                        exit = true;\n\t                        break;\n\t                    }\n\n\t                    count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);\n\n\t                    if (count2 !== 0) {\n\t                        for (i = 0; i < count2; i++) {\n\t                            array[dest + i] = array[cursor2 + i];\n\t                        }\n\n\t                        dest += count2;\n\t                        cursor2 += count2;\n\t                        length2 -= count2;\n\n\t                        if (length2 === 0) {\n\t                            exit = true;\n\t                            break;\n\t                        }\n\t                    }\n\t                    array[dest++] = tmp[cursor1++];\n\n\t                    if (--length1 === 1) {\n\t                        exit = true;\n\t                        break;\n\t                    }\n\n\t                    _minGallop--;\n\t                } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n\t                if (exit) {\n\t                    break;\n\t                }\n\n\t                if (_minGallop < 0) {\n\t                    _minGallop = 0;\n\t                }\n\n\t                _minGallop += 2;\n\t            }\n\n\t            minGallop = _minGallop;\n\n\t            minGallop < 1 && (minGallop = 1);\n\n\t            if (length1 === 1) {\n\t                for (i = 0; i < length2; i++) {\n\t                    array[dest + i] = array[cursor2 + i];\n\t                }\n\t                array[dest + length2] = tmp[cursor1];\n\t            }\n\t            else if (length1 === 0) {\n\t                throw new Error();\n\t                // throw new Error('mergeLow preconditions were not respected');\n\t            }\n\t            else {\n\t                for (i = 0; i < length1; i++) {\n\t                    array[dest + i] = tmp[cursor1 + i];\n\t                }\n\t            }\n\t        }\n\n\t        function mergeHigh (start1, length1, start2, length2) {\n\t            var i = 0;\n\n\t            for (i = 0; i < length2; i++) {\n\t                tmp[i] = array[start2 + i];\n\t            }\n\n\t            var cursor1 = start1 + length1 - 1;\n\t            var cursor2 = length2 - 1;\n\t            var dest = start2 + length2 - 1;\n\t            var customCursor = 0;\n\t            var customDest = 0;\n\n\t            array[dest--] = array[cursor1--];\n\n\t            if (--length1 === 0) {\n\t                customCursor = dest - (length2 - 1);\n\n\t                for (i = 0; i < length2; i++) {\n\t                    array[customCursor + i] = tmp[i];\n\t                }\n\n\t                return;\n\t            }\n\n\t            if (length2 === 1) {\n\t                dest -= length1;\n\t                cursor1 -= length1;\n\t                customDest = dest + 1;\n\t                customCursor = cursor1 + 1;\n\n\t                for (i = length1 - 1; i >= 0; i--) {\n\t                    array[customDest + i] = array[customCursor + i];\n\t                }\n\n\t                array[dest] = tmp[cursor2];\n\t                return;\n\t            }\n\n\t            var _minGallop = minGallop;\n\n\t            while (true) {\n\t                var count1 = 0;\n\t                var count2 = 0;\n\t                var exit = false;\n\n\t                do {\n\t                    if (compare(tmp[cursor2], array[cursor1]) < 0) {\n\t                        array[dest--] = array[cursor1--];\n\t                        count1++;\n\t                        count2 = 0;\n\t                        if (--length1 === 0) {\n\t                            exit = true;\n\t                            break;\n\t                        }\n\t                    }\n\t                    else {\n\t                        array[dest--] = tmp[cursor2--];\n\t                        count2++;\n\t                        count1 = 0;\n\t                        if (--length2 === 1) {\n\t                            exit = true;\n\t                            break;\n\t                        }\n\t                    }\n\t                } while ((count1 | count2) < _minGallop);\n\n\t                if (exit) {\n\t                    break;\n\t                }\n\n\t                do {\n\t                    count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);\n\n\t                    if (count1 !== 0) {\n\t                        dest -= count1;\n\t                        cursor1 -= count1;\n\t                        length1 -= count1;\n\t                        customDest = dest + 1;\n\t                        customCursor = cursor1 + 1;\n\n\t                        for (i = count1 - 1; i >= 0; i--) {\n\t                            array[customDest + i] = array[customCursor + i];\n\t                        }\n\n\t                        if (length1 === 0) {\n\t                            exit = true;\n\t                            break;\n\t                        }\n\t                    }\n\n\t                    array[dest--] = tmp[cursor2--];\n\n\t                    if (--length2 === 1) {\n\t                        exit = true;\n\t                        break;\n\t                    }\n\n\t                    count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);\n\n\t                    if (count2 !== 0) {\n\t                        dest -= count2;\n\t                        cursor2 -= count2;\n\t                        length2 -= count2;\n\t                        customDest = dest + 1;\n\t                        customCursor = cursor2 + 1;\n\n\t                        for (i = 0; i < count2; i++) {\n\t                            array[customDest + i] = tmp[customCursor + i];\n\t                        }\n\n\t                        if (length2 <= 1) {\n\t                            exit = true;\n\t                            break;\n\t                        }\n\t                    }\n\n\t                    array[dest--] = array[cursor1--];\n\n\t                    if (--length1 === 0) {\n\t                        exit = true;\n\t                        break;\n\t                    }\n\n\t                    _minGallop--;\n\t                } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n\t                if (exit) {\n\t                    break;\n\t                }\n\n\t                if (_minGallop < 0) {\n\t                    _minGallop = 0;\n\t                }\n\n\t                _minGallop += 2;\n\t            }\n\n\t            minGallop = _minGallop;\n\n\t            if (minGallop < 1) {\n\t                minGallop = 1;\n\t            }\n\n\t            if (length2 === 1) {\n\t                dest -= length1;\n\t                cursor1 -= length1;\n\t                customDest = dest + 1;\n\t                customCursor = cursor1 + 1;\n\n\t                for (i = length1 - 1; i >= 0; i--) {\n\t                    array[customDest + i] = array[customCursor + i];\n\t                }\n\n\t                array[dest] = tmp[cursor2];\n\t            }\n\t            else if (length2 === 0) {\n\t                throw new Error();\n\t                // throw new Error('mergeHigh preconditions were not respected');\n\t            }\n\t            else {\n\t                customCursor = dest - (length2 - 1);\n\t                for (i = 0; i < length2; i++) {\n\t                    array[customCursor + i] = tmp[i];\n\t                }\n\t            }\n\t        }\n\n\t        this.mergeRuns = mergeRuns;\n\t        this.forceMergeRuns = forceMergeRuns;\n\t        this.pushRun = pushRun;\n\t    }\n\n\t    function sort(array, compare, lo, hi) {\n\t        if (!lo) {\n\t            lo = 0;\n\t        }\n\t        if (!hi) {\n\t            hi = array.length;\n\t        }\n\n\t        var remaining = hi - lo;\n\n\t        if (remaining < 2) {\n\t            return;\n\t        }\n\n\t        var runLength = 0;\n\n\t        if (remaining < DEFAULT_MIN_MERGE) {\n\t            runLength = makeAscendingRun(array, lo, hi, compare);\n\t            binaryInsertionSort(array, lo, hi, lo + runLength, compare);\n\t            return;\n\t        }\n\n\t        var ts = new TimSort(array, compare);\n\n\t        var minRun = minRunLength(remaining);\n\n\t        do {\n\t            runLength = makeAscendingRun(array, lo, hi, compare);\n\t            if (runLength < minRun) {\n\t                var force = remaining;\n\t                if (force > minRun) {\n\t                    force = minRun;\n\t                }\n\n\t                binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);\n\t                runLength = force;\n\t            }\n\n\t            ts.pushRun(lo, runLength);\n\t            ts.mergeRuns();\n\n\t            remaining -= runLength;\n\t            lo += runLength;\n\t        } while (remaining !== 0);\n\n\t        ts.forceMergeRuns();\n\t    }\n\n\t    module.exports = sort;\n\n\n/***/ },\n/* 87 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * 动画主类, 调度和管理所有动画控制器\n\t *\n\t * @module zrender/animation/Animation\n\t * @author pissang(https://github.com/pissang)\n\t */\n\t// TODO Additive animation\n\t// http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/\n\t// https://developer.apple.com/videos/wwdc2014/#236\n\n\n\t    var util = __webpack_require__(4);\n\t    var Dispatcher = __webpack_require__(88).Dispatcher;\n\n\t    var requestAnimationFrame = __webpack_require__(89);\n\n\t    var Animator = __webpack_require__(36);\n\t    /**\n\t     * @typedef {Object} IZRenderStage\n\t     * @property {Function} update\n\t     */\n\n\t    /**\n\t     * @alias module:zrender/animation/Animation\n\t     * @constructor\n\t     * @param {Object} [options]\n\t     * @param {Function} [options.onframe]\n\t     * @param {IZRenderStage} [options.stage]\n\t     * @example\n\t     *     var animation = new Animation();\n\t     *     var obj = {\n\t     *         x: 100,\n\t     *         y: 100\n\t     *     };\n\t     *     animation.animate(node.position)\n\t     *         .when(1000, {\n\t     *             x: 500,\n\t     *             y: 500\n\t     *         })\n\t     *         .when(2000, {\n\t     *             x: 100,\n\t     *             y: 100\n\t     *         })\n\t     *         .start('spline');\n\t     */\n\t    var Animation = function (options) {\n\n\t        options = options || {};\n\n\t        this.stage = options.stage || {};\n\n\t        this.onframe = options.onframe || function() {};\n\n\t        // private properties\n\t        this._clips = [];\n\n\t        this._running = false;\n\n\t        this._time;\n\n\t        this._pausedTime;\n\n\t        this._pauseStart;\n\n\t        this._paused = false;\n\n\t        Dispatcher.call(this);\n\t    };\n\n\t    Animation.prototype = {\n\n\t        constructor: Animation,\n\t        /**\n\t         * 添加 clip\n\t         * @param {module:zrender/animation/Clip} clip\n\t         */\n\t        addClip: function (clip) {\n\t            this._clips.push(clip);\n\t        },\n\t        /**\n\t         * 添加 animator\n\t         * @param {module:zrender/animation/Animator} animator\n\t         */\n\t        addAnimator: function (animator) {\n\t            animator.animation = this;\n\t            var clips = animator.getClips();\n\t            for (var i = 0; i < clips.length; i++) {\n\t                this.addClip(clips[i]);\n\t            }\n\t        },\n\t        /**\n\t         * 删除动画片段\n\t         * @param {module:zrender/animation/Clip} clip\n\t         */\n\t        removeClip: function(clip) {\n\t            var idx = util.indexOf(this._clips, clip);\n\t            if (idx >= 0) {\n\t                this._clips.splice(idx, 1);\n\t            }\n\t        },\n\n\t        /**\n\t         * 删除动画片段\n\t         * @param {module:zrender/animation/Animator} animator\n\t         */\n\t        removeAnimator: function (animator) {\n\t            var clips = animator.getClips();\n\t            for (var i = 0; i < clips.length; i++) {\n\t                this.removeClip(clips[i]);\n\t            }\n\t            animator.animation = null;\n\t        },\n\n\t        _update: function() {\n\n\t            var time = new Date().getTime() - this._pausedTime;\n\t            var delta = time - this._time;\n\t            var clips = this._clips;\n\t            var len = clips.length;\n\n\t            var deferredEvents = [];\n\t            var deferredClips = [];\n\t            for (var i = 0; i < len; i++) {\n\t                var clip = clips[i];\n\t                var e = clip.step(time);\n\t                // Throw out the events need to be called after\n\t                // stage.update, like destroy\n\t                if (e) {\n\t                    deferredEvents.push(e);\n\t                    deferredClips.push(clip);\n\t                }\n\t            }\n\n\t            // Remove the finished clip\n\t            for (var i = 0; i < len;) {\n\t                if (clips[i]._needsRemove) {\n\t                    clips[i] = clips[len - 1];\n\t                    clips.pop();\n\t                    len--;\n\t                }\n\t                else {\n\t                    i++;\n\t                }\n\t            }\n\n\t            len = deferredEvents.length;\n\t            for (var i = 0; i < len; i++) {\n\t                deferredClips[i].fire(deferredEvents[i]);\n\t            }\n\n\t            this._time = time;\n\n\t            this.onframe(delta);\n\n\t            this.trigger('frame', delta);\n\n\t            if (this.stage.update) {\n\t                this.stage.update();\n\t            }\n\t        },\n\n\t        _startLoop: function () {\n\t            var self = this;\n\n\t            this._running = true;\n\n\t            function step() {\n\t                if (self._running) {\n\n\t                    requestAnimationFrame(step);\n\n\t                    !self._paused && self._update();\n\t                }\n\t            }\n\n\t            requestAnimationFrame(step);\n\t        },\n\n\t        /**\n\t         * 开始运行动画\n\t         */\n\t        start: function () {\n\n\t            this._time = new Date().getTime();\n\t            this._pausedTime = 0;\n\n\t            this._startLoop();\n\t        },\n\t        /**\n\t         * 停止运行动画\n\t         */\n\t        stop: function () {\n\t            this._running = false;\n\t        },\n\n\t        /**\n\t         * Pause\n\t         */\n\t        pause: function () {\n\t            if (!this._paused) {\n\t                this._pauseStart = new Date().getTime();\n\t                this._paused = true;\n\t            }\n\t        },\n\n\t        /**\n\t         * Resume\n\t         */\n\t        resume: function () {\n\t            if (this._paused) {\n\t                this._pausedTime += (new Date().getTime()) - this._pauseStart;\n\t                this._paused = false;\n\t            }\n\t        },\n\n\t        /**\n\t         * 清除所有动画片段\n\t         */\n\t        clear: function () {\n\t            this._clips = [];\n\t        },\n\t        /**\n\t         * 对一个目标创建一个animator对象，可以指定目标中的属性使用动画\n\t         * @param  {Object} target\n\t         * @param  {Object} options\n\t         * @param  {boolean} [options.loop=false] 是否循环播放动画\n\t         * @param  {Function} [options.getter=null]\n\t         *         如果指定getter函数，会通过getter函数取属性值\n\t         * @param  {Function} [options.setter=null]\n\t         *         如果指定setter函数，会通过setter函数设置属性值\n\t         * @return {module:zrender/animation/Animation~Animator}\n\t         */\n\t        // TODO Gap\n\t        animate: function (target, options) {\n\t            options = options || {};\n\n\t            var animator = new Animator(\n\t                target,\n\t                options.loop,\n\t                options.getter,\n\t                options.setter\n\t            );\n\n\t            this.addAnimator(animator);\n\n\t            return animator;\n\t        }\n\t    };\n\n\t    util.mixin(Animation, Dispatcher);\n\n\t    module.exports = Animation;\n\n\n\n/***/ },\n/* 88 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * 事件辅助类\n\t * @module zrender/core/event\n\t * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n\t */\n\n\n\t    var Eventful = __webpack_require__(33);\n\t    var env = __webpack_require__(2);\n\n\t    var isDomLevel2 = (typeof window !== 'undefined') && !!window.addEventListener;\n\n\t    function getBoundingClientRect(el) {\n\t        // BlackBerry 5, iOS 3 (original iPhone) don't have getBoundingRect\n\t        return el.getBoundingClientRect ? el.getBoundingClientRect() : {left: 0, top: 0};\n\t    }\n\n\t    // `calculate` is optional, default false\n\t    function clientToLocal(el, e, out, calculate) {\n\t        out = out || {};\n\n\t        // According to the W3C Working Draft, offsetX and offsetY should be relative\n\t        // to the padding edge of the target element. The only browser using this convention\n\t        // is IE. Webkit uses the border edge, Opera uses the content edge, and FireFox does\n\t        // not support the properties.\n\t        // (see http://www.jacklmoore.com/notes/mouse-position/)\n\t        // In zr painter.dom, padding edge equals to border edge.\n\n\t        // FIXME\n\t        // When mousemove event triggered on ec tooltip, target is not zr painter.dom, and\n\t        // offsetX/Y is relative to e.target, where the calculation of zrX/Y via offsetX/Y\n\t        // is too complex. So css-transfrom dont support in this case temporarily.\n\t        if (calculate || !env.canvasSupported) {\n\t            defaultGetZrXY(el, e, out);\n\t        }\n\t        // Caution: In FireFox, layerX/layerY Mouse position relative to the closest positioned\n\t        // ancestor element, so we should make sure el is positioned (e.g., not position:static).\n\t        // BTW1, Webkit don't return the same results as FF in non-simple cases (like add\n\t        // zoom-factor, overflow / opacity layers, transforms ...)\n\t        // BTW2, (ev.offsetY || ev.pageY - $(ev.target).offset().top) is not correct in preserve-3d.\n\t        // <https://bugs.jquery.com/ticket/8523#comment:14>\n\t        // BTW3, In ff, offsetX/offsetY is always 0.\n\t        else if (env.browser.firefox && e.layerX != null && e.layerX !== e.offsetX) {\n\t            out.zrX = e.layerX;\n\t            out.zrY = e.layerY;\n\t        }\n\t        // For IE6+, chrome, safari, opera. (When will ff support offsetX?)\n\t        else if (e.offsetX != null) {\n\t            out.zrX = e.offsetX;\n\t            out.zrY = e.offsetY;\n\t        }\n\t        // For some other device, e.g., IOS safari.\n\t        else {\n\t            defaultGetZrXY(el, e, out);\n\t        }\n\n\t        return out;\n\t    }\n\n\t    function defaultGetZrXY(el, e, out) {\n\t        // This well-known method below does not support css transform.\n\t        var box = getBoundingClientRect(el);\n\t        out.zrX = e.clientX - box.left;\n\t        out.zrY = e.clientY - box.top;\n\t    }\n\n\t    /**\n\t     * 如果存在第三方嵌入的一些dom触发的事件，或touch事件，需要转换一下事件坐标.\n\t     * `calculate` is optional, default false.\n\t     */\n\t    function normalizeEvent(el, e, calculate) {\n\n\t        e = e || window.event;\n\n\t        if (e.zrX != null) {\n\t            return e;\n\t        }\n\n\t        var eventType = e.type;\n\t        var isTouch = eventType && eventType.indexOf('touch') >= 0;\n\n\t        if (!isTouch) {\n\t            clientToLocal(el, e, e, calculate);\n\t            e.zrDelta = (e.wheelDelta) ? e.wheelDelta / 120 : -(e.detail || 0) / 3;\n\t        }\n\t        else {\n\t            var touch = eventType != 'touchend'\n\t                ? e.targetTouches[0]\n\t                : e.changedTouches[0];\n\t            touch && clientToLocal(el, touch, e, calculate);\n\t        }\n\n\t        return e;\n\t    }\n\n\t    function addEventListener(el, name, handler) {\n\t        if (isDomLevel2) {\n\t            el.addEventListener(name, handler);\n\t        }\n\t        else {\n\t            el.attachEvent('on' + name, handler);\n\t        }\n\t    }\n\n\t    function removeEventListener(el, name, handler) {\n\t        if (isDomLevel2) {\n\t            el.removeEventListener(name, handler);\n\t        }\n\t        else {\n\t            el.detachEvent('on' + name, handler);\n\t        }\n\t    }\n\n\t    /**\n\t     * preventDefault and stopPropagation.\n\t     * Notice: do not do that in zrender. Upper application\n\t     * do that if necessary.\n\t     *\n\t     * @memberOf module:zrender/core/event\n\t     * @method\n\t     * @param {Event} e : event对象\n\t     */\n\t    var stop = isDomLevel2\n\t        ? function (e) {\n\t            e.preventDefault();\n\t            e.stopPropagation();\n\t            e.cancelBubble = true;\n\t        }\n\t        : function (e) {\n\t            e.returnValue = false;\n\t            e.cancelBubble = true;\n\t        };\n\n\t    module.exports = {\n\t        clientToLocal: clientToLocal,\n\t        normalizeEvent: normalizeEvent,\n\t        addEventListener: addEventListener,\n\t        removeEventListener: removeEventListener,\n\n\t        stop: stop,\n\t        // 做向上兼容\n\t        Dispatcher: Eventful\n\t    };\n\n\n\n/***/ },\n/* 89 */\n/***/ function(module, exports) {\n\n\t\n\n\t    module.exports = (typeof window !== 'undefined' &&\n\t                                    (window.requestAnimationFrame\n\t                                    || window.msRequestAnimationFrame\n\t                                    || window.mozRequestAnimationFrame\n\t                                    || window.webkitRequestAnimationFrame))\n\t                                || function (func) {\n\t                                    setTimeout(func, 16);\n\t                                };\n\n\n\n/***/ },\n/* 90 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var eventTool = __webpack_require__(88);\n\t    var zrUtil = __webpack_require__(4);\n\t    var Eventful = __webpack_require__(33);\n\t    var env = __webpack_require__(2);\n\t    var GestureMgr = __webpack_require__(91);\n\n\t    var addEventListener = eventTool.addEventListener;\n\t    var removeEventListener = eventTool.removeEventListener;\n\t    var normalizeEvent = eventTool.normalizeEvent;\n\n\t    var TOUCH_CLICK_DELAY = 300;\n\n\t    var mouseHandlerNames = [\n\t        'click', 'dblclick', 'mousewheel', 'mouseout',\n\t        'mouseup', 'mousedown', 'mousemove', 'contextmenu'\n\t    ];\n\n\t    var touchHandlerNames = [\n\t        'touchstart', 'touchend', 'touchmove'\n\t    ];\n\n\t    var pointerEventNames = {\n\t        pointerdown: 1, pointerup: 1, pointermove: 1, pointerout: 1\n\t    };\n\n\t    var pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {\n\t        var nm = name.replace('mouse', 'pointer');\n\t        return pointerEventNames[nm] ? nm : name;\n\t    });\n\n\t    function eventNameFix(name) {\n\t        return (name === 'mousewheel' && env.browser.firefox) ? 'DOMMouseScroll' : name;\n\t    }\n\n\t    function processGesture(proxy, event, stage) {\n\t        var gestureMgr = proxy._gestureMgr;\n\n\t        stage === 'start' && gestureMgr.clear();\n\n\t        var gestureInfo = gestureMgr.recognize(\n\t            event,\n\t            proxy.handler.findHover(event.zrX, event.zrY, null),\n\t            proxy.dom\n\t        );\n\n\t        stage === 'end' && gestureMgr.clear();\n\n\t        // Do not do any preventDefault here. Upper application do that if necessary.\n\t        if (gestureInfo) {\n\t            var type = gestureInfo.type;\n\t            event.gestureEvent = type;\n\n\t            proxy.handler.dispatchToElement(gestureInfo.target, type, gestureInfo.event);\n\t        }\n\t    }\n\n\t    // function onMSGestureChange(proxy, event) {\n\t    //     if (event.translationX || event.translationY) {\n\t    //         // mousemove is carried by MSGesture to reduce the sensitivity.\n\t    //         proxy.handler.dispatchToElement(event.target, 'mousemove', event);\n\t    //     }\n\t    //     if (event.scale !== 1) {\n\t    //         event.pinchX = event.offsetX;\n\t    //         event.pinchY = event.offsetY;\n\t    //         event.pinchScale = event.scale;\n\t    //         proxy.handler.dispatchToElement(event.target, 'pinch', event);\n\t    //     }\n\t    // }\n\n\t    /**\n\t     * Prevent mouse event from being dispatched after Touch Events action\n\t     * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>\n\t     * 1. Mobile browsers dispatch mouse events 300ms after touchend.\n\t     * 2. Chrome for Android dispatch mousedown for long-touch about 650ms\n\t     * Result: Blocking Mouse Events for 700ms.\n\t     */\n\t    function setTouchTimer(instance) {\n\t        instance._touching = true;\n\t        clearTimeout(instance._touchTimer);\n\t        instance._touchTimer = setTimeout(function () {\n\t            instance._touching = false;\n\t        }, 700);\n\t    }\n\n\n\t    var domHandlers = {\n\t        /**\n\t         * Mouse move handler\n\t         * @inner\n\t         * @param {Event} event\n\t         */\n\t        mousemove: function (event) {\n\t            event = normalizeEvent(this.dom, event);\n\n\t            this.trigger('mousemove', event);\n\t        },\n\n\t        /**\n\t         * Mouse out handler\n\t         * @inner\n\t         * @param {Event} event\n\t         */\n\t        mouseout: function (event) {\n\t            event = normalizeEvent(this.dom, event);\n\n\t            var element = event.toElement || event.relatedTarget;\n\t            if (element != this.dom) {\n\t                while (element && element.nodeType != 9) {\n\t                    // 忽略包含在root中的dom引起的mouseOut\n\t                    if (element === this.dom) {\n\t                        return;\n\t                    }\n\n\t                    element = element.parentNode;\n\t                }\n\t            }\n\n\t            this.trigger('mouseout', event);\n\t        },\n\n\t        /**\n\t         * Touch开始响应函数\n\t         * @inner\n\t         * @param {Event} event\n\t         */\n\t        touchstart: function (event) {\n\t            // Default mouse behaviour should not be disabled here.\n\t            // For example, page may needs to be slided.\n\t            event = normalizeEvent(this.dom, event);\n\n\t            // Mark touch, which is useful in distinguish touch and\n\t            // mouse event in upper applicatoin.\n\t            event.zrByTouch = true;\n\n\t            this._lastTouchMoment = new Date();\n\n\t            processGesture(this, event, 'start');\n\n\t            // In touch device, trigger `mousemove`(`mouseover`) should\n\t            // be triggered, and must before `mousedown` triggered.\n\t            domHandlers.mousemove.call(this, event);\n\n\t            domHandlers.mousedown.call(this, event);\n\n\t            setTouchTimer(this);\n\t        },\n\n\t        /**\n\t         * Touch移动响应函数\n\t         * @inner\n\t         * @param {Event} event\n\t         */\n\t        touchmove: function (event) {\n\n\t            event = normalizeEvent(this.dom, event);\n\n\t            // Mark touch, which is useful in distinguish touch and\n\t            // mouse event in upper applicatoin.\n\t            event.zrByTouch = true;\n\n\t            processGesture(this, event, 'change');\n\n\t            // Mouse move should always be triggered no matter whether\n\t            // there is gestrue event, because mouse move and pinch may\n\t            // be used at the same time.\n\t            domHandlers.mousemove.call(this, event);\n\n\t            setTouchTimer(this);\n\t        },\n\n\t        /**\n\t         * Touch结束响应函数\n\t         * @inner\n\t         * @param {Event} event\n\t         */\n\t        touchend: function (event) {\n\n\t            event = normalizeEvent(this.dom, event);\n\n\t            // Mark touch, which is useful in distinguish touch and\n\t            // mouse event in upper applicatoin.\n\t            event.zrByTouch = true;\n\n\t            processGesture(this, event, 'end');\n\n\t            domHandlers.mouseup.call(this, event);\n\n\t            // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is\n\t            // triggered in `touchstart`. This seems to be illogical, but by this mechanism,\n\t            // we can conveniently implement \"hover style\" in both PC and touch device just\n\t            // by listening to `mouseover` to add \"hover style\" and listening to `mouseout`\n\t            // to remove \"hover style\" on an element, without any additional code for\n\t            // compatibility. (`mouseout` will not be triggered in `touchend`, so \"hover\n\t            // style\" will remain for user view)\n\n\t            // click event should always be triggered no matter whether\n\t            // there is gestrue event. System click can not be prevented.\n\t            if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {\n\t                domHandlers.click.call(this, event);\n\t            }\n\n\t            setTouchTimer(this);\n\t        },\n\n\t        pointerdown: function (event) {\n\t            domHandlers.mousedown.call(this, event);\n\n\t            // if (useMSGuesture(this, event)) {\n\t            //     this._msGesture.addPointer(event.pointerId);\n\t            // }\n\t        },\n\n\t        pointermove: function (event) {\n\t            // FIXME\n\t            // pointermove is so sensitive that it always triggered when\n\t            // tap(click) on touch screen, which affect some judgement in\n\t            // upper application. So, we dont support mousemove on MS touch\n\t            // device yet.\n\t            if (!isPointerFromTouch(event)) {\n\t                domHandlers.mousemove.call(this, event);\n\t            }\n\t        },\n\n\t        pointerup: function (event) {\n\t            domHandlers.mouseup.call(this, event);\n\t        },\n\n\t        pointerout: function (event) {\n\t            // pointerout will be triggered when tap on touch screen\n\t            // (IE11+/Edge on MS Surface) after click event triggered,\n\t            // which is inconsistent with the mousout behavior we defined\n\t            // in touchend. So we unify them.\n\t            // (check domHandlers.touchend for detailed explanation)\n\t            if (!isPointerFromTouch(event)) {\n\t                domHandlers.mouseout.call(this, event);\n\t            }\n\t        }\n\t    };\n\n\t    function isPointerFromTouch(event) {\n\t        var pointerType = event.pointerType;\n\t        return pointerType === 'pen' || pointerType === 'touch';\n\t    }\n\n\t    // function useMSGuesture(handlerProxy, event) {\n\t    //     return isPointerFromTouch(event) && !!handlerProxy._msGesture;\n\t    // }\n\n\t    // Common handlers\n\t    zrUtil.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n\t        domHandlers[name] = function (event) {\n\t            event = normalizeEvent(this.dom, event);\n\t            this.trigger(name, event);\n\t        };\n\t    });\n\n\t    /**\n\t     * 为控制类实例初始化dom 事件处理函数\n\t     *\n\t     * @inner\n\t     * @param {module:zrender/Handler} instance 控制类实例\n\t     */\n\t    function initDomHandler(instance) {\n\t        zrUtil.each(touchHandlerNames, function (name) {\n\t            instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\n\t        });\n\n\t        zrUtil.each(pointerHandlerNames, function (name) {\n\t            instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\n\t        });\n\n\t        zrUtil.each(mouseHandlerNames, function (name) {\n\t            instance._handlers[name] = makeMouseHandler(domHandlers[name], instance);\n\t        });\n\n\t        function makeMouseHandler(fn, instance) {\n\t            return function () {\n\t                if (instance._touching) {\n\t                    return;\n\t                }\n\t                return fn.apply(instance, arguments);\n\t            };\n\t        }\n\t    }\n\n\n\t    function HandlerDomProxy(dom) {\n\t        Eventful.call(this);\n\n\t        this.dom = dom;\n\n\t        /**\n\t         * @private\n\t         * @type {boolean}\n\t         */\n\t        this._touching = false;\n\n\t        /**\n\t         * @private\n\t         * @type {number}\n\t         */\n\t        this._touchTimer;\n\n\t        /**\n\t         * @private\n\t         * @type {module:zrender/core/GestureMgr}\n\t         */\n\t        this._gestureMgr = new GestureMgr();\n\n\t        this._handlers = {};\n\n\t        initDomHandler(this);\n\n\t        if (env.pointerEventsSupported) { // Only IE11+/Edge\n\t            // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),\n\t            // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event\n\t            // at the same time.\n\t            // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on\n\t            // screen, which do not occurs in pointer event.\n\t            // So we use pointer event to both detect touch gesture and mouse behavior.\n\t            mountHandlers(pointerHandlerNames, this);\n\n\t            // FIXME\n\t            // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,\n\t            // which does not prevent defuault behavior occasionally (which may cause view port\n\t            // zoomed in but use can not zoom it back). And event.preventDefault() does not work.\n\t            // So we have to not to use MSGesture and not to support touchmove and pinch on MS\n\t            // touch screen. And we only support click behavior on MS touch screen now.\n\n\t            // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.\n\t            // We dont support touch on IE on win7.\n\t            // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>\n\t            // if (typeof MSGesture === 'function') {\n\t            //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line\n\t            //     dom.addEventListener('MSGestureChange', onMSGestureChange);\n\t            // }\n\t        }\n\t        else {\n\t            if (env.touchEventsSupported) {\n\t                mountHandlers(touchHandlerNames, this);\n\t                // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.\n\t                // addEventListener(root, 'mouseout', this._mouseoutHandler);\n\t            }\n\n\t            // 1. Considering some devices that both enable touch and mouse event (like on MS Surface\n\t            // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise\n\t            // mouse event can not be handle in those devices.\n\t            // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent\n\t            // mouseevent after touch event triggered, see `setTouchTimer`.\n\t            mountHandlers(mouseHandlerNames, this);\n\t        }\n\n\t        function mountHandlers(handlerNames, instance) {\n\t            zrUtil.each(handlerNames, function (name) {\n\t                addEventListener(dom, eventNameFix(name), instance._handlers[name]);\n\t            }, instance);\n\t        }\n\t    }\n\n\t    var handlerDomProxyProto = HandlerDomProxy.prototype;\n\t    handlerDomProxyProto.dispose = function () {\n\t        var handlerNames = mouseHandlerNames.concat(touchHandlerNames);\n\n\t        for (var i = 0; i < handlerNames.length; i++) {\n\t            var name = handlerNames[i];\n\t            removeEventListener(this.dom, eventNameFix(name), this._handlers[name]);\n\t        }\n\t    };\n\n\t    handlerDomProxyProto.setCursor = function (cursorStyle) {\n\t        this.dom.style.cursor = cursorStyle || 'default';\n\t    };\n\n\t    zrUtil.mixin(HandlerDomProxy, Eventful);\n\n\t    module.exports = HandlerDomProxy;\n\n\n/***/ },\n/* 91 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * Only implements needed gestures for mobile.\n\t */\n\n\n\t    var eventUtil = __webpack_require__(88);\n\n\t    var GestureMgr = function () {\n\n\t        /**\n\t         * @private\n\t         * @type {Array.<Object>}\n\t         */\n\t        this._track = [];\n\t    };\n\n\t    GestureMgr.prototype = {\n\n\t        constructor: GestureMgr,\n\n\t        recognize: function (event, target, root) {\n\t            this._doTrack(event, target, root);\n\t            return this._recognize(event);\n\t        },\n\n\t        clear: function () {\n\t            this._track.length = 0;\n\t            return this;\n\t        },\n\n\t        _doTrack: function (event, target, root) {\n\t            var touches = event.touches;\n\n\t            if (!touches) {\n\t                return;\n\t            }\n\n\t            var trackItem = {\n\t                points: [],\n\t                touches: [],\n\t                target: target,\n\t                event: event\n\t            };\n\n\t            for (var i = 0, len = touches.length; i < len; i++) {\n\t                var touch = touches[i];\n\t                var pos = eventUtil.clientToLocal(root, touch, {});\n\t                trackItem.points.push([pos.zrX, pos.zrY]);\n\t                trackItem.touches.push(touch);\n\t            }\n\n\t            this._track.push(trackItem);\n\t        },\n\n\t        _recognize: function (event) {\n\t            for (var eventName in recognizers) {\n\t                if (recognizers.hasOwnProperty(eventName)) {\n\t                    var gestureInfo = recognizers[eventName](this._track, event);\n\t                    if (gestureInfo) {\n\t                        return gestureInfo;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    };\n\n\t    function dist(pointPair) {\n\t        var dx = pointPair[1][0] - pointPair[0][0];\n\t        var dy = pointPair[1][1] - pointPair[0][1];\n\n\t        return Math.sqrt(dx * dx + dy * dy);\n\t    }\n\n\t    function center(pointPair) {\n\t        return [\n\t            (pointPair[0][0] + pointPair[1][0]) / 2,\n\t            (pointPair[0][1] + pointPair[1][1]) / 2\n\t        ];\n\t    }\n\n\t    var recognizers = {\n\n\t        pinch: function (track, event) {\n\t            var trackLen = track.length;\n\n\t            if (!trackLen) {\n\t                return;\n\t            }\n\n\t            var pinchEnd = (track[trackLen - 1] || {}).points;\n\t            var pinchPre = (track[trackLen - 2] || {}).points || pinchEnd;\n\n\t            if (pinchPre\n\t                && pinchPre.length > 1\n\t                && pinchEnd\n\t                && pinchEnd.length > 1\n\t            ) {\n\t                var pinchScale = dist(pinchEnd) / dist(pinchPre);\n\t                !isFinite(pinchScale) && (pinchScale = 1);\n\n\t                event.pinchScale = pinchScale;\n\n\t                var pinchCenter = center(pinchEnd);\n\t                event.pinchX = pinchCenter[0];\n\t                event.pinchY = pinchCenter[1];\n\n\t                return {\n\t                    type: 'pinch',\n\t                    target: track[0].target,\n\t                    event: event\n\t                };\n\t            }\n\t        }\n\n\t        // Only pinch currently.\n\t    };\n\n\t    module.exports = GestureMgr;\n\n\n\n/***/ },\n/* 92 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * Default canvas painter\n\t * @module zrender/Painter\n\t * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n\t *         errorrik (errorrik@gmail.com)\n\t *         pissang (https://www.github.com/pissang)\n\t */\n\t \n\n\t    var config = __webpack_require__(41);\n\t    var util = __webpack_require__(4);\n\t    var log = __webpack_require__(40);\n\t    var BoundingRect = __webpack_require__(9);\n\t    var timsort = __webpack_require__(86);\n\n\t    var Layer = __webpack_require__(93);\n\n\t    var requestAnimationFrame = __webpack_require__(89);\n\n\t    // PENDIGN\n\t    // Layer exceeds MAX_PROGRESSIVE_LAYER_NUMBER may have some problem when flush directly second time.\n\t    //\n\t    // Maximum progressive layer. When exceeding this number. All elements will be drawed in the last layer.\n\t    var MAX_PROGRESSIVE_LAYER_NUMBER = 5;\n\n\t    function parseInt10(val) {\n\t        return parseInt(val, 10);\n\t    }\n\n\t    function isLayerValid(layer) {\n\t        if (!layer) {\n\t            return false;\n\t        }\n\n\t        if (layer.isBuildin) {\n\t            return true;\n\t        }\n\n\t        if (typeof(layer.resize) !== 'function'\n\t            || typeof(layer.refresh) !== 'function'\n\t        ) {\n\t            return false;\n\t        }\n\n\t        return true;\n\t    }\n\n\t    function preProcessLayer(layer) {\n\t        layer.__unusedCount++;\n\t    }\n\n\t    function postProcessLayer(layer) {\n\t        if (layer.__unusedCount == 1) {\n\t            layer.clear();\n\t        }\n\t    }\n\n\t    var tmpRect = new BoundingRect(0, 0, 0, 0);\n\t    var viewRect = new BoundingRect(0, 0, 0, 0);\n\t    function isDisplayableCulled(el, width, height) {\n\t        tmpRect.copy(el.getBoundingRect());\n\t        if (el.transform) {\n\t            tmpRect.applyTransform(el.transform);\n\t        }\n\t        viewRect.width = width;\n\t        viewRect.height = height;\n\t        return !tmpRect.intersect(viewRect);\n\t    }\n\n\t    function isClipPathChanged(clipPaths, prevClipPaths) {\n\t        if (clipPaths == prevClipPaths) { // Can both be null or undefined\n\t            return false;\n\t        }\n\n\t        if (!clipPaths || !prevClipPaths || (clipPaths.length !== prevClipPaths.length)) {\n\t            return true;\n\t        }\n\t        for (var i = 0; i < clipPaths.length; i++) {\n\t            if (clipPaths[i] !== prevClipPaths[i]) {\n\t                return true;\n\t            }\n\t        }\n\t    }\n\n\t    function doClip(clipPaths, ctx) {\n\t        for (var i = 0; i < clipPaths.length; i++) {\n\t            var clipPath = clipPaths[i];\n\t            var path = clipPath.path;\n\n\t            clipPath.setTransform(ctx);\n\t            path.beginPath(ctx);\n\t            clipPath.buildPath(path, clipPath.shape);\n\t            ctx.clip();\n\t            // Transform back\n\t            clipPath.restoreTransform(ctx);\n\t        }\n\t    }\n\n\t    function createRoot(width, height) {\n\t        var domRoot = document.createElement('div');\n\n\t        // domRoot.onselectstart = returnFalse; // 避免页面选中的尴尬\n\t        domRoot.style.cssText = [\n\t            'position:relative',\n\t            'overflow:hidden',\n\t            'width:' + width + 'px',\n\t            'height:' + height + 'px',\n\t            'padding:0',\n\t            'margin:0',\n\t            'border-width:0'\n\t        ].join(';') + ';';\n\n\t        return domRoot;\n\t    }\n\n\t    /**\n\t     * @alias module:zrender/Painter\n\t     * @constructor\n\t     * @param {HTMLElement} root 绘图容器\n\t     * @param {module:zrender/Storage} storage\n\t     * @param {Ojbect} opts\n\t     */\n\t    var Painter = function (root, storage, opts) {\n\t        // In node environment using node-canvas\n\t        var singleCanvas = !root.nodeName // In node ?\n\t            || root.nodeName.toUpperCase() === 'CANVAS';\n\n\t        this._opts = opts = util.extend({}, opts || {});\n\n\t        /**\n\t         * @type {number}\n\t         */\n\t        this.dpr = opts.devicePixelRatio || config.devicePixelRatio;\n\t        /**\n\t         * @type {boolean}\n\t         * @private\n\t         */\n\t        this._singleCanvas = singleCanvas;\n\t        /**\n\t         * 绘图容器\n\t         * @type {HTMLElement}\n\t         */\n\t        this.root = root;\n\n\t        var rootStyle = root.style;\n\n\t        if (rootStyle) {\n\t            rootStyle['-webkit-tap-highlight-color'] = 'transparent';\n\t            rootStyle['-webkit-user-select'] =\n\t            rootStyle['user-select'] =\n\t            rootStyle['-webkit-touch-callout'] = 'none';\n\n\t            root.innerHTML = '';\n\t        }\n\n\t        /**\n\t         * @type {module:zrender/Storage}\n\t         */\n\t        this.storage = storage;\n\n\t        /**\n\t         * @type {Array.<number>}\n\t         * @private\n\t         */\n\t        var zlevelList = this._zlevelList = [];\n\n\t        /**\n\t         * @type {Object.<string, module:zrender/Layer>}\n\t         * @private\n\t         */\n\t        var layers = this._layers = {};\n\n\t        /**\n\t         * @type {Object.<string, Object>}\n\t         * @type {private}\n\t         */\n\t        this._layerConfig = {};\n\n\t        if (!singleCanvas) {\n\t            this._width = this._getSize(0);\n\t            this._height = this._getSize(1);\n\n\t            var domRoot = this._domRoot = createRoot(\n\t                this._width, this._height\n\t            );\n\t            root.appendChild(domRoot);\n\t        }\n\t        else {\n\t            // Use canvas width and height directly\n\t            var width = root.width;\n\t            var height = root.height;\n\t            this._width = width;\n\t            this._height = height;\n\n\t            // Create layer if only one given canvas\n\t            // Device pixel ratio is fixed to 1 because given canvas has its specified width and height\n\t            var mainLayer = new Layer(root, this, 1);\n\t            mainLayer.initContext();\n\t            // FIXME Use canvas width and height\n\t            // mainLayer.resize(width, height);\n\t            layers[0] = mainLayer;\n\t            zlevelList.push(0);\n\n\t            this._domRoot = root;\n\t        }\n\n\t        this.pathToImage = this._createPathToImage();\n\n\t        // Layers for progressive rendering\n\t        this._progressiveLayers = [];\n\n\t        /**\n\t         * @type {module:zrender/Layer}\n\t         * @private\n\t         */\n\t        this._hoverlayer;\n\n\t        this._hoverElements = [];\n\t    };\n\n\t    Painter.prototype = {\n\n\t        constructor: Painter,\n\n\t        /**\n\t         * If painter use a single canvas\n\t         * @return {boolean}\n\t         */\n\t        isSingleCanvas: function () {\n\t            return this._singleCanvas;\n\t        },\n\t        /**\n\t         * @return {HTMLDivElement}\n\t         */\n\t        getViewportRoot: function () {\n\t            return this._domRoot;\n\t        },\n\n\t        /**\n\t         * 刷新\n\t         * @param {boolean} [paintAll=false] 强制绘制所有displayable\n\t         */\n\t        refresh: function (paintAll) {\n\n\t            var list = this.storage.getDisplayList(true);\n\n\t            var zlevelList = this._zlevelList;\n\n\t            this._paintList(list, paintAll);\n\n\t            // Paint custum layers\n\t            for (var i = 0; i < zlevelList.length; i++) {\n\t                var z = zlevelList[i];\n\t                var layer = this._layers[z];\n\t                if (!layer.isBuildin && layer.refresh) {\n\t                    layer.refresh();\n\t                }\n\t            }\n\n\t            this.refreshHover();\n\n\t            if (this._progressiveLayers.length) {\n\t                this._startProgessive();\n\t            }\n\n\t            return this;\n\t        },\n\n\t        addHover: function (el, hoverStyle) {\n\t            if (el.__hoverMir) {\n\t                return;\n\t            }\n\t            var elMirror = new el.constructor({\n\t                style: el.style,\n\t                shape: el.shape\n\t            });\n\t            elMirror.__from = el;\n\t            el.__hoverMir = elMirror;\n\t            elMirror.setStyle(hoverStyle);\n\t            this._hoverElements.push(elMirror);\n\t        },\n\n\t        removeHover: function (el) {\n\t            var elMirror = el.__hoverMir;\n\t            var hoverElements = this._hoverElements;\n\t            var idx = util.indexOf(hoverElements, elMirror);\n\t            if (idx >= 0) {\n\t                hoverElements.splice(idx, 1);\n\t            }\n\t            el.__hoverMir = null;\n\t        },\n\n\t        clearHover: function (el) {\n\t            var hoverElements = this._hoverElements;\n\t            for (var i = 0; i < hoverElements.length; i++) {\n\t                var from = hoverElements[i].__from;\n\t                if (from) {\n\t                    from.__hoverMir = null;\n\t                }\n\t            }\n\t            hoverElements.length = 0;\n\t        },\n\n\t        refreshHover: function () {\n\t            var hoverElements = this._hoverElements;\n\t            var len = hoverElements.length;\n\t            var hoverLayer = this._hoverlayer;\n\t            hoverLayer && hoverLayer.clear();\n\n\t            if (!len) {\n\t                return;\n\t            }\n\t            timsort(hoverElements, this.storage.displayableSortFunc);\n\n\t            // Use a extream large zlevel\n\t            // FIXME?\n\t            if (!hoverLayer) {\n\t                hoverLayer = this._hoverlayer = this.getLayer(1e5);\n\t            }\n\n\t            var scope = {};\n\t            hoverLayer.ctx.save();\n\t            for (var i = 0; i < len;) {\n\t                var el = hoverElements[i];\n\t                var originalEl = el.__from;\n\t                // Original el is removed\n\t                // PENDING\n\t                if (!(originalEl && originalEl.__zr)) {\n\t                    hoverElements.splice(i, 1);\n\t                    originalEl.__hoverMir = null;\n\t                    len--;\n\t                    continue;\n\t                }\n\t                i++;\n\n\t                // Use transform\n\t                // FIXME style and shape ?\n\t                if (!originalEl.invisible) {\n\t                    el.transform = originalEl.transform;\n\t                    el.invTransform = originalEl.invTransform;\n\t                    el.__clipPaths = originalEl.__clipPaths;\n\t                    // el.\n\t                    this._doPaintEl(el, hoverLayer, true, scope);\n\t                }\n\t            }\n\t            hoverLayer.ctx.restore();\n\t        },\n\n\t        _startProgessive: function () {\n\t            var self = this;\n\n\t            if (!self._furtherProgressive) {\n\t                return;\n\t            }\n\n\t            // Use a token to stop progress steps triggered by\n\t            // previous zr.refresh calling.\n\t            var token = self._progressiveToken = +new Date();\n\n\t            self._progress++;\n\t            requestAnimationFrame(step);\n\n\t            function step() {\n\t                // In case refreshed or disposed\n\t                if (token === self._progressiveToken && self.storage) {\n\n\t                    self._doPaintList(self.storage.getDisplayList());\n\n\t                    if (self._furtherProgressive) {\n\t                        self._progress++;\n\t                        requestAnimationFrame(step);\n\t                    }\n\t                    else {\n\t                        self._progressiveToken = -1;\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        _clearProgressive: function () {\n\t            this._progressiveToken = -1;\n\t            this._progress = 0;\n\t            util.each(this._progressiveLayers, function (layer) {\n\t                layer.__dirty && layer.clear();\n\t            });\n\t        },\n\n\t        _paintList: function (list, paintAll) {\n\n\t            if (paintAll == null) {\n\t                paintAll = false;\n\t            }\n\n\t            this._updateLayerStatus(list);\n\n\t            this._clearProgressive();\n\n\t            this.eachBuildinLayer(preProcessLayer);\n\n\t            this._doPaintList(list, paintAll);\n\n\t            this.eachBuildinLayer(postProcessLayer);\n\t        },\n\n\t        _doPaintList: function (list, paintAll) {\n\t            var currentLayer;\n\t            var currentZLevel;\n\t            var ctx;\n\n\t            // var invTransform = [];\n\t            var scope;\n\n\t            var progressiveLayerIdx = 0;\n\t            var currentProgressiveLayer;\n\n\t            var width = this._width;\n\t            var height = this._height;\n\t            var layerProgress;\n\t            var frame = this._progress;\n\t            function flushProgressiveLayer(layer) {\n\t                var dpr = ctx.dpr || 1;\n\t                ctx.save();\n\t                ctx.globalAlpha = 1;\n\t                ctx.shadowBlur = 0;\n\t                // Avoid layer don't clear in next progressive frame\n\t                currentLayer.__dirty = true;\n\t                ctx.setTransform(1, 0, 0, 1, 0, 0);\n\t                ctx.drawImage(layer.dom, 0, 0, width * dpr, height * dpr);\n\t                ctx.restore();\n\t            }\n\n\t            for (var i = 0, l = list.length; i < l; i++) {\n\t                var el = list[i];\n\t                var elZLevel = this._singleCanvas ? 0 : el.zlevel;\n\n\t                var elFrame = el.__frame;\n\n\t                // Flush at current context\n\t                // PENDING\n\t                if (elFrame < 0 && currentProgressiveLayer) {\n\t                    flushProgressiveLayer(currentProgressiveLayer);\n\t                    currentProgressiveLayer = null;\n\t                }\n\n\t                // Change draw layer\n\t                if (currentZLevel !== elZLevel) {\n\t                    if (ctx) {\n\t                        ctx.restore();\n\t                    }\n\n\t                    // Reset scope\n\t                    scope = {};\n\n\t                    // Only 0 zlevel if only has one canvas\n\t                    currentZLevel = elZLevel;\n\t                    currentLayer = this.getLayer(currentZLevel);\n\n\t                    if (!currentLayer.isBuildin) {\n\t                        log(\n\t                            'ZLevel ' + currentZLevel\n\t                            + ' has been used by unkown layer ' + currentLayer.id\n\t                        );\n\t                    }\n\n\t                    ctx = currentLayer.ctx;\n\t                    ctx.save();\n\n\t                    // Reset the count\n\t                    currentLayer.__unusedCount = 0;\n\n\t                    if (currentLayer.__dirty || paintAll) {\n\t                        currentLayer.clear();\n\t                    }\n\t                }\n\n\t                if (!(currentLayer.__dirty || paintAll)) {\n\t                    continue;\n\t                }\n\n\t                if (elFrame >= 0) {\n\t                    // Progressive layer changed\n\t                    if (!currentProgressiveLayer) {\n\t                        currentProgressiveLayer = this._progressiveLayers[\n\t                            Math.min(progressiveLayerIdx++, MAX_PROGRESSIVE_LAYER_NUMBER - 1)\n\t                        ];\n\n\t                        currentProgressiveLayer.ctx.save();\n\t                        currentProgressiveLayer.renderScope = {};\n\n\t                        if (currentProgressiveLayer\n\t                            && (currentProgressiveLayer.__progress > currentProgressiveLayer.__maxProgress)\n\t                        ) {\n\t                            // flushProgressiveLayer(currentProgressiveLayer);\n\t                            // Quick jump all progressive elements\n\t                            // All progressive element are not dirty, jump over and flush directly\n\t                            i = currentProgressiveLayer.__nextIdxNotProg - 1;\n\t                            // currentProgressiveLayer = null;\n\t                            continue;\n\t                        }\n\n\t                        layerProgress = currentProgressiveLayer.__progress;\n\n\t                        if (!currentProgressiveLayer.__dirty) {\n\t                            // Keep rendering\n\t                            frame = layerProgress;\n\t                        }\n\n\t                        currentProgressiveLayer.__progress = frame + 1;\n\t                    }\n\n\t                    if (elFrame === frame) {\n\t                        this._doPaintEl(el, currentProgressiveLayer, true, currentProgressiveLayer.renderScope);\n\t                    }\n\t                }\n\t                else {\n\t                    this._doPaintEl(el, currentLayer, paintAll, scope);\n\t                }\n\n\t                el.__dirty = false;\n\t            }\n\n\t            if (currentProgressiveLayer) {\n\t                flushProgressiveLayer(currentProgressiveLayer);\n\t            }\n\n\t            // Restore the lastLayer ctx\n\t            ctx && ctx.restore();\n\t            // If still has clipping state\n\t            // if (scope.prevElClipPaths) {\n\t            //     ctx.restore();\n\t            // }\n\n\t            this._furtherProgressive = false;\n\t            util.each(this._progressiveLayers, function (layer) {\n\t                if (layer.__maxProgress >= layer.__progress) {\n\t                    this._furtherProgressive = true;\n\t                }\n\t            }, this);\n\t        },\n\n\t        _doPaintEl: function (el, currentLayer, forcePaint, scope) {\n\t            var ctx = currentLayer.ctx;\n\t            var m = el.transform;\n\t            if (\n\t                (currentLayer.__dirty || forcePaint)\n\t                // Ignore invisible element\n\t                && !el.invisible\n\t                // Ignore transparent element\n\t                && el.style.opacity !== 0\n\t                // Ignore scale 0 element, in some environment like node-canvas\n\t                // Draw a scale 0 element can cause all following draw wrong\n\t                // And setTransform with scale 0 will cause set back transform failed.\n\t                && !(m && !m[0] && !m[3])\n\t                // Ignore culled element\n\t                && !(el.culling && isDisplayableCulled(el, this._width, this._height))\n\t            ) {\n\n\t                var clipPaths = el.__clipPaths;\n\n\t                // Optimize when clipping on group with several elements\n\t                if (scope.prevClipLayer !== currentLayer\n\t                    || isClipPathChanged(clipPaths, scope.prevElClipPaths)\n\t                ) {\n\t                    // If has previous clipping state, restore from it\n\t                    if (scope.prevElClipPaths) {\n\t                        scope.prevClipLayer.ctx.restore();\n\t                        scope.prevClipLayer = scope.prevElClipPaths = null;\n\n\t                        // Reset prevEl since context has been restored\n\t                        scope.prevEl = null;\n\t                    }\n\t                    // New clipping state\n\t                    if (clipPaths) {\n\t                        ctx.save();\n\t                        doClip(clipPaths, ctx);\n\t                        scope.prevClipLayer = currentLayer;\n\t                        scope.prevElClipPaths = clipPaths;\n\t                    }\n\t                }\n\t                el.beforeBrush && el.beforeBrush(ctx);\n\n\t                el.brush(ctx, scope.prevEl || null);\n\t                scope.prevEl = el;\n\n\t                el.afterBrush && el.afterBrush(ctx);\n\t            }\n\t        },\n\n\t        /**\n\t         * 获取 zlevel 所在层，如果不存在则会创建一个新的层\n\t         * @param {number} zlevel\n\t         * @return {module:zrender/Layer}\n\t         */\n\t        getLayer: function (zlevel) {\n\t            if (this._singleCanvas) {\n\t                return this._layers[0];\n\t            }\n\n\t            var layer = this._layers[zlevel];\n\t            if (!layer) {\n\t                // Create a new layer\n\t                layer = new Layer('zr_' + zlevel, this, this.dpr);\n\t                layer.isBuildin = true;\n\n\t                if (this._layerConfig[zlevel]) {\n\t                    util.merge(layer, this._layerConfig[zlevel], true);\n\t                }\n\n\t                this.insertLayer(zlevel, layer);\n\n\t                // Context is created after dom inserted to document\n\t                // Or excanvas will get 0px clientWidth and clientHeight\n\t                layer.initContext();\n\t            }\n\n\t            return layer;\n\t        },\n\n\t        insertLayer: function (zlevel, layer) {\n\n\t            var layersMap = this._layers;\n\t            var zlevelList = this._zlevelList;\n\t            var len = zlevelList.length;\n\t            var prevLayer = null;\n\t            var i = -1;\n\t            var domRoot = this._domRoot;\n\n\t            if (layersMap[zlevel]) {\n\t                log('ZLevel ' + zlevel + ' has been used already');\n\t                return;\n\t            }\n\t            // Check if is a valid layer\n\t            if (!isLayerValid(layer)) {\n\t                log('Layer of zlevel ' + zlevel + ' is not valid');\n\t                return;\n\t            }\n\n\t            if (len > 0 && zlevel > zlevelList[0]) {\n\t                for (i = 0; i < len - 1; i++) {\n\t                    if (\n\t                        zlevelList[i] < zlevel\n\t                        && zlevelList[i + 1] > zlevel\n\t                    ) {\n\t                        break;\n\t                    }\n\t                }\n\t                prevLayer = layersMap[zlevelList[i]];\n\t            }\n\t            zlevelList.splice(i + 1, 0, zlevel);\n\n\t            if (prevLayer) {\n\t                var prevDom = prevLayer.dom;\n\t                if (prevDom.nextSibling) {\n\t                    domRoot.insertBefore(\n\t                        layer.dom,\n\t                        prevDom.nextSibling\n\t                    );\n\t                }\n\t                else {\n\t                    domRoot.appendChild(layer.dom);\n\t                }\n\t            }\n\t            else {\n\t                if (domRoot.firstChild) {\n\t                    domRoot.insertBefore(layer.dom, domRoot.firstChild);\n\t                }\n\t                else {\n\t                    domRoot.appendChild(layer.dom);\n\t                }\n\t            }\n\n\t            layersMap[zlevel] = layer;\n\t        },\n\n\t        // Iterate each layer\n\t        eachLayer: function (cb, context) {\n\t            var zlevelList = this._zlevelList;\n\t            var z;\n\t            var i;\n\t            for (i = 0; i < zlevelList.length; i++) {\n\t                z = zlevelList[i];\n\t                cb.call(context, this._layers[z], z);\n\t            }\n\t        },\n\n\t        // Iterate each buildin layer\n\t        eachBuildinLayer: function (cb, context) {\n\t            var zlevelList = this._zlevelList;\n\t            var layer;\n\t            var z;\n\t            var i;\n\t            for (i = 0; i < zlevelList.length; i++) {\n\t                z = zlevelList[i];\n\t                layer = this._layers[z];\n\t                if (layer.isBuildin) {\n\t                    cb.call(context, layer, z);\n\t                }\n\t            }\n\t        },\n\n\t        // Iterate each other layer except buildin layer\n\t        eachOtherLayer: function (cb, context) {\n\t            var zlevelList = this._zlevelList;\n\t            var layer;\n\t            var z;\n\t            var i;\n\t            for (i = 0; i < zlevelList.length; i++) {\n\t                z = zlevelList[i];\n\t                layer = this._layers[z];\n\t                if (! layer.isBuildin) {\n\t                    cb.call(context, layer, z);\n\t                }\n\t            }\n\t        },\n\n\t        /**\n\t         * 获取所有已创建的层\n\t         * @param {Array.<module:zrender/Layer>} [prevLayer]\n\t         */\n\t        getLayers: function () {\n\t            return this._layers;\n\t        },\n\n\t        _updateLayerStatus: function (list) {\n\n\t            var layers = this._layers;\n\t            var progressiveLayers = this._progressiveLayers;\n\n\t            var elCountsLastFrame = {};\n\t            var progressiveElCountsLastFrame = {};\n\n\t            this.eachBuildinLayer(function (layer, z) {\n\t                elCountsLastFrame[z] = layer.elCount;\n\t                layer.elCount = 0;\n\t                layer.__dirty = false;\n\t            });\n\n\t            util.each(progressiveLayers, function (layer, idx) {\n\t                progressiveElCountsLastFrame[idx] = layer.elCount;\n\t                layer.elCount = 0;\n\t                layer.__dirty = false;\n\t            });\n\n\t            var progressiveLayerCount = 0;\n\t            var currentProgressiveLayer;\n\t            var lastProgressiveKey;\n\t            var frameCount = 0;\n\t            for (var i = 0, l = list.length; i < l; i++) {\n\t                var el = list[i];\n\t                var zlevel = this._singleCanvas ? 0 : el.zlevel;\n\t                var layer = layers[zlevel];\n\t                var elProgress = el.progressive;\n\t                if (layer) {\n\t                    layer.elCount++;\n\t                    layer.__dirty = layer.__dirty || el.__dirty;\n\t                }\n\n\t                /////// Update progressive\n\t                if (elProgress >= 0) {\n\t                    // Fix wrong progressive sequence problem.\n\t                    if (lastProgressiveKey !== elProgress) {\n\t                        lastProgressiveKey = elProgress;\n\t                        frameCount++;\n\t                    }\n\t                    var elFrame = el.__frame = frameCount - 1;\n\t                    if (!currentProgressiveLayer) {\n\t                        var idx = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER - 1);\n\t                        currentProgressiveLayer = progressiveLayers[idx];\n\t                        if (!currentProgressiveLayer) {\n\t                            currentProgressiveLayer = progressiveLayers[idx] = new Layer(\n\t                                'progressive', this, this.dpr\n\t                            );\n\t                            currentProgressiveLayer.initContext();\n\t                        }\n\t                        currentProgressiveLayer.__maxProgress = 0;\n\t                    }\n\t                    currentProgressiveLayer.__dirty = currentProgressiveLayer.__dirty || el.__dirty;\n\t                    currentProgressiveLayer.elCount++;\n\n\t                    currentProgressiveLayer.__maxProgress = Math.max(\n\t                        currentProgressiveLayer.__maxProgress, elFrame\n\t                    );\n\n\t                    if (currentProgressiveLayer.__maxProgress >= currentProgressiveLayer.__progress) {\n\t                        // Should keep rendering this  layer because progressive rendering is not finished yet\n\t                        layer.__dirty = true;\n\t                    }\n\t                }\n\t                else {\n\t                    el.__frame = -1;\n\n\t                    if (currentProgressiveLayer) {\n\t                        currentProgressiveLayer.__nextIdxNotProg = i;\n\t                        progressiveLayerCount++;\n\t                        currentProgressiveLayer = null;\n\t                    }\n\t                }\n\t            }\n\n\t            if (currentProgressiveLayer) {\n\t                progressiveLayerCount++;\n\t                currentProgressiveLayer.__nextIdxNotProg = i;\n\t            }\n\n\t            // 层中的元素数量有发生变化\n\t            this.eachBuildinLayer(function (layer, z) {\n\t                if (elCountsLastFrame[z] !== layer.elCount) {\n\t                    layer.__dirty = true;\n\t                }\n\t            });\n\n\t            progressiveLayers.length = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER);\n\t            util.each(progressiveLayers, function (layer, idx) {\n\t                if (progressiveElCountsLastFrame[idx] !== layer.elCount) {\n\t                    el.__dirty = true;\n\t                }\n\t                if (layer.__dirty) {\n\t                    layer.__progress = 0;\n\t                }\n\t            });\n\t        },\n\n\t        /**\n\t         * 清除hover层外所有内容\n\t         */\n\t        clear: function () {\n\t            this.eachBuildinLayer(this._clearLayer);\n\t            return this;\n\t        },\n\n\t        _clearLayer: function (layer) {\n\t            layer.clear();\n\t        },\n\n\t        /**\n\t         * 修改指定zlevel的绘制参数\n\t         *\n\t         * @param {string} zlevel\n\t         * @param {Object} config 配置对象\n\t         * @param {string} [config.clearColor=0] 每次清空画布的颜色\n\t         * @param {string} [config.motionBlur=false] 是否开启动态模糊\n\t         * @param {number} [config.lastFrameAlpha=0.7]\n\t         *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显\n\t         */\n\t        configLayer: function (zlevel, config) {\n\t            if (config) {\n\t                var layerConfig = this._layerConfig;\n\t                if (!layerConfig[zlevel]) {\n\t                    layerConfig[zlevel] = config;\n\t                }\n\t                else {\n\t                    util.merge(layerConfig[zlevel], config, true);\n\t                }\n\n\t                var layer = this._layers[zlevel];\n\n\t                if (layer) {\n\t                    util.merge(layer, layerConfig[zlevel], true);\n\t                }\n\t            }\n\t        },\n\n\t        /**\n\t         * 删除指定层\n\t         * @param {number} zlevel 层所在的zlevel\n\t         */\n\t        delLayer: function (zlevel) {\n\t            var layers = this._layers;\n\t            var zlevelList = this._zlevelList;\n\t            var layer = layers[zlevel];\n\t            if (!layer) {\n\t                return;\n\t            }\n\t            layer.dom.parentNode.removeChild(layer.dom);\n\t            delete layers[zlevel];\n\n\t            zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);\n\t        },\n\n\t        /**\n\t         * 区域大小变化后重绘\n\t         */\n\t        resize: function (width, height) {\n\t            var domRoot = this._domRoot;\n\t            // FIXME Why ?\n\t            domRoot.style.display = 'none';\n\n\t            // Save input w/h\n\t            var opts = this._opts;\n\t            width != null && (opts.width = width);\n\t            height != null && (opts.height = height);\n\n\t            width = this._getSize(0);\n\t            height = this._getSize(1);\n\n\t            domRoot.style.display = '';\n\n\t            // 优化没有实际改变的resize\n\t            if (this._width != width || height != this._height) {\n\t                domRoot.style.width = width + 'px';\n\t                domRoot.style.height = height + 'px';\n\n\t                for (var id in this._layers) {\n\t                    if (this._layers.hasOwnProperty(id)) {\n\t                        this._layers[id].resize(width, height);\n\t                    }\n\t                }\n\t                util.each(this._progressiveLayers, function (layer) {\n\t                    layer.resize(width, height);\n\t                });\n\n\t                this.refresh(true);\n\t            }\n\n\t            this._width = width;\n\t            this._height = height;\n\n\t            return this;\n\t        },\n\n\t        /**\n\t         * 清除单独的一个层\n\t         * @param {number} zlevel\n\t         */\n\t        clearLayer: function (zlevel) {\n\t            var layer = this._layers[zlevel];\n\t            if (layer) {\n\t                layer.clear();\n\t            }\n\t        },\n\n\t        /**\n\t         * 释放\n\t         */\n\t        dispose: function () {\n\t            this.root.innerHTML = '';\n\n\t            this.root =\n\t            this.storage =\n\n\t            this._domRoot =\n\t            this._layers = null;\n\t        },\n\n\t        /**\n\t         * Get canvas which has all thing rendered\n\t         * @param {Object} opts\n\t         * @param {string} [opts.backgroundColor]\n\t         */\n\t        getRenderedCanvas: function (opts) {\n\t            opts = opts || {};\n\t            if (this._singleCanvas) {\n\t                return this._layers[0].dom;\n\t            }\n\n\t            var imageLayer = new Layer('image', this, opts.pixelRatio || this.dpr);\n\t            imageLayer.initContext();\n\n\t            imageLayer.clearColor = opts.backgroundColor;\n\t            imageLayer.clear();\n\n\t            var displayList = this.storage.getDisplayList(true);\n\n\t            var scope = {};\n\t            for (var i = 0; i < displayList.length; i++) {\n\t                var el = displayList[i];\n\t                this._doPaintEl(el, imageLayer, true, scope);\n\t            }\n\n\t            return imageLayer.dom;\n\t        },\n\t        /**\n\t         * 获取绘图区域宽度\n\t         */\n\t        getWidth: function () {\n\t            return this._width;\n\t        },\n\n\t        /**\n\t         * 获取绘图区域高度\n\t         */\n\t        getHeight: function () {\n\t            return this._height;\n\t        },\n\n\t        _getSize: function (whIdx) {\n\t            var opts = this._opts;\n\t            var wh = ['width', 'height'][whIdx];\n\t            var cwh = ['clientWidth', 'clientHeight'][whIdx];\n\t            var plt = ['paddingLeft', 'paddingTop'][whIdx];\n\t            var prb = ['paddingRight', 'paddingBottom'][whIdx];\n\n\t            if (opts[wh] != null && opts[wh] !== 'auto') {\n\t                return parseFloat(opts[wh]);\n\t            }\n\n\t            var root = this.root;\n\t            var stl = document.defaultView.getComputedStyle(root);\n\n\t            return (\n\t                (root[cwh] || parseInt10(stl[wh]) || parseInt10(root.style[wh]))\n\t                - (parseInt10(stl[plt]) || 0)\n\t                - (parseInt10(stl[prb]) || 0)\n\t            ) | 0;\n\t        },\n\n\t        _pathToImage: function (id, path, width, height, dpr) {\n\t            var canvas = document.createElement('canvas');\n\t            var ctx = canvas.getContext('2d');\n\n\t            canvas.width = width * dpr;\n\t            canvas.height = height * dpr;\n\n\t            ctx.clearRect(0, 0, width * dpr, height * dpr);\n\n\t            var pathTransform = {\n\t                position: path.position,\n\t                rotation: path.rotation,\n\t                scale: path.scale\n\t            };\n\t            path.position = [0, 0, 0];\n\t            path.rotation = 0;\n\t            path.scale = [1, 1];\n\t            if (path) {\n\t                path.brush(ctx);\n\t            }\n\n\t            var ImageShape = __webpack_require__(61);\n\t            var imgShape = new ImageShape({\n\t                id: id,\n\t                style: {\n\t                    x: 0,\n\t                    y: 0,\n\t                    image: canvas\n\t                }\n\t            });\n\n\t            if (pathTransform.position != null) {\n\t                imgShape.position = path.position = pathTransform.position;\n\t            }\n\n\t            if (pathTransform.rotation != null) {\n\t                imgShape.rotation = path.rotation = pathTransform.rotation;\n\t            }\n\n\t            if (pathTransform.scale != null) {\n\t                imgShape.scale = path.scale = pathTransform.scale;\n\t            }\n\n\t            return imgShape;\n\t        },\n\n\t        _createPathToImage: function () {\n\t            var me = this;\n\n\t            return function (id, e, width, height) {\n\t                return me._pathToImage(\n\t                    id, e, width, height, me.dpr\n\t                );\n\t            };\n\t        }\n\t    };\n\n\t    module.exports = Painter;\n\n\n\n/***/ },\n/* 93 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @module zrender/Layer\n\t * @author pissang(https://www.github.com/pissang)\n\t */\n\n\n\t    var util = __webpack_require__(4);\n\t    var config = __webpack_require__(41);\n\t    var Style = __webpack_require__(47);\n\t    var Pattern = __webpack_require__(59);\n\n\t    function returnFalse() {\n\t        return false;\n\t    }\n\n\t    /**\n\t     * 创建dom\n\t     *\n\t     * @inner\n\t     * @param {string} id dom id 待用\n\t     * @param {string} type dom type，such as canvas, div etc.\n\t     * @param {Painter} painter painter instance\n\t     * @param {number} number\n\t     */\n\t    function createDom(id, type, painter, dpr) {\n\t        var newDom = document.createElement(type);\n\t        var width = painter.getWidth();\n\t        var height = painter.getHeight();\n\n\t        var newDomStyle = newDom.style;\n\t        // 没append呢，请原谅我这样写，清晰~\n\t        newDomStyle.position = 'absolute';\n\t        newDomStyle.left = 0;\n\t        newDomStyle.top = 0;\n\t        newDomStyle.width = width + 'px';\n\t        newDomStyle.height = height + 'px';\n\t        newDom.width = width * dpr;\n\t        newDom.height = height * dpr;\n\n\t        // id不作为索引用，避免可能造成的重名，定义为私有属性\n\t        newDom.setAttribute('data-zr-dom-id', id);\n\t        return newDom;\n\t    }\n\n\t    /**\n\t     * @alias module:zrender/Layer\n\t     * @constructor\n\t     * @extends module:zrender/mixin/Transformable\n\t     * @param {string} id\n\t     * @param {module:zrender/Painter} painter\n\t     * @param {number} [dpr]\n\t     */\n\t    var Layer = function(id, painter, dpr) {\n\t        var dom;\n\t        dpr = dpr || config.devicePixelRatio;\n\t        if (typeof id === 'string') {\n\t            dom = createDom(id, 'canvas', painter, dpr);\n\t        }\n\t        // Not using isDom because in node it will return false\n\t        else if (util.isObject(id)) {\n\t            dom = id;\n\t            id = dom.id;\n\t        }\n\t        this.id = id;\n\t        this.dom = dom;\n\n\t        var domStyle = dom.style;\n\t        if (domStyle) { // Not in node\n\t            dom.onselectstart = returnFalse; // 避免页面选中的尴尬\n\t            domStyle['-webkit-user-select'] = 'none';\n\t            domStyle['user-select'] = 'none';\n\t            domStyle['-webkit-touch-callout'] = 'none';\n\t            domStyle['-webkit-tap-highlight-color'] = 'rgba(0,0,0,0)';\n\t            domStyle['padding'] = 0;\n\t            domStyle['margin'] = 0;\n\t            domStyle['border-width'] = 0;\n\t        }\n\n\t        this.domBack = null;\n\t        this.ctxBack = null;\n\n\t        this.painter = painter;\n\n\t        this.config = null;\n\n\t        // Configs\n\t        /**\n\t         * 每次清空画布的颜色\n\t         * @type {string}\n\t         * @default 0\n\t         */\n\t        this.clearColor = 0;\n\t        /**\n\t         * 是否开启动态模糊\n\t         * @type {boolean}\n\t         * @default false\n\t         */\n\t        this.motionBlur = false;\n\t        /**\n\t         * 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显\n\t         * @type {number}\n\t         * @default 0.7\n\t         */\n\t        this.lastFrameAlpha = 0.7;\n\n\t        /**\n\t         * Layer dpr\n\t         * @type {number}\n\t         */\n\t        this.dpr = dpr;\n\t    };\n\n\t    Layer.prototype = {\n\n\t        constructor: Layer,\n\n\t        elCount: 0,\n\n\t        __dirty: true,\n\n\t        initContext: function () {\n\t            this.ctx = this.dom.getContext('2d');\n\n\t            this.ctx.dpr = this.dpr;\n\t        },\n\n\t        createBackBuffer: function () {\n\t            var dpr = this.dpr;\n\n\t            this.domBack = createDom('back-' + this.id, 'canvas', this.painter, dpr);\n\t            this.ctxBack = this.domBack.getContext('2d');\n\n\t            if (dpr != 1) {\n\t                this.ctxBack.scale(dpr, dpr);\n\t            }\n\t        },\n\n\t        /**\n\t         * @param  {number} width\n\t         * @param  {number} height\n\t         */\n\t        resize: function (width, height) {\n\t            var dpr = this.dpr;\n\n\t            var dom = this.dom;\n\t            var domStyle = dom.style;\n\t            var domBack = this.domBack;\n\n\t            domStyle.width = width + 'px';\n\t            domStyle.height = height + 'px';\n\n\t            dom.width = width * dpr;\n\t            dom.height = height * dpr;\n\n\t            if (domBack) {\n\t                domBack.width = width * dpr;\n\t                domBack.height = height * dpr;\n\n\t                if (dpr != 1) {\n\t                    this.ctxBack.scale(dpr, dpr);\n\t                }\n\t            }\n\t        },\n\n\t        /**\n\t         * 清空该层画布\n\t         * @param {boolean} clearAll Clear all with out motion blur\n\t         */\n\t        clear: function (clearAll) {\n\t            var dom = this.dom;\n\t            var ctx = this.ctx;\n\t            var width = dom.width;\n\t            var height = dom.height;\n\n\t            var clearColor = this.clearColor;\n\t            var haveMotionBLur = this.motionBlur && !clearAll;\n\t            var lastFrameAlpha = this.lastFrameAlpha;\n\n\t            var dpr = this.dpr;\n\n\t            if (haveMotionBLur) {\n\t                if (!this.domBack) {\n\t                    this.createBackBuffer();\n\t                }\n\n\t                this.ctxBack.globalCompositeOperation = 'copy';\n\t                this.ctxBack.drawImage(\n\t                    dom, 0, 0,\n\t                    width / dpr,\n\t                    height / dpr\n\t                );\n\t            }\n\n\t            ctx.clearRect(0, 0, width, height);\n\t            if (clearColor) {\n\t                var clearColorGradientOrPattern;\n\t                // Gradient\n\t                if (clearColor.colorStops) {\n\t                    // Cache canvas gradient\n\t                    clearColorGradientOrPattern = clearColor.__canvasGradient || Style.getGradient(ctx, clearColor, {\n\t                        x: 0,\n\t                        y: 0,\n\t                        width: width,\n\t                        height: height\n\t                    });\n\n\t                    clearColor.__canvasGradient = clearColorGradientOrPattern;\n\t                }\n\t                // Pattern\n\t                else if (clearColor.image) {\n\t                    clearColorGradientOrPattern = Pattern.prototype.getCanvasPattern.call(clearColor, ctx);\n\t                }\n\t                ctx.save();\n\t                ctx.fillStyle = clearColorGradientOrPattern || clearColor;\n\t                ctx.fillRect(0, 0, width, height);\n\t                ctx.restore();\n\t            }\n\n\t            if (haveMotionBLur) {\n\t                var domBack = this.domBack;\n\t                ctx.save();\n\t                ctx.globalAlpha = lastFrameAlpha;\n\t                ctx.drawImage(domBack, 0, 0, width, height);\n\t                ctx.restore();\n\t            }\n\t        }\n\t    };\n\n\t    module.exports = Layer;\n\n\n/***/ },\n/* 94 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t    var Gradient = __webpack_require__(79);\n\t    module.exports = function (ecModel) {\n\t        function encodeColor(seriesModel) {\n\t            var colorAccessPath = (seriesModel.visualColorAccessPath || 'itemStyle.normal.color').split('.');\n\t            var data = seriesModel.getData();\n\t            var color = seriesModel.get(colorAccessPath) // Set in itemStyle\n\t                || seriesModel.getColorFromPalette(seriesModel.get('name'));  // Default color\n\n\t            // FIXME Set color function or use the platte color\n\t            data.setVisual('color', color);\n\n\t            // Only visible series has each data be visual encoded\n\t            if (!ecModel.isSeriesFiltered(seriesModel)) {\n\t                if (typeof color === 'function' && !(color instanceof Gradient)) {\n\t                    data.each(function (idx) {\n\t                        data.setItemVisual(\n\t                            idx, 'color', color(seriesModel.getDataParams(idx))\n\t                        );\n\t                    });\n\t                }\n\n\t                // itemStyle in each data item\n\t                data.each(function (idx) {\n\t                    var itemModel = data.getItemModel(idx);\n\t                    var color = itemModel.get(colorAccessPath, true);\n\t                    if (color != null) {\n\t                        data.setItemVisual(idx, 'color', color);\n\t                    }\n\t                });\n\t            }\n\t        }\n\t        ecModel.eachRawSeries(encodeColor);\n\t    };\n\n\n/***/ },\n/* 95 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Compatitable with 2.0\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var compatStyle = __webpack_require__(96);\n\n\t    function get(opt, path) {\n\t        path = path.split(',');\n\t        var obj = opt;\n\t        for (var i = 0; i < path.length; i++) {\n\t            obj = obj && obj[path[i]];\n\t            if (obj == null) {\n\t                break;\n\t            }\n\t        }\n\t        return obj;\n\t    }\n\n\t    function set(opt, path, val, overwrite) {\n\t        path = path.split(',');\n\t        var obj = opt;\n\t        var key;\n\t        for (var i = 0; i < path.length - 1; i++) {\n\t            key = path[i];\n\t            if (obj[key] == null) {\n\t                obj[key] = {};\n\t            }\n\t            obj = obj[key];\n\t        }\n\t        if (overwrite || obj[path[i]] == null) {\n\t            obj[path[i]] = val;\n\t        }\n\t    }\n\n\t    function compatLayoutProperties(option) {\n\t        each(LAYOUT_PROPERTIES, function (prop) {\n\t            if (prop[0] in option && !(prop[1] in option)) {\n\t                option[prop[1]] = option[prop[0]];\n\t            }\n\t        });\n\t    }\n\n\t    var LAYOUT_PROPERTIES = [\n\t        ['x', 'left'], ['y', 'top'], ['x2', 'right'], ['y2', 'bottom']\n\t    ];\n\n\t    var COMPATITABLE_COMPONENTS = [\n\t        'grid', 'geo', 'parallel', 'legend', 'toolbox', 'title', 'visualMap', 'dataZoom', 'timeline'\n\t    ];\n\n\t    var COMPATITABLE_SERIES = [\n\t        'bar', 'boxplot', 'candlestick', 'chord', 'effectScatter',\n\t        'funnel', 'gauge', 'lines', 'graph', 'heatmap', 'line', 'map', 'parallel',\n\t        'pie', 'radar', 'sankey', 'scatter', 'treemap'\n\t    ];\n\n\t    var each = zrUtil.each;\n\n\t    module.exports = function (option) {\n\t        each(option.series, function (seriesOpt) {\n\t            if (!zrUtil.isObject(seriesOpt)) {\n\t                return;\n\t            }\n\n\t            var seriesType = seriesOpt.type;\n\n\t            compatStyle(seriesOpt);\n\n\t            if (seriesType === 'pie' || seriesType === 'gauge') {\n\t                if (seriesOpt.clockWise != null) {\n\t                    seriesOpt.clockwise = seriesOpt.clockWise;\n\t                }\n\t            }\n\t            if (seriesType === 'gauge') {\n\t                var pointerColor = get(seriesOpt, 'pointer.color');\n\t                pointerColor != null\n\t                    && set(seriesOpt, 'itemStyle.normal.color', pointerColor);\n\t            }\n\n\t            for (var i = 0; i < COMPATITABLE_SERIES.length; i++) {\n\t                if (COMPATITABLE_SERIES[i] === seriesOpt.type) {\n\t                    compatLayoutProperties(seriesOpt);\n\t                    break;\n\t                }\n\t            }\n\t        });\n\n\t        // dataRange has changed to visualMap\n\t        if (option.dataRange) {\n\t            option.visualMap = option.dataRange;\n\t        }\n\n\t        each(COMPATITABLE_COMPONENTS, function (componentName) {\n\t            var options = option[componentName];\n\t            if (options) {\n\t                if (!zrUtil.isArray(options)) {\n\t                    options = [options];\n\t                }\n\t                each(options, function (option) {\n\t                    compatLayoutProperties(option);\n\t                });\n\t            }\n\t        });\n\t    };\n\n\n/***/ },\n/* 96 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var POSSIBLE_STYLES = [\n\t        'areaStyle', 'lineStyle', 'nodeStyle', 'linkStyle',\n\t        'chordStyle', 'label', 'labelLine'\n\t    ];\n\n\t    function compatItemStyle(opt) {\n\t        var itemStyleOpt = opt && opt.itemStyle;\n\t        if (itemStyleOpt) {\n\t            zrUtil.each(POSSIBLE_STYLES, function (styleName) {\n\t                var normalItemStyleOpt = itemStyleOpt.normal;\n\t                var emphasisItemStyleOpt = itemStyleOpt.emphasis;\n\t                if (normalItemStyleOpt && normalItemStyleOpt[styleName]) {\n\t                    opt[styleName] = opt[styleName] || {};\n\t                    if (!opt[styleName].normal) {\n\t                        opt[styleName].normal = normalItemStyleOpt[styleName];\n\t                    }\n\t                    else {\n\t                        zrUtil.merge(opt[styleName].normal, normalItemStyleOpt[styleName]);\n\t                    }\n\t                    normalItemStyleOpt[styleName] = null;\n\t                }\n\t                if (emphasisItemStyleOpt && emphasisItemStyleOpt[styleName]) {\n\t                    opt[styleName] = opt[styleName] || {};\n\t                    if (!opt[styleName].emphasis) {\n\t                        opt[styleName].emphasis = emphasisItemStyleOpt[styleName];\n\t                    }\n\t                    else {\n\t                        zrUtil.merge(opt[styleName].emphasis, emphasisItemStyleOpt[styleName]);\n\t                    }\n\t                    emphasisItemStyleOpt[styleName] = null;\n\t                }\n\t            });\n\t        }\n\t    }\n\n\t    module.exports = function (seriesOpt) {\n\t        if (!seriesOpt) {\n\t            return;\n\t        }\n\t        compatItemStyle(seriesOpt);\n\t        compatItemStyle(seriesOpt.markPoint);\n\t        compatItemStyle(seriesOpt.markLine);\n\t        var data = seriesOpt.data;\n\t        if (data) {\n\t            for (var i = 0; i < data.length; i++) {\n\t                compatItemStyle(data[i]);\n\t            }\n\t            // mark point data\n\t            var markPoint = seriesOpt.markPoint;\n\t            if (markPoint && markPoint.data) {\n\t                var mpData = markPoint.data;\n\t                for (var i = 0; i < mpData.length; i++) {\n\t                    compatItemStyle(mpData[i]);\n\t                }\n\t            }\n\t            // mark line data\n\t            var markLine = seriesOpt.markLine;\n\t            if (markLine && markLine.data) {\n\t                var mlData = markLine.data;\n\t                for (var i = 0; i < mlData.length; i++) {\n\t                    if (zrUtil.isArray(mlData[i])) {\n\t                        compatItemStyle(mlData[i][0]);\n\t                        compatItemStyle(mlData[i][1]);\n\t                    }\n\t                    else {\n\t                        compatItemStyle(mlData[i]);\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    };\n\n\n/***/ },\n/* 97 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var graphic = __webpack_require__(43);\n\t    var zrUtil = __webpack_require__(4);\n\t    var PI = Math.PI;\n\t    /**\n\t     * @param {module:echarts/ExtensionAPI} api\n\t     * @param {Object} [opts]\n\t     * @param {string} [opts.text]\n\t     * @param {string} [opts.color]\n\t     * @param {string} [opts.textColor]\n\t     * @return {module:zrender/Element}\n\t     */\n\t    module.exports = function (api, opts) {\n\t        opts = opts || {};\n\t        zrUtil.defaults(opts, {\n\t            text: 'loading',\n\t            color: '#c23531',\n\t            textColor: '#000',\n\t            maskColor: 'rgba(255, 255, 255, 0.8)',\n\t            zlevel: 0\n\t        });\n\t        var mask = new graphic.Rect({\n\t            style: {\n\t                fill: opts.maskColor\n\t            },\n\t            zlevel: opts.zlevel,\n\t            z: 10000\n\t        });\n\t        var arc = new graphic.Arc({\n\t            shape: {\n\t                startAngle: -PI / 2,\n\t                endAngle: -PI / 2 + 0.1,\n\t                r: 10\n\t            },\n\t            style: {\n\t                stroke: opts.color,\n\t                lineCap: 'round',\n\t                lineWidth: 5\n\t            },\n\t            zlevel: opts.zlevel,\n\t            z: 10001\n\t        });\n\t        var labelRect = new graphic.Rect({\n\t            style: {\n\t                fill: 'none',\n\t                text: opts.text,\n\t                textPosition: 'right',\n\t                textDistance: 10,\n\t                textFill: opts.textColor\n\t            },\n\t            zlevel: opts.zlevel,\n\t            z: 10001\n\t        });\n\n\t        arc.animateShape(true)\n\t            .when(1000, {\n\t                endAngle: PI * 3 / 2\n\t            })\n\t            .start('circularInOut');\n\t        arc.animateShape(true)\n\t            .when(1000, {\n\t                startAngle: PI * 3 / 2\n\t            })\n\t            .delay(300)\n\t            .start('circularInOut');\n\n\t        var group = new graphic.Group();\n\t        group.add(arc);\n\t        group.add(labelRect);\n\t        group.add(mask);\n\t        // Inject resize\n\t        group.resize = function () {\n\t            var cx = api.getWidth() / 2;\n\t            var cy = api.getHeight() / 2;\n\t            arc.setShape({\n\t                cx: cx,\n\t                cy: cy\n\t            });\n\t            var r = arc.shape.r;\n\t            labelRect.setShape({\n\t                x: cx - r,\n\t                y: cy - r,\n\t                width: r * 2,\n\t                height: r * 2\n\t            });\n\n\t            mask.setShape({\n\t                x: 0,\n\t                y: 0,\n\t                width: api.getWidth(),\n\t                height: api.getHeight()\n\t            });\n\t        };\n\t        group.resize();\n\t        return group;\n\t    };\n\n\n/***/ },\n/* 98 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/**\n\t * List for data storage\n\t * @module echarts/data/List\n\t */\n\n\n\t    var UNDEFINED = 'undefined';\n\t    var globalObj = typeof window === 'undefined' ? global : window;\n\t    var Float64Array = typeof globalObj.Float64Array === UNDEFINED\n\t        ? Array : globalObj.Float64Array;\n\t    var Int32Array = typeof globalObj.Int32Array === UNDEFINED\n\t        ? Array : globalObj.Int32Array;\n\n\t    var dataCtors = {\n\t        'float': Float64Array,\n\t        'int': Int32Array,\n\t        // Ordinal data type can be string or int\n\t        'ordinal': Array,\n\t        'number': Array,\n\t        'time': Array\n\t    };\n\n\t    var Model = __webpack_require__(12);\n\t    var DataDiffer = __webpack_require__(99);\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var modelUtil = __webpack_require__(5);\n\t    var isObject = zrUtil.isObject;\n\n\t    var TRANSFERABLE_PROPERTIES = [\n\t        'stackedOn', 'hasItemOption', '_nameList', '_idList', '_rawData'\n\t    ];\n\n\t    var transferProperties = function (a, b) {\n\t        zrUtil.each(TRANSFERABLE_PROPERTIES.concat(b.__wrappedMethods || []), function (propName) {\n\t            if (b.hasOwnProperty(propName)) {\n\t                a[propName] = b[propName];\n\t            }\n\t        });\n\n\t        a.__wrappedMethods = b.__wrappedMethods;\n\t    };\n\n\t    /**\n\t     * @constructor\n\t     * @alias module:echarts/data/List\n\t     *\n\t     * @param {Array.<string>} dimensions\n\t     *        Dimensions should be concrete names like x, y, z, lng, lat, angle, radius\n\t     * @param {module:echarts/model/Model} hostModel\n\t     */\n\t    var List = function (dimensions, hostModel) {\n\n\t        dimensions = dimensions || ['x', 'y'];\n\n\t        var dimensionInfos = {};\n\t        var dimensionNames = [];\n\t        for (var i = 0; i < dimensions.length; i++) {\n\t            var dimensionName;\n\t            var dimensionInfo = {};\n\t            if (typeof dimensions[i] === 'string') {\n\t                dimensionName = dimensions[i];\n\t                dimensionInfo = {\n\t                    name: dimensionName,\n\t                    stackable: false,\n\t                    // Type can be 'float', 'int', 'number'\n\t                    // Default is number, Precision of float may not enough\n\t                    type: 'number'\n\t                };\n\t            }\n\t            else {\n\t                dimensionInfo = dimensions[i];\n\t                dimensionName = dimensionInfo.name;\n\t                dimensionInfo.type = dimensionInfo.type || 'number';\n\t            }\n\t            dimensionNames.push(dimensionName);\n\t            dimensionInfos[dimensionName] = dimensionInfo;\n\t        }\n\t        /**\n\t         * @readOnly\n\t         * @type {Array.<string>}\n\t         */\n\t        this.dimensions = dimensionNames;\n\n\t        /**\n\t         * Infomation of each data dimension, like data type.\n\t         * @type {Object}\n\t         */\n\t        this._dimensionInfos = dimensionInfos;\n\n\t        /**\n\t         * @type {module:echarts/model/Model}\n\t         */\n\t        this.hostModel = hostModel;\n\n\t        /**\n\t         * @type {module:echarts/model/Model}\n\t         */\n\t        this.dataType;\n\n\t        /**\n\t         * Indices stores the indices of data subset after filtered.\n\t         * This data subset will be used in chart.\n\t         * @type {Array.<number>}\n\t         * @readOnly\n\t         */\n\t        this.indices = [];\n\n\t        /**\n\t         * Data storage\n\t         * @type {Object.<key, TypedArray|Array>}\n\t         * @private\n\t         */\n\t        this._storage = {};\n\n\t        /**\n\t         * @type {Array.<string>}\n\t         */\n\t        this._nameList = [];\n\t        /**\n\t         * @type {Array.<string>}\n\t         */\n\t        this._idList = [];\n\t        /**\n\t         * Models of data option is stored sparse for optimizing memory cost\n\t         * @type {Array.<module:echarts/model/Model>}\n\t         * @private\n\t         */\n\t        this._optionModels = [];\n\n\t        /**\n\t         * @param {module:echarts/data/List}\n\t         */\n\t        this.stackedOn = null;\n\n\t        /**\n\t         * Global visual properties after visual coding\n\t         * @type {Object}\n\t         * @private\n\t         */\n\t        this._visual = {};\n\n\t        /**\n\t         * Globel layout properties.\n\t         * @type {Object}\n\t         * @private\n\t         */\n\t        this._layout = {};\n\n\t        /**\n\t         * Item visual properties after visual coding\n\t         * @type {Array.<Object>}\n\t         * @private\n\t         */\n\t        this._itemVisuals = [];\n\n\t        /**\n\t         * Item layout properties after layout\n\t         * @type {Array.<Object>}\n\t         * @private\n\t         */\n\t        this._itemLayouts = [];\n\n\t        /**\n\t         * Graphic elemnents\n\t         * @type {Array.<module:zrender/Element>}\n\t         * @private\n\t         */\n\t        this._graphicEls = [];\n\n\t        /**\n\t         * @type {Array.<Array|Object>}\n\t         * @private\n\t         */\n\t        this._rawData;\n\n\t        /**\n\t         * @type {Object}\n\t         * @private\n\t         */\n\t        this._extent;\n\t    };\n\n\t    var listProto = List.prototype;\n\n\t    listProto.type = 'list';\n\t    /**\n\t     * If each data item has it's own option\n\t     * @type {boolean}\n\t     */\n\t    listProto.hasItemOption = true;\n\n\t    /**\n\t     * Get dimension name\n\t     * @param {string|number} dim\n\t     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius\n\t     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'\n\t     * @return {string} Concrete dim name.\n\t     */\n\t    listProto.getDimension = function (dim) {\n\t        if (!isNaN(dim)) {\n\t            dim = this.dimensions[dim] || dim;\n\t        }\n\t        return dim;\n\t    };\n\t    /**\n\t     * Get type and stackable info of particular dimension\n\t     * @param {string|number} dim\n\t     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius\n\t     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'\n\t     */\n\t    listProto.getDimensionInfo = function (dim) {\n\t        return zrUtil.clone(this._dimensionInfos[this.getDimension(dim)]);\n\t    };\n\n\t    /**\n\t     * Initialize from data\n\t     * @param {Array.<Object|number|Array>} data\n\t     * @param {Array.<string>} [nameList]\n\t     * @param {Function} [dimValueGetter] (dataItem, dimName, dataIndex, dimIndex) => number\n\t     */\n\t    listProto.initData = function (data, nameList, dimValueGetter) {\n\t        data = data || [];\n\n\t        if (true) {\n\t            if (!zrUtil.isArray(data)) {\n\t                throw new Error('Invalid data.');\n\t            }\n\t        }\n\n\t        this._rawData = data;\n\n\t        // Clear\n\t        var storage = this._storage = {};\n\t        var indices = this.indices = [];\n\n\t        var dimensions = this.dimensions;\n\t        var size = data.length;\n\t        var dimensionInfoMap = this._dimensionInfos;\n\n\t        var idList = [];\n\t        var nameRepeatCount = {};\n\n\t        nameList = nameList || [];\n\n\t        // Init storage\n\t        for (var i = 0; i < dimensions.length; i++) {\n\t            var dimInfo = dimensionInfoMap[dimensions[i]];\n\t            var DataCtor = dataCtors[dimInfo.type];\n\t            storage[dimensions[i]] = new DataCtor(size);\n\t        }\n\n\t        var self = this;\n\t        if (!dimValueGetter) {\n\t            self.hasItemOption = false;\n\t        }\n\t        // Default dim value getter\n\t        dimValueGetter = dimValueGetter || function (dataItem, dimName, dataIndex, dimIndex) {\n\t            var value = modelUtil.getDataItemValue(dataItem);\n\t            // If any dataItem is like { value: 10 }\n\t            if (modelUtil.isDataItemOption(dataItem)) {\n\t                self.hasItemOption = true;\n\t            }\n\t            return modelUtil.converDataValue(\n\t                (value instanceof Array)\n\t                    ? value[dimIndex]\n\t                    // If value is a single number or something else not array.\n\t                    : value,\n\t                dimensionInfoMap[dimName]\n\t            );\n\t        };\n\n\t        for (var idx = 0; idx < data.length; idx++) {\n\t            var dataItem = data[idx];\n\t            // Each data item is value\n\t            // [1, 2]\n\t            // 2\n\t            // Bar chart, line chart which uses category axis\n\t            // only gives the 'y' value. 'x' value is the indices of cateogry\n\t            // Use a tempValue to normalize the value to be a (x, y) value\n\n\t            // Store the data by dimensions\n\t            for (var k = 0; k < dimensions.length; k++) {\n\t                var dim = dimensions[k];\n\t                var dimStorage = storage[dim];\n\t                // PENDING NULL is empty or zero\n\t                dimStorage[idx] = dimValueGetter(dataItem, dim, idx, k);\n\t            }\n\n\t            indices.push(idx);\n\t        }\n\n\t        // Use the name in option and create id\n\t        for (var i = 0; i < data.length; i++) {\n\t            if (!nameList[i]) {\n\t                if (data[i] && data[i].name != null) {\n\t                    nameList[i] = data[i].name;\n\t                }\n\t            }\n\t            var name = nameList[i] || '';\n\t            // Try using the id in option\n\t            var id = data[i] && data[i].id;\n\n\t            if (!id && name) {\n\t                // Use name as id and add counter to avoid same name\n\t                nameRepeatCount[name] = nameRepeatCount[name] || 0;\n\t                id = name;\n\t                if (nameRepeatCount[name] > 0) {\n\t                    id += '__ec__' + nameRepeatCount[name];\n\t                }\n\t                nameRepeatCount[name]++;\n\t            }\n\t            id && (idList[i] = id);\n\t        }\n\n\t        this._nameList = nameList;\n\t        this._idList = idList;\n\t    };\n\n\t    /**\n\t     * @return {number}\n\t     */\n\t    listProto.count = function () {\n\t        return this.indices.length;\n\t    };\n\n\t    /**\n\t     * Get value. Return NaN if idx is out of range.\n\t     * @param {string} dim Dim must be concrete name.\n\t     * @param {number} idx\n\t     * @param {boolean} stack\n\t     * @return {number}\n\t     */\n\t    listProto.get = function (dim, idx, stack) {\n\t        var storage = this._storage;\n\t        var dataIndex = this.indices[idx];\n\n\t        // If value not exists\n\t        if (dataIndex == null) {\n\t            return NaN;\n\t        }\n\n\t        var value = storage[dim] && storage[dim][dataIndex];\n\t        // FIXME ordinal data type is not stackable\n\t        if (stack) {\n\t            var dimensionInfo = this._dimensionInfos[dim];\n\t            if (dimensionInfo && dimensionInfo.stackable) {\n\t                var stackedOn = this.stackedOn;\n\t                while (stackedOn) {\n\t                    // Get no stacked data of stacked on\n\t                    var stackedValue = stackedOn.get(dim, idx);\n\t                    // Considering positive stack, negative stack and empty data\n\t                    if ((value >= 0 && stackedValue > 0)  // Positive stack\n\t                        || (value <= 0 && stackedValue < 0) // Negative stack\n\t                    ) {\n\t                        value += stackedValue;\n\t                    }\n\t                    stackedOn = stackedOn.stackedOn;\n\t                }\n\t            }\n\t        }\n\t        return value;\n\t    };\n\n\t    /**\n\t     * Get value for multi dimensions.\n\t     * @param {Array.<string>} [dimensions] If ignored, using all dimensions.\n\t     * @param {number} idx\n\t     * @param {boolean} stack\n\t     * @return {number}\n\t     */\n\t    listProto.getValues = function (dimensions, idx, stack) {\n\t        var values = [];\n\n\t        if (!zrUtil.isArray(dimensions)) {\n\t            stack = idx;\n\t            idx = dimensions;\n\t            dimensions = this.dimensions;\n\t        }\n\n\t        for (var i = 0, len = dimensions.length; i < len; i++) {\n\t            values.push(this.get(dimensions[i], idx, stack));\n\t        }\n\n\t        return values;\n\t    };\n\n\t    /**\n\t     * If value is NaN. Inlcuding '-'\n\t     * @param {string} dim\n\t     * @param {number} idx\n\t     * @return {number}\n\t     */\n\t    listProto.hasValue = function (idx) {\n\t        var dimensions = this.dimensions;\n\t        var dimensionInfos = this._dimensionInfos;\n\t        for (var i = 0, len = dimensions.length; i < len; i++) {\n\t            if (\n\t                // Ordinal type can be string or number\n\t                dimensionInfos[dimensions[i]].type !== 'ordinal'\n\t                && isNaN(this.get(dimensions[i], idx))\n\t            ) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    };\n\n\t    /**\n\t     * Get extent of data in one dimension\n\t     * @param {string} dim\n\t     * @param {boolean} stack\n\t     * @param {Function} filter\n\t     */\n\t    listProto.getDataExtent = function (dim, stack, filter) {\n\t        dim = this.getDimension(dim);\n\t        var dimData = this._storage[dim];\n\t        var dimInfo = this.getDimensionInfo(dim);\n\t        stack = (dimInfo && dimInfo.stackable) && stack;\n\t        var dimExtent = (this._extent || (this._extent = {}))[dim + (!!stack)];\n\t        var value;\n\t        if (dimExtent) {\n\t            return dimExtent;\n\t        }\n\t        // var dimInfo = this._dimensionInfos[dim];\n\t        if (dimData) {\n\t            var min = Infinity;\n\t            var max = -Infinity;\n\t            // var isOrdinal = dimInfo.type === 'ordinal';\n\t            for (var i = 0, len = this.count(); i < len; i++) {\n\t                value = this.get(dim, i, stack);\n\t                // FIXME\n\t                // if (isOrdinal && typeof value === 'string') {\n\t                //     value = zrUtil.indexOf(dimData, value);\n\t                // }\n\t                if (!filter || filter(value, dim, i)) {\n\t                    value < min && (min = value);\n\t                    value > max && (max = value);\n\t                }\n\t            }\n\t            return (this._extent[dim + !!stack] = [min, max]);\n\t        }\n\t        else {\n\t            return [Infinity, -Infinity];\n\t        }\n\t    };\n\n\t    /**\n\t     * Get sum of data in one dimension\n\t     * @param {string} dim\n\t     * @param {boolean} stack\n\t     */\n\t    listProto.getSum = function (dim, stack) {\n\t        var dimData = this._storage[dim];\n\t        var sum = 0;\n\t        if (dimData) {\n\t            for (var i = 0, len = this.count(); i < len; i++) {\n\t                var value = this.get(dim, i, stack);\n\t                if (!isNaN(value)) {\n\t                    sum += value;\n\t                }\n\t            }\n\t        }\n\t        return sum;\n\t    };\n\n\t    /**\n\t     * Retreive the index with given value\n\t     * @param {number} idx\n\t     * @param {number} value\n\t     * @return {number}\n\t     */\n\t    // FIXME Precision of float value\n\t    listProto.indexOf = function (dim, value) {\n\t        var storage = this._storage;\n\t        var dimData = storage[dim];\n\t        var indices = this.indices;\n\n\t        if (dimData) {\n\t            for (var i = 0, len = indices.length; i < len; i++) {\n\t                var rawIndex = indices[i];\n\t                if (dimData[rawIndex] === value) {\n\t                    return i;\n\t                }\n\t            }\n\t        }\n\t        return -1;\n\t    };\n\n\t    /**\n\t     * Retreive the index with given name\n\t     * @param {number} idx\n\t     * @param {number} name\n\t     * @return {number}\n\t     */\n\t    listProto.indexOfName = function (name) {\n\t        var indices = this.indices;\n\t        var nameList = this._nameList;\n\n\t        for (var i = 0, len = indices.length; i < len; i++) {\n\t            var rawIndex = indices[i];\n\t            if (nameList[rawIndex] === name) {\n\t                return i;\n\t            }\n\t        }\n\n\t        return -1;\n\t    };\n\n\t    /**\n\t     * Retreive the index with given raw data index\n\t     * @param {number} idx\n\t     * @param {number} name\n\t     * @return {number}\n\t     */\n\t    listProto.indexOfRawIndex = function (rawIndex) {\n\t        // Indices are ascending\n\t        var indices = this.indices;\n\n\t        // If rawIndex === dataIndex\n\t        var rawDataIndex = indices[rawIndex];\n\t        if (rawDataIndex != null && rawDataIndex === rawIndex) {\n\t            return rawIndex;\n\t        }\n\n\t        var left = 0;\n\t        var right = indices.length - 1;\n\t        while (left <= right) {\n\t            var mid = (left + right) / 2 | 0;\n\t            if (indices[mid] < rawIndex) {\n\t                left = mid + 1;\n\t            }\n\t            else if (indices[mid] > rawIndex) {\n\t                right = mid - 1;\n\t            }\n\t            else {\n\t                return mid;\n\t            }\n\t        }\n\t        return -1;\n\t    };\n\n\t    /**\n\t     * Retreive the index of nearest value\n\t     * @param {string} dim\n\t     * @param {number} value\n\t     * @param {boolean} stack If given value is after stacked\n\t     * @param {number} [maxDistance=Infinity]\n\t     * @return {number}\n\t     */\n\t    listProto.indexOfNearest = function (dim, value, stack, maxDistance) {\n\t        var storage = this._storage;\n\t        var dimData = storage[dim];\n\n\t        if (maxDistance == null) {\n\t            maxDistance = Infinity;\n\t        }\n\n\t        var nearestIdx = -1;\n\t        if (dimData) {\n\t            var minDist = Number.MAX_VALUE;\n\t            for (var i = 0, len = this.count(); i < len; i++) {\n\t                var diff = value - this.get(dim, i, stack);\n\t                var dist = Math.abs(diff);\n\t                if (\n\t                    diff <= maxDistance\n\t                    && (dist < minDist\n\t                        // For the case of two data are same on xAxis, which has sequence data.\n\t                        // Show the nearest index\n\t                        // https://github.com/ecomfe/echarts/issues/2869\n\t                        || (dist === minDist && diff > 0)\n\t                    )\n\t                ) {\n\t                    minDist = dist;\n\t                    nearestIdx = i;\n\t                }\n\t            }\n\t        }\n\t        return nearestIdx;\n\t    };\n\n\t    /**\n\t     * Get raw data index\n\t     * @param {number} idx\n\t     * @return {number}\n\t     */\n\t    listProto.getRawIndex = function (idx) {\n\t        var rawIdx = this.indices[idx];\n\t        return rawIdx == null ? -1 : rawIdx;\n\t    };\n\n\t    /**\n\t     * Get raw data item\n\t     * @param {number} idx\n\t     * @return {number}\n\t     */\n\t    listProto.getRawDataItem = function (idx) {\n\t        return this._rawData[this.getRawIndex(idx)];\n\t    };\n\n\t    /**\n\t     * @param {number} idx\n\t     * @param {boolean} [notDefaultIdx=false]\n\t     * @return {string}\n\t     */\n\t    listProto.getName = function (idx) {\n\t        return this._nameList[this.indices[idx]] || '';\n\t    };\n\n\t    /**\n\t     * @param {number} idx\n\t     * @param {boolean} [notDefaultIdx=false]\n\t     * @return {string}\n\t     */\n\t    listProto.getId = function (idx) {\n\t        return this._idList[this.indices[idx]] || (this.getRawIndex(idx) + '');\n\t    };\n\n\n\t    function normalizeDimensions(dimensions) {\n\t        if (!zrUtil.isArray(dimensions)) {\n\t            dimensions = [dimensions];\n\t        }\n\t        return dimensions;\n\t    }\n\n\t    /**\n\t     * Data iteration\n\t     * @param {string|Array.<string>}\n\t     * @param {Function} cb\n\t     * @param {boolean} [stack=false]\n\t     * @param {*} [context=this]\n\t     *\n\t     * @example\n\t     *  list.each('x', function (x, idx) {});\n\t     *  list.each(['x', 'y'], function (x, y, idx) {});\n\t     *  list.each(function (idx) {})\n\t     */\n\t    listProto.each = function (dims, cb, stack, context) {\n\t        if (typeof dims === 'function') {\n\t            context = stack;\n\t            stack = cb;\n\t            cb = dims;\n\t            dims = [];\n\t        }\n\n\t        dims = zrUtil.map(normalizeDimensions(dims), this.getDimension, this);\n\n\t        var value = [];\n\t        var dimSize = dims.length;\n\t        var indices = this.indices;\n\n\t        context = context || this;\n\n\t        for (var i = 0; i < indices.length; i++) {\n\t            // Simple optimization\n\t            switch (dimSize) {\n\t                case 0:\n\t                    cb.call(context, i);\n\t                    break;\n\t                case 1:\n\t                    cb.call(context, this.get(dims[0], i, stack), i);\n\t                    break;\n\t                case 2:\n\t                    cb.call(context, this.get(dims[0], i, stack), this.get(dims[1], i, stack), i);\n\t                    break;\n\t                default:\n\t                    for (var k = 0; k < dimSize; k++) {\n\t                        value[k] = this.get(dims[k], i, stack);\n\t                    }\n\t                    // Index\n\t                    value[k] = i;\n\t                    cb.apply(context, value);\n\t            }\n\t        }\n\t    };\n\n\t    /**\n\t     * Data filter\n\t     * @param {string|Array.<string>}\n\t     * @param {Function} cb\n\t     * @param {boolean} [stack=false]\n\t     * @param {*} [context=this]\n\t     */\n\t    listProto.filterSelf = function (dimensions, cb, stack, context) {\n\t        if (typeof dimensions === 'function') {\n\t            context = stack;\n\t            stack = cb;\n\t            cb = dimensions;\n\t            dimensions = [];\n\t        }\n\n\t        dimensions = zrUtil.map(\n\t            normalizeDimensions(dimensions), this.getDimension, this\n\t        );\n\n\t        var newIndices = [];\n\t        var value = [];\n\t        var dimSize = dimensions.length;\n\t        var indices = this.indices;\n\n\t        context = context || this;\n\n\t        for (var i = 0; i < indices.length; i++) {\n\t            var keep;\n\t            // Simple optimization\n\t            if (dimSize === 1) {\n\t                keep = cb.call(\n\t                    context, this.get(dimensions[0], i, stack), i\n\t                );\n\t            }\n\t            else {\n\t                for (var k = 0; k < dimSize; k++) {\n\t                    value[k] = this.get(dimensions[k], i, stack);\n\t                }\n\t                value[k] = i;\n\t                keep = cb.apply(context, value);\n\t            }\n\t            if (keep) {\n\t                newIndices.push(indices[i]);\n\t            }\n\t        }\n\n\t        this.indices = newIndices;\n\n\t        // Reset data extent\n\t        this._extent = {};\n\n\t        return this;\n\t    };\n\n\t    /**\n\t     * Data mapping to a plain array\n\t     * @param {string|Array.<string>} [dimensions]\n\t     * @param {Function} cb\n\t     * @param {boolean} [stack=false]\n\t     * @param {*} [context=this]\n\t     * @return {Array}\n\t     */\n\t    listProto.mapArray = function (dimensions, cb, stack, context) {\n\t        if (typeof dimensions === 'function') {\n\t            context = stack;\n\t            stack = cb;\n\t            cb = dimensions;\n\t            dimensions = [];\n\t        }\n\n\t        var result = [];\n\t        this.each(dimensions, function () {\n\t            result.push(cb && cb.apply(this, arguments));\n\t        }, stack, context);\n\t        return result;\n\t    };\n\n\t    function cloneListForMapAndSample(original, excludeDimensions) {\n\t        var allDimensions = original.dimensions;\n\t        var list = new List(\n\t            zrUtil.map(allDimensions, original.getDimensionInfo, original),\n\t            original.hostModel\n\t        );\n\t        // FIXME If needs stackedOn, value may already been stacked\n\t        transferProperties(list, original);\n\n\t        var storage = list._storage = {};\n\t        var originalStorage = original._storage;\n\t        // Init storage\n\t        for (var i = 0; i < allDimensions.length; i++) {\n\t            var dim = allDimensions[i];\n\t            var dimStore = originalStorage[dim];\n\t            if (zrUtil.indexOf(excludeDimensions, dim) >= 0) {\n\t                storage[dim] = new dimStore.constructor(\n\t                    originalStorage[dim].length\n\t                );\n\t            }\n\t            else {\n\t                // Direct reference for other dimensions\n\t                storage[dim] = originalStorage[dim];\n\t            }\n\t        }\n\t        return list;\n\t    }\n\n\t    /**\n\t     * Data mapping to a new List with given dimensions\n\t     * @param {string|Array.<string>} dimensions\n\t     * @param {Function} cb\n\t     * @param {boolean} [stack=false]\n\t     * @param {*} [context=this]\n\t     * @return {Array}\n\t     */\n\t    listProto.map = function (dimensions, cb, stack, context) {\n\t        dimensions = zrUtil.map(\n\t            normalizeDimensions(dimensions), this.getDimension, this\n\t        );\n\n\t        var list = cloneListForMapAndSample(this, dimensions);\n\t        // Following properties are all immutable.\n\t        // So we can reference to the same value\n\t        var indices = list.indices = this.indices;\n\n\t        var storage = list._storage;\n\n\t        var tmpRetValue = [];\n\t        this.each(dimensions, function () {\n\t            var idx = arguments[arguments.length - 1];\n\t            var retValue = cb && cb.apply(this, arguments);\n\t            if (retValue != null) {\n\t                // a number\n\t                if (typeof retValue === 'number') {\n\t                    tmpRetValue[0] = retValue;\n\t                    retValue = tmpRetValue;\n\t                }\n\t                for (var i = 0; i < retValue.length; i++) {\n\t                    var dim = dimensions[i];\n\t                    var dimStore = storage[dim];\n\t                    var rawIdx = indices[idx];\n\t                    if (dimStore) {\n\t                        dimStore[rawIdx] = retValue[i];\n\t                    }\n\t                }\n\t            }\n\t        }, stack, context);\n\n\t        return list;\n\t    };\n\n\t    /**\n\t     * Large data down sampling on given dimension\n\t     * @param {string} dimension\n\t     * @param {number} rate\n\t     * @param {Function} sampleValue\n\t     * @param {Function} sampleIndex Sample index for name and id\n\t     */\n\t    listProto.downSample = function (dimension, rate, sampleValue, sampleIndex) {\n\t        var list = cloneListForMapAndSample(this, [dimension]);\n\t        var storage = this._storage;\n\t        var targetStorage = list._storage;\n\n\t        var originalIndices = this.indices;\n\t        var indices = list.indices = [];\n\n\t        var frameValues = [];\n\t        var frameIndices = [];\n\t        var frameSize = Math.floor(1 / rate);\n\n\t        var dimStore = targetStorage[dimension];\n\t        var len = this.count();\n\t        // Copy data from original data\n\t        for (var i = 0; i < storage[dimension].length; i++) {\n\t            targetStorage[dimension][i] = storage[dimension][i];\n\t        }\n\t        for (var i = 0; i < len; i += frameSize) {\n\t            // Last frame\n\t            if (frameSize > len - i) {\n\t                frameSize = len - i;\n\t                frameValues.length = frameSize;\n\t            }\n\t            for (var k = 0; k < frameSize; k++) {\n\t                var idx = originalIndices[i + k];\n\t                frameValues[k] = dimStore[idx];\n\t                frameIndices[k] = idx;\n\t            }\n\t            var value = sampleValue(frameValues);\n\t            var idx = frameIndices[sampleIndex(frameValues, value) || 0];\n\t            // Only write value on the filtered data\n\t            dimStore[idx] = value;\n\t            indices.push(idx);\n\t        }\n\n\t        return list;\n\t    };\n\n\t    /**\n\t     * Get model of one data item.\n\t     *\n\t     * @param {number} idx\n\t     */\n\t    // FIXME Model proxy ?\n\t    listProto.getItemModel = function (idx) {\n\t        var hostModel = this.hostModel;\n\t        idx = this.indices[idx];\n\t        return new Model(this._rawData[idx], hostModel, hostModel && hostModel.ecModel);\n\t    };\n\n\t    /**\n\t     * Create a data differ\n\t     * @param {module:echarts/data/List} otherList\n\t     * @return {module:echarts/data/DataDiffer}\n\t     */\n\t    listProto.diff = function (otherList) {\n\t        var idList = this._idList;\n\t        var otherIdList = otherList && otherList._idList;\n\t        var val;\n\t        // Use prefix to avoid index to be the same as otherIdList[idx],\n\t        // which will cause weird udpate animation.\n\t        var prefix = 'e\\0\\0';\n\n\t        return new DataDiffer(\n\t            otherList ? otherList.indices : [],\n\t            this.indices,\n\t            function (idx) {\n\t                return (val = otherIdList[idx]) != null ? val : prefix + idx;\n\t            },\n\t            function (idx) {\n\t                return (val = idList[idx]) != null ? val : prefix + idx;\n\t            }\n\t        );\n\t    };\n\t    /**\n\t     * Get visual property.\n\t     * @param {string} key\n\t     */\n\t    listProto.getVisual = function (key) {\n\t        var visual = this._visual;\n\t        return visual && visual[key];\n\t    };\n\n\t    /**\n\t     * Set visual property\n\t     * @param {string|Object} key\n\t     * @param {*} [value]\n\t     *\n\t     * @example\n\t     *  setVisual('color', color);\n\t     *  setVisual({\n\t     *      'color': color\n\t     *  });\n\t     */\n\t    listProto.setVisual = function (key, val) {\n\t        if (isObject(key)) {\n\t            for (var name in key) {\n\t                if (key.hasOwnProperty(name)) {\n\t                    this.setVisual(name, key[name]);\n\t                }\n\t            }\n\t            return;\n\t        }\n\t        this._visual = this._visual || {};\n\t        this._visual[key] = val;\n\t    };\n\n\t    /**\n\t     * Set layout property.\n\t     * @param {string} key\n\t     * @param {*} [val]\n\t     */\n\t    listProto.setLayout = function (key, val) {\n\t        if (isObject(key)) {\n\t            for (var name in key) {\n\t                if (key.hasOwnProperty(name)) {\n\t                    this.setLayout(name, key[name]);\n\t                }\n\t            }\n\t            return;\n\t        }\n\t        this._layout[key] = val;\n\t    };\n\n\t    /**\n\t     * Get layout property.\n\t     * @param  {string} key.\n\t     * @return {*}\n\t     */\n\t    listProto.getLayout = function (key) {\n\t        return this._layout[key];\n\t    };\n\n\t    /**\n\t     * Get layout of single data item\n\t     * @param {number} idx\n\t     */\n\t    listProto.getItemLayout = function (idx) {\n\t        return this._itemLayouts[idx];\n\t    };\n\n\t    /**\n\t     * Set layout of single data item\n\t     * @param {number} idx\n\t     * @param {Object} layout\n\t     * @param {boolean=} [merge=false]\n\t     */\n\t    listProto.setItemLayout = function (idx, layout, merge) {\n\t        this._itemLayouts[idx] = merge\n\t            ? zrUtil.extend(this._itemLayouts[idx] || {}, layout)\n\t            : layout;\n\t    };\n\n\t    /**\n\t     * Clear all layout of single data item\n\t     */\n\t    listProto.clearItemLayouts = function () {\n\t        this._itemLayouts.length = 0;\n\t    };\n\n\t    /**\n\t     * Get visual property of single data item\n\t     * @param {number} idx\n\t     * @param {string} key\n\t     * @param {boolean} ignoreParent\n\t     */\n\t    listProto.getItemVisual = function (idx, key, ignoreParent) {\n\t        var itemVisual = this._itemVisuals[idx];\n\t        var val = itemVisual && itemVisual[key];\n\t        if (val == null && !ignoreParent) {\n\t            // Use global visual property\n\t            return this.getVisual(key);\n\t        }\n\t        return val;\n\t    };\n\n\t    /**\n\t     * Set visual property of single data item\n\t     *\n\t     * @param {number} idx\n\t     * @param {string|Object} key\n\t     * @param {*} [value]\n\t     *\n\t     * @example\n\t     *  setItemVisual(0, 'color', color);\n\t     *  setItemVisual(0, {\n\t     *      'color': color\n\t     *  });\n\t     */\n\t    listProto.setItemVisual = function (idx, key, value) {\n\t        var itemVisual = this._itemVisuals[idx] || {};\n\t        this._itemVisuals[idx] = itemVisual;\n\n\t        if (isObject(key)) {\n\t            for (var name in key) {\n\t                if (key.hasOwnProperty(name)) {\n\t                    itemVisual[name] = key[name];\n\t                }\n\t            }\n\t            return;\n\t        }\n\t        itemVisual[key] = value;\n\t    };\n\n\t    /**\n\t     * Clear itemVisuals and list visual.\n\t     */\n\t    listProto.clearAllVisual = function () {\n\t        this._visual = {};\n\t        this._itemVisuals = [];\n\t    };\n\n\t    var setItemDataAndSeriesIndex = function (child) {\n\t        child.seriesIndex = this.seriesIndex;\n\t        child.dataIndex = this.dataIndex;\n\t        child.dataType = this.dataType;\n\t    };\n\t    /**\n\t     * Set graphic element relative to data. It can be set as null\n\t     * @param {number} idx\n\t     * @param {module:zrender/Element} [el]\n\t     */\n\t    listProto.setItemGraphicEl = function (idx, el) {\n\t        var hostModel = this.hostModel;\n\n\t        if (el) {\n\t            // Add data index and series index for indexing the data by element\n\t            // Useful in tooltip\n\t            el.dataIndex = idx;\n\t            el.dataType = this.dataType;\n\t            el.seriesIndex = hostModel && hostModel.seriesIndex;\n\t            if (el.type === 'group') {\n\t                el.traverse(setItemDataAndSeriesIndex, el);\n\t            }\n\t        }\n\n\t        this._graphicEls[idx] = el;\n\t    };\n\n\t    /**\n\t     * @param {number} idx\n\t     * @return {module:zrender/Element}\n\t     */\n\t    listProto.getItemGraphicEl = function (idx) {\n\t        return this._graphicEls[idx];\n\t    };\n\n\t    /**\n\t     * @param {Function} cb\n\t     * @param {*} context\n\t     */\n\t    listProto.eachItemGraphicEl = function (cb, context) {\n\t        zrUtil.each(this._graphicEls, function (el, idx) {\n\t            if (el) {\n\t                cb && cb.call(context, el, idx);\n\t            }\n\t        });\n\t    };\n\n\t    /**\n\t     * Shallow clone a new list except visual and layout properties, and graph elements.\n\t     * New list only change the indices.\n\t     */\n\t    listProto.cloneShallow = function () {\n\t        var dimensionInfoList = zrUtil.map(this.dimensions, this.getDimensionInfo, this);\n\t        var list = new List(dimensionInfoList, this.hostModel);\n\n\t        // FIXME\n\t        list._storage = this._storage;\n\n\t        transferProperties(list, this);\n\n\n\t        // Clone will not change the data extent and indices\n\t        list.indices = this.indices.slice();\n\n\t        if (this._extent) {\n\t            list._extent = zrUtil.extend({}, this._extent);\n\t        }\n\n\t        return list;\n\t    };\n\n\t    /**\n\t     * Wrap some method to add more feature\n\t     * @param {string} methodName\n\t     * @param {Function} injectFunction\n\t     */\n\t    listProto.wrapMethod = function (methodName, injectFunction) {\n\t        var originalMethod = this[methodName];\n\t        if (typeof originalMethod !== 'function') {\n\t            return;\n\t        }\n\t        this.__wrappedMethods = this.__wrappedMethods || [];\n\t        this.__wrappedMethods.push(methodName);\n\t        this[methodName] = function () {\n\t            var res = originalMethod.apply(this, arguments);\n\t            return injectFunction.apply(this, [res].concat(zrUtil.slice(arguments)));\n\t        };\n\t    };\n\n\t    // Methods that create a new list based on this list should be listed here.\n\t    // Notice that those method should `RETURN` the new list.\n\t    listProto.TRANSFERABLE_METHODS = ['cloneShallow', 'downSample', 'map'];\n\t    // Methods that change indices of this list should be listed here.\n\t    listProto.CHANGABLE_METHODS = ['filterSelf'];\n\n\t    module.exports = List;\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 99 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\n\t    function defaultKeyGetter(item) {\n\t        return item;\n\t    }\n\n\t    function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter) {\n\t        this._old = oldArr;\n\t        this._new = newArr;\n\n\t        this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;\n\t        this._newKeyGetter = newKeyGetter || defaultKeyGetter;\n\t    }\n\n\t    DataDiffer.prototype = {\n\n\t        constructor: DataDiffer,\n\n\t        /**\n\t         * Callback function when add a data\n\t         */\n\t        add: function (func) {\n\t            this._add = func;\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Callback function when update a data\n\t         */\n\t        update: function (func) {\n\t            this._update = func;\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Callback function when remove a data\n\t         */\n\t        remove: function (func) {\n\t            this._remove = func;\n\t            return this;\n\t        },\n\n\t        execute: function () {\n\t            var oldArr = this._old;\n\t            var newArr = this._new;\n\t            var oldKeyGetter = this._oldKeyGetter;\n\t            var newKeyGetter = this._newKeyGetter;\n\n\t            var oldDataIndexMap = {};\n\t            var newDataIndexMap = {};\n\t            var oldDataKeyArr = [];\n\t            var newDataKeyArr = [];\n\t            var i;\n\n\t            initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, oldKeyGetter);\n\t            initIndexMap(newArr, newDataIndexMap, newDataKeyArr, newKeyGetter);\n\n\t            // Travel by inverted order to make sure order consistency\n\t            // when duplicate keys exists (consider newDataIndex.pop() below).\n\t            // For performance consideration, these code below do not look neat.\n\t            for (i = 0; i < oldArr.length; i++) {\n\t                var key = oldDataKeyArr[i];\n\t                var idx = newDataIndexMap[key];\n\n\t                // idx can never be empty array here. see 'set null' logic below.\n\t                if (idx != null) {\n\t                    // Consider there is duplicate key (for example, use dataItem.name as key).\n\t                    // We should make sure every item in newArr and oldArr can be visited.\n\t                    var len = idx.length;\n\t                    if (len) {\n\t                        len === 1 && (newDataIndexMap[key] = null);\n\t                        idx = idx.unshift();\n\t                    }\n\t                    else {\n\t                        newDataIndexMap[key] = null;\n\t                    }\n\t                    this._update && this._update(idx, i);\n\t                }\n\t                else {\n\t                    this._remove && this._remove(i);\n\t                }\n\t            }\n\n\t            for (var i = 0; i < newDataKeyArr.length; i++) {\n\t                var key = newDataKeyArr[i];\n\t                if (newDataIndexMap.hasOwnProperty(key)) {\n\t                    var idx = newDataIndexMap[key];\n\t                    if (idx == null) {\n\t                        continue;\n\t                    }\n\t                    // idx can never be empty array here. see 'set null' logic above.\n\t                    if (!idx.length) {\n\t                        this._add && this._add(idx);\n\t                    }\n\t                    else {\n\t                        for (var j = 0, len = idx.length; j < len; j++) {\n\t                            this._add && this._add(idx[j]);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    };\n\n\t    function initIndexMap(arr, map, keyArr, keyGetter) {\n\t        for (var i = 0; i < arr.length; i++) {\n\t            var key = keyGetter(arr[i], i);\n\t            var existence = map[key];\n\t            if (existence == null) {\n\t                keyArr.push(key);\n\t                map[key] = i;\n\t            }\n\t            else {\n\t                if (!existence.length) {\n\t                    map[key] = existence = [existence];\n\t                }\n\t                existence.push(i);\n\t            }\n\t        }\n\t    }\n\n\t    module.exports = DataDiffer;\n\n\n/***/ },\n/* 100 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var echarts = __webpack_require__(1);\n\t    var PRIORITY = echarts.PRIORITY;\n\n\t    __webpack_require__(101);\n\t    __webpack_require__(104);\n\n\t    echarts.registerVisual(zrUtil.curry(\n\t        __webpack_require__(110), 'line', 'circle', 'line'\n\t    ));\n\t    echarts.registerLayout(zrUtil.curry(\n\t        __webpack_require__(111), 'line'\n\t    ));\n\n\t    // Down sample after filter\n\t    echarts.registerProcessor(PRIORITY.PROCESSOR.STATISTIC, zrUtil.curry(\n\t        __webpack_require__(112), 'line'\n\t    ));\n\n\t    // In case developer forget to include grid component\n\t    __webpack_require__(113);\n\n\n/***/ },\n/* 101 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var createListFromArray = __webpack_require__(102);\n\t    var SeriesModel = __webpack_require__(28);\n\n\t    module.exports = SeriesModel.extend({\n\n\t        type: 'series.line',\n\n\t        dependencies: ['grid', 'polar'],\n\n\t        getInitialData: function (option, ecModel) {\n\t            if (true) {\n\t                var coordSys = option.coordinateSystem;\n\t                if (coordSys !== 'polar' && coordSys !== 'cartesian2d') {\n\t                    throw new Error('Line not support coordinateSystem besides cartesian and polar');\n\t                }\n\t            }\n\t            return createListFromArray(option.data, this, ecModel);\n\t        },\n\n\t        defaultOption: {\n\t            zlevel: 0,                  // 一级层叠\n\t            z: 2,                       // 二级层叠\n\t            coordinateSystem: 'cartesian2d',\n\t            legendHoverLink: true,\n\n\t            hoverAnimation: true,\n\t            // stack: null\n\t            // xAxisIndex: 0,\n\t            // yAxisIndex: 0,\n\n\t            // polarIndex: 0,\n\n\t            // If clip the overflow value\n\t            clipOverflow: true,\n\n\t            label: {\n\t                normal: {\n\t                    position: 'top'\n\t                }\n\t            },\n\t            // itemStyle: {\n\t            //     normal: {},\n\t            //     emphasis: {}\n\t            // },\n\t            lineStyle: {\n\t                normal: {\n\t                    width: 2,\n\t                    type: 'solid'\n\t                }\n\t            },\n\t            // areaStyle: {},\n\t            // false, 'start', 'end', 'middle'\n\t            step: false,\n\n\t            // Disabled if step is true\n\t            smooth: false,\n\t            smoothMonotone: null,\n\t            // 拐点图形类型\n\t            symbol: 'emptyCircle',\n\t            // 拐点图形大小\n\t            symbolSize: 4,\n\t            // 拐点图形旋转控制\n\t            symbolRotate: null,\n\n\t            // 是否显示 symbol, 只有在 tooltip hover 的时候显示\n\t            showSymbol: true,\n\t            // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）\n\t            showAllSymbol: false,\n\n\t            // 是否连接断点\n\t            connectNulls: false,\n\n\t            // 数据过滤，'average', 'max', 'min', 'sum'\n\t            sampling: 'none',\n\n\t            animationEasing: 'linear',\n\n\t            // Disable progressive\n\t            progressive: 0,\n\t            hoverLayerThreshold: Infinity\n\t        }\n\t    });\n\n\n/***/ },\n/* 102 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var List = __webpack_require__(98);\n\t    var completeDimensions = __webpack_require__(103);\n\t    var zrUtil = __webpack_require__(4);\n\t    var modelUtil = __webpack_require__(5);\n\t    var CoordinateSystem = __webpack_require__(26);\n\t    var getDataItemValue = modelUtil.getDataItemValue;\n\t    var converDataValue = modelUtil.converDataValue;\n\n\t    function firstDataNotNull(data) {\n\t        var i = 0;\n\t        while (i < data.length && data[i] == null) {\n\t            i++;\n\t        }\n\t        return data[i];\n\t    }\n\t    function ifNeedCompleteOrdinalData(data) {\n\t        var sampleItem = firstDataNotNull(data);\n\t        return sampleItem != null\n\t            && !zrUtil.isArray(getDataItemValue(sampleItem));\n\t    }\n\n\t    /**\n\t     * Helper function to create a list from option data\n\t     */\n\t    function createListFromArray(data, seriesModel, ecModel) {\n\t        // If data is undefined\n\t        data = data || [];\n\n\t        if (true) {\n\t            if (!zrUtil.isArray(data)) {\n\t                throw new Error('Invalid data.');\n\t            }\n\t        }\n\n\t        var coordSysName = seriesModel.get('coordinateSystem');\n\t        var creator = creators[coordSysName];\n\t        var registeredCoordSys = CoordinateSystem.get(coordSysName);\n\t        // FIXME\n\t        var axesInfo = creator && creator(data, seriesModel, ecModel);\n\t        var dimensions = axesInfo && axesInfo.dimensions;\n\t        if (!dimensions) {\n\t            // Get dimensions from registered coordinate system\n\t            dimensions = (registeredCoordSys && registeredCoordSys.dimensions) || ['x', 'y'];\n\t            dimensions = completeDimensions(dimensions, data, dimensions.concat(['value']));\n\t        }\n\t        var categoryIndex = axesInfo ? axesInfo.categoryIndex : -1;\n\n\t        var list = new List(dimensions, seriesModel);\n\n\t        var nameList = createNameList(axesInfo, data);\n\n\t        var categories = {};\n\t        var dimValueGetter = (categoryIndex >= 0 && ifNeedCompleteOrdinalData(data))\n\t            ? function (itemOpt, dimName, dataIndex, dimIndex) {\n\t                // If any dataItem is like { value: 10 }\n\t                if (modelUtil.isDataItemOption(itemOpt)) {\n\t                    list.hasItemOption = true;\n\t                }\n\n\t                // Use dataIndex as ordinal value in categoryAxis\n\t                return dimIndex === categoryIndex\n\t                    ? dataIndex\n\t                    : converDataValue(getDataItemValue(itemOpt), dimensions[dimIndex]);\n\t            }\n\t            : function (itemOpt, dimName, dataIndex, dimIndex) {\n\t                var value = getDataItemValue(itemOpt);\n\t                var val = converDataValue(value && value[dimIndex], dimensions[dimIndex]);\n\t                // If any dataItem is like { value: 10 }\n\t                if (modelUtil.isDataItemOption(itemOpt)) {\n\t                    list.hasItemOption = true;\n\t                }\n\n\t                var categoryAxesModels = axesInfo && axesInfo.categoryAxesModels;\n\t                if (categoryAxesModels && categoryAxesModels[dimName]) {\n\t                    // If given value is a category string\n\t                    if (typeof val === 'string') {\n\t                        // Lazy get categories\n\t                        categories[dimName] = categories[dimName]\n\t                            || categoryAxesModels[dimName].getCategories();\n\t                        val = zrUtil.indexOf(categories[dimName], val);\n\t                        if (val < 0 && !isNaN(val)) {\n\t                            // In case some one write '1', '2' istead of 1, 2\n\t                            val = +val;\n\t                        }\n\t                    }\n\t                }\n\t                return val;\n\t            };\n\n\t        list.hasItemOption = false;\n\t        list.initData(data, nameList, dimValueGetter);\n\n\t        return list;\n\t    }\n\n\t    function isStackable(axisType) {\n\t        return axisType !== 'category' && axisType !== 'time';\n\t    }\n\n\t    function getDimTypeByAxis(axisType) {\n\t        return axisType === 'category'\n\t            ? 'ordinal'\n\t            : axisType === 'time'\n\t            ? 'time'\n\t            : 'float';\n\t    }\n\n\t    /**\n\t     * Creaters for each coord system.\n\t     */\n\t    var creators = {\n\n\t        cartesian2d: function (data, seriesModel, ecModel) {\n\n\t            var axesModels = zrUtil.map(['xAxis', 'yAxis'], function (name) {\n\t                return ecModel.queryComponents({\n\t                    mainType: name,\n\t                    index: seriesModel.get(name + 'Index'),\n\t                    id: seriesModel.get(name + 'Id')\n\t                })[0];\n\t            });\n\t            var xAxisModel = axesModels[0];\n\t            var yAxisModel = axesModels[1];\n\n\t            if (true) {\n\t                if (!xAxisModel) {\n\t                    throw new Error('xAxis \"' + zrUtil.retrieve(\n\t                        seriesModel.get('xAxisIndex'),\n\t                        seriesModel.get('xAxisId'),\n\t                        0\n\t                    ) + '\" not found');\n\t                }\n\t                if (!yAxisModel) {\n\t                    throw new Error('yAxis \"' + zrUtil.retrieve(\n\t                        seriesModel.get('xAxisIndex'),\n\t                        seriesModel.get('yAxisId'),\n\t                        0\n\t                    ) + '\" not found');\n\t                }\n\t            }\n\n\t            var xAxisType = xAxisModel.get('type');\n\t            var yAxisType = yAxisModel.get('type');\n\n\t            var dimensions = [\n\t                {\n\t                    name: 'x',\n\t                    type: getDimTypeByAxis(xAxisType),\n\t                    stackable: isStackable(xAxisType)\n\t                },\n\t                {\n\t                    name: 'y',\n\t                    // If two category axes\n\t                    type: getDimTypeByAxis(yAxisType),\n\t                    stackable: isStackable(yAxisType)\n\t                }\n\t            ];\n\n\t            var isXAxisCateogry = xAxisType === 'category';\n\t            var isYAxisCategory = yAxisType === 'category';\n\n\t            completeDimensions(dimensions, data, ['x', 'y', 'z']);\n\n\t            var categoryAxesModels = {};\n\t            if (isXAxisCateogry) {\n\t                categoryAxesModels.x = xAxisModel;\n\t            }\n\t            if (isYAxisCategory) {\n\t                categoryAxesModels.y = yAxisModel;\n\t            }\n\t            return {\n\t                dimensions: dimensions,\n\t                categoryIndex: isXAxisCateogry ? 0 : (isYAxisCategory ? 1 : -1),\n\t                categoryAxesModels: categoryAxesModels\n\t            };\n\t        },\n\n\t        singleAxis: function (data, seriesModel, ecModel) {\n\n\t            var singleAxisModel = ecModel.queryComponents({\n\t                mainType: 'singleAxis',\n\t                index: seriesModel.get('singleAxisIndex'),\n\t                id: seriesModel.get('singleAxisId')\n\t            })[0];\n\n\t            if (true) {\n\t                if (!singleAxisModel) {\n\t                    throw new Error('singleAxis should be specified.');\n\t                }\n\t            }\n\n\t            var singleAxisType = singleAxisModel.get('type');\n\t            var isCategory = singleAxisType === 'category';\n\n\t            var dimensions = [{\n\t                name: 'single',\n\t                type: getDimTypeByAxis(singleAxisType),\n\t                stackable: isStackable(singleAxisType)\n\t            }];\n\n\t            completeDimensions(dimensions, data);\n\n\t            var categoryAxesModels = {};\n\t            if (isCategory) {\n\t                categoryAxesModels.single = singleAxisModel;\n\t            }\n\n\t            return {\n\t                dimensions: dimensions,\n\t                categoryIndex: isCategory ? 0 : -1,\n\t                categoryAxesModels: categoryAxesModels\n\t            };\n\t        },\n\n\t        polar: function (data, seriesModel, ecModel) {\n\t            var polarModel = ecModel.queryComponents({\n\t                mainType: 'polar',\n\t                index: seriesModel.get('polarIndex'),\n\t                id: seriesModel.get('polarId')\n\t            })[0];\n\n\t            var angleAxisModel = polarModel.findAxisModel('angleAxis');\n\t            var radiusAxisModel = polarModel.findAxisModel('radiusAxis');\n\n\t            if (true) {\n\t                if (!angleAxisModel) {\n\t                    throw new Error('angleAxis option not found');\n\t                }\n\t                if (!radiusAxisModel) {\n\t                    throw new Error('radiusAxis option not found');\n\t                }\n\t            }\n\n\t            var radiusAxisType = radiusAxisModel.get('type');\n\t            var angleAxisType = angleAxisModel.get('type');\n\n\t            var dimensions = [\n\t                {\n\t                    name: 'radius',\n\t                    type: getDimTypeByAxis(radiusAxisType),\n\t                    stackable: isStackable(radiusAxisType)\n\t                },\n\t                {\n\t                    name: 'angle',\n\t                    type: getDimTypeByAxis(angleAxisType),\n\t                    stackable: isStackable(angleAxisType)\n\t                }\n\t            ];\n\t            var isAngleAxisCateogry = angleAxisType === 'category';\n\t            var isRadiusAxisCateogry = radiusAxisType === 'category';\n\n\t            completeDimensions(dimensions, data, ['radius', 'angle', 'value']);\n\n\t            var categoryAxesModels = {};\n\t            if (isRadiusAxisCateogry) {\n\t                categoryAxesModels.radius = radiusAxisModel;\n\t            }\n\t            if (isAngleAxisCateogry) {\n\t                categoryAxesModels.angle = angleAxisModel;\n\t            }\n\t            return {\n\t                dimensions: dimensions,\n\t                categoryIndex: isAngleAxisCateogry ? 1 : (isRadiusAxisCateogry ? 0 : -1),\n\t                categoryAxesModels: categoryAxesModels\n\t            };\n\t        },\n\n\t        geo: function (data, seriesModel, ecModel) {\n\t            // TODO Region\n\t            // 多个散点图系列在同一个地区的时候\n\t            return {\n\t                dimensions: completeDimensions([\n\t                    {name: 'lng'},\n\t                    {name: 'lat'}\n\t                ], data, ['lng', 'lat', 'value'])\n\t            };\n\t        }\n\t    };\n\n\t    function createNameList(result, data) {\n\t        var nameList = [];\n\n\t        var categoryDim = result && result.dimensions[result.categoryIndex];\n\t        var categoryAxisModel;\n\t        if (categoryDim) {\n\t            categoryAxisModel = result.categoryAxesModels[categoryDim.name];\n\t        }\n\n\t        if (categoryAxisModel) {\n\t            // FIXME Two category axis\n\t            var categories = categoryAxisModel.getCategories();\n\t            if (categories) {\n\t                var dataLen = data.length;\n\t                // Ordered data is given explicitly like\n\t                // [[3, 0.2], [1, 0.3], [2, 0.15]]\n\t                // or given scatter data,\n\t                // pick the category\n\t                if (zrUtil.isArray(data[0]) && data[0].length > 1) {\n\t                    nameList = [];\n\t                    for (var i = 0; i < dataLen; i++) {\n\t                        nameList[i] = categories[data[i][result.categoryIndex || 0]];\n\t                    }\n\t                }\n\t                else {\n\t                    nameList = categories.slice(0);\n\t                }\n\t            }\n\t        }\n\n\t        return nameList;\n\t    }\n\n\t    module.exports = createListFromArray;\n\n\n\n/***/ },\n/* 103 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Complete dimensions by data (guess dimension).\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    /**\n\t     * Complete the dimensions array guessed from the data structure.\n\t     * @param  {Array.<string>} dimensions      Necessary dimensions, like ['x', 'y']\n\t     * @param  {Array} data                     Data list. [[1, 2, 3], [2, 3, 4]]\n\t     * @param  {Array.<string>} [defaultNames]    Default names to fill not necessary dimensions, like ['value']\n\t     * @param  {string} [extraPrefix]             Prefix of name when filling the left dimensions.\n\t     * @return {Array.<string>}\n\t     */\n\t    function completeDimensions(dimensions, data, defaultNames, extraPrefix) {\n\t        if (!data) {\n\t            return dimensions;\n\t        }\n\n\t        var value0 = retrieveValue(data[0]);\n\t        var dimSize = zrUtil.isArray(value0) && value0.length || 1;\n\n\t        defaultNames = defaultNames || [];\n\t        extraPrefix = extraPrefix || 'extra';\n\t        for (var i = 0; i < dimSize; i++) {\n\t            if (!dimensions[i]) {\n\t                var name = defaultNames[i] || (extraPrefix + (i - defaultNames.length));\n\t                dimensions[i] = guessOrdinal(data, i)\n\t                    ? {type: 'ordinal', name: name}\n\t                    : name;\n\t            }\n\t        }\n\n\t        return dimensions;\n\t    }\n\n\t    // The rule should not be complex, otherwise user might not\n\t    // be able to known where the data is wrong.\n\t    var guessOrdinal = completeDimensions.guessOrdinal = function (data, dimIndex) {\n\t        for (var i = 0, len = data.length; i < len; i++) {\n\t            var value = retrieveValue(data[i]);\n\n\t            if (!zrUtil.isArray(value)) {\n\t                return false;\n\t            }\n\n\t            var value = value[dimIndex];\n\t            if (value != null && isFinite(value)) {\n\t                return false;\n\t            }\n\t            else if (zrUtil.isString(value) && value !== '-') {\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    };\n\n\t    function retrieveValue(o) {\n\t        return zrUtil.isArray(o) ? o : zrUtil.isObject(o) ? o.value: o;\n\t    }\n\n\t    module.exports = completeDimensions;\n\n\n\n/***/ },\n/* 104 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t// FIXME step not support polar\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var SymbolDraw = __webpack_require__(105);\n\t    var Symbol = __webpack_require__(106);\n\t    var lineAnimationDiff = __webpack_require__(108);\n\t    var graphic = __webpack_require__(43);\n\t    var modelUtil = __webpack_require__(5);\n\t    var polyHelper = __webpack_require__(109);\n\t    var ChartView = __webpack_require__(42);\n\n\t    function isPointsSame(points1, points2) {\n\t        if (points1.length !== points2.length) {\n\t            return;\n\t        }\n\t        for (var i = 0; i < points1.length; i++) {\n\t            var p1 = points1[i];\n\t            var p2 = points2[i];\n\t            if (p1[0] !== p2[0] || p1[1] !== p2[1]) {\n\t                return;\n\t            }\n\t        }\n\t        return true;\n\t    }\n\n\t    function getSmooth(smooth) {\n\t        return typeof (smooth) === 'number' ? smooth : (smooth ? 0.3 : 0);\n\t    }\n\n\t    function getAxisExtentWithGap(axis) {\n\t        var extent = axis.getGlobalExtent();\n\t        if (axis.onBand) {\n\t            // Remove extra 1px to avoid line miter in clipped edge\n\t            var halfBandWidth = axis.getBandWidth() / 2 - 1;\n\t            var dir = extent[1] > extent[0] ? 1 : -1;\n\t            extent[0] += dir * halfBandWidth;\n\t            extent[1] -= dir * halfBandWidth;\n\t        }\n\t        return extent;\n\t    }\n\n\t    function sign(val) {\n\t        return val >= 0 ? 1 : -1;\n\t    }\n\t    /**\n\t     * @param {module:echarts/coord/cartesian/Cartesian2D|module:echarts/coord/polar/Polar} coordSys\n\t     * @param {module:echarts/data/List} data\n\t     * @param {Array.<Array.<number>>} points\n\t     * @private\n\t     */\n\t    function getStackedOnPoints(coordSys, data) {\n\t        var baseAxis = coordSys.getBaseAxis();\n\t        var valueAxis = coordSys.getOtherAxis(baseAxis);\n\t        var valueStart = baseAxis.onZero\n\t            ? 0 : valueAxis.scale.getExtent()[0];\n\n\t        var valueDim = valueAxis.dim;\n\n\t        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;\n\n\t        return data.mapArray([valueDim], function (val, idx) {\n\t            var stackedOnSameSign;\n\t            var stackedOn = data.stackedOn;\n\t            // Find first stacked value with same sign\n\t            while (stackedOn &&\n\t                sign(stackedOn.get(valueDim, idx)) === sign(val)\n\t            ) {\n\t                stackedOnSameSign = stackedOn;\n\t                break;\n\t            }\n\t            var stackedData = [];\n\t            stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);\n\t            stackedData[1 - baseDataOffset] = stackedOnSameSign\n\t                ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;\n\n\t            return coordSys.dataToPoint(stackedData);\n\t        }, true);\n\t    }\n\n\t    function createGridClipShape(cartesian, hasAnimation, seriesModel) {\n\t        var xExtent = getAxisExtentWithGap(cartesian.getAxis('x'));\n\t        var yExtent = getAxisExtentWithGap(cartesian.getAxis('y'));\n\t        var isHorizontal = cartesian.getBaseAxis().isHorizontal();\n\n\t        var x = Math.min(xExtent[0], xExtent[1]);\n\t        var y = Math.min(yExtent[0], yExtent[1]);\n\t        var width = Math.max(xExtent[0], xExtent[1]) - x;\n\t        var height = Math.max(yExtent[0], yExtent[1]) - y;\n\t        var lineWidth = seriesModel.get('lineStyle.normal.width') || 2;\n\t        // Expand clip shape to avoid clipping when line value exceeds axis\n\t        var expandSize = seriesModel.get('clipOverflow') ? lineWidth / 2 : Math.max(width, height);\n\t        if (isHorizontal) {\n\t            y -= expandSize;\n\t            height += expandSize * 2;\n\t        }\n\t        else {\n\t            x -= expandSize;\n\t            width += expandSize * 2;\n\t        }\n\n\t        var clipPath = new graphic.Rect({\n\t            shape: {\n\t                x: x,\n\t                y: y,\n\t                width: width,\n\t                height: height\n\t            }\n\t        });\n\n\t        if (hasAnimation) {\n\t            clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;\n\t            graphic.initProps(clipPath, {\n\t                shape: {\n\t                    width: width,\n\t                    height: height\n\t                }\n\t            }, seriesModel);\n\t        }\n\n\t        return clipPath;\n\t    }\n\n\t    function createPolarClipShape(polar, hasAnimation, seriesModel) {\n\t        var angleAxis = polar.getAngleAxis();\n\t        var radiusAxis = polar.getRadiusAxis();\n\n\t        var radiusExtent = radiusAxis.getExtent();\n\t        var angleExtent = angleAxis.getExtent();\n\n\t        var RADIAN = Math.PI / 180;\n\n\t        var clipPath = new graphic.Sector({\n\t            shape: {\n\t                cx: polar.cx,\n\t                cy: polar.cy,\n\t                r0: radiusExtent[0],\n\t                r: radiusExtent[1],\n\t                startAngle: -angleExtent[0] * RADIAN,\n\t                endAngle: -angleExtent[1] * RADIAN,\n\t                clockwise: angleAxis.inverse\n\t            }\n\t        });\n\n\t        if (hasAnimation) {\n\t            clipPath.shape.endAngle = -angleExtent[0] * RADIAN;\n\t            graphic.initProps(clipPath, {\n\t                shape: {\n\t                    endAngle: -angleExtent[1] * RADIAN\n\t                }\n\t            }, seriesModel);\n\t        }\n\n\t        return clipPath;\n\t    }\n\n\t    function createClipShape(coordSys, hasAnimation, seriesModel) {\n\t        return coordSys.type === 'polar'\n\t            ? createPolarClipShape(coordSys, hasAnimation, seriesModel)\n\t            : createGridClipShape(coordSys, hasAnimation, seriesModel);\n\t    }\n\n\t    function turnPointsIntoStep(points, coordSys, stepTurnAt) {\n\t        var baseAxis = coordSys.getBaseAxis();\n\t        var baseIndex = baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1;\n\n\t        var stepPoints = [];\n\t        for (var i = 0; i < points.length - 1; i++) {\n\t            var nextPt = points[i + 1];\n\t            var pt = points[i];\n\t            stepPoints.push(pt);\n\n\t            var stepPt = [];\n\t            switch (stepTurnAt) {\n\t                case 'end':\n\t                    stepPt[baseIndex] = nextPt[baseIndex];\n\t                    stepPt[1 - baseIndex] = pt[1 - baseIndex];\n\t                    // default is start\n\t                    stepPoints.push(stepPt);\n\t                    break;\n\t                case 'middle':\n\t                    // default is start\n\t                    var middle = (pt[baseIndex] + nextPt[baseIndex]) / 2;\n\t                    var stepPt2 = [];\n\t                    stepPt[baseIndex] = stepPt2[baseIndex] = middle;\n\t                    stepPt[1 - baseIndex] = pt[1 - baseIndex];\n\t                    stepPt2[1 - baseIndex] = nextPt[1 - baseIndex];\n\t                    stepPoints.push(stepPt);\n\t                    stepPoints.push(stepPt2);\n\t                    break;\n\t                default:\n\t                    stepPt[baseIndex] = pt[baseIndex];\n\t                    stepPt[1 - baseIndex] = nextPt[1 - baseIndex];\n\t                    // default is start\n\t                    stepPoints.push(stepPt);\n\t            }\n\t        }\n\t        // Last points\n\t        points[i] && stepPoints.push(points[i]);\n\t        return stepPoints;\n\t    }\n\n\t    function getVisualGradient(data, coordSys) {\n\t        var visualMetaList = data.getVisual('visualMeta');\n\t        if (!visualMetaList || !visualMetaList.length || !data.count()) {\n\t            // When data.count() is 0, gradient range can not be calculated.\n\t            return;\n\t        }\n\n\t        var visualMeta;\n\t        for (var i = visualMetaList.length - 1; i >= 0; i--) {\n\t            // Can only be x or y\n\t            if (visualMetaList[i].dimension < 2) {\n\t                visualMeta = visualMetaList[i];\n\t                break;\n\t            }\n\t        }\n\t        if (!visualMeta || coordSys.type !== 'cartesian2d') {\n\t            if (true) {\n\t                console.warn('Visual map on line style only support x or y dimension.');\n\t            }\n\t            return;\n\t        }\n\n\t        // If the area to be rendered is bigger than area defined by LinearGradient,\n\t        // the canvas spec prescribes that the color of the first stop and the last\n\t        // stop should be used. But if two stops are added at offset 0, in effect\n\t        // browsers use the color of the second stop to render area outside\n\t        // LinearGradient. So we can only infinitesimally extend area defined in\n\t        // LinearGradient to render `outerColors`.\n\n\t        var dimension = visualMeta.dimension;\n\t        var dimName = data.dimensions[dimension];\n\t        var axis = coordSys.getAxis(dimName);\n\n\t        // dataToCoor mapping may not be linear, but must be monotonic.\n\t        var colorStops = zrUtil.map(visualMeta.stops, function (stop) {\n\t            return {\n\t                coord: axis.toGlobalCoord(axis.dataToCoord(stop.value)),\n\t                color: stop.color\n\t            };\n\t        });\n\t        var stopLen = colorStops.length;\n\t        var outerColors = visualMeta.outerColors.slice();\n\n\t        if (stopLen && colorStops[0].coord > colorStops[stopLen - 1].coord) {\n\t            colorStops.reverse();\n\t            outerColors.reverse();\n\t        }\n\n\t        var tinyExtent = 10; // Arbitrary value: 10px\n\t        var minCoord = colorStops[0].coord - tinyExtent;\n\t        var maxCoord = colorStops[stopLen - 1].coord + tinyExtent;\n\t        var coordSpan = maxCoord - minCoord;\n\n\t        if (coordSpan < 1e-3) {\n\t            return 'transparent';\n\t        }\n\n\t        zrUtil.each(colorStops, function (stop) {\n\t            stop.offset = (stop.coord - minCoord) / coordSpan;\n\t        });\n\t        colorStops.push({\n\t            offset: stopLen ? colorStops[stopLen - 1].offset : 0.5,\n\t            color: outerColors[1] || 'transparent'\n\t        });\n\t        colorStops.unshift({ // notice colorStops.length have been changed.\n\t            offset: stopLen ? colorStops[0].offset : 0.5,\n\t            color: outerColors[0] || 'transparent'\n\t        });\n\n\t        // zrUtil.each(colorStops, function (colorStop) {\n\t        //     // Make sure each offset has rounded px to avoid not sharp edge\n\t        //     colorStop.offset = (Math.round(colorStop.offset * (end - start) + start) - start) / (end - start);\n\t        // });\n\n\t        var gradient = new graphic.LinearGradient(0, 0, 0, 0, colorStops, true);\n\t        gradient[dimName] = minCoord;\n\t        gradient[dimName + '2'] = maxCoord;\n\n\t        return gradient;\n\t    }\n\n\t    module.exports = ChartView.extend({\n\n\t        type: 'line',\n\n\t        init: function () {\n\t            var lineGroup = new graphic.Group();\n\n\t            var symbolDraw = new SymbolDraw();\n\t            this.group.add(symbolDraw.group);\n\n\t            this._symbolDraw = symbolDraw;\n\t            this._lineGroup = lineGroup;\n\t        },\n\n\t        render: function (seriesModel, ecModel, api) {\n\t            var coordSys = seriesModel.coordinateSystem;\n\t            var group = this.group;\n\t            var data = seriesModel.getData();\n\t            var lineStyleModel = seriesModel.getModel('lineStyle.normal');\n\t            var areaStyleModel = seriesModel.getModel('areaStyle.normal');\n\n\t            var points = data.mapArray(data.getItemLayout, true);\n\n\t            var isCoordSysPolar = coordSys.type === 'polar';\n\t            var prevCoordSys = this._coordSys;\n\n\t            var symbolDraw = this._symbolDraw;\n\t            var polyline = this._polyline;\n\t            var polygon = this._polygon;\n\n\t            var lineGroup = this._lineGroup;\n\n\t            var hasAnimation = seriesModel.get('animation');\n\n\t            var isAreaChart = !areaStyleModel.isEmpty();\n\t            var stackedOnPoints = getStackedOnPoints(coordSys, data);\n\n\t            var showSymbol = seriesModel.get('showSymbol');\n\n\t            var isSymbolIgnore = showSymbol && !isCoordSysPolar && !seriesModel.get('showAllSymbol')\n\t                && this._getSymbolIgnoreFunc(data, coordSys);\n\n\t            // Remove temporary symbols\n\t            var oldData = this._data;\n\t            oldData && oldData.eachItemGraphicEl(function (el, idx) {\n\t                if (el.__temp) {\n\t                    group.remove(el);\n\t                    oldData.setItemGraphicEl(idx, null);\n\t                }\n\t            });\n\n\t            // Remove previous created symbols if showSymbol changed to false\n\t            if (!showSymbol) {\n\t                symbolDraw.remove();\n\t            }\n\n\t            group.add(lineGroup);\n\n\t            // FIXME step not support polar\n\t            var step = !isCoordSysPolar && seriesModel.get('step');\n\t            // Initialization animation or coordinate system changed\n\t            if (\n\t                !(polyline && prevCoordSys.type === coordSys.type && step === this._step)\n\t            ) {\n\t                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);\n\n\t                if (step) {\n\t                    // TODO If stacked series is not step\n\t                    points = turnPointsIntoStep(points, coordSys, step);\n\t                    stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\n\t                }\n\n\t                polyline = this._newPolyline(points, coordSys, hasAnimation);\n\t                if (isAreaChart) {\n\t                    polygon = this._newPolygon(\n\t                        points, stackedOnPoints,\n\t                        coordSys, hasAnimation\n\t                    );\n\t                }\n\t                lineGroup.setClipPath(createClipShape(coordSys, true, seriesModel));\n\t            }\n\t            else {\n\t                if (isAreaChart && !polygon) {\n\t                    // If areaStyle is added\n\t                    polygon = this._newPolygon(\n\t                        points, stackedOnPoints,\n\t                        coordSys, hasAnimation\n\t                    );\n\t                }\n\t                else if (polygon && !isAreaChart) {\n\t                    // If areaStyle is removed\n\t                    lineGroup.remove(polygon);\n\t                    polygon = this._polygon = null;\n\t                }\n\n\t                // Update clipPath\n\t                lineGroup.setClipPath(createClipShape(coordSys, false, seriesModel));\n\n\t                // Always update, or it is wrong in the case turning on legend\n\t                // because points are not changed\n\t                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);\n\n\t                // Stop symbol animation and sync with line points\n\t                // FIXME performance?\n\t                data.eachItemGraphicEl(function (el) {\n\t                    el.stopAnimation(true);\n\t                });\n\n\t                // In the case data zoom triggerred refreshing frequently\n\t                // Data may not change if line has a category axis. So it should animate nothing\n\t                if (!isPointsSame(this._stackedOnPoints, stackedOnPoints)\n\t                    || !isPointsSame(this._points, points)\n\t                ) {\n\t                    if (hasAnimation) {\n\t                        this._updateAnimation(\n\t                            data, stackedOnPoints, coordSys, api, step\n\t                        );\n\t                    }\n\t                    else {\n\t                        // Not do it in update with animation\n\t                        if (step) {\n\t                            // TODO If stacked series is not step\n\t                            points = turnPointsIntoStep(points, coordSys, step);\n\t                            stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\n\t                        }\n\n\t                        polyline.setShape({\n\t                            points: points\n\t                        });\n\t                        polygon && polygon.setShape({\n\t                            points: points,\n\t                            stackedOnPoints: stackedOnPoints\n\t                        });\n\t                    }\n\t                }\n\t            }\n\n\t            var visualColor = getVisualGradient(data, coordSys) || data.getVisual('color');\n\n\t            polyline.useStyle(zrUtil.defaults(\n\t                // Use color in lineStyle first\n\t                lineStyleModel.getLineStyle(),\n\t                {\n\t                    fill: 'none',\n\t                    stroke: visualColor,\n\t                    lineJoin: 'bevel'\n\t                }\n\t            ));\n\n\t            var smooth = seriesModel.get('smooth');\n\t            smooth = getSmooth(seriesModel.get('smooth'));\n\t            polyline.setShape({\n\t                smooth: smooth,\n\t                smoothMonotone: seriesModel.get('smoothMonotone'),\n\t                connectNulls: seriesModel.get('connectNulls')\n\t            });\n\n\t            if (polygon) {\n\t                var stackedOn = data.stackedOn;\n\t                var stackedOnSmooth = 0;\n\n\t                polygon.useStyle(zrUtil.defaults(\n\t                    areaStyleModel.getAreaStyle(),\n\t                    {\n\t                        fill: visualColor,\n\t                        opacity: 0.7,\n\t                        lineJoin: 'bevel'\n\t                    }\n\t                ));\n\n\t                if (stackedOn) {\n\t                    var stackedOnSeries = stackedOn.hostModel;\n\t                    stackedOnSmooth = getSmooth(stackedOnSeries.get('smooth'));\n\t                }\n\n\t                polygon.setShape({\n\t                    smooth: smooth,\n\t                    stackedOnSmooth: stackedOnSmooth,\n\t                    smoothMonotone: seriesModel.get('smoothMonotone'),\n\t                    connectNulls: seriesModel.get('connectNulls')\n\t                });\n\t            }\n\n\t            this._data = data;\n\t            // Save the coordinate system for transition animation when data changed\n\t            this._coordSys = coordSys;\n\t            this._stackedOnPoints = stackedOnPoints;\n\t            this._points = points;\n\t            this._step = step;\n\t        },\n\n\t        dispose: function () {},\n\n\t        highlight: function (seriesModel, ecModel, api, payload) {\n\t            var data = seriesModel.getData();\n\t            var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n\t            if (!(dataIndex instanceof Array) && dataIndex != null && dataIndex >= 0) {\n\t                var symbol = data.getItemGraphicEl(dataIndex);\n\t                if (!symbol) {\n\t                    // Create a temporary symbol if it is not exists\n\t                    var pt = data.getItemLayout(dataIndex);\n\t                    if (!pt) {\n\t                        // Null data\n\t                        return;\n\t                    }\n\t                    symbol = new Symbol(data, dataIndex);\n\t                    symbol.position = pt;\n\t                    symbol.setZ(\n\t                        seriesModel.get('zlevel'),\n\t                        seriesModel.get('z')\n\t                    );\n\t                    symbol.ignore = isNaN(pt[0]) || isNaN(pt[1]);\n\t                    symbol.__temp = true;\n\t                    data.setItemGraphicEl(dataIndex, symbol);\n\n\t                    // Stop scale animation\n\t                    symbol.stopSymbolAnimation(true);\n\n\t                    this.group.add(symbol);\n\t                }\n\t                symbol.highlight();\n\t            }\n\t            else {\n\t                // Highlight whole series\n\t                ChartView.prototype.highlight.call(\n\t                    this, seriesModel, ecModel, api, payload\n\t                );\n\t            }\n\t        },\n\n\t        downplay: function (seriesModel, ecModel, api, payload) {\n\t            var data = seriesModel.getData();\n\t            var dataIndex = modelUtil.queryDataIndex(data, payload);\n\t            if (dataIndex != null && dataIndex >= 0) {\n\t                var symbol = data.getItemGraphicEl(dataIndex);\n\t                if (symbol) {\n\t                    if (symbol.__temp) {\n\t                        data.setItemGraphicEl(dataIndex, null);\n\t                        this.group.remove(symbol);\n\t                    }\n\t                    else {\n\t                        symbol.downplay();\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                // Downplay whole series\n\t                ChartView.prototype.downplay.call(\n\t                    this, seriesModel, ecModel, api, payload\n\t                );\n\t            }\n\t        },\n\n\t        /**\n\t         * @param {module:zrender/container/Group} group\n\t         * @param {Array.<Array.<number>>} points\n\t         * @private\n\t         */\n\t        _newPolyline: function (points) {\n\t            var polyline = this._polyline;\n\t            // Remove previous created polyline\n\t            if (polyline) {\n\t                this._lineGroup.remove(polyline);\n\t            }\n\n\t            polyline = new polyHelper.Polyline({\n\t                shape: {\n\t                    points: points\n\t                },\n\t                silent: true,\n\t                z2: 10\n\t            });\n\n\t            this._lineGroup.add(polyline);\n\n\t            this._polyline = polyline;\n\n\t            return polyline;\n\t        },\n\n\t        /**\n\t         * @param {module:zrender/container/Group} group\n\t         * @param {Array.<Array.<number>>} stackedOnPoints\n\t         * @param {Array.<Array.<number>>} points\n\t         * @private\n\t         */\n\t        _newPolygon: function (points, stackedOnPoints) {\n\t            var polygon = this._polygon;\n\t            // Remove previous created polygon\n\t            if (polygon) {\n\t                this._lineGroup.remove(polygon);\n\t            }\n\n\t            polygon = new polyHelper.Polygon({\n\t                shape: {\n\t                    points: points,\n\t                    stackedOnPoints: stackedOnPoints\n\t                },\n\t                silent: true\n\t            });\n\n\t            this._lineGroup.add(polygon);\n\n\t            this._polygon = polygon;\n\t            return polygon;\n\t        },\n\t        /**\n\t         * @private\n\t         */\n\t        _getSymbolIgnoreFunc: function (data, coordSys) {\n\t            var categoryAxis = coordSys.getAxesByScale('ordinal')[0];\n\t            // `getLabelInterval` is provided by echarts/component/axis\n\t            if (categoryAxis && categoryAxis.isLabelIgnored) {\n\t                return zrUtil.bind(categoryAxis.isLabelIgnored, categoryAxis);\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        // FIXME Two value axis\n\t        _updateAnimation: function (data, stackedOnPoints, coordSys, api, step) {\n\t            var polyline = this._polyline;\n\t            var polygon = this._polygon;\n\t            var seriesModel = data.hostModel;\n\n\t            var diff = lineAnimationDiff(\n\t                this._data, data,\n\t                this._stackedOnPoints, stackedOnPoints,\n\t                this._coordSys, coordSys\n\t            );\n\n\t            var current = diff.current;\n\t            var stackedOnCurrent = diff.stackedOnCurrent;\n\t            var next = diff.next;\n\t            var stackedOnNext = diff.stackedOnNext;\n\t            if (step) {\n\t                // TODO If stacked series is not step\n\t                current = turnPointsIntoStep(diff.current, coordSys, step);\n\t                stackedOnCurrent = turnPointsIntoStep(diff.stackedOnCurrent, coordSys, step);\n\t                next = turnPointsIntoStep(diff.next, coordSys, step);\n\t                stackedOnNext = turnPointsIntoStep(diff.stackedOnNext, coordSys, step);\n\t            }\n\t            // `diff.current` is subset of `current` (which should be ensured by\n\t            // turnPointsIntoStep), so points in `__points` can be updated when\n\t            // points in `current` are update during animation.\n\t            polyline.shape.__points = diff.current;\n\t            polyline.shape.points = current;\n\n\t            graphic.updateProps(polyline, {\n\t                shape: {\n\t                    points: next\n\t                }\n\t            }, seriesModel);\n\n\t            if (polygon) {\n\t                polygon.setShape({\n\t                    points: current,\n\t                    stackedOnPoints: stackedOnCurrent\n\t                });\n\t                graphic.updateProps(polygon, {\n\t                    shape: {\n\t                        points: next,\n\t                        stackedOnPoints: stackedOnNext\n\t                    }\n\t                }, seriesModel);\n\t            }\n\n\t            var updatedDataInfo = [];\n\t            var diffStatus = diff.status;\n\n\t            for (var i = 0; i < diffStatus.length; i++) {\n\t                var cmd = diffStatus[i].cmd;\n\t                if (cmd === '=') {\n\t                    var el = data.getItemGraphicEl(diffStatus[i].idx1);\n\t                    if (el) {\n\t                        updatedDataInfo.push({\n\t                            el: el,\n\t                            ptIdx: i    // Index of points\n\t                        });\n\t                    }\n\t                }\n\t            }\n\n\t            if (polyline.animators && polyline.animators.length) {\n\t                polyline.animators[0].during(function () {\n\t                    for (var i = 0; i < updatedDataInfo.length; i++) {\n\t                        var el = updatedDataInfo[i].el;\n\t                        el.attr('position', polyline.shape.__points[updatedDataInfo[i].ptIdx]);\n\t                    }\n\t                });\n\t            }\n\t        },\n\n\t        remove: function (ecModel) {\n\t            var group = this.group;\n\t            var oldData = this._data;\n\t            this._lineGroup.removeAll();\n\t            this._symbolDraw.remove(true);\n\t            // Remove temporary created elements when highlighting\n\t            oldData && oldData.eachItemGraphicEl(function (el, idx) {\n\t                if (el.__temp) {\n\t                    group.remove(el);\n\t                    oldData.setItemGraphicEl(idx, null);\n\t                }\n\t            });\n\n\t            this._polyline =\n\t            this._polygon =\n\t            this._coordSys =\n\t            this._points =\n\t            this._stackedOnPoints =\n\t            this._data = null;\n\t        }\n\t    });\n\n\n/***/ },\n/* 105 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @module echarts/chart/helper/SymbolDraw\n\t */\n\n\n\t    var graphic = __webpack_require__(43);\n\t    var Symbol = __webpack_require__(106);\n\n\t    /**\n\t     * @constructor\n\t     * @alias module:echarts/chart/helper/SymbolDraw\n\t     * @param {module:zrender/graphic/Group} [symbolCtor]\n\t     */\n\t    function SymbolDraw(symbolCtor) {\n\t        this.group = new graphic.Group();\n\n\t        this._symbolCtor = symbolCtor || Symbol;\n\t    }\n\n\t    var symbolDrawProto = SymbolDraw.prototype;\n\n\t    function symbolNeedsDraw(data, idx, isIgnore) {\n\t        var point = data.getItemLayout(idx);\n\t        // Is an object\n\t        // if (point && point.hasOwnProperty('point')) {\n\t        //     point = point.point;\n\t        // }\n\t        return point && !isNaN(point[0]) && !isNaN(point[1]) && !(isIgnore && isIgnore(idx))\n\t                    && data.getItemVisual(idx, 'symbol') !== 'none';\n\t    }\n\t    /**\n\t     * Update symbols draw by new data\n\t     * @param {module:echarts/data/List} data\n\t     * @param {Array.<boolean>} [isIgnore]\n\t     */\n\t    symbolDrawProto.updateData = function (data, isIgnore) {\n\t        var group = this.group;\n\t        var seriesModel = data.hostModel;\n\t        var oldData = this._data;\n\n\t        var SymbolCtor = this._symbolCtor;\n\n\t        var seriesScope = {\n\t            itemStyle: seriesModel.getModel('itemStyle.normal').getItemStyle(['color']),\n\t            hoverItemStyle: seriesModel.getModel('itemStyle.emphasis').getItemStyle(),\n\t            symbolRotate: seriesModel.get('symbolRotate'),\n\t            symbolOffset: seriesModel.get('symbolOffset'),\n\t            hoverAnimation: seriesModel.get('hoverAnimation'),\n\n\t            labelModel: seriesModel.getModel('label.normal'),\n\t            hoverLabelModel: seriesModel.getModel('label.emphasis')\n\t        };\n\n\t        data.diff(oldData)\n\t            .add(function (newIdx) {\n\t                var point = data.getItemLayout(newIdx);\n\t                if (symbolNeedsDraw(data, newIdx, isIgnore)) {\n\t                    var symbolEl = new SymbolCtor(data, newIdx, seriesScope);\n\t                    symbolEl.attr('position', point);\n\t                    data.setItemGraphicEl(newIdx, symbolEl);\n\t                    group.add(symbolEl);\n\t                }\n\t            })\n\t            .update(function (newIdx, oldIdx) {\n\t                var symbolEl = oldData.getItemGraphicEl(oldIdx);\n\t                var point = data.getItemLayout(newIdx);\n\t                if (!symbolNeedsDraw(data, newIdx, isIgnore)) {\n\t                    group.remove(symbolEl);\n\t                    return;\n\t                }\n\t                if (!symbolEl) {\n\t                    symbolEl = new SymbolCtor(data, newIdx);\n\t                    symbolEl.attr('position', point);\n\t                }\n\t                else {\n\t                    symbolEl.updateData(data, newIdx, seriesScope);\n\t                    graphic.updateProps(symbolEl, {\n\t                        position: point\n\t                    }, seriesModel);\n\t                }\n\n\t                // Add back\n\t                group.add(symbolEl);\n\n\t                data.setItemGraphicEl(newIdx, symbolEl);\n\t            })\n\t            .remove(function (oldIdx) {\n\t                var el = oldData.getItemGraphicEl(oldIdx);\n\t                el && el.fadeOut(function () {\n\t                    group.remove(el);\n\t                });\n\t            })\n\t            .execute();\n\n\t        this._data = data;\n\t    };\n\n\t    symbolDrawProto.updateLayout = function () {\n\t        var data = this._data;\n\t        if (data) {\n\t            // Not use animation\n\t            data.eachItemGraphicEl(function (el, idx) {\n\t                var point = data.getItemLayout(idx);\n\t                el.attr('position', point);\n\t            });\n\t        }\n\t    };\n\n\t    symbolDrawProto.remove = function (enableAnimation) {\n\t        var group = this.group;\n\t        var data = this._data;\n\t        if (data) {\n\t            if (enableAnimation) {\n\t                data.eachItemGraphicEl(function (el) {\n\t                    el.fadeOut(function () {\n\t                        group.remove(el);\n\t                    });\n\t                });\n\t            }\n\t            else {\n\t                group.removeAll();\n\t            }\n\t        }\n\t    };\n\n\t    module.exports = SymbolDraw;\n\n\n/***/ },\n/* 106 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @module echarts/chart/helper/Symbol\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var symbolUtil = __webpack_require__(107);\n\t    var graphic = __webpack_require__(43);\n\t    var numberUtil = __webpack_require__(7);\n\n\t    function getSymbolSize(data, idx) {\n\t        var symbolSize = data.getItemVisual(idx, 'symbolSize');\n\t        return symbolSize instanceof Array\n\t            ? symbolSize.slice()\n\t            : [+symbolSize, +symbolSize];\n\t    }\n\n\t    function getScale(symbolSize) {\n\t        return [symbolSize[0] / 2, symbolSize[1] / 2];\n\t    }\n\n\t    /**\n\t     * @constructor\n\t     * @alias {module:echarts/chart/helper/Symbol}\n\t     * @param {module:echarts/data/List} data\n\t     * @param {number} idx\n\t     * @extends {module:zrender/graphic/Group}\n\t     */\n\t    function Symbol(data, idx, seriesScope) {\n\t        graphic.Group.call(this);\n\n\t        this.updateData(data, idx, seriesScope);\n\t    }\n\n\t    var symbolProto = Symbol.prototype;\n\n\t    function driftSymbol(dx, dy) {\n\t        this.parent.drift(dx, dy);\n\t    }\n\n\t    symbolProto._createSymbol = function (symbolType, data, idx, symbolSize) {\n\t        // Remove paths created before\n\t        this.removeAll();\n\n\t        var seriesModel = data.hostModel;\n\t        var color = data.getItemVisual(idx, 'color');\n\n\t        // var symbolPath = symbolUtil.createSymbol(\n\t        //     symbolType, -0.5, -0.5, 1, 1, color\n\t        // );\n\t        // If width/height are set too small (e.g., set to 1) on ios10\n\t        // and macOS Sierra, a circle stroke become a rect, no matter what\n\t        // the scale is set. So we set width/height as 2. See #4150.\n\t        var symbolPath = symbolUtil.createSymbol(\n\t            symbolType, -1, -1, 2, 2, color\n\t        );\n\n\t        symbolPath.attr({\n\t            z2: 100,\n\t            culling: true,\n\t            scale: [0, 0]\n\t        });\n\t        // Rewrite drift method\n\t        symbolPath.drift = driftSymbol;\n\n\t        graphic.initProps(symbolPath, {\n\t            scale: getScale(symbolSize)\n\t        }, seriesModel, idx);\n\t        this._symbolType = symbolType;\n\n\t        this.add(symbolPath);\n\t    };\n\n\t    /**\n\t     * Stop animation\n\t     * @param {boolean} toLastFrame\n\t     */\n\t    symbolProto.stopSymbolAnimation = function (toLastFrame) {\n\t        this.childAt(0).stopAnimation(toLastFrame);\n\t    };\n\n\t    /**\n\t     * Get symbol path element\n\t     */\n\t    symbolProto.getSymbolPath = function () {\n\t        return this.childAt(0);\n\t    };\n\n\t    /**\n\t     * Get scale(aka, current symbol size).\n\t     * Including the change caused by animation\n\t     */\n\t    symbolProto.getScale = function () {\n\t        return this.childAt(0).scale;\n\t    };\n\n\t    /**\n\t     * Highlight symbol\n\t     */\n\t    symbolProto.highlight = function () {\n\t        this.childAt(0).trigger('emphasis');\n\t    };\n\n\t    /**\n\t     * Downplay symbol\n\t     */\n\t    symbolProto.downplay = function () {\n\t        this.childAt(0).trigger('normal');\n\t    };\n\n\t    /**\n\t     * @param {number} zlevel\n\t     * @param {number} z\n\t     */\n\t    symbolProto.setZ = function (zlevel, z) {\n\t        var symbolPath = this.childAt(0);\n\t        symbolPath.zlevel = zlevel;\n\t        symbolPath.z = z;\n\t    };\n\n\t    symbolProto.setDraggable = function (draggable) {\n\t        var symbolPath = this.childAt(0);\n\t        symbolPath.draggable = draggable;\n\t        symbolPath.cursor = draggable ? 'move' : 'pointer';\n\t    };\n\n\t    /**\n\t     * Update symbol properties\n\t     * @param  {module:echarts/data/List} data\n\t     * @param  {number} idx\n\t     */\n\t    symbolProto.updateData = function (data, idx, seriesScope) {\n\t        this.silent = false;\n\n\t        var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';\n\t        var seriesModel = data.hostModel;\n\t        var symbolSize = getSymbolSize(data, idx);\n\n\t        if (symbolType !== this._symbolType) {\n\t            this._createSymbol(symbolType, data, idx, symbolSize);\n\t        }\n\t        else {\n\t            var symbolPath = this.childAt(0);\n\t            graphic.updateProps(symbolPath, {\n\t                scale: getScale(symbolSize)\n\t            }, seriesModel, idx);\n\t        }\n\t        this._updateCommon(data, idx, symbolSize, seriesScope);\n\t        this._seriesModel = seriesModel;\n\t    };\n\n\t    // Update common properties\n\t    var normalStyleAccessPath = ['itemStyle', 'normal'];\n\t    var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];\n\t    var normalLabelAccessPath = ['label', 'normal'];\n\t    var emphasisLabelAccessPath = ['label', 'emphasis'];\n\n\t    symbolProto._updateCommon = function (data, idx, symbolSize, seriesScope) {\n\t        var symbolPath = this.childAt(0);\n\t        var seriesModel = data.hostModel;\n\t        var color = data.getItemVisual(idx, 'color');\n\n\t        // Reset style\n\t        if (symbolPath.type !== 'image') {\n\t            symbolPath.useStyle({\n\t                strokeNoScale: true\n\t            });\n\t        }\n\n\t        seriesScope = seriesScope || null;\n\n\t        var itemStyle = seriesScope && seriesScope.itemStyle;\n\t        var hoverItemStyle = seriesScope && seriesScope.hoverItemStyle;\n\t        var symbolRotate = seriesScope && seriesScope.symbolRotate;\n\t        var symbolOffset = seriesScope && seriesScope.symbolOffset;\n\t        var labelModel = seriesScope && seriesScope.labelModel;\n\t        var hoverLabelModel = seriesScope && seriesScope.hoverLabelModel;\n\t        var hoverAnimation = seriesScope && seriesScope.hoverAnimation;\n\n\t        if (!seriesScope || data.hasItemOption) {\n\t            var itemModel = data.getItemModel(idx);\n\n\t            // Color must be excluded.\n\t            // Because symbol provide setColor individually to set fill and stroke\n\t            itemStyle = itemModel.getModel(normalStyleAccessPath).getItemStyle(['color']);\n\t            hoverItemStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();\n\n\t            symbolRotate = itemModel.getShallow('symbolRotate');\n\t            symbolOffset = itemModel.getShallow('symbolOffset');\n\n\t            labelModel = itemModel.getModel(normalLabelAccessPath);\n\t            hoverLabelModel = itemModel.getModel(emphasisLabelAccessPath);\n\t            hoverAnimation = itemModel.getShallow('hoverAnimation');\n\t        }\n\t        else {\n\t            hoverItemStyle = zrUtil.extend({}, hoverItemStyle);\n\t        }\n\n\t        var elStyle = symbolPath.style;\n\n\t        symbolPath.attr('rotation', (symbolRotate || 0) * Math.PI / 180 || 0);\n\n\t        if (symbolOffset) {\n\t            symbolPath.attr('position', [\n\t                numberUtil.parsePercent(symbolOffset[0], symbolSize[0]),\n\t                numberUtil.parsePercent(symbolOffset[1], symbolSize[1])\n\t            ]);\n\t        }\n\n\t        // PENDING setColor before setStyle!!!\n\t        symbolPath.setColor(color);\n\n\t        symbolPath.setStyle(itemStyle);\n\n\t        var opacity = data.getItemVisual(idx, 'opacity');\n\t        if (opacity != null) {\n\t            elStyle.opacity = opacity;\n\t        }\n\n\t        // Get last value dim\n\t        var dimensions = data.dimensions.slice();\n\t        var valueDim;\n\t        var dataType;\n\t        while (dimensions.length && (\n\t            valueDim = dimensions.pop(),\n\t            dataType = data.getDimensionInfo(valueDim).type,\n\t            dataType === 'ordinal' || dataType === 'time'\n\t        )) {} // jshint ignore:line\n\n\t        if (valueDim != null && labelModel.getShallow('show')) {\n\t            graphic.setText(elStyle, labelModel, color);\n\t            elStyle.text = zrUtil.retrieve(\n\t                seriesModel.getFormattedLabel(idx, 'normal'),\n\t                data.get(valueDim, idx)\n\t            );\n\t        }\n\t        else {\n\t            elStyle.text = '';\n\t        }\n\n\t        if (valueDim != null && hoverLabelModel.getShallow('show')) {\n\t            graphic.setText(hoverItemStyle, hoverLabelModel, color);\n\t            hoverItemStyle.text = zrUtil.retrieve(\n\t                seriesModel.getFormattedLabel(idx, 'emphasis'),\n\t                data.get(valueDim, idx)\n\t            );\n\t        }\n\t        else {\n\t            hoverItemStyle.text = '';\n\t        }\n\n\t        symbolPath.off('mouseover')\n\t            .off('mouseout')\n\t            .off('emphasis')\n\t            .off('normal');\n\n\t        symbolPath.hoverStyle = hoverItemStyle;\n\n\t        graphic.setHoverStyle(symbolPath);\n\n\t        var scale = getScale(symbolSize);\n\n\t        if (hoverAnimation && seriesModel.isAnimationEnabled()) {\n\t            var onEmphasis = function() {\n\t                var ratio = scale[1] / scale[0];\n\t                this.animateTo({\n\t                    scale: [\n\t                        Math.max(scale[0] * 1.1, scale[0] + 3),\n\t                        Math.max(scale[1] * 1.1, scale[1] + 3 * ratio)\n\t                    ]\n\t                }, 400, 'elasticOut');\n\t            };\n\t            var onNormal = function() {\n\t                this.animateTo({\n\t                    scale: scale\n\t                }, 400, 'elasticOut');\n\t            };\n\t            symbolPath.on('mouseover', onEmphasis)\n\t                .on('mouseout', onNormal)\n\t                .on('emphasis', onEmphasis)\n\t                .on('normal', onNormal);\n\t        }\n\t    };\n\n\t    symbolProto.fadeOut = function (cb) {\n\t        var symbolPath = this.childAt(0);\n\t        // Avoid mistaken hover when fading out\n\t        this.silent = true;\n\t        // Not show text when animating\n\t        symbolPath.style.text = '';\n\t        graphic.updateProps(symbolPath, {\n\t            scale: [0, 0]\n\t        }, this._seriesModel, this.dataIndex, cb);\n\t    };\n\n\t    zrUtil.inherits(Symbol, graphic.Group);\n\n\t    module.exports = Symbol;\n\n\n/***/ },\n/* 107 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t// Symbol factory\n\n\n\t    var graphic = __webpack_require__(43);\n\t    var BoundingRect = __webpack_require__(9);\n\n\t    /**\n\t     * Triangle shape\n\t     * @inner\n\t     */\n\t    var Triangle = graphic.extendShape({\n\t        type: 'triangle',\n\t        shape: {\n\t            cx: 0,\n\t            cy: 0,\n\t            width: 0,\n\t            height: 0\n\t        },\n\t        buildPath: function (path, shape) {\n\t            var cx = shape.cx;\n\t            var cy = shape.cy;\n\t            var width = shape.width / 2;\n\t            var height = shape.height / 2;\n\t            path.moveTo(cx, cy - height);\n\t            path.lineTo(cx + width, cy + height);\n\t            path.lineTo(cx - width, cy + height);\n\t            path.closePath();\n\t        }\n\t    });\n\t    /**\n\t     * Diamond shape\n\t     * @inner\n\t     */\n\t    var Diamond = graphic.extendShape({\n\t        type: 'diamond',\n\t        shape: {\n\t            cx: 0,\n\t            cy: 0,\n\t            width: 0,\n\t            height: 0\n\t        },\n\t        buildPath: function (path, shape) {\n\t            var cx = shape.cx;\n\t            var cy = shape.cy;\n\t            var width = shape.width / 2;\n\t            var height = shape.height / 2;\n\t            path.moveTo(cx, cy - height);\n\t            path.lineTo(cx + width, cy);\n\t            path.lineTo(cx, cy + height);\n\t            path.lineTo(cx - width, cy);\n\t            path.closePath();\n\t        }\n\t    });\n\n\t    /**\n\t     * Pin shape\n\t     * @inner\n\t     */\n\t    var Pin = graphic.extendShape({\n\t        type: 'pin',\n\t        shape: {\n\t            // x, y on the cusp\n\t            x: 0,\n\t            y: 0,\n\t            width: 0,\n\t            height: 0\n\t        },\n\n\t        buildPath: function (path, shape) {\n\t            var x = shape.x;\n\t            var y = shape.y;\n\t            var w = shape.width / 5 * 3;\n\t            // Height must be larger than width\n\t            var h = Math.max(w, shape.height);\n\t            var r = w / 2;\n\n\t            // Dist on y with tangent point and circle center\n\t            var dy = r * r / (h - r);\n\t            var cy = y - h + r + dy;\n\t            var angle = Math.asin(dy / r);\n\t            // Dist on x with tangent point and circle center\n\t            var dx = Math.cos(angle) * r;\n\n\t            var tanX = Math.sin(angle);\n\t            var tanY = Math.cos(angle);\n\n\t            path.arc(\n\t                x, cy, r,\n\t                Math.PI - angle,\n\t                Math.PI * 2 + angle\n\t            );\n\n\t            var cpLen = r * 0.6;\n\t            var cpLen2 = r * 0.7;\n\t            path.bezierCurveTo(\n\t                x + dx - tanX * cpLen, cy + dy + tanY * cpLen,\n\t                x, y - cpLen2,\n\t                x, y\n\t            );\n\t            path.bezierCurveTo(\n\t                x, y - cpLen2,\n\t                x - dx + tanX * cpLen, cy + dy + tanY * cpLen,\n\t                x - dx, cy + dy\n\t            );\n\t            path.closePath();\n\t        }\n\t    });\n\n\t    /**\n\t     * Arrow shape\n\t     * @inner\n\t     */\n\t    var Arrow = graphic.extendShape({\n\n\t        type: 'arrow',\n\n\t        shape: {\n\t            x: 0,\n\t            y: 0,\n\t            width: 0,\n\t            height: 0\n\t        },\n\n\t        buildPath: function (ctx, shape) {\n\t            var height = shape.height;\n\t            var width = shape.width;\n\t            var x = shape.x;\n\t            var y = shape.y;\n\t            var dx = width / 3 * 2;\n\t            ctx.moveTo(x, y);\n\t            ctx.lineTo(x + dx, y + height);\n\t            ctx.lineTo(x, y + height / 4 * 3);\n\t            ctx.lineTo(x - dx, y + height);\n\t            ctx.lineTo(x, y);\n\t            ctx.closePath();\n\t        }\n\t    });\n\n\t    /**\n\t     * Map of path contructors\n\t     * @type {Object.<string, module:zrender/graphic/Path>}\n\t     */\n\t    var symbolCtors = {\n\t        line: graphic.Line,\n\n\t        rect: graphic.Rect,\n\n\t        roundRect: graphic.Rect,\n\n\t        square: graphic.Rect,\n\n\t        circle: graphic.Circle,\n\n\t        diamond: Diamond,\n\n\t        pin: Pin,\n\n\t        arrow: Arrow,\n\n\t        triangle: Triangle\n\t    };\n\n\t    var symbolShapeMakers = {\n\n\t        line: function (x, y, w, h, shape) {\n\t            // FIXME\n\t            shape.x1 = x;\n\t            shape.y1 = y + h / 2;\n\t            shape.x2 = x + w;\n\t            shape.y2 = y + h / 2;\n\t        },\n\n\t        rect: function (x, y, w, h, shape) {\n\t            shape.x = x;\n\t            shape.y = y;\n\t            shape.width = w;\n\t            shape.height = h;\n\t        },\n\n\t        roundRect: function (x, y, w, h, shape) {\n\t            shape.x = x;\n\t            shape.y = y;\n\t            shape.width = w;\n\t            shape.height = h;\n\t            shape.r = Math.min(w, h) / 4;\n\t        },\n\n\t        square: function (x, y, w, h, shape) {\n\t            var size = Math.min(w, h);\n\t            shape.x = x;\n\t            shape.y = y;\n\t            shape.width = size;\n\t            shape.height = size;\n\t        },\n\n\t        circle: function (x, y, w, h, shape) {\n\t            // Put circle in the center of square\n\t            shape.cx = x + w / 2;\n\t            shape.cy = y + h / 2;\n\t            shape.r = Math.min(w, h) / 2;\n\t        },\n\n\t        diamond: function (x, y, w, h, shape) {\n\t            shape.cx = x + w / 2;\n\t            shape.cy = y + h / 2;\n\t            shape.width = w;\n\t            shape.height = h;\n\t        },\n\n\t        pin: function (x, y, w, h, shape) {\n\t            shape.x = x + w / 2;\n\t            shape.y = y + h / 2;\n\t            shape.width = w;\n\t            shape.height = h;\n\t        },\n\n\t        arrow: function (x, y, w, h, shape) {\n\t            shape.x = x + w / 2;\n\t            shape.y = y + h / 2;\n\t            shape.width = w;\n\t            shape.height = h;\n\t        },\n\n\t        triangle: function (x, y, w, h, shape) {\n\t            shape.cx = x + w / 2;\n\t            shape.cy = y + h / 2;\n\t            shape.width = w;\n\t            shape.height = h;\n\t        }\n\t    };\n\n\t    var symbolBuildProxies = {};\n\t    for (var name in symbolCtors) {\n\t        if (symbolCtors.hasOwnProperty(name)) {\n\t            symbolBuildProxies[name] = new symbolCtors[name]();\n\t        }\n\t    }\n\n\t    var Symbol = graphic.extendShape({\n\n\t        type: 'symbol',\n\n\t        shape: {\n\t            symbolType: '',\n\t            x: 0,\n\t            y: 0,\n\t            width: 0,\n\t            height: 0\n\t        },\n\n\t        beforeBrush: function () {\n\t            var style = this.style;\n\t            var shape = this.shape;\n\t            // FIXME\n\t            if (shape.symbolType === 'pin' && style.textPosition === 'inside') {\n\t                style.textPosition = ['50%', '40%'];\n\t                style.textAlign = 'center';\n\t                style.textVerticalAlign = 'middle';\n\t            }\n\t        },\n\n\t        buildPath: function (ctx, shape, inBundle) {\n\t            var symbolType = shape.symbolType;\n\t            var proxySymbol = symbolBuildProxies[symbolType];\n\t            if (shape.symbolType !== 'none') {\n\t                if (!proxySymbol) {\n\t                    // Default rect\n\t                    symbolType = 'rect';\n\t                    proxySymbol = symbolBuildProxies[symbolType];\n\t                }\n\t                symbolShapeMakers[symbolType](\n\t                    shape.x, shape.y, shape.width, shape.height, proxySymbol.shape\n\t                );\n\t                proxySymbol.buildPath(ctx, proxySymbol.shape, inBundle);\n\t            }\n\t        }\n\t    });\n\n\t    // Provide setColor helper method to avoid determine if set the fill or stroke outside\n\t    var symbolPathSetColor = function (color) {\n\t        if (this.type !== 'image') {\n\t            var symbolStyle = this.style;\n\t            var symbolShape = this.shape;\n\t            if (symbolShape && symbolShape.symbolType === 'line') {\n\t                symbolStyle.stroke = color;\n\t            }\n\t            else if (this.__isEmptyBrush) {\n\t                symbolStyle.stroke = color;\n\t                symbolStyle.fill = '#fff';\n\t            }\n\t            else {\n\t                // FIXME 判断图形默认是填充还是描边，使用 onlyStroke ?\n\t                symbolStyle.fill && (symbolStyle.fill = color);\n\t                symbolStyle.stroke && (symbolStyle.stroke = color);\n\t            }\n\t            this.dirty(false);\n\t        }\n\t    };\n\n\t    var symbolUtil = {\n\t        /**\n\t         * Create a symbol element with given symbol configuration: shape, x, y, width, height, color\n\t         * @param {string} symbolType\n\t         * @param {number} x\n\t         * @param {number} y\n\t         * @param {number} w\n\t         * @param {number} h\n\t         * @param {string} color\n\t         */\n\t        createSymbol: function (symbolType, x, y, w, h, color) {\n\t            var isEmpty = symbolType.indexOf('empty') === 0;\n\t            if (isEmpty) {\n\t                symbolType = symbolType.substr(5, 1).toLowerCase() + symbolType.substr(6);\n\t            }\n\t            var symbolPath;\n\n\t            if (symbolType.indexOf('image://') === 0) {\n\t                symbolPath = new graphic.Image({\n\t                    style: {\n\t                        image: symbolType.slice(8),\n\t                        x: x,\n\t                        y: y,\n\t                        width: w,\n\t                        height: h\n\t                    }\n\t                });\n\t            }\n\t            else if (symbolType.indexOf('path://') === 0) {\n\t                symbolPath = graphic.makePath(symbolType.slice(7), {}, new BoundingRect(x, y, w, h));\n\t            }\n\t            else {\n\t                symbolPath = new Symbol({\n\t                    shape: {\n\t                        symbolType: symbolType,\n\t                        x: x,\n\t                        y: y,\n\t                        width: w,\n\t                        height: h\n\t                    }\n\t                });\n\t            }\n\n\t            symbolPath.__isEmptyBrush = isEmpty;\n\n\t            symbolPath.setColor = symbolPathSetColor;\n\n\t            symbolPath.setColor(color);\n\n\t            return symbolPath;\n\t        }\n\t    };\n\n\t    module.exports = symbolUtil;\n\n\n/***/ },\n/* 108 */\n/***/ function(module, exports) {\n\n\t\n\n\t    // var arrayDiff = require('zrender/lib/core/arrayDiff');\n\t    // 'zrender/core/arrayDiff' has been used before, but it did\n\t    // not do well in performance when roam with fixed dataZoom window.\n\n\t    function sign(val) {\n\t        return val >= 0 ? 1 : -1;\n\t    }\n\n\t    function getStackedOnPoint(coordSys, data, idx) {\n\t        var baseAxis = coordSys.getBaseAxis();\n\t        var valueAxis = coordSys.getOtherAxis(baseAxis);\n\t        var valueStart = baseAxis.onZero\n\t            ? 0 : valueAxis.scale.getExtent()[0];\n\n\t        var valueDim = valueAxis.dim;\n\t        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;\n\n\t        var stackedOnSameSign;\n\t        var stackedOn = data.stackedOn;\n\t        var val = data.get(valueDim, idx);\n\t        // Find first stacked value with same sign\n\t        while (stackedOn &&\n\t            sign(stackedOn.get(valueDim, idx)) === sign(val)\n\t        ) {\n\t            stackedOnSameSign = stackedOn;\n\t            break;\n\t        }\n\t        var stackedData = [];\n\t        stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);\n\t        stackedData[1 - baseDataOffset] = stackedOnSameSign\n\t            ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;\n\n\t        return coordSys.dataToPoint(stackedData);\n\t    }\n\n\t    // function convertToIntId(newIdList, oldIdList) {\n\t    //     // Generate int id instead of string id.\n\t    //     // Compare string maybe slow in score function of arrDiff\n\n\t    //     // Assume id in idList are all unique\n\t    //     var idIndicesMap = {};\n\t    //     var idx = 0;\n\t    //     for (var i = 0; i < newIdList.length; i++) {\n\t    //         idIndicesMap[newIdList[i]] = idx;\n\t    //         newIdList[i] = idx++;\n\t    //     }\n\t    //     for (var i = 0; i < oldIdList.length; i++) {\n\t    //         var oldId = oldIdList[i];\n\t    //         // Same with newIdList\n\t    //         if (idIndicesMap[oldId]) {\n\t    //             oldIdList[i] = idIndicesMap[oldId];\n\t    //         }\n\t    //         else {\n\t    //             oldIdList[i] = idx++;\n\t    //         }\n\t    //     }\n\t    // }\n\n\t    function diffData(oldData, newData) {\n\t        var diffResult = [];\n\n\t        newData.diff(oldData)\n\t            .add(function (idx) {\n\t                diffResult.push({cmd: '+', idx: idx});\n\t            })\n\t            .update(function (newIdx, oldIdx) {\n\t                diffResult.push({cmd: '=', idx: oldIdx, idx1: newIdx});\n\t            })\n\t            .remove(function (idx) {\n\t                diffResult.push({cmd: '-', idx: idx});\n\t            })\n\t            .execute();\n\n\t        return diffResult;\n\t    }\n\n\t    module.exports = function (\n\t        oldData, newData,\n\t        oldStackedOnPoints, newStackedOnPoints,\n\t        oldCoordSys, newCoordSys\n\t    ) {\n\t        var diff = diffData(oldData, newData);\n\n\t        // var newIdList = newData.mapArray(newData.getId);\n\t        // var oldIdList = oldData.mapArray(oldData.getId);\n\n\t        // convertToIntId(newIdList, oldIdList);\n\n\t        // // FIXME One data ?\n\t        // diff = arrayDiff(oldIdList, newIdList);\n\n\t        var currPoints = [];\n\t        var nextPoints = [];\n\t        // Points for stacking base line\n\t        var currStackedPoints = [];\n\t        var nextStackedPoints = [];\n\n\t        var status = [];\n\t        var sortedIndices = [];\n\t        var rawIndices = [];\n\t        var dims = newCoordSys.dimensions;\n\t        for (var i = 0; i < diff.length; i++) {\n\t            var diffItem = diff[i];\n\t            var pointAdded = true;\n\n\t            // FIXME, animation is not so perfect when dataZoom window moves fast\n\t            // Which is in case remvoing or add more than one data in the tail or head\n\t            switch (diffItem.cmd) {\n\t                case '=':\n\t                    var currentPt = oldData.getItemLayout(diffItem.idx);\n\t                    var nextPt = newData.getItemLayout(diffItem.idx1);\n\t                    // If previous data is NaN, use next point directly\n\t                    if (isNaN(currentPt[0]) || isNaN(currentPt[1])) {\n\t                        currentPt = nextPt.slice();\n\t                    }\n\t                    currPoints.push(currentPt);\n\t                    nextPoints.push(nextPt);\n\n\t                    currStackedPoints.push(oldStackedOnPoints[diffItem.idx]);\n\t                    nextStackedPoints.push(newStackedOnPoints[diffItem.idx1]);\n\n\t                    rawIndices.push(newData.getRawIndex(diffItem.idx1));\n\t                    break;\n\t                case '+':\n\t                    var idx = diffItem.idx;\n\t                    currPoints.push(\n\t                        oldCoordSys.dataToPoint([\n\t                            newData.get(dims[0], idx, true), newData.get(dims[1], idx, true)\n\t                        ])\n\t                    );\n\n\t                    nextPoints.push(newData.getItemLayout(idx).slice());\n\n\t                    currStackedPoints.push(\n\t                        getStackedOnPoint(oldCoordSys, newData, idx)\n\t                    );\n\t                    nextStackedPoints.push(newStackedOnPoints[idx]);\n\n\t                    rawIndices.push(newData.getRawIndex(idx));\n\t                    break;\n\t                case '-':\n\t                    var idx = diffItem.idx;\n\t                    var rawIndex = oldData.getRawIndex(idx);\n\t                    // Data is replaced. In the case of dynamic data queue\n\t                    // FIXME FIXME FIXME\n\t                    if (rawIndex !== idx) {\n\t                        currPoints.push(oldData.getItemLayout(idx));\n\t                        nextPoints.push(newCoordSys.dataToPoint([\n\t                            oldData.get(dims[0], idx, true), oldData.get(dims[1], idx, true)\n\t                        ]));\n\n\t                        currStackedPoints.push(oldStackedOnPoints[idx]);\n\t                        nextStackedPoints.push(\n\t                            getStackedOnPoint(\n\t                                newCoordSys, oldData, idx\n\t                            )\n\t                        );\n\n\t                        rawIndices.push(rawIndex);\n\t                    }\n\t                    else {\n\t                        pointAdded = false;\n\t                    }\n\t            }\n\n\t            // Original indices\n\t            if (pointAdded) {\n\t                status.push(diffItem);\n\t                sortedIndices.push(sortedIndices.length);\n\t            }\n\t        }\n\n\t        // Diff result may be crossed if all items are changed\n\t        // Sort by data index\n\t        sortedIndices.sort(function (a, b) {\n\t            return rawIndices[a] - rawIndices[b];\n\t        });\n\n\t        var sortedCurrPoints = [];\n\t        var sortedNextPoints = [];\n\n\t        var sortedCurrStackedPoints = [];\n\t        var sortedNextStackedPoints = [];\n\n\t        var sortedStatus = [];\n\t        for (var i = 0; i < sortedIndices.length; i++) {\n\t            var idx = sortedIndices[i];\n\t            sortedCurrPoints[i] = currPoints[idx];\n\t            sortedNextPoints[i] = nextPoints[idx];\n\n\t            sortedCurrStackedPoints[i] = currStackedPoints[idx];\n\t            sortedNextStackedPoints[i] = nextStackedPoints[idx];\n\n\t            sortedStatus[i] = status[idx];\n\t        }\n\n\t        return {\n\t            current: sortedCurrPoints,\n\t            next: sortedNextPoints,\n\n\t            stackedOnCurrent: sortedCurrStackedPoints,\n\t            stackedOnNext: sortedNextStackedPoints,\n\n\t            status: sortedStatus\n\t        };\n\t    };\n\n\n/***/ },\n/* 109 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Poly path support NaN point\n\n\n\t    var Path = __webpack_require__(45);\n\t    var vec2 = __webpack_require__(10);\n\n\t    var vec2Min = vec2.min;\n\t    var vec2Max = vec2.max;\n\n\t    var scaleAndAdd = vec2.scaleAndAdd;\n\t    var v2Copy = vec2.copy;\n\n\t    // Temporary variable\n\t    var v = [];\n\t    var cp0 = [];\n\t    var cp1 = [];\n\n\t    function isPointNull(p) {\n\t        return isNaN(p[0]) || isNaN(p[1]);\n\t    }\n\n\t    function drawSegment(\n\t        ctx, points, start, segLen, allLen,\n\t        dir, smoothMin, smoothMax, smooth, smoothMonotone, connectNulls\n\t    ) {\n\t        var prevIdx = 0;\n\t        var idx = start;\n\t        for (var k = 0; k < segLen; k++) {\n\t            var p = points[idx];\n\t            if (idx >= allLen || idx < 0) {\n\t                break;\n\t            }\n\t            if (isPointNull(p)) {\n\t                if (connectNulls) {\n\t                    idx += dir;\n\t                    continue;\n\t                }\n\t                break;\n\t            }\n\n\t            if (idx === start) {\n\t                ctx[dir > 0 ? 'moveTo' : 'lineTo'](p[0], p[1]);\n\t                v2Copy(cp0, p);\n\t            }\n\t            else {\n\t                if (smooth > 0) {\n\t                    var nextIdx = idx + dir;\n\t                    var nextP = points[nextIdx];\n\t                    if (connectNulls) {\n\t                        // Find next point not null\n\t                        while (nextP && isPointNull(points[nextIdx])) {\n\t                            nextIdx += dir;\n\t                            nextP = points[nextIdx];\n\t                        }\n\t                    }\n\n\t                    var ratioNextSeg = 0.5;\n\t                    var prevP = points[prevIdx];\n\t                    var nextP = points[nextIdx];\n\t                    // Last point\n\t                    if (!nextP || isPointNull(nextP)) {\n\t                        v2Copy(cp1, p);\n\t                    }\n\t                    else {\n\t                        // If next data is null in not connect case\n\t                        if (isPointNull(nextP) && !connectNulls) {\n\t                            nextP = p;\n\t                        }\n\n\t                        vec2.sub(v, nextP, prevP);\n\n\t                        var lenPrevSeg;\n\t                        var lenNextSeg;\n\t                        if (smoothMonotone === 'x' || smoothMonotone === 'y') {\n\t                            var dim = smoothMonotone === 'x' ? 0 : 1;\n\t                            lenPrevSeg = Math.abs(p[dim] - prevP[dim]);\n\t                            lenNextSeg = Math.abs(p[dim] - nextP[dim]);\n\t                        }\n\t                        else {\n\t                            lenPrevSeg = vec2.dist(p, prevP);\n\t                            lenNextSeg = vec2.dist(p, nextP);\n\t                        }\n\n\t                        // Use ratio of seg length\n\t                        ratioNextSeg = lenNextSeg / (lenNextSeg + lenPrevSeg);\n\n\t                        scaleAndAdd(cp1, p, v, -smooth * (1 - ratioNextSeg));\n\t                    }\n\t                    // Smooth constraint\n\t                    vec2Min(cp0, cp0, smoothMax);\n\t                    vec2Max(cp0, cp0, smoothMin);\n\t                    vec2Min(cp1, cp1, smoothMax);\n\t                    vec2Max(cp1, cp1, smoothMin);\n\n\t                    ctx.bezierCurveTo(\n\t                        cp0[0], cp0[1],\n\t                        cp1[0], cp1[1],\n\t                        p[0], p[1]\n\t                    );\n\t                    // cp0 of next segment\n\t                    scaleAndAdd(cp0, p, v, smooth * ratioNextSeg);\n\t                }\n\t                else {\n\t                    ctx.lineTo(p[0], p[1]);\n\t                }\n\t            }\n\n\t            prevIdx = idx;\n\t            idx += dir;\n\t        }\n\n\t        return k;\n\t    }\n\n\t    function getBoundingBox(points, smoothConstraint) {\n\t        var ptMin = [Infinity, Infinity];\n\t        var ptMax = [-Infinity, -Infinity];\n\t        if (smoothConstraint) {\n\t            for (var i = 0; i < points.length; i++) {\n\t                var pt = points[i];\n\t                if (pt[0] < ptMin[0]) { ptMin[0] = pt[0]; }\n\t                if (pt[1] < ptMin[1]) { ptMin[1] = pt[1]; }\n\t                if (pt[0] > ptMax[0]) { ptMax[0] = pt[0]; }\n\t                if (pt[1] > ptMax[1]) { ptMax[1] = pt[1]; }\n\t            }\n\t        }\n\t        return {\n\t            min: smoothConstraint ? ptMin : ptMax,\n\t            max: smoothConstraint ? ptMax : ptMin\n\t        };\n\t    }\n\n\t    module.exports = {\n\n\t        Polyline: Path.extend({\n\n\t            type: 'ec-polyline',\n\n\t            shape: {\n\t                points: [],\n\n\t                smooth: 0,\n\n\t                smoothConstraint: true,\n\n\t                smoothMonotone: null,\n\n\t                connectNulls: false\n\t            },\n\n\t            style: {\n\t                fill: null,\n\n\t                stroke: '#000'\n\t            },\n\n\t            buildPath: function (ctx, shape) {\n\t                var points = shape.points;\n\n\t                var i = 0;\n\t                var len = points.length;\n\n\t                var result = getBoundingBox(points, shape.smoothConstraint);\n\n\t                if (shape.connectNulls) {\n\t                    // Must remove first and last null values avoid draw error in polygon\n\t                    for (; len > 0; len--) {\n\t                        if (!isPointNull(points[len - 1])) {\n\t                            break;\n\t                        }\n\t                    }\n\t                    for (; i < len; i++) {\n\t                        if (!isPointNull(points[i])) {\n\t                            break;\n\t                        }\n\t                    }\n\t                }\n\t                while (i < len) {\n\t                    i += drawSegment(\n\t                        ctx, points, i, len, len,\n\t                        1, result.min, result.max, shape.smooth,\n\t                        shape.smoothMonotone, shape.connectNulls\n\t                    ) + 1;\n\t                }\n\t            }\n\t        }),\n\n\t        Polygon: Path.extend({\n\n\t            type: 'ec-polygon',\n\n\t            shape: {\n\t                points: [],\n\n\t                // Offset between stacked base points and points\n\t                stackedOnPoints: [],\n\n\t                smooth: 0,\n\n\t                stackedOnSmooth: 0,\n\n\t                smoothConstraint: true,\n\n\t                smoothMonotone: null,\n\n\t                connectNulls: false\n\t            },\n\n\t            buildPath: function (ctx, shape) {\n\t                var points = shape.points;\n\t                var stackedOnPoints = shape.stackedOnPoints;\n\n\t                var i = 0;\n\t                var len = points.length;\n\t                var smoothMonotone = shape.smoothMonotone;\n\t                var bbox = getBoundingBox(points, shape.smoothConstraint);\n\t                var stackedOnBBox = getBoundingBox(stackedOnPoints, shape.smoothConstraint);\n\n\t                if (shape.connectNulls) {\n\t                    // Must remove first and last null values avoid draw error in polygon\n\t                    for (; len > 0; len--) {\n\t                        if (!isPointNull(points[len - 1])) {\n\t                            break;\n\t                        }\n\t                    }\n\t                    for (; i < len; i++) {\n\t                        if (!isPointNull(points[i])) {\n\t                            break;\n\t                        }\n\t                    }\n\t                }\n\t                while (i < len) {\n\t                    var k = drawSegment(\n\t                        ctx, points, i, len, len,\n\t                        1, bbox.min, bbox.max, shape.smooth,\n\t                        smoothMonotone, shape.connectNulls\n\t                    );\n\t                    drawSegment(\n\t                        ctx, stackedOnPoints, i + k - 1, k, len,\n\t                        -1, stackedOnBBox.min, stackedOnBBox.max, shape.stackedOnSmooth,\n\t                        smoothMonotone, shape.connectNulls\n\t                    );\n\t                    i += k + 1;\n\n\t                    ctx.closePath();\n\t                }\n\t            }\n\t        })\n\t    };\n\n\n/***/ },\n/* 110 */\n/***/ function(module, exports) {\n\n\t\n\n\t    module.exports = function (seriesType, defaultSymbolType, legendSymbol, ecModel, api) {\n\n\t        // Encoding visual for all series include which is filtered for legend drawing\n\t        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {\n\t            var data = seriesModel.getData();\n\n\t            var symbolType = seriesModel.get('symbol') || defaultSymbolType;\n\t            var symbolSize = seriesModel.get('symbolSize');\n\n\t            data.setVisual({\n\t                legendSymbol: legendSymbol || symbolType,\n\t                symbol: symbolType,\n\t                symbolSize: symbolSize\n\t            });\n\n\t            // Only visible series has each data be visual encoded\n\t            if (!ecModel.isSeriesFiltered(seriesModel)) {\n\t                if (typeof symbolSize === 'function') {\n\t                    data.each(function (idx) {\n\t                        var rawValue = seriesModel.getRawValue(idx);\n\t                        // FIXME\n\t                        var params = seriesModel.getDataParams(idx);\n\t                        data.setItemVisual(idx, 'symbolSize', symbolSize(rawValue, params));\n\t                    });\n\t                }\n\t                data.each(function (idx) {\n\t                    var itemModel = data.getItemModel(idx);\n\t                    var itemSymbolType = itemModel.getShallow('symbol', true);\n\t                    var itemSymbolSize = itemModel.getShallow('symbolSize', true);\n\t                    // If has item symbol\n\t                    if (itemSymbolType != null) {\n\t                        data.setItemVisual(idx, 'symbol', itemSymbolType);\n\t                    }\n\t                    if (itemSymbolSize != null) {\n\t                        // PENDING Transform symbolSize ?\n\t                        data.setItemVisual(idx, 'symbolSize', itemSymbolSize);\n\t                    }\n\t                });\n\t            }\n\t        });\n\t    };\n\n\n/***/ },\n/* 111 */\n/***/ function(module, exports) {\n\n\t\n\n\t    module.exports = function (seriesType, ecModel) {\n\t        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n\t            var data = seriesModel.getData();\n\t            var coordSys = seriesModel.coordinateSystem;\n\n\t            if (coordSys) {\n\t                var dims = coordSys.dimensions;\n\n\t                if (coordSys.type === 'singleAxis') {\n\t                    data.each(dims[0], function (x, idx) {\n\t                        // Also {Array.<number>}, not undefined to avoid if...else... statement\n\t                        data.setItemLayout(idx, isNaN(x) ? [NaN, NaN] : coordSys.dataToPoint(x));\n\t                    });\n\t                }\n\t                else {\n\t                    data.each(dims, function (x, y, idx) {\n\t                        // Also {Array.<number>}, not undefined to avoid if...else... statement\n\t                        data.setItemLayout(\n\t                            idx, (isNaN(x) || isNaN(y)) ? [NaN, NaN] : coordSys.dataToPoint([x, y])\n\t                        );\n\t                    }, true);\n\t                }\n\t            }\n\t        });\n\t    };\n\n\n/***/ },\n/* 112 */\n/***/ function(module, exports) {\n\n\t\n\t    var samplers = {\n\t        average: function (frame) {\n\t            var sum = 0;\n\t            var count = 0;\n\t            for (var i = 0; i < frame.length; i++) {\n\t                if (!isNaN(frame[i])) {\n\t                    sum += frame[i];\n\t                    count++;\n\t                }\n\t            }\n\t            // Return NaN if count is 0\n\t            return count === 0 ? NaN : sum / count;\n\t        },\n\t        sum: function (frame) {\n\t            var sum = 0;\n\t            for (var i = 0; i < frame.length; i++) {\n\t                // Ignore NaN\n\t                sum += frame[i] || 0;\n\t            }\n\t            return sum;\n\t        },\n\t        max: function (frame) {\n\t            var max = -Infinity;\n\t            for (var i = 0; i < frame.length; i++) {\n\t                frame[i] > max && (max = frame[i]);\n\t            }\n\t            return max;\n\t        },\n\t        min: function (frame) {\n\t            var min = Infinity;\n\t            for (var i = 0; i < frame.length; i++) {\n\t                frame[i] < min && (min = frame[i]);\n\t            }\n\t            return min;\n\t        },\n\t        // TODO\n\t        // Median\n\t        nearest: function (frame) {\n\t            return frame[0];\n\t        }\n\t    };\n\n\t    var indexSampler = function (frame, value) {\n\t        return Math.round(frame.length / 2);\n\t    };\n\t    module.exports = function (seriesType, ecModel, api) {\n\t        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n\t            var data = seriesModel.getData();\n\t            var sampling = seriesModel.get('sampling');\n\t            var coordSys = seriesModel.coordinateSystem;\n\t            // Only cartesian2d support down sampling\n\t            if (coordSys.type === 'cartesian2d' && sampling) {\n\t                var baseAxis = coordSys.getBaseAxis();\n\t                var valueAxis = coordSys.getOtherAxis(baseAxis);\n\t                var extent = baseAxis.getExtent();\n\t                // Coordinste system has been resized\n\t                var size = extent[1] - extent[0];\n\t                var rate = Math.round(data.count() / size);\n\t                if (rate > 1) {\n\t                    var sampler;\n\t                    if (typeof sampling === 'string') {\n\t                        sampler = samplers[sampling];\n\t                    }\n\t                    else if (typeof sampling === 'function') {\n\t                        sampler = sampling;\n\t                    }\n\t                    if (sampler) {\n\t                        data = data.downSample(\n\t                            valueAxis.dim, 1 / rate, sampler, indexSampler\n\t                        );\n\t                        seriesModel.setData(data);\n\t                    }\n\t                }\n\t            }\n\t        }, this);\n\t    };\n\n\n/***/ },\n/* 113 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var graphic = __webpack_require__(43);\n\t    var zrUtil = __webpack_require__(4);\n\t    var echarts = __webpack_require__(1);\n\n\t    __webpack_require__(114);\n\n\t    __webpack_require__(131);\n\n\t    // Grid view\n\t    echarts.extendComponentView({\n\n\t        type: 'grid',\n\n\t        render: function (gridModel, ecModel) {\n\t            this.group.removeAll();\n\t            if (gridModel.get('show')) {\n\t                this.group.add(new graphic.Rect({\n\t                    shape: gridModel.coordinateSystem.getRect(),\n\t                    style: zrUtil.defaults({\n\t                        fill: gridModel.get('backgroundColor')\n\t                    }, gridModel.getItemStyle()),\n\t                    silent: true,\n\t                    z2: -1\n\t                }));\n\t            }\n\t        }\n\n\t    });\n\n\t    echarts.registerPreprocessor(function (option) {\n\t        // Only create grid when need\n\t        if (option.xAxis && option.yAxis && !option.grid) {\n\t            option.grid = {};\n\t        }\n\t    });\n\n\n/***/ },\n/* 114 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Grid is a region which contains at most 4 cartesian systems\n\t *\n\t * TODO Default cartesian\n\t */\n\tvar factory = exports;\n\n\t    var layout = __webpack_require__(21);\n\t    var axisHelper = __webpack_require__(115);\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var Cartesian2D = __webpack_require__(121);\n\t    var Axis2D = __webpack_require__(123);\n\n\t    var each = zrUtil.each;\n\n\t    var ifAxisCrossZero = axisHelper.ifAxisCrossZero;\n\t    var niceScaleExtent = axisHelper.niceScaleExtent;\n\n\t    // 依赖 GridModel, AxisModel 做预处理\n\t    __webpack_require__(126);\n\n\t    /**\n\t     * Check if the axis is used in the specified grid\n\t     * @inner\n\t     */\n\t    function isAxisUsedInTheGrid(axisModel, gridModel, ecModel) {\n\t        return axisModel.getCoordSysModel() === gridModel;\n\t    }\n\n\t    function getLabelUnionRect(axis) {\n\t        var axisModel = axis.model;\n\t        var labels = axisModel.getFormattedLabels();\n\t        var textStyleModel = axisModel.getModel('axisLabel.textStyle');\n\t        var rect;\n\t        var step = 1;\n\t        var labelCount = labels.length;\n\t        if (labelCount > 40) {\n\t            // Simple optimization for large amount of labels\n\t            step = Math.ceil(labelCount / 40);\n\t        }\n\t        for (var i = 0; i < labelCount; i += step) {\n\t            if (!axis.isLabelIgnored(i)) {\n\t                var singleRect = textStyleModel.getTextRect(labels[i]);\n\t                // FIXME consider label rotate\n\t                rect ? rect.union(singleRect) : (rect = singleRect);\n\t            }\n\t        }\n\t        return rect;\n\t    }\n\n\t    function Grid(gridModel, ecModel, api) {\n\t        /**\n\t         * @type {Object.<string, module:echarts/coord/cartesian/Cartesian2D>}\n\t         * @private\n\t         */\n\t        this._coordsMap = {};\n\n\t        /**\n\t         * @type {Array.<module:echarts/coord/cartesian/Cartesian>}\n\t         * @private\n\t         */\n\t        this._coordsList = [];\n\n\t        /**\n\t         * @type {Object.<string, module:echarts/coord/cartesian/Axis2D>}\n\t         * @private\n\t         */\n\t        this._axesMap = {};\n\n\t        /**\n\t         * @type {Array.<module:echarts/coord/cartesian/Axis2D>}\n\t         * @private\n\t         */\n\t        this._axesList = [];\n\n\t        this._initCartesian(gridModel, ecModel, api);\n\n\t        this._model = gridModel;\n\t    }\n\n\t    var gridProto = Grid.prototype;\n\n\t    gridProto.type = 'grid';\n\n\t    gridProto.getRect = function () {\n\t        return this._rect;\n\t    };\n\n\t    gridProto.update = function (ecModel, api) {\n\n\t        var axesMap = this._axesMap;\n\n\t        this._updateScale(ecModel, this._model);\n\n\t        function ifAxisCanNotOnZero(otherAxisDim) {\n\t            var axes = axesMap[otherAxisDim];\n\t            for (var idx in axes) {\n\t                if (axes.hasOwnProperty(idx)) {\n\t                    var axis = axes[idx];\n\t                    if (axis && (axis.type === 'category' || !ifAxisCrossZero(axis))) {\n\t                        return true;\n\t                    }\n\t                }\n\t            }\n\t            return false;\n\t        }\n\n\t        each(axesMap.x, function (xAxis) {\n\t            niceScaleExtent(xAxis, xAxis.model);\n\t        });\n\t        each(axesMap.y, function (yAxis) {\n\t            niceScaleExtent(yAxis, yAxis.model);\n\t        });\n\t        // Fix configuration\n\t        each(axesMap.x, function (xAxis) {\n\t            // onZero can not be enabled in these two situations\n\t            // 1. When any other axis is a category axis\n\t            // 2. When any other axis not across 0 point\n\t            if (ifAxisCanNotOnZero('y')) {\n\t                xAxis.onZero = false;\n\t            }\n\t        });\n\t        each(axesMap.y, function (yAxis) {\n\t            if (ifAxisCanNotOnZero('x')) {\n\t                yAxis.onZero = false;\n\t            }\n\t        });\n\n\t        // Resize again if containLabel is enabled\n\t        // FIXME It may cause getting wrong grid size in data processing stage\n\t        this.resize(this._model, api);\n\t    };\n\n\t    /**\n\t     * Resize the grid\n\t     * @param {module:echarts/coord/cartesian/GridModel} gridModel\n\t     * @param {module:echarts/ExtensionAPI} api\n\t     */\n\t    gridProto.resize = function (gridModel, api) {\n\n\t        var gridRect = layout.getLayoutRect(\n\t            gridModel.getBoxLayoutParams(), {\n\t                width: api.getWidth(),\n\t                height: api.getHeight()\n\t            });\n\n\t        this._rect = gridRect;\n\n\t        var axesList = this._axesList;\n\n\t        adjustAxes();\n\n\t        // Minus label size\n\t        if (gridModel.get('containLabel')) {\n\t            each(axesList, function (axis) {\n\t                if (!axis.model.get('axisLabel.inside')) {\n\t                    var labelUnionRect = getLabelUnionRect(axis);\n\t                    if (labelUnionRect) {\n\t                        var dim = axis.isHorizontal() ? 'height' : 'width';\n\t                        var margin = axis.model.get('axisLabel.margin');\n\t                        gridRect[dim] -= labelUnionRect[dim] + margin;\n\t                        if (axis.position === 'top') {\n\t                            gridRect.y += labelUnionRect.height + margin;\n\t                        }\n\t                        else if (axis.position === 'left')  {\n\t                            gridRect.x += labelUnionRect.width + margin;\n\t                        }\n\t                    }\n\t                }\n\t            });\n\n\t            adjustAxes();\n\t        }\n\n\t        function adjustAxes() {\n\t            each(axesList, function (axis) {\n\t                var isHorizontal = axis.isHorizontal();\n\t                var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];\n\t                var idx = axis.inverse ? 1 : 0;\n\t                axis.setExtent(extent[idx], extent[1 - idx]);\n\t                updateAxisTransfrom(axis, isHorizontal ? gridRect.x : gridRect.y);\n\t            });\n\t        }\n\t    };\n\n\t    /**\n\t     * @param {string} axisType\n\t     * @param {ndumber} [axisIndex]\n\t     */\n\t    gridProto.getAxis = function (axisType, axisIndex) {\n\t        var axesMapOnDim = this._axesMap[axisType];\n\t        if (axesMapOnDim != null) {\n\t            if (axisIndex == null) {\n\t                // Find first axis\n\t                for (var name in axesMapOnDim) {\n\t                    if (axesMapOnDim.hasOwnProperty(name)) {\n\t                        return axesMapOnDim[name];\n\t                    }\n\t                }\n\t            }\n\t            return axesMapOnDim[axisIndex];\n\t        }\n\t    };\n\n\t    gridProto.getCartesian = function (xAxisIndex, yAxisIndex) {\n\t        if (xAxisIndex != null && yAxisIndex != null) {\n\t            var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\n\t            return this._coordsMap[key];\n\t        }\n\t        else {\n\t            // When only xAxisIndex or yAxisIndex given, find its first cartesian.\n\t            for (var i = 0, coordList = this._coordsList; i < coordList.length; i++) {\n\t                if (coordList[i].getAxis('x').index === xAxisIndex\n\t                    || coordList[i].getAxis('y').index === yAxisIndex\n\t                ) {\n\t                    return coordList[i];\n\t                }\n\t            }\n\t        }\n\t    };\n\n\t    /**\n\t     * @implements\n\t     * see {module:echarts/CoodinateSystem}\n\t     */\n\t    gridProto.convertToPixel = function (ecModel, finder, value) {\n\t        var target = this._findConvertTarget(ecModel, finder);\n\n\t        return target.cartesian\n\t            ? target.cartesian.dataToPoint(value)\n\t            : target.axis\n\t            ? target.axis.toGlobalCoord(target.axis.dataToCoord(value))\n\t            : null;\n\t    };\n\n\t    /**\n\t     * @implements\n\t     * see {module:echarts/CoodinateSystem}\n\t     */\n\t    gridProto.convertFromPixel = function (ecModel, finder, value) {\n\t        var target = this._findConvertTarget(ecModel, finder);\n\n\t        return target.cartesian\n\t            ? target.cartesian.pointToData(value)\n\t            : target.axis\n\t            ? target.axis.coordToData(target.axis.toLocalCoord(value))\n\t            : null;\n\t    };\n\n\t    /**\n\t     * @inner\n\t     */\n\t    gridProto._findConvertTarget = function (ecModel, finder) {\n\t        var seriesModel = finder.seriesModel;\n\t        var xAxisModel = finder.xAxisModel\n\t            || (seriesModel && seriesModel.getReferringComponents('xAxis')[0]);\n\t        var yAxisModel = finder.yAxisModel\n\t            || (seriesModel && seriesModel.getReferringComponents('yAxis')[0]);\n\t        var gridModel = finder.gridModel;\n\t        var coordsList = this._coordsList;\n\t        var cartesian;\n\t        var axis;\n\n\t        if (seriesModel) {\n\t            cartesian = seriesModel.coordinateSystem;\n\t            zrUtil.indexOf(coordsList, cartesian) < 0 && (cartesian = null);\n\t        }\n\t        else if (xAxisModel && yAxisModel) {\n\t            cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);\n\t        }\n\t        else if (xAxisModel) {\n\t            axis = this.getAxis('x', xAxisModel.componentIndex);\n\t        }\n\t        else if (yAxisModel) {\n\t            axis = this.getAxis('y', yAxisModel.componentIndex);\n\t        }\n\t        // Lowest priority.\n\t        else if (gridModel) {\n\t            var grid = gridModel.coordinateSystem;\n\t            if (grid === this) {\n\t                cartesian = this._coordsList[0];\n\t            }\n\t        }\n\n\t        return {cartesian: cartesian, axis: axis};\n\t    };\n\n\t    /**\n\t     * @implements\n\t     * see {module:echarts/CoodinateSystem}\n\t     */\n\t    gridProto.containPoint = function (point) {\n\t        var coord = this._coordsList[0];\n\t        if (coord) {\n\t            return coord.containPoint(point);\n\t        }\n\t    };\n\n\t    /**\n\t     * Initialize cartesian coordinate systems\n\t     * @private\n\t     */\n\t    gridProto._initCartesian = function (gridModel, ecModel, api) {\n\t        var axisPositionUsed = {\n\t            left: false,\n\t            right: false,\n\t            top: false,\n\t            bottom: false\n\t        };\n\n\t        var axesMap = {\n\t            x: {},\n\t            y: {}\n\t        };\n\t        var axesCount = {\n\t            x: 0,\n\t            y: 0\n\t        };\n\n\t        /// Create axis\n\t        ecModel.eachComponent('xAxis', createAxisCreator('x'), this);\n\t        ecModel.eachComponent('yAxis', createAxisCreator('y'), this);\n\n\t        if (!axesCount.x || !axesCount.y) {\n\t            // Roll back when there no either x or y axis\n\t            this._axesMap = {};\n\t            this._axesList = [];\n\t            return;\n\t        }\n\n\t        this._axesMap = axesMap;\n\n\t        /// Create cartesian2d\n\t        each(axesMap.x, function (xAxis, xAxisIndex) {\n\t            each(axesMap.y, function (yAxis, yAxisIndex) {\n\t                var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\n\t                var cartesian = new Cartesian2D(key);\n\n\t                cartesian.grid = this;\n\n\t                this._coordsMap[key] = cartesian;\n\t                this._coordsList.push(cartesian);\n\n\t                cartesian.addAxis(xAxis);\n\t                cartesian.addAxis(yAxis);\n\t            }, this);\n\t        }, this);\n\n\t        function createAxisCreator(axisType) {\n\t            return function (axisModel, idx) {\n\t                if (!isAxisUsedInTheGrid(axisModel, gridModel, ecModel)) {\n\t                    return;\n\t                }\n\n\t                var axisPosition = axisModel.get('position');\n\t                if (axisType === 'x') {\n\t                    // Fix position\n\t                    if (axisPosition !== 'top' && axisPosition !== 'bottom') {\n\t                        // Default bottom of X\n\t                        axisPosition = 'bottom';\n\t                        if (axisPositionUsed[axisPosition]) {\n\t                            axisPosition = axisPosition === 'top' ? 'bottom' : 'top';\n\t                        }\n\t                    }\n\t                }\n\t                else {\n\t                    // Fix position\n\t                    if (axisPosition !== 'left' && axisPosition !== 'right') {\n\t                        // Default left of Y\n\t                        axisPosition = 'left';\n\t                        if (axisPositionUsed[axisPosition]) {\n\t                            axisPosition = axisPosition === 'left' ? 'right' : 'left';\n\t                        }\n\t                    }\n\t                }\n\t                axisPositionUsed[axisPosition] = true;\n\n\t                var axis = new Axis2D(\n\t                    axisType, axisHelper.createScaleByModel(axisModel),\n\t                    [0, 0],\n\t                    axisModel.get('type'),\n\t                    axisPosition\n\t                );\n\n\t                var isCategory = axis.type === 'category';\n\t                axis.onBand = isCategory && axisModel.get('boundaryGap');\n\t                axis.inverse = axisModel.get('inverse');\n\n\t                axis.onZero = axisModel.get('axisLine.onZero');\n\n\t                // Inject axis into axisModel\n\t                axisModel.axis = axis;\n\n\t                // Inject axisModel into axis\n\t                axis.model = axisModel;\n\n\t                // Inject grid info axis\n\t                axis.grid = this;\n\n\t                // Index of axis, can be used as key\n\t                axis.index = idx;\n\n\t                this._axesList.push(axis);\n\n\t                axesMap[axisType][idx] = axis;\n\t                axesCount[axisType]++;\n\t            };\n\t        }\n\t    };\n\n\t    /**\n\t     * Update cartesian properties from series\n\t     * @param  {module:echarts/model/Option} option\n\t     * @private\n\t     */\n\t    gridProto._updateScale = function (ecModel, gridModel) {\n\t        // Reset scale\n\t        zrUtil.each(this._axesList, function (axis) {\n\t            axis.scale.setExtent(Infinity, -Infinity);\n\t        });\n\t        ecModel.eachSeries(function (seriesModel) {\n\t            if (isCartesian2D(seriesModel)) {\n\t                var axesModels = findAxesModels(seriesModel, ecModel);\n\t                var xAxisModel = axesModels[0];\n\t                var yAxisModel = axesModels[1];\n\n\t                if (!isAxisUsedInTheGrid(xAxisModel, gridModel, ecModel)\n\t                    || !isAxisUsedInTheGrid(yAxisModel, gridModel, ecModel)\n\t                 ) {\n\t                    return;\n\t                }\n\n\t                var cartesian = this.getCartesian(\n\t                    xAxisModel.componentIndex, yAxisModel.componentIndex\n\t                );\n\t                var data = seriesModel.getData();\n\t                var xAxis = cartesian.getAxis('x');\n\t                var yAxis = cartesian.getAxis('y');\n\n\t                if (data.type === 'list') {\n\t                    unionExtent(data, xAxis, seriesModel);\n\t                    unionExtent(data, yAxis, seriesModel);\n\t                }\n\t            }\n\t        }, this);\n\n\t        function unionExtent(data, axis, seriesModel) {\n\t            each(seriesModel.coordDimToDataDim(axis.dim), function (dim) {\n\t                axis.scale.unionExtentFromData(data, dim);\n\t            });\n\t        }\n\t    };\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function updateAxisTransfrom(axis, coordBase) {\n\t        var axisExtent = axis.getExtent();\n\t        var axisExtentSum = axisExtent[0] + axisExtent[1];\n\n\t        // Fast transform\n\t        axis.toGlobalCoord = axis.dim === 'x'\n\t            ? function (coord) {\n\t                return coord + coordBase;\n\t            }\n\t            : function (coord) {\n\t                return axisExtentSum - coord + coordBase;\n\t            };\n\t        axis.toLocalCoord = axis.dim === 'x'\n\t            ? function (coord) {\n\t                return coord - coordBase;\n\t            }\n\t            : function (coord) {\n\t                return axisExtentSum - coord + coordBase;\n\t            };\n\t    }\n\n\t    var axesTypes = ['xAxis', 'yAxis'];\n\t    /**\n\t     * @inner\n\t     */\n\t    function findAxesModels(seriesModel, ecModel) {\n\t        return zrUtil.map(axesTypes, function (axisType) {\n\t            var axisModel = seriesModel.getReferringComponents(axisType)[0];\n\n\t            if (true) {\n\t                if (!axisModel) {\n\t                    throw new Error(axisType + ' \"' + zrUtil.retrieve(\n\t                        seriesModel.get(axisType + 'Index'),\n\t                        seriesModel.get(axisType + 'Id'),\n\t                        0\n\t                    ) + '\" not found');\n\t                }\n\t            }\n\t            return axisModel;\n\t        });\n\t    }\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function isCartesian2D(seriesModel) {\n\t        return seriesModel.get('coordinateSystem') === 'cartesian2d';\n\t    }\n\n\t    Grid.create = function (ecModel, api) {\n\t        var grids = [];\n\t        ecModel.eachComponent('grid', function (gridModel, idx) {\n\t            var grid = new Grid(gridModel, ecModel, api);\n\t            grid.name = 'grid_' + idx;\n\t            grid.resize(gridModel, api);\n\n\t            gridModel.coordinateSystem = grid;\n\n\t            grids.push(grid);\n\t        });\n\n\t        // Inject the coordinateSystems into seriesModel\n\t        ecModel.eachSeries(function (seriesModel) {\n\t            if (!isCartesian2D(seriesModel)) {\n\t                return;\n\t            }\n\n\t            var axesModels = findAxesModels(seriesModel, ecModel);\n\t            var xAxisModel = axesModels[0];\n\t            var yAxisModel = axesModels[1];\n\n\t            var gridModel = xAxisModel.getCoordSysModel();\n\n\t            if (true) {\n\t                if (!gridModel) {\n\t                    throw new Error(\n\t                        'Grid \"' + zrUtil.retrieve(\n\t                            xAxisModel.get('gridIndex'),\n\t                            xAxisModel.get('gridId'),\n\t                            0\n\t                        ) + '\" not found'\n\t                    );\n\t                }\n\t                if (xAxisModel.getCoordSysModel() !== yAxisModel.getCoordSysModel()) {\n\t                    throw new Error('xAxis and yAxis must use the same grid');\n\t                }\n\t            }\n\n\t            var grid = gridModel.coordinateSystem;\n\n\t            seriesModel.coordinateSystem = grid.getCartesian(\n\t                xAxisModel.componentIndex, yAxisModel.componentIndex\n\t            );\n\t        });\n\n\t        return grids;\n\t    };\n\n\t    // For deciding which dimensions to use when creating list data\n\t    Grid.dimensions = Cartesian2D.prototype.dimensions;\n\n\t    __webpack_require__(26).register('cartesian2d', Grid);\n\n\t    module.exports = Grid;\n\n\n/***/ },\n/* 115 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var OrdinalScale = __webpack_require__(116);\n\t    var IntervalScale = __webpack_require__(118);\n\t    __webpack_require__(119);\n\t    __webpack_require__(120);\n\t    var Scale = __webpack_require__(117);\n\n\t    var numberUtil = __webpack_require__(7);\n\t    var zrUtil = __webpack_require__(4);\n\t    var textContain = __webpack_require__(8);\n\t    var axisHelper = {};\n\n\t    /**\n\t     * Get axis scale extent before niced.\n\t     * Item of returned array can only be number (including Infinity and NaN).\n\t     */\n\t    axisHelper.getScaleExtent = function (axis, model) {\n\t        var scale = axis.scale;\n\t        var scaleType = scale.type;\n\n\t        var min = model.getMin();\n\t        var max = model.getMax();\n\t        var fixMin = min != null;\n\t        var fixMax = max != null;\n\t        var originalExtent = scale.getExtent();\n\n\t        var axisDataLen;\n\t        var boundaryGap;\n\t        var span;\n\t        if (scaleType === 'ordinal') {\n\t            axisDataLen = (model.get('data') || []).length;\n\t        }\n\t        else {\n\t            boundaryGap = model.get('boundaryGap');\n\t            if (!zrUtil.isArray(boundaryGap)) {\n\t                boundaryGap = [boundaryGap || 0, boundaryGap || 0];\n\t            }\n\t            boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], 1);\n\t            boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], 1);\n\t            span = originalExtent[1] - originalExtent[0];\n\t        }\n\n\t        if (min == null) {\n\t            min = scaleType === 'ordinal'\n\t                ? (axisDataLen ? 0 : NaN)\n\t                : originalExtent[0] - boundaryGap[0] * span;\n\t        }\n\t        if (max == null) {\n\t            max = scaleType === 'ordinal'\n\t                ? (axisDataLen ? axisDataLen - 1 : NaN)\n\t                : originalExtent[1] + boundaryGap[1] * span;\n\t        }\n\n\t        if (min === 'dataMin') {\n\t            min = originalExtent[0];\n\t        }\n\t        if (max === 'dataMax') {\n\t            max = originalExtent[1];\n\t        }\n\n\t        (min == null || !isFinite(min)) && (min = NaN);\n\t        (max == null || !isFinite(max)) && (max = NaN);\n\n\t        axis.setBlank(zrUtil.eqNaN(min) || zrUtil.eqNaN(max));\n\n\t        // Evaluate if axis needs cross zero\n\t        if (model.getNeedCrossZero()) {\n\t            // Axis is over zero and min is not set\n\t            if (min > 0 && max > 0 && !fixMin) {\n\t                min = 0;\n\t            }\n\t            // Axis is under zero and max is not set\n\t            if (min < 0 && max < 0 && !fixMax) {\n\t                max = 0;\n\t            }\n\t        }\n\n\t        return [min, max];\n\t    };\n\n\t    axisHelper.niceScaleExtent = function (axis, model) {\n\t        var scale = axis.scale;\n\t        var extent = axisHelper.getScaleExtent(axis, model);\n\t        var fixMin = model.getMin() != null;\n\t        var fixMax = model.getMax() != null;\n\t        var splitNumber = model.get('splitNumber');\n\n\t        if (scale.type === 'log') {\n\t            scale.base = model.get('logBase');\n\t        }\n\n\t        scale.setExtent(extent[0], extent[1]);\n\t        scale.niceExtent(splitNumber, fixMin, fixMax);\n\n\t        // Use minInterval to constraint the calculated interval.\n\t        // If calculated interval is less than minInterval. increase the interval quantity until\n\t        // it is larger than minInterval.\n\t        // For example:\n\t        //  minInterval is 1, calculated interval is 0.2, so increase it to be 1. In this way we can get\n\t        //  an integer axis.\n\t        var minInterval = model.get('minInterval');\n\t        if (isFinite(minInterval) && !fixMin && !fixMax && scale.type === 'interval') {\n\t            var interval = scale.getInterval();\n\t            var intervalScale = Math.max(Math.abs(interval), minInterval) / interval;\n\t            // while (interval < minInterval) {\n\t            //     var quantity = numberUtil.quantity(interval);\n\t            //     interval = quantity * 10;\n\t            //     scaleQuantity *= 10;\n\t            // }\n\t            extent = scale.getExtent();\n\t            var origin = (extent[1] + extent[0]) / 2;\n\t            scale.setExtent(\n\t                intervalScale * (extent[0] - origin) + origin,\n\t                intervalScale * (extent[1] - origin) + origin\n\t            );\n\t            scale.niceExtent(splitNumber);\n\t        }\n\n\t        // If some one specified the min, max. And the default calculated interval\n\t        // is not good enough. He can specify the interval. It is often appeared\n\t        // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard\n\t        // to be 60.\n\t        // FIXME\n\t        var interval = model.get('interval');\n\t        if (interval != null) {\n\t            scale.setInterval && scale.setInterval(interval);\n\t        }\n\t    };\n\n\t    /**\n\t     * @param {module:echarts/model/Model} model\n\t     * @param {string} [axisType] Default retrieve from model.type\n\t     * @return {module:echarts/scale/*}\n\t     */\n\t    axisHelper.createScaleByModel = function(model, axisType) {\n\t        axisType = axisType || model.get('type');\n\t        if (axisType) {\n\t            switch (axisType) {\n\t                // Buildin scale\n\t                case 'category':\n\t                    return new OrdinalScale(\n\t                        model.getCategories(), [Infinity, -Infinity]\n\t                    );\n\t                case 'value':\n\t                    return new IntervalScale();\n\t                // Extended scale, like time and log\n\t                default:\n\t                    return (Scale.getClass(axisType) || IntervalScale).create(model);\n\t            }\n\t        }\n\t    };\n\n\t    /**\n\t     * Check if the axis corss 0\n\t     */\n\t    axisHelper.ifAxisCrossZero = function (axis) {\n\t        var dataExtent = axis.scale.getExtent();\n\t        var min = dataExtent[0];\n\t        var max = dataExtent[1];\n\t        return !((min > 0 && max > 0) || (min < 0 && max < 0));\n\t    };\n\n\t    /**\n\t     * @param {Array.<number>} tickCoords In axis self coordinate.\n\t     * @param {Array.<string>} labels\n\t     * @param {string} font\n\t     * @param {boolean} isAxisHorizontal\n\t     * @return {number}\n\t     */\n\t    axisHelper.getAxisLabelInterval = function (tickCoords, labels, font, isAxisHorizontal) {\n\t        // FIXME\n\t        // 不同角的axis和label，不只是horizontal和vertical.\n\n\t        var textSpaceTakenRect;\n\t        var autoLabelInterval = 0;\n\t        var accumulatedLabelInterval = 0;\n\n\t        var step = 1;\n\t        if (labels.length > 40) {\n\t            // Simple optimization for large amount of labels\n\t            step = Math.floor(labels.length / 40);\n\t        }\n\n\t        for (var i = 0; i < tickCoords.length; i += step) {\n\t            var tickCoord = tickCoords[i];\n\t            var rect = textContain.getBoundingRect(\n\t                labels[i], font, 'center', 'top'\n\t            );\n\t            rect[isAxisHorizontal ? 'x' : 'y'] += tickCoord;\n\t            // FIXME Magic number 1.5\n\t            rect[isAxisHorizontal ? 'width' : 'height'] *= 1.3;\n\t            if (!textSpaceTakenRect) {\n\t                textSpaceTakenRect = rect.clone();\n\t            }\n\t            // There is no space for current label;\n\t            else if (textSpaceTakenRect.intersect(rect)) {\n\t                accumulatedLabelInterval++;\n\t                autoLabelInterval = Math.max(autoLabelInterval, accumulatedLabelInterval);\n\t            }\n\t            else {\n\t                textSpaceTakenRect.union(rect);\n\t                // Reset\n\t                accumulatedLabelInterval = 0;\n\t            }\n\t        }\n\t        if (autoLabelInterval === 0 && step > 1) {\n\t            return step;\n\t        }\n\t        return (autoLabelInterval + 1) * step - 1;\n\t    };\n\n\t    /**\n\t     * @param {Object} axis\n\t     * @param {Function} labelFormatter\n\t     * @return {Array.<string>}\n\t     */\n\t    axisHelper.getFormattedLabels = function (axis, labelFormatter) {\n\t        var scale = axis.scale;\n\t        var labels = scale.getTicksLabels();\n\t        var ticks = scale.getTicks();\n\t        if (typeof labelFormatter === 'string') {\n\t            labelFormatter = (function (tpl) {\n\t                return function (val) {\n\t                    return tpl.replace('{value}', val != null ? val : '');\n\t                };\n\t            })(labelFormatter);\n\t            // Consider empty array\n\t            return zrUtil.map(labels, labelFormatter);\n\t        }\n\t        else if (typeof labelFormatter === 'function') {\n\t            return zrUtil.map(ticks, function (tick, idx) {\n\t                return labelFormatter(\n\t                    axis.type === 'category' ? scale.getLabel(tick) : tick,\n\t                    idx\n\t                );\n\t            }, this);\n\t        }\n\t        else {\n\t            return labels;\n\t        }\n\t    };\n\n\t    module.exports = axisHelper;\n\n\n/***/ },\n/* 116 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Linear continuous scale\n\t * @module echarts/coord/scale/Ordinal\n\t *\n\t * http://en.wikipedia.org/wiki/Level_of_measurement\n\t */\n\n\t// FIXME only one data\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var Scale = __webpack_require__(117);\n\n\t    var scaleProto = Scale.prototype;\n\n\t    var OrdinalScale = Scale.extend({\n\n\t        type: 'ordinal',\n\n\t        init: function (data, extent) {\n\t            this._data = data;\n\t            this._extent = extent || [0, data.length - 1];\n\t        },\n\n\t        parse: function (val) {\n\t            return typeof val === 'string'\n\t                ? zrUtil.indexOf(this._data, val)\n\t                // val might be float.\n\t                : Math.round(val);\n\t        },\n\n\t        contain: function (rank) {\n\t            rank = this.parse(rank);\n\t            return scaleProto.contain.call(this, rank)\n\t                && this._data[rank] != null;\n\t        },\n\n\t        /**\n\t         * Normalize given rank or name to linear [0, 1]\n\t         * @param {number|string} [val]\n\t         * @return {number}\n\t         */\n\t        normalize: function (val) {\n\t            return scaleProto.normalize.call(this, this.parse(val));\n\t        },\n\n\t        scale: function (val) {\n\t            return Math.round(scaleProto.scale.call(this, val));\n\t        },\n\n\t        /**\n\t         * @return {Array}\n\t         */\n\t        getTicks: function () {\n\t            var ticks = [];\n\t            var extent = this._extent;\n\t            var rank = extent[0];\n\n\t            while (rank <= extent[1]) {\n\t                ticks.push(rank);\n\t                rank++;\n\t            }\n\n\t            return ticks;\n\t        },\n\n\t        /**\n\t         * Get item on rank n\n\t         * @param {number} n\n\t         * @return {string}\n\t         */\n\t        getLabel: function (n) {\n\t            return this._data[n];\n\t        },\n\n\t        /**\n\t         * @return {number}\n\t         */\n\t        count: function () {\n\t            return this._extent[1] - this._extent[0] + 1;\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        unionExtentFromData: function (data, dim) {\n\t            this.unionExtent(data.getDataExtent(dim, false));\n\t        },\n\n\t        niceTicks: zrUtil.noop,\n\t        niceExtent: zrUtil.noop\n\t    });\n\n\t    /**\n\t     * @return {module:echarts/scale/Time}\n\t     */\n\t    OrdinalScale.create = function () {\n\t        return new OrdinalScale();\n\t    };\n\n\t    module.exports = OrdinalScale;\n\n\n/***/ },\n/* 117 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * // Scale class management\n\t * @module echarts/scale/Scale\n\t */\n\n\n\t    var clazzUtil = __webpack_require__(13);\n\n\t    function Scale() {\n\t        /**\n\t         * Extent\n\t         * @type {Array.<number>}\n\t         * @protected\n\t         */\n\t        this._extent = [Infinity, -Infinity];\n\n\t        /**\n\t         * Step is calculated in adjustExtent\n\t         * @type {Array.<number>}\n\t         * @protected\n\t         */\n\t        this._interval = 0;\n\n\t        this.init && this.init.apply(this, arguments);\n\t    }\n\n\t    var scaleProto = Scale.prototype;\n\n\t    /**\n\t     * Parse input val to valid inner number.\n\t     * @param {*} val\n\t     * @return {number}\n\t     */\n\t    scaleProto.parse = function (val) {\n\t        // Notice: This would be a trap here, If the implementation\n\t        // of this method depends on extent, and this method is used\n\t        // before extent set (like in dataZoom), it would be wrong.\n\t        // Nevertheless, parse does not depend on extent generally.\n\t        return val;\n\t    };\n\n\t    scaleProto.contain = function (val) {\n\t        var extent = this._extent;\n\t        return val >= extent[0] && val <= extent[1];\n\t    };\n\n\t    /**\n\t     * Normalize value to linear [0, 1], return 0.5 if extent span is 0\n\t     * @param {number} val\n\t     * @return {number}\n\t     */\n\t    scaleProto.normalize = function (val) {\n\t        var extent = this._extent;\n\t        if (extent[1] === extent[0]) {\n\t            return 0.5;\n\t        }\n\t        return (val - extent[0]) / (extent[1] - extent[0]);\n\t    };\n\n\t    /**\n\t     * Scale normalized value\n\t     * @param {number} val\n\t     * @return {number}\n\t     */\n\t    scaleProto.scale = function (val) {\n\t        var extent = this._extent;\n\t        return val * (extent[1] - extent[0]) + extent[0];\n\t    };\n\n\t    /**\n\t     * Set extent from data\n\t     * @param {Array.<number>} other\n\t     */\n\t    scaleProto.unionExtent = function (other) {\n\t        var extent = this._extent;\n\t        other[0] < extent[0] && (extent[0] = other[0]);\n\t        other[1] > extent[1] && (extent[1] = other[1]);\n\t        // not setExtent because in log axis it may transformed to power\n\t        // this.setExtent(extent[0], extent[1]);\n\t    };\n\n\t    /**\n\t     * Set extent from data\n\t     * @param {module:echarts/data/List} data\n\t     * @param {string} dim\n\t     */\n\t    scaleProto.unionExtentFromData = function (data, dim) {\n\t        this.unionExtent(data.getDataExtent(dim, true));\n\t    };\n\n\t    /**\n\t     * Get extent\n\t     * @return {Array.<number>}\n\t     */\n\t    scaleProto.getExtent = function () {\n\t        return this._extent.slice();\n\t    };\n\n\t    /**\n\t     * Set extent\n\t     * @param {number} start\n\t     * @param {number} end\n\t     */\n\t    scaleProto.setExtent = function (start, end) {\n\t        var thisExtent = this._extent;\n\t        if (!isNaN(start)) {\n\t            thisExtent[0] = start;\n\t        }\n\t        if (!isNaN(end)) {\n\t            thisExtent[1] = end;\n\t        }\n\t    };\n\n\t    /**\n\t     * @return {Array.<string>}\n\t     */\n\t    scaleProto.getTicksLabels = function () {\n\t        var labels = [];\n\t        var ticks = this.getTicks();\n\t        for (var i = 0; i < ticks.length; i++) {\n\t            labels.push(this.getLabel(ticks[i]));\n\t        }\n\t        return labels;\n\t    };\n\n\t    clazzUtil.enableClassExtend(Scale);\n\t    clazzUtil.enableClassManagement(Scale, {\n\t        registerWhenExtend: true\n\t    });\n\n\t    module.exports = Scale;\n\n\n/***/ },\n/* 118 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Interval scale\n\t * @module echarts/scale/Interval\n\t */\n\n\n\n\t    var numberUtil = __webpack_require__(7);\n\t    var formatUtil = __webpack_require__(6);\n\t    var Scale = __webpack_require__(117);\n\n\t    var mathFloor = Math.floor;\n\t    var mathCeil = Math.ceil;\n\n\t    var getPrecisionSafe = numberUtil.getPrecisionSafe;\n\t    var roundingErrorFix = numberUtil.round;\n\t    /**\n\t     * @alias module:echarts/coord/scale/Interval\n\t     * @constructor\n\t     */\n\t    var IntervalScale = Scale.extend({\n\n\t        type: 'interval',\n\n\t        _interval: 0,\n\n\t        setExtent: function (start, end) {\n\t            var thisExtent = this._extent;\n\t            //start,end may be a Number like '25',so...\n\t            if (!isNaN(start)) {\n\t                thisExtent[0] = parseFloat(start);\n\t            }\n\t            if (!isNaN(end)) {\n\t                thisExtent[1] = parseFloat(end);\n\t            }\n\t        },\n\n\t        unionExtent: function (other) {\n\t            var extent = this._extent;\n\t            other[0] < extent[0] && (extent[0] = other[0]);\n\t            other[1] > extent[1] && (extent[1] = other[1]);\n\n\t            // unionExtent may called by it's sub classes\n\t            IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);\n\t        },\n\t        /**\n\t         * Get interval\n\t         */\n\t        getInterval: function () {\n\t            if (!this._interval) {\n\t                this.niceTicks();\n\t            }\n\t            return this._interval;\n\t        },\n\n\t        /**\n\t         * Set interval\n\t         */\n\t        setInterval: function (interval) {\n\t            this._interval = interval;\n\t            // Dropped auto calculated niceExtent and use user setted extent\n\t            // We assume user wan't to set both interval, min, max to get a better result\n\t            this._niceExtent = this._extent.slice();\n\t        },\n\n\t        /**\n\t         * @return {Array.<number>}\n\t         */\n\t        getTicks: function () {\n\t            if (!this._interval) {\n\t                this.niceTicks();\n\t            }\n\t            var interval = this._interval;\n\t            var extent = this._extent;\n\t            var ticks = [];\n\n\t            // Consider this case: using dataZoom toolbox, zoom and zoom.\n\t            var safeLimit = 10000;\n\n\t            if (interval) {\n\t                var niceExtent = this._niceExtent;\n\t                var precision = getPrecisionSafe(interval) + 2;\n\n\t                if (extent[0] < niceExtent[0]) {\n\t                    ticks.push(extent[0]);\n\t                }\n\t                var tick = niceExtent[0];\n\n\t                while (tick <= niceExtent[1]) {\n\t                    ticks.push(tick);\n\t                    // Avoid rounding error\n\t                    tick = roundingErrorFix(tick + interval, precision);\n\t                    if (ticks.length > safeLimit) {\n\t                        return [];\n\t                    }\n\t                }\n\t                // Consider this case: the last item of ticks is smaller\n\t                // than niceExtent[1] and niceExtent[1] === extent[1].\n\t                if (extent[1] > (ticks.length ? ticks[ticks.length - 1] : niceExtent[1])) {\n\t                    ticks.push(extent[1]);\n\t                }\n\t            }\n\n\t            return ticks;\n\t        },\n\n\t        /**\n\t         * @return {Array.<string>}\n\t         */\n\t        getTicksLabels: function () {\n\t            var labels = [];\n\t            var ticks = this.getTicks();\n\t            for (var i = 0; i < ticks.length; i++) {\n\t                labels.push(this.getLabel(ticks[i]));\n\t            }\n\t            return labels;\n\t        },\n\n\t        /**\n\t         * @param {number} n\n\t         * @return {number}\n\t         */\n\t        getLabel: function (data) {\n\t            return formatUtil.addCommas(data);\n\t        },\n\n\t        /**\n\t         * Update interval and extent of intervals for nice ticks\n\t         *\n\t         * @param {number} [splitNumber = 5] Desired number of ticks\n\t         */\n\t        niceTicks: function (splitNumber) {\n\t            splitNumber = splitNumber || 5;\n\t            var extent = this._extent;\n\t            var span = extent[1] - extent[0];\n\t            if (!isFinite(span)) {\n\t                return;\n\t            }\n\t            // User may set axis min 0 and data are all negative\n\t            // FIXME If it needs to reverse ?\n\t            if (span < 0) {\n\t                span = -span;\n\t                extent.reverse();\n\t            }\n\n\t            // From \"Nice Numbers for Graph Labels\" of Graphic Gems\n\t            // var niceSpan = numberUtil.nice(span, false);\n\t            var step = roundingErrorFix(\n\t                numberUtil.nice(span / splitNumber, true),\n\t                Math.max(\n\t                    getPrecisionSafe(extent[0]),\n\t                    getPrecisionSafe(extent[1])\n\t                // extent may be [0, 1], and step should have 1 more digits.\n\t                // To make it safe we add 2 more digits\n\t                ) + 2\n\t            );\n\n\t            var precision = getPrecisionSafe(step) + 2;\n\t            // Niced extent inside original extent\n\t            var niceExtent = [\n\t                roundingErrorFix(mathCeil(extent[0] / step) * step, precision),\n\t                roundingErrorFix(mathFloor(extent[1] / step) * step, precision)\n\t            ];\n\n\t            this._interval = step;\n\t            this._niceExtent = niceExtent;\n\t        },\n\n\t        /**\n\t         * Nice extent.\n\t         * @param {number} [splitNumber = 5] Given approx tick number\n\t         * @param {boolean} [fixMin=false]\n\t         * @param {boolean} [fixMax=false]\n\t         */\n\t        niceExtent: function (splitNumber, fixMin, fixMax) {\n\t            var extent = this._extent;\n\t            // If extent start and end are same, expand them\n\t            if (extent[0] === extent[1]) {\n\t                if (extent[0] !== 0) {\n\t                    // Expand extent\n\t                    var expandSize = extent[0];\n\t                    // In the fowllowing case\n\t                    //      Axis has been fixed max 100\n\t                    //      Plus data are all 100 and axis extent are [100, 100].\n\t                    // Extend to the both side will cause expanded max is larger than fixed max.\n\t                    // So only expand to the smaller side.\n\t                    if (!fixMax) {\n\t                        extent[1] += expandSize / 2;\n\t                        extent[0] -= expandSize / 2;\n\t                    }\n\t                    else {\n\t                        extent[0] -= expandSize / 2;\n\t                    }\n\t                }\n\t                else {\n\t                    extent[1] = 1;\n\t                }\n\t            }\n\t            var span = extent[1] - extent[0];\n\t            // If there are no data and extent are [Infinity, -Infinity]\n\t            if (!isFinite(span)) {\n\t                extent[0] = 0;\n\t                extent[1] = 1;\n\t            }\n\n\t            this.niceTicks(splitNumber);\n\n\t            // var extent = this._extent;\n\t            var interval = this._interval;\n\n\t            if (!fixMin) {\n\t                extent[0] = roundingErrorFix(mathFloor(extent[0] / interval) * interval);\n\t            }\n\t            if (!fixMax) {\n\t                extent[1] = roundingErrorFix(mathCeil(extent[1] / interval) * interval);\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * @return {module:echarts/scale/Time}\n\t     */\n\t    IntervalScale.create = function () {\n\t        return new IntervalScale();\n\t    };\n\n\t    module.exports = IntervalScale;\n\n\n\n/***/ },\n/* 119 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Interval scale\n\t * @module echarts/coord/scale/Time\n\t */\n\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var numberUtil = __webpack_require__(7);\n\t    var formatUtil = __webpack_require__(6);\n\n\t    var IntervalScale = __webpack_require__(118);\n\n\t    var intervalScaleProto = IntervalScale.prototype;\n\n\t    var mathCeil = Math.ceil;\n\t    var mathFloor = Math.floor;\n\t    var ONE_SECOND = 1000;\n\t    var ONE_MINUTE = ONE_SECOND * 60;\n\t    var ONE_HOUR = ONE_MINUTE * 60;\n\t    var ONE_DAY = ONE_HOUR * 24;\n\n\t    // FIXME 公用？\n\t    var bisect = function (a, x, lo, hi) {\n\t        while (lo < hi) {\n\t            var mid = lo + hi >>> 1;\n\t            if (a[mid][2] < x) {\n\t                lo = mid + 1;\n\t            }\n\t            else {\n\t                hi  = mid;\n\t            }\n\t        }\n\t        return lo;\n\t    };\n\n\t    /**\n\t     * @alias module:echarts/coord/scale/Time\n\t     * @constructor\n\t     */\n\t    var TimeScale = IntervalScale.extend({\n\t        type: 'time',\n\n\t        // Overwrite\n\t        getLabel: function (val) {\n\t            var stepLvl = this._stepLvl;\n\n\t            var date = new Date(val);\n\n\t            return formatUtil.formatTime(stepLvl[0], date);\n\t        },\n\n\t        // Overwrite\n\t        niceExtent: function (approxTickNum, fixMin, fixMax) {\n\t            var extent = this._extent;\n\t            // If extent start and end are same, expand them\n\t            if (extent[0] === extent[1]) {\n\t                // Expand extent\n\t                extent[0] -= ONE_DAY;\n\t                extent[1] += ONE_DAY;\n\t            }\n\t            // If there are no data and extent are [Infinity, -Infinity]\n\t            if (extent[1] === -Infinity && extent[0] === Infinity) {\n\t                var d = new Date();\n\t                extent[1] = new Date(d.getFullYear(), d.getMonth(), d.getDate());\n\t                extent[0] = extent[1] - ONE_DAY;\n\t            }\n\n\t            this.niceTicks(approxTickNum);\n\n\t            // var extent = this._extent;\n\t            var interval = this._interval;\n\n\t            if (!fixMin) {\n\t                extent[0] = numberUtil.round(mathFloor(extent[0] / interval) * interval);\n\t            }\n\t            if (!fixMax) {\n\t                extent[1] = numberUtil.round(mathCeil(extent[1] / interval) * interval);\n\t            }\n\t        },\n\n\t        // Overwrite\n\t        niceTicks: function (approxTickNum) {\n\t            approxTickNum = approxTickNum || 10;\n\n\t            var extent = this._extent;\n\t            var span = extent[1] - extent[0];\n\t            var approxInterval = span / approxTickNum;\n\t            var scaleLevelsLen = scaleLevels.length;\n\t            var idx = bisect(scaleLevels, approxInterval, 0, scaleLevelsLen);\n\n\t            var level = scaleLevels[Math.min(idx, scaleLevelsLen - 1)];\n\t            var interval = level[2];\n\t            // Same with interval scale if span is much larger than 1 year\n\t            if (level[0] === 'year') {\n\t                var yearSpan = span / interval;\n\n\t                // From \"Nice Numbers for Graph Labels\" of Graphic Gems\n\t                // var niceYearSpan = numberUtil.nice(yearSpan, false);\n\t                var yearStep = numberUtil.nice(yearSpan / approxTickNum, true);\n\n\t                interval *= yearStep;\n\t            }\n\n\t            var niceExtent = [\n\t                mathCeil(extent[0] / interval) * interval,\n\t                mathFloor(extent[1] / interval) * interval\n\t            ];\n\n\t            this._stepLvl = level;\n\t            // Interval will be used in getTicks\n\t            this._interval = interval;\n\t            this._niceExtent = niceExtent;\n\t        },\n\n\t        parse: function (val) {\n\t            // val might be float.\n\t            return +numberUtil.parseDate(val);\n\t        }\n\t    });\n\n\t    zrUtil.each(['contain', 'normalize'], function (methodName) {\n\t        TimeScale.prototype[methodName] = function (val) {\n\t            return intervalScaleProto[methodName].call(this, this.parse(val));\n\t        };\n\t    });\n\n\t    // Steps from d3\n\t    var scaleLevels = [\n\t        // Format       step    interval\n\t        ['hh:mm:ss',    1,      ONE_SECOND],           // 1s\n\t        ['hh:mm:ss',    5,      ONE_SECOND * 5],       // 5s\n\t        ['hh:mm:ss',    10,     ONE_SECOND * 10],      // 10s\n\t        ['hh:mm:ss',    15,     ONE_SECOND * 15],      // 15s\n\t        ['hh:mm:ss',    30,     ONE_SECOND * 30],      // 30s\n\t        ['hh:mm\\nMM-dd',1,      ONE_MINUTE],          // 1m\n\t        ['hh:mm\\nMM-dd',5,      ONE_MINUTE * 5],      // 5m\n\t        ['hh:mm\\nMM-dd',10,     ONE_MINUTE * 10],     // 10m\n\t        ['hh:mm\\nMM-dd',15,     ONE_MINUTE * 15],     // 15m\n\t        ['hh:mm\\nMM-dd',30,     ONE_MINUTE * 30],     // 30m\n\t        ['hh:mm\\nMM-dd',1,      ONE_HOUR],        // 1h\n\t        ['hh:mm\\nMM-dd',2,      ONE_HOUR * 2],    // 2h\n\t        ['hh:mm\\nMM-dd',6,      ONE_HOUR * 6],    // 6h\n\t        ['hh:mm\\nMM-dd',12,     ONE_HOUR * 12],   // 12h\n\t        ['MM-dd\\nyyyy', 1,      ONE_DAY],   // 1d\n\t        ['week',        7,      ONE_DAY * 7],        // 7d\n\t        ['month',       1,      ONE_DAY * 31],       // 1M\n\t        ['quarter',     3,      ONE_DAY * 380 / 4],  // 3M\n\t        ['half-year',   6,      ONE_DAY * 380 / 2],  // 6M\n\t        ['year',        1,      ONE_DAY * 380]       // 1Y\n\t    ];\n\n\t    /**\n\t     * @return {module:echarts/scale/Time}\n\t     */\n\t    TimeScale.create = function () {\n\t        return new TimeScale();\n\t    };\n\n\t    module.exports = TimeScale;\n\n\n/***/ },\n/* 120 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Log scale\n\t * @module echarts/scale/Log\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var Scale = __webpack_require__(117);\n\t    var numberUtil = __webpack_require__(7);\n\n\t    // Use some method of IntervalScale\n\t    var IntervalScale = __webpack_require__(118);\n\n\t    var scaleProto = Scale.prototype;\n\t    var intervalScaleProto = IntervalScale.prototype;\n\n\t    var getPrecisionSafe = numberUtil.getPrecisionSafe;\n\t    var roundingErrorFix = numberUtil.round;\n\n\t    var mathFloor = Math.floor;\n\t    var mathCeil = Math.ceil;\n\t    var mathPow = Math.pow;\n\n\t    var mathLog = Math.log;\n\n\t    var LogScale = Scale.extend({\n\n\t        type: 'log',\n\n\t        base: 10,\n\n\t        $constructor: function () {\n\t            Scale.apply(this, arguments);\n\t            this._originalScale = new IntervalScale();\n\t        },\n\n\t        /**\n\t         * @return {Array.<number>}\n\t         */\n\t        getTicks: function () {\n\t            var originalScale = this._originalScale;\n\t            var extent = this._extent;\n\t            var originalExtent = originalScale.getExtent();\n\n\t            return zrUtil.map(intervalScaleProto.getTicks.call(this), function (val) {\n\t                var powVal = numberUtil.round(mathPow(this.base, val));\n\n\t                // Fix #4158\n\t                powVal = (val === extent[0] && originalScale.__fixMin)\n\t                    ? fixRoundingError(powVal, originalExtent[0])\n\t                    : powVal;\n\t                powVal = (val === extent[1] && originalScale.__fixMax)\n\t                    ? fixRoundingError(powVal, originalExtent[1])\n\t                    : powVal;\n\n\t                return powVal;\n\t            }, this);\n\t        },\n\n\t        /**\n\t         * @param {number} val\n\t         * @return {string}\n\t         */\n\t        getLabel: intervalScaleProto.getLabel,\n\n\t        /**\n\t         * @param  {number} val\n\t         * @return {number}\n\t         */\n\t        scale: function (val) {\n\t            val = scaleProto.scale.call(this, val);\n\t            return mathPow(this.base, val);\n\t        },\n\n\t        /**\n\t         * @param {number} start\n\t         * @param {number} end\n\t         */\n\t        setExtent: function (start, end) {\n\t            var base = this.base;\n\t            start = mathLog(start) / mathLog(base);\n\t            end = mathLog(end) / mathLog(base);\n\t            intervalScaleProto.setExtent.call(this, start, end);\n\t        },\n\n\t        /**\n\t         * @return {number} end\n\t         */\n\t        getExtent: function () {\n\t            var base = this.base;\n\t            var extent = scaleProto.getExtent.call(this);\n\t            extent[0] = mathPow(base, extent[0]);\n\t            extent[1] = mathPow(base, extent[1]);\n\n\t            // Fix #4158\n\t            var originalScale = this._originalScale;\n\t            var originalExtent = originalScale.getExtent();\n\t            originalScale.__fixMin && (extent[0] = fixRoundingError(extent[0], originalExtent[0]));\n\t            originalScale.__fixMax && (extent[1] = fixRoundingError(extent[1], originalExtent[1]));\n\n\t            return extent;\n\t        },\n\n\t        /**\n\t         * @param  {Array.<number>} extent\n\t         */\n\t        unionExtent: function (extent) {\n\t            this._originalScale.unionExtent(extent);\n\n\t            var base = this.base;\n\t            extent[0] = mathLog(extent[0]) / mathLog(base);\n\t            extent[1] = mathLog(extent[1]) / mathLog(base);\n\t            scaleProto.unionExtent.call(this, extent);\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        unionExtentFromData: function (data, dim) {\n\t            this.unionExtent(data.getDataExtent(dim, true, function (val) {\n\t                return val > 0;\n\t            }));\n\t        },\n\n\t        /**\n\t         * Update interval and extent of intervals for nice ticks\n\t         * @param  {number} [approxTickNum = 10] Given approx tick number\n\t         */\n\t        niceTicks: function (approxTickNum) {\n\t            approxTickNum = approxTickNum || 10;\n\t            var extent = this._extent;\n\t            var span = extent[1] - extent[0];\n\t            if (span === Infinity || span <= 0) {\n\t                return;\n\t            }\n\n\t            var interval = numberUtil.quantity(span);\n\t            var err = approxTickNum / span * interval;\n\n\t            // Filter ticks to get closer to the desired count.\n\t            if (err <= 0.5) {\n\t                interval *= 10;\n\t            }\n\n\t            // Interval should be integer\n\t            while (!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0) {\n\t                interval *= 10;\n\t            }\n\n\t            var niceExtent = [\n\t                numberUtil.round(mathCeil(extent[0] / interval) * interval),\n\t                numberUtil.round(mathFloor(extent[1] / interval) * interval)\n\t            ];\n\n\t            this._interval = interval;\n\t            this._niceExtent = niceExtent;\n\t        },\n\n\t        /**\n\t         * Nice extent.\n\t         * @param {number} [approxTickNum = 10] Given approx tick number\n\t         * @param {boolean} [fixMin=false]\n\t         * @param {boolean} [fixMax=false]\n\t         */\n\t        niceExtent: function (splitNumber, fixMin, fixMax) {\n\t            intervalScaleProto.niceExtent.call(this, splitNumber, fixMin, fixMax);\n\n\t            var originalScale = this._originalScale;\n\t            originalScale.__fixMin = fixMin;\n\t            originalScale.__fixMax = fixMax;\n\t        }\n\n\t    });\n\n\t    zrUtil.each(['contain', 'normalize'], function (methodName) {\n\t        LogScale.prototype[methodName] = function (val) {\n\t            val = mathLog(val) / mathLog(this.base);\n\t            return scaleProto[methodName].call(this, val);\n\t        };\n\t    });\n\n\t    LogScale.create = function () {\n\t        return new LogScale();\n\t    };\n\n\t    function fixRoundingError(val, originalVal) {\n\t        return roundingErrorFix(val, getPrecisionSafe(originalVal));\n\t    }\n\n\t    module.exports = LogScale;\n\n\n/***/ },\n/* 121 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var Cartesian = __webpack_require__(122);\n\n\t    function Cartesian2D(name) {\n\n\t        Cartesian.call(this, name);\n\t    }\n\n\t    Cartesian2D.prototype = {\n\n\t        constructor: Cartesian2D,\n\n\t        type: 'cartesian2d',\n\n\t        /**\n\t         * @type {Array.<string>}\n\t         * @readOnly\n\t         */\n\t        dimensions: ['x', 'y'],\n\n\t        /**\n\t         * Base axis will be used on stacking.\n\t         *\n\t         * @return {module:echarts/coord/cartesian/Axis2D}\n\t         */\n\t        getBaseAxis: function () {\n\t            return this.getAxesByScale('ordinal')[0]\n\t                || this.getAxesByScale('time')[0]\n\t                || this.getAxis('x');\n\t        },\n\n\t        /**\n\t         * If contain point\n\t         * @param {Array.<number>} point\n\t         * @return {boolean}\n\t         */\n\t        containPoint: function (point) {\n\t            var axisX = this.getAxis('x');\n\t            var axisY = this.getAxis('y');\n\t            return axisX.contain(axisX.toLocalCoord(point[0]))\n\t                && axisY.contain(axisY.toLocalCoord(point[1]));\n\t        },\n\n\t        /**\n\t         * If contain data\n\t         * @param {Array.<number>} data\n\t         * @return {boolean}\n\t         */\n\t        containData: function (data) {\n\t            return this.getAxis('x').containData(data[0])\n\t                && this.getAxis('y').containData(data[1]);\n\t        },\n\n\t        /**\n\t         * Convert series data to an array of points\n\t         * @param {module:echarts/data/List} data\n\t         * @param {boolean} stack\n\t         * @return {Array}\n\t         *  Return array of points. For example:\n\t         *  `[[10, 10], [20, 20], [30, 30]]`\n\t         */\n\t        dataToPoints: function (data, stack) {\n\t            return data.mapArray(['x', 'y'], function (x, y) {\n\t                return this.dataToPoint([x, y]);\n\t            }, stack, this);\n\t        },\n\n\t        /**\n\t         * @param {Array.<number>} data\n\t         * @param {boolean} [clamp=false]\n\t         * @return {Array.<number>}\n\t         */\n\t        dataToPoint: function (data, clamp) {\n\t            var xAxis = this.getAxis('x');\n\t            var yAxis = this.getAxis('y');\n\t            return [\n\t                xAxis.toGlobalCoord(xAxis.dataToCoord(data[0], clamp)),\n\t                yAxis.toGlobalCoord(yAxis.dataToCoord(data[1], clamp))\n\t            ];\n\t        },\n\n\t        /**\n\t         * @param {Array.<number>} point\n\t         * @param {boolean} [clamp=false]\n\t         * @return {Array.<number>}\n\t         */\n\t        pointToData: function (point, clamp) {\n\t            var xAxis = this.getAxis('x');\n\t            var yAxis = this.getAxis('y');\n\t            return [\n\t                xAxis.coordToData(xAxis.toLocalCoord(point[0]), clamp),\n\t                yAxis.coordToData(yAxis.toLocalCoord(point[1]), clamp)\n\t            ];\n\t        },\n\n\t        /**\n\t         * Get other axis\n\t         * @param {module:echarts/coord/cartesian/Axis2D} axis\n\t         */\n\t        getOtherAxis: function (axis) {\n\t            return this.getAxis(axis.dim === 'x' ? 'y' : 'x');\n\t        }\n\t    };\n\n\t    zrUtil.inherits(Cartesian2D, Cartesian);\n\n\t    module.exports = Cartesian2D;\n\n\n/***/ },\n/* 122 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * Cartesian coordinate system\n\t * @module  echarts/coord/Cartesian\n\t *\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    function dimAxisMapper(dim) {\n\t        return this._axes[dim];\n\t    }\n\n\t    /**\n\t     * @alias module:echarts/coord/Cartesian\n\t     * @constructor\n\t     */\n\t    var Cartesian = function (name) {\n\t        this._axes = {};\n\n\t        this._dimList = [];\n\n\t        /**\n\t         * @type {string}\n\t         */\n\t        this.name = name || '';\n\t    };\n\n\t    Cartesian.prototype = {\n\n\t        constructor: Cartesian,\n\n\t        type: 'cartesian',\n\n\t        /**\n\t         * Get axis\n\t         * @param  {number|string} dim\n\t         * @return {module:echarts/coord/Cartesian~Axis}\n\t         */\n\t        getAxis: function (dim) {\n\t            return this._axes[dim];\n\t        },\n\n\t        /**\n\t         * Get axes list\n\t         * @return {Array.<module:echarts/coord/Cartesian~Axis>}\n\t         */\n\t        getAxes: function () {\n\t            return zrUtil.map(this._dimList, dimAxisMapper, this);\n\t        },\n\n\t        /**\n\t         * Get axes list by given scale type\n\t         */\n\t        getAxesByScale: function (scaleType) {\n\t            scaleType = scaleType.toLowerCase();\n\t            return zrUtil.filter(\n\t                this.getAxes(),\n\t                function (axis) {\n\t                    return axis.scale.type === scaleType;\n\t                }\n\t            );\n\t        },\n\n\t        /**\n\t         * Add axis\n\t         * @param {module:echarts/coord/Cartesian.Axis}\n\t         */\n\t        addAxis: function (axis) {\n\t            var dim = axis.dim;\n\n\t            this._axes[dim] = axis;\n\n\t            this._dimList.push(dim);\n\t        },\n\n\t        /**\n\t         * Convert data to coord in nd space\n\t         * @param {Array.<number>|Object.<string, number>} val\n\t         * @return {Array.<number>|Object.<string, number>}\n\t         */\n\t        dataToCoord: function (val) {\n\t            return this._dataCoordConvert(val, 'dataToCoord');\n\t        },\n\n\t        /**\n\t         * Convert coord in nd space to data\n\t         * @param  {Array.<number>|Object.<string, number>} val\n\t         * @return {Array.<number>|Object.<string, number>}\n\t         */\n\t        coordToData: function (val) {\n\t            return this._dataCoordConvert(val, 'coordToData');\n\t        },\n\n\t        _dataCoordConvert: function (input, method) {\n\t            var dimList = this._dimList;\n\n\t            var output = input instanceof Array ? [] : {};\n\n\t            for (var i = 0; i < dimList.length; i++) {\n\t                var dim = dimList[i];\n\t                var axis = this._axes[dim];\n\n\t                output[dim] = axis[method](input[dim]);\n\t            }\n\n\t            return output;\n\t        }\n\t    };\n\n\t    module.exports = Cartesian;\n\n\n/***/ },\n/* 123 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var Axis = __webpack_require__(124);\n\t    var axisLabelInterval = __webpack_require__(125);\n\n\t    /**\n\t     * Extend axis 2d\n\t     * @constructor module:echarts/coord/cartesian/Axis2D\n\t     * @extends {module:echarts/coord/cartesian/Axis}\n\t     * @param {string} dim\n\t     * @param {*} scale\n\t     * @param {Array.<number>} coordExtent\n\t     * @param {string} axisType\n\t     * @param {string} position\n\t     */\n\t    var Axis2D = function (dim, scale, coordExtent, axisType, position) {\n\t        Axis.call(this, dim, scale, coordExtent);\n\t        /**\n\t         * Axis type\n\t         *  - 'category'\n\t         *  - 'value'\n\t         *  - 'time'\n\t         *  - 'log'\n\t         * @type {string}\n\t         */\n\t        this.type = axisType || 'value';\n\n\t        /**\n\t         * Axis position\n\t         *  - 'top'\n\t         *  - 'bottom'\n\t         *  - 'left'\n\t         *  - 'right'\n\t         */\n\t        this.position = position || 'bottom';\n\t    };\n\n\t    Axis2D.prototype = {\n\n\t        constructor: Axis2D,\n\n\t        /**\n\t         * Index of axis, can be used as key\n\t         */\n\t        index: 0,\n\t        /**\n\t         * If axis is on the zero position of the other axis\n\t         * @type {boolean}\n\t         */\n\t        onZero: false,\n\n\t        /**\n\t         * Axis model\n\t         * @param {module:echarts/coord/cartesian/AxisModel}\n\t         */\n\t        model: null,\n\n\t        isHorizontal: function () {\n\t            var position = this.position;\n\t            return position === 'top' || position === 'bottom';\n\t        },\n\n\t        getGlobalExtent: function () {\n\t            var ret = this.getExtent();\n\t            ret[0] = this.toGlobalCoord(ret[0]);\n\t            ret[1] = this.toGlobalCoord(ret[1]);\n\t            return ret;\n\t        },\n\n\t        /**\n\t         * @return {number}\n\t         */\n\t        getLabelInterval: function () {\n\t            var labelInterval = this._labelInterval;\n\t            if (!labelInterval) {\n\t                labelInterval = this._labelInterval = axisLabelInterval(this);\n\t            }\n\t            return labelInterval;\n\t        },\n\n\t        /**\n\t         * If label is ignored.\n\t         * Automatically used when axis is category and label can not be all shown\n\t         * @param  {number}  idx\n\t         * @return {boolean}\n\t         */\n\t        isLabelIgnored: function (idx) {\n\t            if (this.type === 'category') {\n\t                var labelInterval = this.getLabelInterval();\n\t                return ((typeof labelInterval === 'function')\n\t                    && !labelInterval(idx, this.scale.getLabel(idx)))\n\t                    || idx % (labelInterval + 1);\n\t            }\n\t        },\n\n\t        /**\n\t         * Transform global coord to local coord,\n\t         * i.e. var localCoord = axis.toLocalCoord(80);\n\t         * designate by module:echarts/coord/cartesian/Grid.\n\t         * @type {Function}\n\t         */\n\t        toLocalCoord: null,\n\n\t        /**\n\t         * Transform global coord to local coord,\n\t         * i.e. var globalCoord = axis.toLocalCoord(40);\n\t         * designate by module:echarts/coord/cartesian/Grid.\n\t         * @type {Function}\n\t         */\n\t        toGlobalCoord: null\n\n\t    };\n\t    zrUtil.inherits(Axis2D, Axis);\n\n\t    module.exports = Axis2D;\n\n\n/***/ },\n/* 124 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var numberUtil = __webpack_require__(7);\n\t    var linearMap = numberUtil.linearMap;\n\t    var zrUtil = __webpack_require__(4);\n\n\t    function fixExtentWithBands(extent, nTick) {\n\t        var size = extent[1] - extent[0];\n\t        var len = nTick;\n\t        var margin = size / len / 2;\n\t        extent[0] += margin;\n\t        extent[1] -= margin;\n\t    }\n\n\t    var normalizedExtent = [0, 1];\n\t    /**\n\t     * @name module:echarts/coord/CartesianAxis\n\t     * @constructor\n\t     */\n\t    var Axis = function (dim, scale, extent) {\n\n\t        /**\n\t         * Axis dimension. Such as 'x', 'y', 'z', 'angle', 'radius'\n\t         * @type {string}\n\t         */\n\t        this.dim = dim;\n\n\t        /**\n\t         * Axis scale\n\t         * @type {module:echarts/coord/scale/*}\n\t         */\n\t        this.scale = scale;\n\n\t        /**\n\t         * @type {Array.<number>}\n\t         * @private\n\t         */\n\t        this._extent = extent || [0, 0];\n\n\t        /**\n\t         * @type {boolean}\n\t         */\n\t        this.inverse = false;\n\n\t        /**\n\t         * Usually true when axis has a ordinal scale\n\t         * @type {boolean}\n\t         */\n\t        this.onBand = false;\n\t    };\n\n\t    Axis.prototype = {\n\n\t        constructor: Axis,\n\n\t        /**\n\t         * If axis extent contain given coord\n\t         * @param {number} coord\n\t         * @return {boolean}\n\t         */\n\t        contain: function (coord) {\n\t            var extent = this._extent;\n\t            var min = Math.min(extent[0], extent[1]);\n\t            var max = Math.max(extent[0], extent[1]);\n\t            return coord >= min && coord <= max;\n\t        },\n\n\t        /**\n\t         * If axis extent contain given data\n\t         * @param {number} data\n\t         * @return {boolean}\n\t         */\n\t        containData: function (data) {\n\t            return this.contain(this.dataToCoord(data));\n\t        },\n\n\t        /**\n\t         * Get coord extent.\n\t         * @return {Array.<number>}\n\t         */\n\t        getExtent: function () {\n\t            var ret = this._extent.slice();\n\t            return ret;\n\t        },\n\n\t        /**\n\t         * Get precision used for formatting\n\t         * @param {Array.<number>} [dataExtent]\n\t         * @return {number}\n\t         */\n\t        getPixelPrecision: function (dataExtent) {\n\t            return numberUtil.getPixelPrecision(\n\t                dataExtent || this.scale.getExtent(),\n\t                this._extent\n\t            );\n\t        },\n\n\t        /**\n\t         * Set coord extent\n\t         * @param {number} start\n\t         * @param {number} end\n\t         */\n\t        setExtent: function (start, end) {\n\t            var extent = this._extent;\n\t            extent[0] = start;\n\t            extent[1] = end;\n\t        },\n\n\t        /**\n\t         * Convert data to coord. Data is the rank if it has a ordinal scale\n\t         * @param {number} data\n\t         * @param  {boolean} clamp\n\t         * @return {number}\n\t         */\n\t        dataToCoord: function (data, clamp) {\n\t            var extent = this._extent;\n\t            var scale = this.scale;\n\t            data = scale.normalize(data);\n\n\t            if (this.onBand && scale.type === 'ordinal') {\n\t                extent = extent.slice();\n\t                fixExtentWithBands(extent, scale.count());\n\t            }\n\n\t            return linearMap(data, normalizedExtent, extent, clamp);\n\t        },\n\n\t        /**\n\t         * Convert coord to data. Data is the rank if it has a ordinal scale\n\t         * @param {number} coord\n\t         * @param  {boolean} clamp\n\t         * @return {number}\n\t         */\n\t        coordToData: function (coord, clamp) {\n\t            var extent = this._extent;\n\t            var scale = this.scale;\n\n\t            if (this.onBand && scale.type === 'ordinal') {\n\t                extent = extent.slice();\n\t                fixExtentWithBands(extent, scale.count());\n\t            }\n\n\t            var t = linearMap(coord, extent, normalizedExtent, clamp);\n\n\t            return this.scale.scale(t);\n\t        },\n\t        /**\n\t         * @return {Array.<number>}\n\t         */\n\t        getTicksCoords: function (alignWithLabel) {\n\t            if (this.onBand && !alignWithLabel) {\n\t                var bands = this.getBands();\n\t                var coords = [];\n\t                for (var i = 0; i < bands.length; i++) {\n\t                    coords.push(bands[i][0]);\n\t                }\n\t                if (bands[i - 1]) {\n\t                    coords.push(bands[i - 1][1]);\n\t                }\n\t                return coords;\n\t            }\n\t            else {\n\t                return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);\n\t            }\n\t        },\n\n\t        /**\n\t         * Coords of labels are on the ticks or on the middle of bands\n\t         * @return {Array.<number>}\n\t         */\n\t        getLabelsCoords: function () {\n\t            return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);\n\t        },\n\n\t        /**\n\t         * Get bands.\n\t         *\n\t         * If axis has labels [1, 2, 3, 4]. Bands on the axis are\n\t         * |---1---|---2---|---3---|---4---|.\n\t         *\n\t         * @return {Array}\n\t         */\n\t         // FIXME Situation when labels is on ticks\n\t        getBands: function () {\n\t            var extent = this.getExtent();\n\t            var bands = [];\n\t            var len = this.scale.count();\n\t            var start = extent[0];\n\t            var end = extent[1];\n\t            var span = end - start;\n\n\t            for (var i = 0; i < len; i++) {\n\t                bands.push([\n\t                    span * i / len + start,\n\t                    span * (i + 1) / len + start\n\t                ]);\n\t            }\n\t            return bands;\n\t        },\n\n\t        /**\n\t         * Get width of band\n\t         * @return {number}\n\t         */\n\t        getBandWidth: function () {\n\t            var axisExtent = this._extent;\n\t            var dataExtent = this.scale.getExtent();\n\n\t            var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0);\n\t            // Fix #2728, avoid NaN when only one data.\n\t            len === 0 && (len = 1);\n\n\t            var size = Math.abs(axisExtent[1] - axisExtent[0]);\n\n\t            return Math.abs(size) / len;\n\t        },\n\n\t        /**\n\t         * When axis extent depends on data and no data exists,\n\t         * axis ticks should not be drawn, which is named 'blank'.\n\t         */\n\t        isBlank: function () {\n\t            return this._isBlank;\n\t        },\n\n\t        /**\n\t         * When axis extent depends on data and no data exists,\n\t         * axis ticks should not be drawn, which is named 'blank'.\n\t         */\n\t        setBlank: function (isBlank) {\n\t            this._isBlank = isBlank;\n\t        }\n\n\t    };\n\n\t    module.exports = Axis;\n\n\n/***/ },\n/* 125 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * Helper function for axisLabelInterval calculation\n\t */\n\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var axisHelper = __webpack_require__(115);\n\n\t    module.exports = function (axis) {\n\t        var axisModel = axis.model;\n\t        var labelModel = axisModel.getModel('axisLabel');\n\t        var labelInterval = labelModel.get('interval');\n\t        if (!(axis.type === 'category' && labelInterval === 'auto')) {\n\t            return labelInterval === 'auto' ? 0 : labelInterval;\n\t        }\n\n\t        return axisHelper.getAxisLabelInterval(\n\t            zrUtil.map(axis.scale.getTicks(), axis.dataToCoord, axis),\n\t            axisModel.getFormattedLabels(),\n\t            labelModel.getModel('textStyle').getFont(),\n\t            axis.isHorizontal()\n\t        );\n\t    };\n\n\n/***/ },\n/* 126 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t// Grid 是在有直角坐标系的时候必须要存在的\n\t// 所以这里也要被 Cartesian2D 依赖\n\n\n\t    __webpack_require__(127);\n\t    var ComponentModel = __webpack_require__(19);\n\n\t    module.exports = ComponentModel.extend({\n\n\t        type: 'grid',\n\n\t        dependencies: ['xAxis', 'yAxis'],\n\n\t        layoutMode: 'box',\n\n\t        /**\n\t         * @type {module:echarts/coord/cartesian/Grid}\n\t         */\n\t        coordinateSystem: null,\n\n\t        defaultOption: {\n\t            show: false,\n\t            zlevel: 0,\n\t            z: 0,\n\t            left: '10%',\n\t            top: 60,\n\t            right: '10%',\n\t            bottom: 60,\n\t            // If grid size contain label\n\t            containLabel: false,\n\t            // width: {totalWidth} - left - right,\n\t            // height: {totalHeight} - top - bottom,\n\t            backgroundColor: 'rgba(0,0,0,0)',\n\t            borderWidth: 1,\n\t            borderColor: '#ccc'\n\t        }\n\t    });\n\n\n/***/ },\n/* 127 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var ComponentModel = __webpack_require__(19);\n\t    var zrUtil = __webpack_require__(4);\n\t    var axisModelCreator = __webpack_require__(128);\n\n\t    var AxisModel = ComponentModel.extend({\n\n\t        type: 'cartesian2dAxis',\n\n\t        /**\n\t         * @type {module:echarts/coord/cartesian/Axis2D}\n\t         */\n\t        axis: null,\n\n\t        /**\n\t         * @override\n\t         */\n\t        init: function () {\n\t            AxisModel.superApply(this, 'init', arguments);\n\t            this.resetRange();\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        mergeOption: function () {\n\t            AxisModel.superApply(this, 'mergeOption', arguments);\n\t            this.resetRange();\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        restoreData: function () {\n\t            AxisModel.superApply(this, 'restoreData', arguments);\n\t            this.resetRange();\n\t        },\n\n\t        /**\n\t         * @override\n\t         * @return {module:echarts/model/Component}\n\t         */\n\t        getCoordSysModel: function () {\n\t            return this.ecModel.queryComponents({\n\t                mainType: 'grid',\n\t                index: this.option.gridIndex,\n\t                id: this.option.gridId\n\t            })[0];\n\t        }\n\n\t    });\n\n\t    function getAxisType(axisDim, option) {\n\t        // Default axis with data is category axis\n\t        return option.type || (option.data ? 'category' : 'value');\n\t    }\n\n\t    zrUtil.merge(AxisModel.prototype, __webpack_require__(130));\n\n\t    var extraOption = {\n\t        // gridIndex: 0,\n\t        // gridId: '',\n\n\t        // Offset is for multiple axis on the same position\n\t        offset: 0\n\t    };\n\n\t    axisModelCreator('x', AxisModel, getAxisType, extraOption);\n\t    axisModelCreator('y', AxisModel, getAxisType, extraOption);\n\n\t    module.exports = AxisModel;\n\n\n/***/ },\n/* 128 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var axisDefault = __webpack_require__(129);\n\t    var zrUtil = __webpack_require__(4);\n\t    var ComponentModel = __webpack_require__(19);\n\t    var layout = __webpack_require__(21);\n\n\t    // FIXME axisType is fixed ?\n\t    var AXIS_TYPES = ['value', 'category', 'time', 'log'];\n\n\t    /**\n\t     * Generate sub axis model class\n\t     * @param {string} axisName 'x' 'y' 'radius' 'angle' 'parallel'\n\t     * @param {module:echarts/model/Component} BaseAxisModelClass\n\t     * @param {Function} axisTypeDefaulter\n\t     * @param {Object} [extraDefaultOption]\n\t     */\n\t    module.exports = function (axisName, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {\n\n\t        zrUtil.each(AXIS_TYPES, function (axisType) {\n\n\t            BaseAxisModelClass.extend({\n\n\t                type: axisName + 'Axis.' + axisType,\n\n\t                mergeDefaultAndTheme: function (option, ecModel) {\n\t                    var layoutMode = this.layoutMode;\n\t                    var inputPositionParams = layoutMode\n\t                        ? layout.getLayoutParams(option) : {};\n\n\t                    var themeModel = ecModel.getTheme();\n\t                    zrUtil.merge(option, themeModel.get(axisType + 'Axis'));\n\t                    zrUtil.merge(option, this.getDefaultOption());\n\n\t                    option.type = axisTypeDefaulter(axisName, option);\n\n\t                    if (layoutMode) {\n\t                        layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n\t                    }\n\t                },\n\n\t                defaultOption: zrUtil.mergeAll(\n\t                    [\n\t                        {},\n\t                        axisDefault[axisType + 'Axis'],\n\t                        extraDefaultOption\n\t                    ],\n\t                    true\n\t                )\n\t            });\n\t        });\n\n\t        ComponentModel.registerSubTypeDefaulter(\n\t            axisName + 'Axis',\n\t            zrUtil.curry(axisTypeDefaulter, axisName)\n\t        );\n\t    };\n\n\n/***/ },\n/* 129 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var defaultOption = {\n\t        show: true,\n\t        zlevel: 0,                  // 一级层叠\n\t        z: 0,                       // 二级层叠\n\t        // 反向坐标轴\n\t        inverse: false,\n\n\t        // 坐标轴名字，默认为空\n\t        name: '',\n\t        // 坐标轴名字位置，支持'start' | 'middle' | 'end'\n\t        nameLocation: 'end',\n\t        // 坐标轴名字旋转，degree。\n\t        nameRotate: null, // Adapt to axis rotate, when nameLocation is 'middle'.\n\t        nameTruncate: {\n\t            maxWidth: null,\n\t            ellipsis: '...',\n\t            placeholder: '.'\n\t        },\n\t        // 坐标轴文字样式，默认取全局样式\n\t        nameTextStyle: {},\n\t        // 文字与轴线距离\n\t        nameGap: 15,\n\n\t        silent: false, // Default false to support tooltip.\n\t        triggerEvent: false, // Default false to avoid legacy user event listener fail.\n\n\t        tooltip: {\n\t            show: false\n\t        },\n\n\t        // 坐标轴线\n\t        axisLine: {\n\t            // 默认显示，属性show控制显示与否\n\t            show: true,\n\t            onZero: true,\n\t            // 属性lineStyle控制线条样式\n\t            lineStyle: {\n\t                color: '#333',\n\t                width: 1,\n\t                type: 'solid'\n\t            }\n\t        },\n\t        // 坐标轴小标记\n\t        axisTick: {\n\t            // 属性show控制显示与否，默认显示\n\t            show: true,\n\t            // 控制小标记是否在grid里\n\t            inside: false,\n\t            // 属性length控制线长\n\t            length: 5,\n\t            // 属性lineStyle控制线条样式\n\t            lineStyle: {\n\t                width: 1\n\t            }\n\t        },\n\t        // 坐标轴文本标签，详见axis.axisLabel\n\t        axisLabel: {\n\t            show: true,\n\t            // 控制文本标签是否在grid里\n\t            inside: false,\n\t            rotate: 0,\n\t            margin: 8,\n\t            // formatter: null,\n\t            // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n\t            textStyle: {\n\t                fontSize: 12\n\t            }\n\t        },\n\t        // 分隔线\n\t        splitLine: {\n\t            // 默认显示，属性show控制显示与否\n\t            show: true,\n\t            // 属性lineStyle（详见lineStyle）控制线条样式\n\t            lineStyle: {\n\t                color: ['#ccc'],\n\t                width: 1,\n\t                type: 'solid'\n\t            }\n\t        },\n\t        // 分隔区域\n\t        splitArea: {\n\t            // 默认不显示，属性show控制显示与否\n\t            show: false,\n\t            // 属性areaStyle（详见areaStyle）控制区域样式\n\t            areaStyle: {\n\t                color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']\n\t            }\n\t        }\n\t    };\n\n\t    var categoryAxis = zrUtil.merge({\n\t        // 类目起始和结束两端空白策略\n\t        boundaryGap: true,\n\t        // splitArea: {\n\t            // show: false\n\t        // },\n\t        splitLine: {\n\t            show: false\n\t        },\n\t        // 坐标轴小标记\n\t        axisTick: {\n\t            // If tick is align with label when boundaryGap is true\n\t            // Default with axisTick\n\t            alignWithLabel: false,\n\t            interval: 'auto'\n\t        },\n\t        // 坐标轴文本标签，详见axis.axisLabel\n\t        axisLabel: {\n\t            interval: 'auto'\n\t        }\n\t    }, defaultOption);\n\n\t    var valueAxis = zrUtil.merge({\n\t        // 数值起始和结束两端空白策略\n\t        boundaryGap: [0, 0],\n\t        // 最小值, 设置成 'dataMin' 则从数据中计算最小值\n\t        // min: null,\n\t        // 最大值，设置成 'dataMax' 则从数据中计算最大值\n\t        // max: null,\n\t        // Readonly prop, specifies start value of the range when using data zoom.\n\t        // rangeStart: null\n\t        // Readonly prop, specifies end value of the range when using data zoom.\n\t        // rangeEnd: null\n\t        // 脱离0值比例，放大聚焦到最终_min，_max区间\n\t        // scale: false,\n\t        // 分割段数，默认为5\n\t        splitNumber: 5\n\t        // Minimum interval\n\t        // minInterval: null\n\t    }, defaultOption);\n\n\t    // FIXME\n\t    var timeAxis = zrUtil.defaults({\n\t        scale: true,\n\t        min: 'dataMin',\n\t        max: 'dataMax'\n\t    }, valueAxis);\n\t    var logAxis = zrUtil.defaults({\n\t        logBase: 10\n\t    }, valueAxis);\n\t    logAxis.scale = true;\n\n\t    module.exports = {\n\t        categoryAxis: categoryAxis,\n\t        valueAxis: valueAxis,\n\t        timeAxis: timeAxis,\n\t        logAxis: logAxis\n\t    };\n\n\n/***/ },\n/* 130 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var axisHelper = __webpack_require__(115);\n\n\t    function getName(obj) {\n\t        if (zrUtil.isObject(obj) && obj.value != null) {\n\t            return obj.value;\n\t        }\n\t        else {\n\t            return obj;\n\t        }\n\t    }\n\n\t    module.exports = {\n\n\t        /**\n\t         * Format labels\n\t         * @return {Array.<string>}\n\t         */\n\t        getFormattedLabels: function () {\n\t            return axisHelper.getFormattedLabels(\n\t                this.axis,\n\t                this.get('axisLabel.formatter')\n\t            );\n\t        },\n\n\t        /**\n\t         * Get categories\n\t         */\n\t        getCategories: function () {\n\t            return this.get('type') === 'category'\n\t                && zrUtil.map(this.get('data'), getName);\n\t        },\n\n\t        /**\n\t         * @param {boolean} origin\n\t         * @return {number|string} min value or 'dataMin' or null/undefined (means auto) or NaN\n\t         */\n\t        getMin: function (origin) {\n\t            var option = this.option;\n\t            var min = (!origin && option.rangeStart != null)\n\t                ? option.rangeStart : option.min;\n\n\t            if (min != null && min !== 'dataMin' && !zrUtil.eqNaN(min)) {\n\t                min = this.axis.scale.parse(min);\n\t            }\n\t            return min;\n\t        },\n\n\t        /**\n\t         * @param {boolean} origin\n\t         * @return {number|string} max value or 'dataMax' or null/undefined (means auto) or NaN\n\t         */\n\t        getMax: function (origin) {\n\t            var option = this.option;\n\t            var max = (!origin && option.rangeEnd != null)\n\t                ? option.rangeEnd : option.max;\n\n\t            if (max != null && max !== 'dataMax' && !zrUtil.eqNaN(max)) {\n\t                max = this.axis.scale.parse(max);\n\t            }\n\t            return max;\n\t        },\n\n\t        /**\n\t         * @return {boolean}\n\t         */\n\t        getNeedCrossZero: function () {\n\t            var option = this.option;\n\t            return (option.rangeStart != null || option.rangeEnd != null)\n\t                ? false : !option.scale;\n\t        },\n\n\t        /**\n\t         * Should be implemented by each axis model if necessary.\n\t         * @return {module:echarts/model/Component} coordinate system model\n\t         */\n\t        getCoordSysModel: zrUtil.noop,\n\n\t        /**\n\t         * @param {number} rangeStart Can only be finite number or null/undefined or NaN.\n\t         * @param {number} rangeEnd Can only be finite number or null/undefined or NaN.\n\t         */\n\t        setRange: function (rangeStart, rangeEnd) {\n\t            this.option.rangeStart = rangeStart;\n\t            this.option.rangeEnd = rangeEnd;\n\t        },\n\n\t        /**\n\t         * Reset range\n\t         */\n\t        resetRange: function () {\n\t            // rangeStart and rangeEnd is readonly.\n\t            this.option.rangeStart = this.option.rangeEnd = null;\n\t        }\n\t    };\n\n\n/***/ },\n/* 131 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t// TODO boundaryGap\n\n\n\t    __webpack_require__(127);\n\n\t    __webpack_require__(132);\n\n\n/***/ },\n/* 132 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var graphic = __webpack_require__(43);\n\t    var AxisBuilder = __webpack_require__(133);\n\t    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;\n\t    var getInterval = AxisBuilder.getInterval;\n\n\t    var axisBuilderAttrs = [\n\t        'axisLine', 'axisLabel', 'axisTick', 'axisName'\n\t    ];\n\t    var selfBuilderAttrs = [\n\t        'splitArea', 'splitLine'\n\t    ];\n\n\t    // function getAlignWithLabel(model, axisModel) {\n\t    //     var alignWithLabel = model.get('alignWithLabel');\n\t    //     if (alignWithLabel === 'auto') {\n\t    //         alignWithLabel = axisModel.get('axisTick.alignWithLabel');\n\t    //     }\n\t    //     return alignWithLabel;\n\t    // }\n\n\t    var AxisView = __webpack_require__(1).extendComponentView({\n\n\t        type: 'axis',\n\n\t        render: function (axisModel, ecModel) {\n\n\t            this.group.removeAll();\n\n\t            var oldAxisGroup = this._axisGroup;\n\t            this._axisGroup = new graphic.Group();\n\n\t            this.group.add(this._axisGroup);\n\n\t            if (!axisModel.get('show')) {\n\t                return;\n\t            }\n\n\t            var gridModel = axisModel.getCoordSysModel();\n\n\t            var layout = layoutAxis(gridModel, axisModel);\n\n\t            var axisBuilder = new AxisBuilder(axisModel, layout);\n\n\t            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n\n\t            this._axisGroup.add(axisBuilder.getGroup());\n\n\t            zrUtil.each(selfBuilderAttrs, function (name) {\n\t                if (axisModel.get(name + '.show')) {\n\t                    this['_' + name](axisModel, gridModel, layout.labelInterval);\n\t                }\n\t            }, this);\n\n\t            graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);\n\t        },\n\n\t        /**\n\t         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n\t         * @param {module:echarts/coord/cartesian/GridModel} gridModel\n\t         * @param {number|Function} labelInterval\n\t         * @private\n\t         */\n\t        _splitLine: function (axisModel, gridModel, labelInterval) {\n\t            var axis = axisModel.axis;\n\n\t            if (axis.isBlank()) {\n\t                return;\n\t            }\n\n\t            var splitLineModel = axisModel.getModel('splitLine');\n\t            var lineStyleModel = splitLineModel.getModel('lineStyle');\n\t            var lineColors = lineStyleModel.get('color');\n\n\t            var lineInterval = getInterval(splitLineModel, labelInterval);\n\n\t            lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];\n\n\t            var gridRect = gridModel.coordinateSystem.getRect();\n\t            var isHorizontal = axis.isHorizontal();\n\n\t            var lineCount = 0;\n\n\t            var ticksCoords = axis.getTicksCoords(\n\t                // splitLineModel.get('alignWithLabel')\n\t            );\n\t            var ticks = axis.scale.getTicks();\n\n\t            var p1 = [];\n\t            var p2 = [];\n\t            // Simple optimization\n\t            // Batching the lines if color are the same\n\t            var lineStyle = lineStyleModel.getLineStyle();\n\t            for (var i = 0; i < ticksCoords.length; i++) {\n\t                if (ifIgnoreOnTick(axis, i, lineInterval)) {\n\t                    continue;\n\t                }\n\n\t                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);\n\n\t                if (isHorizontal) {\n\t                    p1[0] = tickCoord;\n\t                    p1[1] = gridRect.y;\n\t                    p2[0] = tickCoord;\n\t                    p2[1] = gridRect.y + gridRect.height;\n\t                }\n\t                else {\n\t                    p1[0] = gridRect.x;\n\t                    p1[1] = tickCoord;\n\t                    p2[0] = gridRect.x + gridRect.width;\n\t                    p2[1] = tickCoord;\n\t                }\n\n\t                var colorIndex = (lineCount++) % lineColors.length;\n\t                this._axisGroup.add(new graphic.Line(graphic.subPixelOptimizeLine({\n\t                    anid: 'line_' + ticks[i],\n\n\t                    shape: {\n\t                        x1: p1[0],\n\t                        y1: p1[1],\n\t                        x2: p2[0],\n\t                        y2: p2[1]\n\t                    },\n\t                    style: zrUtil.defaults({\n\t                        stroke: lineColors[colorIndex]\n\t                    }, lineStyle),\n\t                    silent: true\n\t                })));\n\t            }\n\t        },\n\n\t        /**\n\t         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n\t         * @param {module:echarts/coord/cartesian/GridModel} gridModel\n\t         * @param {number|Function} labelInterval\n\t         * @private\n\t         */\n\t        _splitArea: function (axisModel, gridModel, labelInterval) {\n\t            var axis = axisModel.axis;\n\n\t            if (axis.isBlank()) {\n\t                return;\n\t            }\n\n\t            var splitAreaModel = axisModel.getModel('splitArea');\n\t            var areaStyleModel = splitAreaModel.getModel('areaStyle');\n\t            var areaColors = areaStyleModel.get('color');\n\n\t            var gridRect = gridModel.coordinateSystem.getRect();\n\n\t            var ticksCoords = axis.getTicksCoords(\n\t                // splitAreaModel.get('alignWithLabel')\n\t            );\n\t            var ticks = axis.scale.getTicks();\n\n\t            var prevX = axis.toGlobalCoord(ticksCoords[0]);\n\t            var prevY = axis.toGlobalCoord(ticksCoords[0]);\n\n\t            var count = 0;\n\n\t            var areaInterval = getInterval(splitAreaModel, labelInterval);\n\n\t            var areaStyle = areaStyleModel.getAreaStyle();\n\t            areaColors = zrUtil.isArray(areaColors) ? areaColors : [areaColors];\n\n\t            for (var i = 1; i < ticksCoords.length; i++) {\n\t                if (ifIgnoreOnTick(axis, i, areaInterval)) {\n\t                    continue;\n\t                }\n\n\t                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);\n\n\t                var x;\n\t                var y;\n\t                var width;\n\t                var height;\n\t                if (axis.isHorizontal()) {\n\t                    x = prevX;\n\t                    y = gridRect.y;\n\t                    width = tickCoord - x;\n\t                    height = gridRect.height;\n\t                }\n\t                else {\n\t                    x = gridRect.x;\n\t                    y = prevY;\n\t                    width = gridRect.width;\n\t                    height = tickCoord - y;\n\t                }\n\n\t                var colorIndex = (count++) % areaColors.length;\n\t                this._axisGroup.add(new graphic.Rect({\n\t                    anid: 'area_' + ticks[i],\n\n\t                    shape: {\n\t                        x: x,\n\t                        y: y,\n\t                        width: width,\n\t                        height: height\n\t                    },\n\t                    style: zrUtil.defaults({\n\t                        fill: areaColors[colorIndex]\n\t                    }, areaStyle),\n\t                    silent: true\n\t                }));\n\n\t                prevX = x + width;\n\t                prevY = y + height;\n\t            }\n\t        }\n\t    });\n\n\t    AxisView.extend({\n\t        type: 'xAxis'\n\t    });\n\t    AxisView.extend({\n\t        type: 'yAxis'\n\t    });\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function layoutAxis(gridModel, axisModel) {\n\t        var grid = gridModel.coordinateSystem;\n\t        var axis = axisModel.axis;\n\t        var layout = {};\n\n\t        var rawAxisPosition = axis.position;\n\t        var axisPosition = axis.onZero ? 'onZero' : rawAxisPosition;\n\t        var axisDim = axis.dim;\n\n\t        // [left, right, top, bottom]\n\t        var rect = grid.getRect();\n\t        var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];\n\n\t        var axisOffset = axisModel.get('offset') || 0;\n\n\t        var posMap = {\n\t            x: { top: rectBound[2] - axisOffset, bottom: rectBound[3] + axisOffset },\n\t            y: { left: rectBound[0] - axisOffset, right: rectBound[1] + axisOffset }\n\t        };\n\n\t        posMap.x.onZero = Math.max(Math.min(getZero('y'), posMap.x.bottom), posMap.x.top);\n\t        posMap.y.onZero = Math.max(Math.min(getZero('x'), posMap.y.right), posMap.y.left);\n\n\t        function getZero(dim, val) {\n\t            var theAxis = grid.getAxis(dim);\n\t            return theAxis.toGlobalCoord(theAxis.dataToCoord(0));\n\t        }\n\n\t        // Axis position\n\t        layout.position = [\n\t            axisDim === 'y' ? posMap.y[axisPosition] : rectBound[0],\n\t            axisDim === 'x' ? posMap.x[axisPosition] : rectBound[3]\n\t        ];\n\n\t        // Axis rotation\n\t        layout.rotation = Math.PI / 2 * (axisDim === 'x' ? 0 : 1);\n\n\t        // Tick and label direction, x y is axisDim\n\t        var dirMap = {top: -1, bottom: 1, left: -1, right: 1};\n\n\t        layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];\n\t        if (axis.onZero) {\n\t            layout.labelOffset = posMap[axisDim][rawAxisPosition] - posMap[axisDim].onZero;\n\t        }\n\n\t        if (axisModel.getModel('axisTick').get('inside')) {\n\t            layout.tickDirection = -layout.tickDirection;\n\t        }\n\t        if (axisModel.getModel('axisLabel').get('inside')) {\n\t            layout.labelDirection = -layout.labelDirection;\n\t        }\n\n\t        // Special label rotation\n\t        var labelRotation = axisModel.getModel('axisLabel').get('rotate');\n\t        layout.labelRotation = axisPosition === 'top' ? -labelRotation : labelRotation;\n\n\t        // label interval when auto mode.\n\t        layout.labelInterval = axis.getLabelInterval();\n\n\t        // Over splitLine and splitArea\n\t        layout.z2 = 1;\n\n\t        return layout;\n\t    }\n\n\n/***/ },\n/* 133 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var formatUtil = __webpack_require__(6);\n\t    var graphic = __webpack_require__(43);\n\t    var Model = __webpack_require__(12);\n\t    var numberUtil = __webpack_require__(7);\n\t    var remRadian = numberUtil.remRadian;\n\t    var isRadianAroundZero = numberUtil.isRadianAroundZero;\n\t    var vec2 = __webpack_require__(10);\n\t    var v2ApplyTransform = vec2.applyTransform;\n\t    var retrieve = zrUtil.retrieve;\n\n\t    var PI = Math.PI;\n\n\t    function makeAxisEventDataBase(axisModel) {\n\t        var eventData = {\n\t            componentType: axisModel.mainType\n\t        };\n\t        eventData[axisModel.mainType + 'Index'] = axisModel.componentIndex;\n\t        return eventData;\n\t    }\n\n\t    /**\n\t     * A final axis is translated and rotated from a \"standard axis\".\n\t     * So opt.position and opt.rotation is required.\n\t     *\n\t     * A standard axis is and axis from [0, 0] to [0, axisExtent[1]],\n\t     * for example: (0, 0) ------------> (0, 50)\n\t     *\n\t     * nameDirection or tickDirection or labelDirection is 1 means tick\n\t     * or label is below the standard axis, whereas is -1 means above\n\t     * the standard axis. labelOffset means offset between label and axis,\n\t     * which is useful when 'onZero', where axisLabel is in the grid and\n\t     * label in outside grid.\n\t     *\n\t     * Tips: like always,\n\t     * positive rotation represents anticlockwise, and negative rotation\n\t     * represents clockwise.\n\t     * The direction of position coordinate is the same as the direction\n\t     * of screen coordinate.\n\t     *\n\t     * Do not need to consider axis 'inverse', which is auto processed by\n\t     * axis extent.\n\t     *\n\t     * @param {module:zrender/container/Group} group\n\t     * @param {Object} axisModel\n\t     * @param {Object} opt Standard axis parameters.\n\t     * @param {Array.<number>} opt.position [x, y]\n\t     * @param {number} opt.rotation by radian\n\t     * @param {number} [opt.nameDirection=1] 1 or -1 Used when nameLocation is 'middle'.\n\t     * @param {number} [opt.tickDirection=1] 1 or -1\n\t     * @param {number} [opt.labelDirection=1] 1 or -1\n\t     * @param {number} [opt.labelOffset=0] Usefull when onZero.\n\t     * @param {string} [opt.axisLabelShow] default get from axisModel.\n\t     * @param {string} [opt.axisName] default get from axisModel.\n\t     * @param {number} [opt.axisNameAvailableWidth]\n\t     * @param {number} [opt.labelRotation] by degree, default get from axisModel.\n\t     * @param {number} [opt.labelInterval] Default label interval when label\n\t     *                                     interval from model is null or 'auto'.\n\t     * @param {number} [opt.strokeContainThreshold] Default label interval when label\n\t     */\n\t    var AxisBuilder = function (axisModel, opt) {\n\n\t        /**\n\t         * @readOnly\n\t         */\n\t        this.opt = opt;\n\n\t        /**\n\t         * @readOnly\n\t         */\n\t        this.axisModel = axisModel;\n\n\t        // Default value\n\t        zrUtil.defaults(\n\t            opt,\n\t            {\n\t                labelOffset: 0,\n\t                nameDirection: 1,\n\t                tickDirection: 1,\n\t                labelDirection: 1,\n\t                silent: true\n\t            }\n\t        );\n\n\t        /**\n\t         * @readOnly\n\t         */\n\t        this.group = new graphic.Group();\n\n\t        // FIXME Not use a seperate text group?\n\t        var dumbGroup = new graphic.Group({\n\t            position: opt.position.slice(),\n\t            rotation: opt.rotation\n\t        });\n\n\t        // this.group.add(dumbGroup);\n\t        // this._dumbGroup = dumbGroup;\n\n\t        dumbGroup.updateTransform();\n\t        this._transform = dumbGroup.transform;\n\n\t        this._dumbGroup = dumbGroup;\n\t    };\n\n\t    AxisBuilder.prototype = {\n\n\t        constructor: AxisBuilder,\n\n\t        hasBuilder: function (name) {\n\t            return !!builders[name];\n\t        },\n\n\t        add: function (name) {\n\t            builders[name].call(this);\n\t        },\n\n\t        getGroup: function () {\n\t            return this.group;\n\t        }\n\n\t    };\n\n\t    var builders = {\n\n\t        /**\n\t         * @private\n\t         */\n\t        axisLine: function () {\n\t            var opt = this.opt;\n\t            var axisModel = this.axisModel;\n\n\t            if (!axisModel.get('axisLine.show')) {\n\t                return;\n\t            }\n\n\t            var extent = this.axisModel.axis.getExtent();\n\n\t            var matrix = this._transform;\n\t            var pt1 = [extent[0], 0];\n\t            var pt2 = [extent[1], 0];\n\t            if (matrix) {\n\t                v2ApplyTransform(pt1, pt1, matrix);\n\t                v2ApplyTransform(pt2, pt2, matrix);\n\t            }\n\n\t            this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({\n\n\t                // Id for animation\n\t                anid: 'line',\n\n\t                shape: {\n\t                    x1: pt1[0],\n\t                    y1: pt1[1],\n\t                    x2: pt2[0],\n\t                    y2: pt2[1]\n\t                },\n\t                style: zrUtil.extend(\n\t                    {lineCap: 'round'},\n\t                    axisModel.getModel('axisLine.lineStyle').getLineStyle()\n\t                ),\n\t                strokeContainThreshold: opt.strokeContainThreshold || 5,\n\t                silent: true,\n\t                z2: 1\n\t            })));\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        axisTick: function () {\n\t            var axisModel = this.axisModel;\n\t            var axis = axisModel.axis;\n\n\t            if (!axisModel.get('axisTick.show') || axis.isBlank()) {\n\t                return;\n\t            }\n\n\t            var tickModel = axisModel.getModel('axisTick');\n\t            var opt = this.opt;\n\n\t            var lineStyleModel = tickModel.getModel('lineStyle');\n\t            var tickLen = tickModel.get('length');\n\n\t            var tickInterval = getInterval(tickModel, opt.labelInterval);\n\t            var ticksCoords = axis.getTicksCoords(tickModel.get('alignWithLabel'));\n\t            var ticks = axis.scale.getTicks();\n\n\t            var pt1 = [];\n\t            var pt2 = [];\n\t            var matrix = this._transform;\n\n\t            for (var i = 0; i < ticksCoords.length; i++) {\n\t                // Only ordinal scale support tick interval\n\t                if (ifIgnoreOnTick(axis, i, tickInterval)) {\n\t                     continue;\n\t                }\n\n\t                var tickCoord = ticksCoords[i];\n\n\t                pt1[0] = tickCoord;\n\t                pt1[1] = 0;\n\t                pt2[0] = tickCoord;\n\t                pt2[1] = opt.tickDirection * tickLen;\n\n\t                if (matrix) {\n\t                    v2ApplyTransform(pt1, pt1, matrix);\n\t                    v2ApplyTransform(pt2, pt2, matrix);\n\t                }\n\t                // Tick line, Not use group transform to have better line draw\n\t                this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({\n\n\t                    // Id for animation\n\t                    anid: 'tick_' + ticks[i],\n\n\t                    shape: {\n\t                        x1: pt1[0],\n\t                        y1: pt1[1],\n\t                        x2: pt2[0],\n\t                        y2: pt2[1]\n\t                    },\n\t                    style: zrUtil.defaults(\n\t                        lineStyleModel.getLineStyle(),\n\t                        {\n\t                            stroke: axisModel.get('axisLine.lineStyle.color')\n\t                        }\n\t                    ),\n\t                    z2: 2,\n\t                    silent: true\n\t                })));\n\t            }\n\t        },\n\n\t        /**\n\t         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n\t         * @param {module:echarts/coord/cartesian/GridModel} gridModel\n\t         * @private\n\t         */\n\t        axisLabel: function () {\n\t            var opt = this.opt;\n\t            var axisModel = this.axisModel;\n\t            var axis = axisModel.axis;\n\t            var show = retrieve(opt.axisLabelShow, axisModel.get('axisLabel.show'));\n\n\t            if (!show || axis.isBlank()) {\n\t                return;\n\t            }\n\n\t            var labelModel = axisModel.getModel('axisLabel');\n\t            var textStyleModel = labelModel.getModel('textStyle');\n\t            var labelMargin = labelModel.get('margin');\n\t            var ticks = axis.scale.getTicks();\n\t            var labels = axisModel.getFormattedLabels();\n\n\t            // Special label rotate.\n\t            var labelRotation = retrieve(opt.labelRotation, labelModel.get('rotate')) || 0;\n\t            // To radian.\n\t            labelRotation = labelRotation * PI / 180;\n\n\t            var labelLayout = innerTextLayout(opt, labelRotation, opt.labelDirection);\n\t            var categoryData = axisModel.get('data');\n\n\t            var textEls = [];\n\t            var silent = isSilent(axisModel);\n\t            var triggerEvent = axisModel.get('triggerEvent');\n\n\t            zrUtil.each(ticks, function (tickVal, index) {\n\t                if (ifIgnoreOnTick(axis, index, opt.labelInterval)) {\n\t                     return;\n\t                }\n\n\t                var itemTextStyleModel = textStyleModel;\n\t                if (categoryData && categoryData[tickVal] && categoryData[tickVal].textStyle) {\n\t                    itemTextStyleModel = new Model(\n\t                        categoryData[tickVal].textStyle, textStyleModel, axisModel.ecModel\n\t                    );\n\t                }\n\t                var textColor = itemTextStyleModel.getTextColor()\n\t                    || axisModel.get('axisLine.lineStyle.color');\n\n\t                var tickCoord = axis.dataToCoord(tickVal);\n\t                var pos = [\n\t                    tickCoord,\n\t                    opt.labelOffset + opt.labelDirection * labelMargin\n\t                ];\n\t                var labelBeforeFormat = axis.scale.getLabel(tickVal);\n\n\t                var textEl = new graphic.Text({\n\n\t                    // Id for animation\n\t                    anid: 'label_' + tickVal,\n\n\t                    style: {\n\t                        text: labels[index],\n\t                        textAlign: itemTextStyleModel.get('align', true) || labelLayout.textAlign,\n\t                        textVerticalAlign: itemTextStyleModel.get('baseline', true) || labelLayout.verticalAlign,\n\t                        textFont: itemTextStyleModel.getFont(),\n\t                        fill: typeof textColor === 'function' ? textColor(labelBeforeFormat) : textColor\n\t                    },\n\t                    position: pos,\n\t                    rotation: labelLayout.rotation,\n\t                    silent: silent,\n\t                    z2: 10\n\t                });\n\n\t                // Pack data for mouse event\n\t                if (triggerEvent) {\n\t                    textEl.eventData = makeAxisEventDataBase(axisModel);\n\t                    textEl.eventData.targetType = 'axisLabel';\n\t                    textEl.eventData.value = labelBeforeFormat;\n\t                }\n\n\t                // FIXME\n\t                this._dumbGroup.add(textEl);\n\t                textEl.updateTransform();\n\n\t                textEls.push(textEl);\n\t                this.group.add(textEl);\n\n\t                textEl.decomposeTransform();\n\n\t            }, this);\n\n\t            function isTwoLabelOverlapped(current, next) {\n\t                var firstRect = current && current.getBoundingRect().clone();\n\t                var nextRect = next && next.getBoundingRect().clone();\n\t                if (firstRect && nextRect) {\n\t                    firstRect.applyTransform(current.getLocalTransform());\n\t                    nextRect.applyTransform(next.getLocalTransform());\n\t                    return firstRect.intersect(nextRect);\n\t                }\n\t            }\n\n\t            // If min or max are user set, we need to check\n\t            // If the tick on min(max) are overlap on their neighbour tick\n\t            // If they are overlapped, we need to hide the min(max) tick label\n\t            if (axisModel.getMin() != null) {\n\t                var firstLabel = textEls[0];\n\t                var nextLabel = textEls[1];\n\t                if (isTwoLabelOverlapped(firstLabel, nextLabel)) {\n\t                    firstLabel.ignore = true;\n\t                }\n\t            }\n\t            if (axisModel.getMax() != null) {\n\t                var lastLabel = textEls[textEls.length - 1];\n\t                var prevLabel = textEls[textEls.length - 2];\n\t                if (isTwoLabelOverlapped(prevLabel, lastLabel)) {\n\t                    lastLabel.ignore = true;\n\t                }\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        axisName: function () {\n\t            var opt = this.opt;\n\t            var axisModel = this.axisModel;\n\t            var name = retrieve(opt.axisName, axisModel.get('name'));\n\n\t            if (!name) {\n\t                return;\n\t            }\n\n\t            var nameLocation = axisModel.get('nameLocation');\n\t            var nameDirection = opt.nameDirection;\n\t            var textStyleModel = axisModel.getModel('nameTextStyle');\n\t            var gap = axisModel.get('nameGap') || 0;\n\n\t            var extent = this.axisModel.axis.getExtent();\n\t            var gapSignal = extent[0] > extent[1] ? -1 : 1;\n\t            var pos = [\n\t                nameLocation === 'start'\n\t                    ? extent[0] - gapSignal * gap\n\t                    : nameLocation === 'end'\n\t                    ? extent[1] + gapSignal * gap\n\t                    : (extent[0] + extent[1]) / 2, // 'middle'\n\t                // Reuse labelOffset.\n\t                nameLocation === 'middle' ? opt.labelOffset + nameDirection * gap : 0\n\t            ];\n\n\t            var labelLayout;\n\n\t            var nameRotation = axisModel.get('nameRotate');\n\t            if (nameRotation != null) {\n\t                nameRotation = nameRotation * PI / 180; // To radian.\n\t            }\n\n\t            var axisNameAvailableWidth;\n\n\t            if (nameLocation === 'middle') {\n\t                labelLayout = innerTextLayout(\n\t                    opt,\n\t                    nameRotation != null ? nameRotation : opt.rotation, // Adapt to axis.\n\t                    nameDirection\n\t                );\n\t            }\n\t            else {\n\t                labelLayout = endTextLayout(\n\t                    opt, nameLocation, nameRotation || 0, extent\n\t                );\n\n\t                axisNameAvailableWidth = opt.axisNameAvailableWidth;\n\t                if (axisNameAvailableWidth != null) {\n\t                    axisNameAvailableWidth = Math.abs(\n\t                        axisNameAvailableWidth / Math.sin(labelLayout.rotation)\n\t                    );\n\t                    !isFinite(axisNameAvailableWidth) && (axisNameAvailableWidth = null);\n\t                }\n\t            }\n\n\t            var textFont = textStyleModel.getFont();\n\n\t            var truncateOpt = axisModel.get('nameTruncate', true) || {};\n\t            var ellipsis = truncateOpt.ellipsis;\n\t            var maxWidth = retrieve(truncateOpt.maxWidth, axisNameAvailableWidth);\n\t            var truncatedText = (ellipsis != null && maxWidth != null)\n\t                ? formatUtil.truncateText(\n\t                    name, maxWidth, textFont, ellipsis,\n\t                    {minChar: 2, placeholder: truncateOpt.placeholder}\n\t                )\n\t                : name;\n\n\t            var tooltipOpt = axisModel.get('tooltip', true);\n\n\t            var mainType = axisModel.mainType;\n\t            var formatterParams = {\n\t                componentType: mainType,\n\t                name: name,\n\t                $vars: ['name']\n\t            };\n\t            formatterParams[mainType + 'Index'] = axisModel.componentIndex;\n\n\t            var textEl = new graphic.Text({\n\n\t                // Id for animation\n\t                anid: 'name',\n\n\t                __fullText: name,\n\t                __truncatedText: truncatedText,\n\n\t                style: {\n\t                    text: truncatedText,\n\t                    textFont: textFont,\n\t                    fill: textStyleModel.getTextColor()\n\t                        || axisModel.get('axisLine.lineStyle.color'),\n\t                    textAlign: labelLayout.textAlign,\n\t                    textVerticalAlign: labelLayout.verticalAlign\n\t                },\n\t                position: pos,\n\t                rotation: labelLayout.rotation,\n\t                silent: isSilent(axisModel),\n\t                z2: 1,\n\t                tooltip: (tooltipOpt && tooltipOpt.show)\n\t                    ? zrUtil.extend({\n\t                        content: name,\n\t                        formatter: function () {\n\t                            return name;\n\t                        },\n\t                        formatterParams: formatterParams\n\t                    }, tooltipOpt)\n\t                    : null\n\t            });\n\n\t            if (axisModel.get('triggerEvent')) {\n\t                textEl.eventData = makeAxisEventDataBase(axisModel);\n\t                textEl.eventData.targetType = 'axisName';\n\t                textEl.eventData.name = name;\n\t            }\n\n\t            // FIXME\n\t            this._dumbGroup.add(textEl);\n\t            textEl.updateTransform();\n\n\t            this.group.add(textEl);\n\n\t            textEl.decomposeTransform();\n\t        }\n\n\t    };\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function innerTextLayout(opt, textRotation, direction) {\n\t        var rotationDiff = remRadian(textRotation - opt.rotation);\n\t        var textAlign;\n\t        var verticalAlign;\n\n\t        if (isRadianAroundZero(rotationDiff)) { // Label is parallel with axis line.\n\t            verticalAlign = direction > 0 ? 'top' : 'bottom';\n\t            textAlign = 'center';\n\t        }\n\t        else if (isRadianAroundZero(rotationDiff - PI)) { // Label is inverse parallel with axis line.\n\t            verticalAlign = direction > 0 ? 'bottom' : 'top';\n\t            textAlign = 'center';\n\t        }\n\t        else {\n\t            verticalAlign = 'middle';\n\n\t            if (rotationDiff > 0 && rotationDiff < PI) {\n\t                textAlign = direction > 0 ? 'right' : 'left';\n\t            }\n\t            else {\n\t                textAlign = direction > 0 ? 'left' : 'right';\n\t            }\n\t        }\n\n\t        return {\n\t            rotation: rotationDiff,\n\t            textAlign: textAlign,\n\t            verticalAlign: verticalAlign\n\t        };\n\t    }\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function endTextLayout(opt, textPosition, textRotate, extent) {\n\t        var rotationDiff = remRadian(textRotate - opt.rotation);\n\t        var textAlign;\n\t        var verticalAlign;\n\t        var inverse = extent[0] > extent[1];\n\t        var onLeft = (textPosition === 'start' && !inverse)\n\t            || (textPosition !== 'start' && inverse);\n\n\t        if (isRadianAroundZero(rotationDiff - PI / 2)) {\n\t            verticalAlign = onLeft ? 'bottom' : 'top';\n\t            textAlign = 'center';\n\t        }\n\t        else if (isRadianAroundZero(rotationDiff - PI * 1.5)) {\n\t            verticalAlign = onLeft ? 'top' : 'bottom';\n\t            textAlign = 'center';\n\t        }\n\t        else {\n\t            verticalAlign = 'middle';\n\t            if (rotationDiff < PI * 1.5 && rotationDiff > PI / 2) {\n\t                textAlign = onLeft ? 'left' : 'right';\n\t            }\n\t            else {\n\t                textAlign = onLeft ? 'right' : 'left';\n\t            }\n\t        }\n\n\t        return {\n\t            rotation: rotationDiff,\n\t            textAlign: textAlign,\n\t            verticalAlign: verticalAlign\n\t        };\n\t    }\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function isSilent(axisModel) {\n\t        var tooltipOpt = axisModel.get('tooltip');\n\t        return axisModel.get('silent')\n\t            // Consider mouse cursor, add these restrictions.\n\t            || !(\n\t                axisModel.get('triggerEvent') || (tooltipOpt && tooltipOpt.show)\n\t            );\n\t    }\n\n\t    /**\n\t     * @static\n\t     */\n\t    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick = function (axis, i, interval) {\n\t        var rawTick;\n\t        var scale = axis.scale;\n\t        return scale.type === 'ordinal'\n\t            && (\n\t                typeof interval === 'function'\n\t                    ? (\n\t                        rawTick = scale.getTicks()[i],\n\t                        !interval(rawTick, scale.getLabel(rawTick))\n\t                    )\n\t                    : i % (interval + 1)\n\t            );\n\t    };\n\n\t    /**\n\t     * @static\n\t     */\n\t    var getInterval = AxisBuilder.getInterval = function (model, labelInterval) {\n\t        var interval = model.get('interval');\n\t        if (interval == null || interval == 'auto') {\n\t            interval = labelInterval;\n\t        }\n\t        return interval;\n\t    };\n\n\t    module.exports = AxisBuilder;\n\n\n\n/***/ },\n/* 134 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    __webpack_require__(114);\n\n\t    __webpack_require__(135);\n\t    __webpack_require__(137);\n\n\t    var barLayoutGrid = __webpack_require__(140);\n\t    var echarts = __webpack_require__(1);\n\n\t    echarts.registerLayout(zrUtil.curry(barLayoutGrid, 'bar'));\n\t    // Visual coding for legend\n\t    echarts.registerVisual(function (ecModel) {\n\t        ecModel.eachSeriesByType('bar', function (seriesModel) {\n\t            var data = seriesModel.getData();\n\t            data.setVisual('legendSymbol', 'roundRect');\n\t        });\n\t    });\n\n\t    // In case developer forget to include grid component\n\t    __webpack_require__(113);\n\n\n/***/ },\n/* 135 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    module.exports = __webpack_require__(136).extend({\n\n\t        type: 'series.bar',\n\n\t        dependencies: ['grid', 'polar'],\n\n\t        brushSelector: 'rect'\n\t    });\n\n\n/***/ },\n/* 136 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var SeriesModel = __webpack_require__(28);\n\t    var createListFromArray = __webpack_require__(102);\n\n\t    module.exports = SeriesModel.extend({\n\n\t        type: 'series.__base_bar__',\n\n\t        getInitialData: function (option, ecModel) {\n\t            if (true) {\n\t                var coordSys = option.coordinateSystem;\n\t                if (coordSys !== 'cartesian2d') {\n\t                    throw new Error('Bar only support cartesian2d coordinateSystem');\n\t                }\n\t            }\n\t            return createListFromArray(option.data, this, ecModel);\n\t        },\n\n\t        getMarkerPosition: function (value) {\n\t            var coordSys = this.coordinateSystem;\n\t            if (coordSys) {\n\t                // PENDING if clamp ?\n\t                var pt = coordSys.dataToPoint(value, true);\n\t                var data = this.getData();\n\t                var offset = data.getLayout('offset');\n\t                var size = data.getLayout('size');\n\t                var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;\n\t                pt[offsetIndex] += offset + size / 2;\n\t                return pt;\n\t            }\n\t            return [NaN, NaN];\n\t        },\n\n\t        defaultOption: {\n\t            zlevel: 0,                  // 一级层叠\n\t            z: 2,                       // 二级层叠\n\t            coordinateSystem: 'cartesian2d',\n\t            legendHoverLink: true,\n\t            // stack: null\n\n\t            // Cartesian coordinate system\n\t            // xAxisIndex: 0,\n\t            // yAxisIndex: 0,\n\n\t            // 最小高度改为0\n\t            barMinHeight: 0,\n\n\t            // barMaxWidth: null,\n\t            // 默认自适应\n\t            // barWidth: null,\n\t            // 柱间距离，默认为柱形宽度的30%，可设固定值\n\t            // barGap: '30%',\n\t            // 类目间柱形距离，默认为类目间距的20%，可设固定值\n\t            // barCategoryGap: '20%',\n\t            // label: {\n\t            //     normal: {\n\t            //         show: false\n\t            //     }\n\t            // },\n\t            itemStyle: {\n\t                normal: {\n\t                    // color: '各异'\n\t                },\n\t                emphasis: {}\n\t            }\n\t        }\n\t    });\n\n\n/***/ },\n/* 137 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var graphic = __webpack_require__(43);\n\t    var helper = __webpack_require__(138);\n\n\t    var BAR_BORDER_WIDTH_QUERY = ['itemStyle', 'normal', 'barBorderWidth'];\n\n\t    // FIXME\n\t    // Just for compatible with ec2.\n\t    zrUtil.extend(__webpack_require__(12).prototype, __webpack_require__(139));\n\n\t    var BarView = __webpack_require__(1).extendChartView({\n\n\t        type: 'bar',\n\n\t        render: function (seriesModel, ecModel, api) {\n\t            var coordinateSystemType = seriesModel.get('coordinateSystem');\n\n\t            if (coordinateSystemType === 'cartesian2d') {\n\t                this._renderOnCartesian(seriesModel, ecModel, api);\n\t            }\n\n\t            return this.group;\n\t        },\n\n\t        dispose: zrUtil.noop,\n\n\t        _renderOnCartesian: function (seriesModel, ecModel, api) {\n\t            var group = this.group;\n\t            var data = seriesModel.getData();\n\t            var oldData = this._data;\n\n\t            var cartesian = seriesModel.coordinateSystem;\n\t            var baseAxis = cartesian.getBaseAxis();\n\t            var isHorizontal = baseAxis.isHorizontal();\n\t            var animationModel = seriesModel.isAnimationEnabled() ? seriesModel : null;\n\n\t            data.diff(oldData)\n\t                .add(function (dataIndex) {\n\t                    if (!data.hasValue(dataIndex)) {\n\t                        return;\n\t                    }\n\n\t                    var itemModel = data.getItemModel(dataIndex);\n\t                    var layout = getRectItemLayout(data, dataIndex, itemModel);\n\t                    var el = createRect(data, dataIndex, itemModel, layout, isHorizontal, animationModel);\n\t                    data.setItemGraphicEl(dataIndex, el);\n\t                    group.add(el);\n\n\t                    updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontal);\n\t                })\n\t                .update(function (newIndex, oldIndex) {\n\t                    var el = oldData.getItemGraphicEl(oldIndex);\n\n\t                    if (!data.hasValue(newIndex)) {\n\t                        group.remove(el);\n\t                        return;\n\t                    }\n\n\t                    var itemModel = data.getItemModel(newIndex);\n\t                    var layout = getRectItemLayout(data, newIndex, itemModel);\n\n\t                    if (el) {\n\t                        graphic.updateProps(el, {shape: layout}, animationModel, newIndex);\n\t                    }\n\t                    else {\n\t                        el = createRect(data, newIndex, itemModel, layout, isHorizontal, animationModel, true);\n\t                    }\n\n\t                    data.setItemGraphicEl(newIndex, el);\n\t                    // Add back\n\t                    group.add(el);\n\n\t                    updateStyle(el, data, newIndex, itemModel, layout, seriesModel, isHorizontal);\n\t                })\n\t                .remove(function (dataIndex) {\n\t                    var el = oldData.getItemGraphicEl(dataIndex);\n\t                    el && removeRect(dataIndex, animationModel, el);\n\t                })\n\t                .execute();\n\n\t            this._data = data;\n\t        },\n\n\t        remove: function (ecModel, api) {\n\t            var group = this.group;\n\t            var data = this._data;\n\t            if (ecModel.get('animation')) {\n\t                if (data) {\n\t                    data.eachItemGraphicEl(function (el) {\n\t                        removeRect(el.dataIndex, ecModel, el);\n\t                    });\n\t                }\n\t            }\n\t            else {\n\t                group.removeAll();\n\t            }\n\t        }\n\t    });\n\n\t    function createRect(data, dataIndex, itemModel, layout, isHorizontal, animationModel, isUpdate) {\n\t        var rect = new graphic.Rect({shape: zrUtil.extend({}, layout)});\n\n\t        // Animation\n\t        if (animationModel) {\n\t            var rectShape = rect.shape;\n\t            var animateProperty = isHorizontal ? 'height' : 'width';\n\t            var animateTarget = {};\n\t            rectShape[animateProperty] = 0;\n\t            animateTarget[animateProperty] = layout[animateProperty];\n\t            graphic[isUpdate ? 'updateProps' : 'initProps'](rect, {\n\t                shape: animateTarget\n\t            }, animationModel, dataIndex);\n\t        }\n\n\t        return rect;\n\t    }\n\n\t    function removeRect(dataIndex, animationModel, el) {\n\t        // Not show text when animating\n\t        el.style.text = '';\n\t        graphic.updateProps(el, {\n\t            shape: {\n\t                width: 0\n\t            }\n\t        }, animationModel, dataIndex, function () {\n\t            el.parent && el.parent.remove(el);\n\t        });\n\t    }\n\n\t    function getRectItemLayout(data, dataIndex, itemModel) {\n\t        var layout = data.getItemLayout(dataIndex);\n\t        var fixedLineWidth = getLineWidth(itemModel, layout);\n\n\t        // fix layout with lineWidth\n\t        var signX = layout.width > 0 ? 1 : -1;\n\t        var signY = layout.height > 0 ? 1 : -1;\n\t        return {\n\t            x: layout.x + signX * fixedLineWidth / 2,\n\t            y: layout.y + signY * fixedLineWidth / 2,\n\t            width: layout.width - signX * fixedLineWidth,\n\t            height: layout.height - signY * fixedLineWidth\n\t        };\n\t    }\n\n\t    function updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontal) {\n\t        var color = data.getItemVisual(dataIndex, 'color');\n\t        var opacity = data.getItemVisual(dataIndex, 'opacity');\n\t        var itemStyleModel = itemModel.getModel('itemStyle.normal');\n\t        var hoverStyle = itemModel.getModel('itemStyle.emphasis').getBarItemStyle();\n\n\t        el.setShape('r', itemStyleModel.get('barBorderRadius') || 0);\n\n\t        el.useStyle(zrUtil.defaults(\n\t            {\n\t                fill: color,\n\t                opacity: opacity\n\t            },\n\t            itemStyleModel.getBarItemStyle()\n\t        ));\n\n\t        var labelPositionOutside = isHorizontal\n\t            ? (layout.height > 0 ? 'bottom' : 'top')\n\t            : (layout.width > 0 ? 'left' : 'right');\n\n\t        helper.setLabel(\n\t            el.style, hoverStyle, itemModel, color,\n\t            seriesModel, dataIndex, labelPositionOutside\n\t        );\n\n\t        graphic.setHoverStyle(el, hoverStyle);\n\t    }\n\n\t    // In case width or height are too small.\n\t    function getLineWidth(itemModel, rawLayout) {\n\t        var lineWidth = itemModel.get(BAR_BORDER_WIDTH_QUERY) || 0;\n\t        return Math.min(lineWidth, Math.abs(rawLayout.width), Math.abs(rawLayout.height));\n\t    }\n\n\t    module.exports = BarView;\n\n\n/***/ },\n/* 138 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var graphic = __webpack_require__(43);\n\n\t    var helper = {};\n\n\t    helper.setLabel = function (\n\t        normalStyle, hoverStyle, itemModel, color, seriesModel, dataIndex, labelPositionOutside\n\t    ) {\n\t        var labelModel = itemModel.getModel('label.normal');\n\t        var hoverLabelModel = itemModel.getModel('label.emphasis');\n\n\t        if (labelModel.get('show')) {\n\t            setLabel(\n\t                normalStyle, labelModel, color,\n\t                zrUtil.retrieve(\n\t                    seriesModel.getFormattedLabel(dataIndex, 'normal'),\n\t                    seriesModel.getRawValue(dataIndex)\n\t                ),\n\t                labelPositionOutside\n\t            );\n\t        }\n\t        else {\n\t            normalStyle.text = '';\n\t        }\n\n\t        if (hoverLabelModel.get('show')) {\n\t            setLabel(\n\t                hoverStyle, hoverLabelModel, color,\n\t                zrUtil.retrieve(\n\t                    seriesModel.getFormattedLabel(dataIndex, 'emphasis'),\n\t                    seriesModel.getRawValue(dataIndex)\n\t                ),\n\t                labelPositionOutside\n\t            );\n\t        }\n\t        else {\n\t            hoverStyle.text = '';\n\t        }\n\t    };\n\n\t    function setLabel(style, model, color, labelText, labelPositionOutside) {\n\t        graphic.setText(style, model, color);\n\t        style.text = labelText;\n\t        if (style.textPosition === 'outside') {\n\t            style.textPosition = labelPositionOutside;\n\t        }\n\t    }\n\n\t    module.exports = helper;\n\n\n/***/ },\n/* 139 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\n\t    var getBarItemStyle = __webpack_require__(15)(\n\t        [\n\t            ['fill', 'color'],\n\t            ['stroke', 'borderColor'],\n\t            ['lineWidth', 'borderWidth'],\n\t            // Compatitable with 2\n\t            ['stroke', 'barBorderColor'],\n\t            ['lineWidth', 'barBorderWidth'],\n\t            ['opacity'],\n\t            ['shadowBlur'],\n\t            ['shadowOffsetX'],\n\t            ['shadowOffsetY'],\n\t            ['shadowColor']\n\t        ]\n\t    );\n\t    module.exports = {\n\t        getBarItemStyle: function (excludes) {\n\t            var style = getBarItemStyle.call(this, excludes);\n\t            if (this.getBorderLineDash) {\n\t                var lineDash = this.getBorderLineDash();\n\t                lineDash && (style.lineDash = lineDash);\n\t            }\n\t            return style;\n\t        }\n\t    };\n\n\n/***/ },\n/* 140 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var numberUtil = __webpack_require__(7);\n\t    var parsePercent = numberUtil.parsePercent;\n\n\t    function getSeriesStackId(seriesModel) {\n\t        return seriesModel.get('stack') || '__ec_stack_' + seriesModel.seriesIndex;\n\t    }\n\n\t    function getAxisKey(axis) {\n\t        return axis.dim + axis.index;\n\t    }\n\n\t    function calBarWidthAndOffset(barSeries, api) {\n\t        // Columns info on each category axis. Key is cartesian name\n\t        var columnsMap = {};\n\n\t        zrUtil.each(barSeries, function (seriesModel, idx) {\n\t            var data = seriesModel.getData();\n\t            var cartesian = seriesModel.coordinateSystem;\n\n\t            var baseAxis = cartesian.getBaseAxis();\n\t            var axisExtent = baseAxis.getExtent();\n\t            var bandWidth = baseAxis.type === 'category'\n\t                ? baseAxis.getBandWidth()\n\t                : (Math.abs(axisExtent[1] - axisExtent[0]) / data.count());\n\n\t            var columnsOnAxis = columnsMap[getAxisKey(baseAxis)] || {\n\t                bandWidth: bandWidth,\n\t                remainedWidth: bandWidth,\n\t                autoWidthCount: 0,\n\t                categoryGap: '20%',\n\t                gap: '30%',\n\t                stacks: {}\n\t            };\n\t            var stacks = columnsOnAxis.stacks;\n\t            columnsMap[getAxisKey(baseAxis)] = columnsOnAxis;\n\n\t            var stackId = getSeriesStackId(seriesModel);\n\n\t            if (!stacks[stackId]) {\n\t                columnsOnAxis.autoWidthCount++;\n\t            }\n\t            stacks[stackId] = stacks[stackId] || {\n\t                width: 0,\n\t                maxWidth: 0\n\t            };\n\n\t            var barWidth = parsePercent(\n\t                seriesModel.get('barWidth'), bandWidth\n\t            );\n\t            var barMaxWidth = parsePercent(\n\t                seriesModel.get('barMaxWidth'), bandWidth\n\t            );\n\t            var barGap = seriesModel.get('barGap');\n\t            var barCategoryGap = seriesModel.get('barCategoryGap');\n\n\t            // Caution: In a single coordinate system, these barGrid attributes\n\t            // will be shared by series. Consider that they have default values,\n\t            // only the attributes set on the last series will work.\n\t            // Do not change this fact unless there will be a break change.\n\n\t            // TODO\n\t            if (barWidth && !stacks[stackId].width) {\n\t                barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);\n\t                stacks[stackId].width = barWidth;\n\t                columnsOnAxis.remainedWidth -= barWidth;\n\t            }\n\n\t            barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);\n\t            (barGap != null) && (columnsOnAxis.gap = barGap);\n\t            (barCategoryGap != null) && (columnsOnAxis.categoryGap = barCategoryGap);\n\t        });\n\n\t        var result = {};\n\n\t        zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {\n\n\t            result[coordSysName] = {};\n\n\t            var stacks = columnsOnAxis.stacks;\n\t            var bandWidth = columnsOnAxis.bandWidth;\n\t            var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);\n\t            var barGapPercent = parsePercent(columnsOnAxis.gap, 1);\n\n\t            var remainedWidth = columnsOnAxis.remainedWidth;\n\t            var autoWidthCount = columnsOnAxis.autoWidthCount;\n\t            var autoWidth = (remainedWidth - categoryGap)\n\t                / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n\t            autoWidth = Math.max(autoWidth, 0);\n\n\t            // Find if any auto calculated bar exceeded maxBarWidth\n\t            zrUtil.each(stacks, function (column, stack) {\n\t                var maxWidth = column.maxWidth;\n\t                if (!column.width && maxWidth && maxWidth < autoWidth) {\n\t                    maxWidth = Math.min(maxWidth, remainedWidth);\n\t                    remainedWidth -= maxWidth;\n\t                    column.width = maxWidth;\n\t                    autoWidthCount--;\n\t                }\n\t            });\n\n\t            // Recalculate width again\n\t            autoWidth = (remainedWidth - categoryGap)\n\t                / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n\t            autoWidth = Math.max(autoWidth, 0);\n\n\t            var widthSum = 0;\n\t            var lastColumn;\n\t            zrUtil.each(stacks, function (column, idx) {\n\t                if (!column.width) {\n\t                    column.width = autoWidth;\n\t                }\n\t                lastColumn = column;\n\t                widthSum += column.width * (1 + barGapPercent);\n\t            });\n\t            if (lastColumn) {\n\t                widthSum -= lastColumn.width * barGapPercent;\n\t            }\n\n\t            var offset = -widthSum / 2;\n\t            zrUtil.each(stacks, function (column, stackId) {\n\t                result[coordSysName][stackId] = result[coordSysName][stackId] || {\n\t                    offset: offset,\n\t                    width: column.width\n\t                };\n\n\t                offset += column.width * (1 + barGapPercent);\n\t            });\n\t        });\n\n\t        return result;\n\t    }\n\n\t    /**\n\t     * @param {string} seriesType\n\t     * @param {module:echarts/model/Global} ecModel\n\t     * @param {module:echarts/ExtensionAPI} api\n\t     */\n\t    function barLayoutGrid(seriesType, ecModel, api) {\n\n\t        var barWidthAndOffset = calBarWidthAndOffset(\n\t            zrUtil.filter(\n\t                ecModel.getSeriesByType(seriesType),\n\t                function (seriesModel) {\n\t                    return !ecModel.isSeriesFiltered(seriesModel)\n\t                        && seriesModel.coordinateSystem\n\t                        && seriesModel.coordinateSystem.type === 'cartesian2d';\n\t                }\n\t            )\n\t        );\n\n\t        var lastStackCoords = {};\n\t        var lastStackCoordsOrigin = {};\n\n\t        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n\n\t            var data = seriesModel.getData();\n\t            var cartesian = seriesModel.coordinateSystem;\n\t            var baseAxis = cartesian.getBaseAxis();\n\n\t            var stackId = getSeriesStackId(seriesModel);\n\t            var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];\n\t            var columnOffset = columnLayoutInfo.offset;\n\t            var columnWidth = columnLayoutInfo.width;\n\t            var valueAxis = cartesian.getOtherAxis(baseAxis);\n\n\t            var barMinHeight = seriesModel.get('barMinHeight') || 0;\n\n\t            var valueAxisStart = baseAxis.onZero\n\t                ? valueAxis.toGlobalCoord(valueAxis.dataToCoord(0))\n\t                : valueAxis.getGlobalExtent()[0];\n\n\t            var coords = cartesian.dataToPoints(data, true);\n\t            lastStackCoords[stackId] = lastStackCoords[stackId] || [];\n\t            lastStackCoordsOrigin[stackId] = lastStackCoordsOrigin[stackId] || []; // Fix #4243\n\n\t            data.setLayout({\n\t                offset: columnOffset,\n\t                size: columnWidth\n\t            });\n\n\t            data.each(valueAxis.dim, function (value, idx) {\n\t                if (isNaN(value)) {\n\t                    return;\n\t                }\n\n\t                if (!lastStackCoords[stackId][idx]) {\n\t                    lastStackCoords[stackId][idx] = {\n\t                        p: valueAxisStart, // Positive stack\n\t                        n: valueAxisStart  // Negative stack\n\t                    };\n\t                    lastStackCoordsOrigin[stackId][idx] = {\n\t                        p: valueAxisStart, // Positive stack\n\t                        n: valueAxisStart  // Negative stack\n\t                    };\n\t                }\n\t                var sign = value >= 0 ? 'p' : 'n';\n\t                var coord = coords[idx];\n\t                var lastCoord = lastStackCoords[stackId][idx][sign];\n\t                var lastCoordOrigin = lastStackCoordsOrigin[stackId][idx][sign];\n\t                var x;\n\t                var y;\n\t                var width;\n\t                var height;\n\n\t                if (valueAxis.isHorizontal()) {\n\t                    x = lastCoord;\n\t                    y = coord[1] + columnOffset;\n\t                    width = coord[0] - lastCoordOrigin;\n\t                    height = columnWidth;\n\n\t                    lastStackCoordsOrigin[stackId][idx][sign] += width;\n\t                    if (Math.abs(width) < barMinHeight) {\n\t                        width = (width < 0 ? -1 : 1) * barMinHeight;\n\t                    }\n\t                    lastStackCoords[stackId][idx][sign] += width;\n\t                }\n\t                else {\n\t                    x = coord[0] + columnOffset;\n\t                    y = lastCoord;\n\t                    width = columnWidth;\n\t                    height = coord[1] - lastCoordOrigin;\n\n\t                    lastStackCoordsOrigin[stackId][idx][sign] += height;\n\t                    if (Math.abs(height) < barMinHeight) {\n\t                        // Include zero to has a positive bar\n\t                        height = (height <= 0 ? -1 : 1) * barMinHeight;\n\t                    }\n\t                    lastStackCoords[stackId][idx][sign] += height;\n\t                }\n\n\t                data.setItemLayout(idx, {\n\t                    x: x,\n\t                    y: y,\n\t                    width: width,\n\t                    height: height\n\t                });\n\t            }, true);\n\n\t        }, this);\n\t    }\n\n\t    module.exports = barLayoutGrid;\n\n\n/***/ },\n/* 141 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var echarts = __webpack_require__(1);\n\n\t    __webpack_require__(142);\n\t    __webpack_require__(144);\n\n\t    __webpack_require__(145)('pie', [{\n\t        type: 'pieToggleSelect',\n\t        event: 'pieselectchanged',\n\t        method: 'toggleSelected'\n\t    }, {\n\t        type: 'pieSelect',\n\t        event: 'pieselected',\n\t        method: 'select'\n\t    }, {\n\t        type: 'pieUnSelect',\n\t        event: 'pieunselected',\n\t        method: 'unSelect'\n\t    }]);\n\n\t    echarts.registerVisual(zrUtil.curry(__webpack_require__(146), 'pie'));\n\n\t    echarts.registerLayout(zrUtil.curry(\n\t        __webpack_require__(147), 'pie'\n\t    ));\n\n\t    echarts.registerProcessor(zrUtil.curry(__webpack_require__(149), 'pie'));\n\n\n/***/ },\n/* 142 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var List = __webpack_require__(98);\n\t    var zrUtil = __webpack_require__(4);\n\t    var modelUtil = __webpack_require__(5);\n\t    var completeDimensions = __webpack_require__(103);\n\n\t    var dataSelectableMixin = __webpack_require__(143);\n\n\t    var PieSeries = __webpack_require__(1).extendSeriesModel({\n\n\t        type: 'series.pie',\n\n\t        // Overwrite\n\t        init: function (option) {\n\t            PieSeries.superApply(this, 'init', arguments);\n\n\t            // Enable legend selection for each data item\n\t            // Use a function instead of direct access because data reference may changed\n\t            this.legendDataProvider = function () {\n\t                return this.getRawData();\n\t            };\n\n\t            this.updateSelectedMap(option.data);\n\n\t            this._defaultLabelLine(option);\n\t        },\n\n\t        // Overwrite\n\t        mergeOption: function (newOption) {\n\t            PieSeries.superCall(this, 'mergeOption', newOption);\n\t            this.updateSelectedMap(this.option.data);\n\t        },\n\n\t        getInitialData: function (option, ecModel) {\n\t            var dimensions = completeDimensions(['value'], option.data);\n\t            var list = new List(dimensions, this);\n\t            list.initData(option.data);\n\t            return list;\n\t        },\n\n\t        // Overwrite\n\t        getDataParams: function (dataIndex) {\n\t            var data = this.getData();\n\t            var params = PieSeries.superCall(this, 'getDataParams', dataIndex);\n\t            var sum = data.getSum('value');\n\t            // FIXME toFixed?\n\t            //\n\t            // Percent is 0 if sum is 0\n\t            params.percent = !sum ? 0 : +(data.get('value', dataIndex) / sum * 100).toFixed(2);\n\n\t            params.$vars.push('percent');\n\t            return params;\n\t        },\n\n\t        _defaultLabelLine: function (option) {\n\t            // Extend labelLine emphasis\n\t            modelUtil.defaultEmphasis(option.labelLine, ['show']);\n\n\t            var labelLineNormalOpt = option.labelLine.normal;\n\t            var labelLineEmphasisOpt = option.labelLine.emphasis;\n\t            // Not show label line if `label.normal.show = false`\n\t            labelLineNormalOpt.show = labelLineNormalOpt.show\n\t                && option.label.normal.show;\n\t            labelLineEmphasisOpt.show = labelLineEmphasisOpt.show\n\t                && option.label.emphasis.show;\n\t        },\n\n\t        defaultOption: {\n\t            zlevel: 0,\n\t            z: 2,\n\t            legendHoverLink: true,\n\n\t            hoverAnimation: true,\n\t            // 默认全局居中\n\t            center: ['50%', '50%'],\n\t            radius: [0, '75%'],\n\t            // 默认顺时针\n\t            clockwise: true,\n\t            startAngle: 90,\n\t            // 最小角度改为0\n\t            minAngle: 0,\n\t            // 选中是扇区偏移量\n\t            selectedOffset: 10,\n\n\t            // If use strategy to avoid label overlapping\n\t            avoidLabelOverlap: true,\n\t            // 选择模式，默认关闭，可选single，multiple\n\t            // selectedMode: false,\n\t            // 南丁格尔玫瑰图模式，'radius'（半径） | 'area'（面积）\n\t            // roseType: null,\n\n\t            // If still show when all data zero.\n\t            stillShowZeroSum: true,\n\n\t            label: {\n\t                normal: {\n\t                    // If rotate around circle\n\t                    rotate: false,\n\t                    show: true,\n\t                    // 'outer', 'inside', 'center'\n\t                    position: 'outer'\n\t                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调\n\t                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n\t                    // distance: 当position为inner时有效，为label位置到圆心的距离与圆半径(环状图为内外半径和)的比例系数\n\t                },\n\t                emphasis: {}\n\t            },\n\t            // Enabled when label.normal.position is 'outer'\n\t            labelLine: {\n\t                normal: {\n\t                    show: true,\n\t                    // 引导线两段中的第一段长度\n\t                    length: 15,\n\t                    // 引导线两段中的第二段长度\n\t                    length2: 15,\n\t                    smooth: false,\n\t                    lineStyle: {\n\t                        // color: 各异,\n\t                        width: 1,\n\t                        type: 'solid'\n\t                    }\n\t                }\n\t            },\n\t            itemStyle: {\n\t                normal: {\n\t                    borderWidth: 1\n\t                },\n\t                emphasis: {}\n\t            },\n\n\t            // Animation type canbe expansion, scale\n\t            animationType: 'expansion',\n\n\t            animationEasing: 'cubicOut',\n\n\t            data: []\n\t        }\n\t    });\n\n\t    zrUtil.mixin(PieSeries, dataSelectableMixin);\n\n\t    module.exports = PieSeries;\n\n\n/***/ },\n/* 143 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Data selectable mixin for chart series.\n\t * To eanble data select, option of series must have `selectedMode`.\n\t * And each data item will use `selected` to toggle itself selected status\n\t *\n\t * @module echarts/chart/helper/DataSelectable\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    module.exports = {\n\n\t        updateSelectedMap: function (targetList) {\n\t            this._selectTargetMap = zrUtil.reduce(targetList || [], function (targetMap, target) {\n\t                targetMap[target.name] = target;\n\t                return targetMap;\n\t            }, {});\n\t        },\n\t        /**\n\t         * @param {string} name\n\t         */\n\t        // PENGING If selectedMode is null ?\n\t        select: function (name) {\n\t            var targetMap = this._selectTargetMap;\n\t            var target = targetMap[name];\n\t            var selectedMode = this.get('selectedMode');\n\t            if (selectedMode === 'single') {\n\t                zrUtil.each(targetMap, function (target) {\n\t                    target.selected = false;\n\t                });\n\t            }\n\t            target && (target.selected = true);\n\t        },\n\n\t        /**\n\t         * @param {string} name\n\t         */\n\t        unSelect: function (name) {\n\t            var target = this._selectTargetMap[name];\n\t            // var selectedMode = this.get('selectedMode');\n\t            // selectedMode !== 'single' && target && (target.selected = false);\n\t            target && (target.selected = false);\n\t        },\n\n\t        /**\n\t         * @param {string} name\n\t         */\n\t        toggleSelected: function (name) {\n\t            var target = this._selectTargetMap[name];\n\t            if (target != null) {\n\t                this[target.selected ? 'unSelect' : 'select'](name);\n\t                return target.selected;\n\t            }\n\t        },\n\n\t        /**\n\t         * @param {string} name\n\t         */\n\t        isSelected: function (name) {\n\t            var target = this._selectTargetMap[name];\n\t            return target && target.selected;\n\t        }\n\t    };\n\n\n/***/ },\n/* 144 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var graphic = __webpack_require__(43);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    /**\n\t     * @param {module:echarts/model/Series} seriesModel\n\t     * @param {boolean} hasAnimation\n\t     * @inner\n\t     */\n\t    function updateDataSelected(uid, seriesModel, hasAnimation, api) {\n\t        var data = seriesModel.getData();\n\t        var dataIndex = this.dataIndex;\n\t        var name = data.getName(dataIndex);\n\t        var selectedOffset = seriesModel.get('selectedOffset');\n\n\t        api.dispatchAction({\n\t            type: 'pieToggleSelect',\n\t            from: uid,\n\t            name: name,\n\t            seriesId: seriesModel.id\n\t        });\n\n\t        data.each(function (idx) {\n\t            toggleItemSelected(\n\t                data.getItemGraphicEl(idx),\n\t                data.getItemLayout(idx),\n\t                seriesModel.isSelected(data.getName(idx)),\n\t                selectedOffset,\n\t                hasAnimation\n\t            );\n\t        });\n\t    }\n\n\t    /**\n\t     * @param {module:zrender/graphic/Sector} el\n\t     * @param {Object} layout\n\t     * @param {boolean} isSelected\n\t     * @param {number} selectedOffset\n\t     * @param {boolean} hasAnimation\n\t     * @inner\n\t     */\n\t    function toggleItemSelected(el, layout, isSelected, selectedOffset, hasAnimation) {\n\t        var midAngle = (layout.startAngle + layout.endAngle) / 2;\n\n\t        var dx = Math.cos(midAngle);\n\t        var dy = Math.sin(midAngle);\n\n\t        var offset = isSelected ? selectedOffset : 0;\n\t        var position = [dx * offset, dy * offset];\n\n\t        hasAnimation\n\t            // animateTo will stop revious animation like update transition\n\t            ? el.animate()\n\t                .when(200, {\n\t                    position: position\n\t                })\n\t                .start('bounceOut')\n\t            : el.attr('position', position);\n\t    }\n\n\t    /**\n\t     * Piece of pie including Sector, Label, LabelLine\n\t     * @constructor\n\t     * @extends {module:zrender/graphic/Group}\n\t     */\n\t    function PiePiece(data, idx) {\n\n\t        graphic.Group.call(this);\n\n\t        var sector = new graphic.Sector({\n\t            z2: 2\n\t        });\n\t        var polyline = new graphic.Polyline();\n\t        var text = new graphic.Text();\n\t        this.add(sector);\n\t        this.add(polyline);\n\t        this.add(text);\n\n\t        this.updateData(data, idx, true);\n\n\t        // Hover to change label and labelLine\n\t        function onEmphasis() {\n\t            polyline.ignore = polyline.hoverIgnore;\n\t            text.ignore = text.hoverIgnore;\n\t        }\n\t        function onNormal() {\n\t            polyline.ignore = polyline.normalIgnore;\n\t            text.ignore = text.normalIgnore;\n\t        }\n\t        this.on('emphasis', onEmphasis)\n\t            .on('normal', onNormal)\n\t            .on('mouseover', onEmphasis)\n\t            .on('mouseout', onNormal);\n\t    }\n\n\t    var piePieceProto = PiePiece.prototype;\n\n\t    function getLabelStyle(data, idx, state, labelModel, labelPosition) {\n\t        var textStyleModel = labelModel.getModel('textStyle');\n\t        var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';\n\t        return {\n\t            fill: textStyleModel.getTextColor()\n\t                || (isLabelInside ? '#fff' : data.getItemVisual(idx, 'color')),\n\t            opacity: data.getItemVisual(idx, 'opacity'),\n\t            textFont: textStyleModel.getFont(),\n\t            text: zrUtil.retrieve(\n\t                data.hostModel.getFormattedLabel(idx, state), data.getName(idx)\n\t            )\n\t        };\n\t    }\n\n\t    piePieceProto.updateData = function (data, idx, firstCreate) {\n\n\t        var sector = this.childAt(0);\n\n\t        var seriesModel = data.hostModel;\n\t        var itemModel = data.getItemModel(idx);\n\t        var layout = data.getItemLayout(idx);\n\t        var sectorShape = zrUtil.extend({}, layout);\n\t        sectorShape.label = null;\n\n\t        if (firstCreate) {\n\t            sector.setShape(sectorShape);\n\n\t            var animationType = seriesModel.getShallow('animationType');\n\t            if (animationType === 'scale') {\n\t                sector.shape.r = layout.r0;\n\t                graphic.initProps(sector, {\n\t                    shape: {\n\t                        r: layout.r\n\t                    }\n\t                }, seriesModel, idx);\n\t            }\n\t            // Expansion\n\t            else {\n\t                sector.shape.endAngle = layout.startAngle;\n\t                graphic.updateProps(sector, {\n\t                    shape: {\n\t                        endAngle: layout.endAngle\n\t                    }\n\t                }, seriesModel, idx);\n\t            }\n\n\t        }\n\t        else {\n\t            graphic.updateProps(sector, {\n\t                shape: sectorShape\n\t            }, seriesModel, idx);\n\t        }\n\n\t        // Update common style\n\t        var itemStyleModel = itemModel.getModel('itemStyle');\n\t        var visualColor = data.getItemVisual(idx, 'color');\n\n\t        sector.useStyle(\n\t            zrUtil.defaults(\n\t                {\n\t                    lineJoin: 'bevel',\n\t                    fill: visualColor\n\t                },\n\t                itemStyleModel.getModel('normal').getItemStyle()\n\t            )\n\t        );\n\t        sector.hoverStyle = itemStyleModel.getModel('emphasis').getItemStyle();\n\n\t        // Toggle selected\n\t        toggleItemSelected(\n\t            this,\n\t            data.getItemLayout(idx),\n\t            itemModel.get('selected'),\n\t            seriesModel.get('selectedOffset'),\n\t            seriesModel.get('animation')\n\t        );\n\n\t        function onEmphasis() {\n\t            // Sector may has animation of updating data. Force to move to the last frame\n\t            // Or it may stopped on the wrong shape\n\t            sector.stopAnimation(true);\n\t            sector.animateTo({\n\t                shape: {\n\t                    r: layout.r + 10\n\t                }\n\t            }, 300, 'elasticOut');\n\t        }\n\t        function onNormal() {\n\t            sector.stopAnimation(true);\n\t            sector.animateTo({\n\t                shape: {\n\t                    r: layout.r\n\t                }\n\t            }, 300, 'elasticOut');\n\t        }\n\t        sector.off('mouseover').off('mouseout').off('emphasis').off('normal');\n\t        if (itemModel.get('hoverAnimation') && seriesModel.isAnimationEnabled()) {\n\t            sector\n\t                .on('mouseover', onEmphasis)\n\t                .on('mouseout', onNormal)\n\t                .on('emphasis', onEmphasis)\n\t                .on('normal', onNormal);\n\t        }\n\n\t        this._updateLabel(data, idx);\n\n\t        graphic.setHoverStyle(this);\n\t    };\n\n\t    piePieceProto._updateLabel = function (data, idx) {\n\n\t        var labelLine = this.childAt(1);\n\t        var labelText = this.childAt(2);\n\n\t        var seriesModel = data.hostModel;\n\t        var itemModel = data.getItemModel(idx);\n\t        var layout = data.getItemLayout(idx);\n\t        var labelLayout = layout.label;\n\t        var visualColor = data.getItemVisual(idx, 'color');\n\n\t        graphic.updateProps(labelLine, {\n\t            shape: {\n\t                points: labelLayout.linePoints || [\n\t                    [labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y]\n\t                ]\n\t            }\n\t        }, seriesModel, idx);\n\n\t        graphic.updateProps(labelText, {\n\t            style: {\n\t                x: labelLayout.x,\n\t                y: labelLayout.y\n\t            }\n\t        }, seriesModel, idx);\n\t        labelText.attr({\n\t            style: {\n\t                textVerticalAlign: labelLayout.verticalAlign,\n\t                textAlign: labelLayout.textAlign,\n\t                textFont: labelLayout.font\n\t            },\n\t            rotation: labelLayout.rotation,\n\t            origin: [labelLayout.x, labelLayout.y],\n\t            z2: 10\n\t        });\n\n\t        var labelModel = itemModel.getModel('label.normal');\n\t        var labelHoverModel = itemModel.getModel('label.emphasis');\n\t        var labelLineModel = itemModel.getModel('labelLine.normal');\n\t        var labelLineHoverModel = itemModel.getModel('labelLine.emphasis');\n\t        var labelPosition = labelModel.get('position') || labelHoverModel.get('position');\n\n\t        labelText.setStyle(getLabelStyle(data, idx, 'normal', labelModel, labelPosition));\n\n\t        labelText.ignore = labelText.normalIgnore = !labelModel.get('show');\n\t        labelText.hoverIgnore = !labelHoverModel.get('show');\n\n\t        labelLine.ignore = labelLine.normalIgnore = !labelLineModel.get('show');\n\t        labelLine.hoverIgnore = !labelLineHoverModel.get('show');\n\n\t        // Default use item visual color\n\t        labelLine.setStyle({\n\t            stroke: visualColor,\n\t            opacity: data.getItemVisual(idx, 'opacity')\n\t        });\n\t        labelLine.setStyle(labelLineModel.getModel('lineStyle').getLineStyle());\n\n\t        labelText.hoverStyle = getLabelStyle(data, idx, 'emphasis', labelHoverModel, labelPosition);\n\t        labelLine.hoverStyle = labelLineHoverModel.getModel('lineStyle').getLineStyle();\n\n\t        var smooth = labelLineModel.get('smooth');\n\t        if (smooth && smooth === true) {\n\t            smooth = 0.4;\n\t        }\n\t        labelLine.setShape({\n\t            smooth: smooth\n\t        });\n\t    };\n\n\t    zrUtil.inherits(PiePiece, graphic.Group);\n\n\n\t    // Pie view\n\t    var Pie = __webpack_require__(42).extend({\n\n\t        type: 'pie',\n\n\t        init: function () {\n\t            var sectorGroup = new graphic.Group();\n\t            this._sectorGroup = sectorGroup;\n\t        },\n\n\t        render: function (seriesModel, ecModel, api, payload) {\n\t            if (payload && (payload.from === this.uid)) {\n\t                return;\n\t            }\n\n\t            var data = seriesModel.getData();\n\t            var oldData = this._data;\n\t            var group = this.group;\n\n\t            var hasAnimation = ecModel.get('animation');\n\t            var isFirstRender = !oldData;\n\t            var animationType = seriesModel.get('animationType');\n\n\t            var onSectorClick = zrUtil.curry(\n\t                updateDataSelected, this.uid, seriesModel, hasAnimation, api\n\t            );\n\n\t            var selectedMode = seriesModel.get('selectedMode');\n\n\t            data.diff(oldData)\n\t                .add(function (idx) {\n\t                    var piePiece = new PiePiece(data, idx);\n\t                    // Default expansion animation\n\t                    if (isFirstRender && animationType !== 'scale') {\n\t                        piePiece.eachChild(function (child) {\n\t                            child.stopAnimation(true);\n\t                        });\n\t                    }\n\n\t                    selectedMode && piePiece.on('click', onSectorClick);\n\n\t                    data.setItemGraphicEl(idx, piePiece);\n\n\t                    group.add(piePiece);\n\t                })\n\t                .update(function (newIdx, oldIdx) {\n\t                    var piePiece = oldData.getItemGraphicEl(oldIdx);\n\n\t                    piePiece.updateData(data, newIdx);\n\n\t                    piePiece.off('click');\n\t                    selectedMode && piePiece.on('click', onSectorClick);\n\t                    group.add(piePiece);\n\t                    data.setItemGraphicEl(newIdx, piePiece);\n\t                })\n\t                .remove(function (idx) {\n\t                    var piePiece = oldData.getItemGraphicEl(idx);\n\t                    group.remove(piePiece);\n\t                })\n\t                .execute();\n\n\t            if (\n\t                hasAnimation && isFirstRender && data.count() > 0\n\t                // Default expansion animation\n\t                && animationType !== 'scale'\n\t            ) {\n\t                var shape = data.getItemLayout(0);\n\t                var r = Math.max(api.getWidth(), api.getHeight()) / 2;\n\n\t                var removeClipPath = zrUtil.bind(group.removeClipPath, group);\n\t                group.setClipPath(this._createClipPath(\n\t                    shape.cx, shape.cy, r, shape.startAngle, shape.clockwise, removeClipPath, seriesModel\n\t                ));\n\t            }\n\n\t            this._data = data;\n\t        },\n\n\t        dispose: function () {},\n\n\t        _createClipPath: function (\n\t            cx, cy, r, startAngle, clockwise, cb, seriesModel\n\t        ) {\n\t            var clipPath = new graphic.Sector({\n\t                shape: {\n\t                    cx: cx,\n\t                    cy: cy,\n\t                    r0: 0,\n\t                    r: r,\n\t                    startAngle: startAngle,\n\t                    endAngle: startAngle,\n\t                    clockwise: clockwise\n\t                }\n\t            });\n\n\t            graphic.initProps(clipPath, {\n\t                shape: {\n\t                    endAngle: startAngle + (clockwise ? 1 : -1) * Math.PI * 2\n\t                }\n\t            }, seriesModel, cb);\n\n\t            return clipPath;\n\t        },\n\n\t        /**\n\t         * @implement\n\t         */\n\t        containPoint: function (point, seriesModel) {\n\t            var data = seriesModel.getData();\n\t            var itemLayout = data.getItemLayout(0);\n\t            if (itemLayout) {\n\t                var dx = point[0] - itemLayout.cx;\n\t                var dy = point[1] - itemLayout.cy;\n\t                var radius = Math.sqrt(dx * dx + dy * dy);\n\t                return radius <= itemLayout.r && radius >= itemLayout.r0;\n\t            }\n\t        }\n\n\t    });\n\n\t    module.exports = Pie;\n\n\n/***/ },\n/* 145 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t    var echarts = __webpack_require__(1);\n\t    var zrUtil = __webpack_require__(4);\n\t    module.exports = function (seriesType, actionInfos) {\n\t        zrUtil.each(actionInfos, function (actionInfo) {\n\t            actionInfo.update = 'updateView';\n\t            /**\n\t             * @payload\n\t             * @property {string} seriesName\n\t             * @property {string} name\n\t             */\n\t            echarts.registerAction(actionInfo, function (payload, ecModel) {\n\t                var selected = {};\n\t                ecModel.eachComponent(\n\t                    {mainType: 'series', subType: seriesType, query: payload},\n\t                    function (seriesModel) {\n\t                        if (seriesModel[actionInfo.method]) {\n\t                            seriesModel[actionInfo.method](payload.name);\n\t                        }\n\t                        var data = seriesModel.getData();\n\t                        // Create selected map\n\t                        data.each(function (idx) {\n\t                            var name = data.getName(idx);\n\t                            selected[name] = seriesModel.isSelected(name) || false;\n\t                        });\n\t                    }\n\t                );\n\t                return {\n\t                    name: payload.name,\n\t                    selected: selected\n\t                };\n\t            });\n\t        });\n\t    };\n\n\n/***/ },\n/* 146 */\n/***/ function(module, exports) {\n\n\t// Pick color from palette for each data item.\n\t// Applicable for charts that require applying color palette\n\t// in data level (like pie, funnel, chord).\n\n\n\t    module.exports = function (seriesType, ecModel) {\n\t        // Pie and funnel may use diferrent scope\n\t        var paletteScope = {};\n\t        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {\n\t            var dataAll = seriesModel.getRawData();\n\t            var idxMap = {};\n\t            if (!ecModel.isSeriesFiltered(seriesModel)) {\n\t                var data = seriesModel.getData();\n\t                data.each(function (idx) {\n\t                    var rawIdx = data.getRawIndex(idx);\n\t                    idxMap[rawIdx] = idx;\n\t                });\n\t                dataAll.each(function (rawIdx) {\n\t                    var filteredIdx = idxMap[rawIdx];\n\n\t                    // If series.itemStyle.normal.color is a function. itemVisual may be encoded\n\t                    var singleDataColor = filteredIdx != null\n\t                        && data.getItemVisual(filteredIdx, 'color', true);\n\n\t                    if (!singleDataColor) {\n\t                        // FIXME Performance\n\t                        var itemModel = dataAll.getItemModel(rawIdx);\n\t                        var color = itemModel.get('itemStyle.normal.color')\n\t                            || seriesModel.getColorFromPalette(dataAll.getName(rawIdx), paletteScope);\n\t                        // Legend may use the visual info in data before processed\n\t                        dataAll.setItemVisual(rawIdx, 'color', color);\n\n\t                        // Data is not filtered\n\t                        if (filteredIdx != null) {\n\t                            data.setItemVisual(filteredIdx, 'color', color);\n\t                        }\n\t                    }\n\t                    else {\n\t                        // Set data all color for legend\n\t                        dataAll.setItemVisual(rawIdx, 'color', singleDataColor);\n\t                    }\n\t                });\n\t            }\n\t        });\n\t    };\n\n\n/***/ },\n/* 147 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// TODO minAngle\n\n\n\n\t    var numberUtil = __webpack_require__(7);\n\t    var parsePercent = numberUtil.parsePercent;\n\t    var labelLayout = __webpack_require__(148);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var PI2 = Math.PI * 2;\n\t    var RADIAN = Math.PI / 180;\n\n\t    module.exports = function (seriesType, ecModel, api, payload) {\n\t        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n\t            var center = seriesModel.get('center');\n\t            var radius = seriesModel.get('radius');\n\n\t            if (!zrUtil.isArray(radius)) {\n\t                radius = [0, radius];\n\t            }\n\t            if (!zrUtil.isArray(center)) {\n\t                center = [center, center];\n\t            }\n\n\t            var width = api.getWidth();\n\t            var height = api.getHeight();\n\t            var size = Math.min(width, height);\n\t            var cx = parsePercent(center[0], width);\n\t            var cy = parsePercent(center[1], height);\n\t            var r0 = parsePercent(radius[0], size / 2);\n\t            var r = parsePercent(radius[1], size / 2);\n\n\t            var data = seriesModel.getData();\n\n\t            var startAngle = -seriesModel.get('startAngle') * RADIAN;\n\n\t            var minAngle = seriesModel.get('minAngle') * RADIAN;\n\n\t            var sum = data.getSum('value');\n\t            // Sum may be 0\n\t            var unitRadian = Math.PI / (sum || data.count()) * 2;\n\n\t            var clockwise = seriesModel.get('clockwise');\n\n\t            var roseType = seriesModel.get('roseType');\n\t            var stillShowZeroSum = seriesModel.get('stillShowZeroSum');\n\n\t            // [0...max]\n\t            var extent = data.getDataExtent('value');\n\t            extent[0] = 0;\n\n\t            // In the case some sector angle is smaller than minAngle\n\t            var restAngle = PI2;\n\t            var valueSumLargerThanMinAngle = 0;\n\n\t            var currentAngle = startAngle;\n\n\t            var dir = clockwise ? 1 : -1;\n\t            data.each('value', function (value, idx) {\n\t                var angle;\n\t                if (isNaN(value)) {\n\t                    data.setItemLayout(idx, {\n\t                        angle: NaN,\n\t                        startAngle: NaN,\n\t                        endAngle: NaN,\n\t                        clockwise: clockwise,\n\t                        cx: cx,\n\t                        cy: cy,\n\t                        r0: r0,\n\t                        r: roseType\n\t                            ? NaN\n\t                            : r\n\t                    });\n\t                    return;\n\t                }\n\n\t                // FIXME 兼容 2.0 但是 roseType 是 area 的时候才是这样？\n\t                if (roseType !== 'area') {\n\t                    angle = (sum === 0 && stillShowZeroSum)\n\t                        ? unitRadian : (value * unitRadian);\n\t                }\n\t                else {\n\t                    angle = PI2 / (data.count() || 1);\n\t                }\n\n\t                if (angle < minAngle) {\n\t                    angle = minAngle;\n\t                    restAngle -= minAngle;\n\t                }\n\t                else {\n\t                    valueSumLargerThanMinAngle += value;\n\t                }\n\n\t                var endAngle = currentAngle + dir * angle;\n\t                data.setItemLayout(idx, {\n\t                    angle: angle,\n\t                    startAngle: currentAngle,\n\t                    endAngle: endAngle,\n\t                    clockwise: clockwise,\n\t                    cx: cx,\n\t                    cy: cy,\n\t                    r0: r0,\n\t                    r: roseType\n\t                        ? numberUtil.linearMap(value, extent, [r0, r])\n\t                        : r\n\t                });\n\n\t                currentAngle = endAngle;\n\t            }, true);\n\n\t            // Some sector is constrained by minAngle\n\t            // Rest sectors needs recalculate angle\n\t            if (restAngle < PI2) {\n\t                // Average the angle if rest angle is not enough after all angles is\n\t                // Constrained by minAngle\n\t                if (restAngle <= 1e-3) {\n\t                    var angle = PI2 / data.count();\n\t                    data.each(function (idx) {\n\t                        var layout = data.getItemLayout(idx);\n\t                        layout.startAngle = startAngle + dir * idx * angle;\n\t                        layout.endAngle = startAngle + dir * (idx + 1) * angle;\n\t                    });\n\t                }\n\t                else {\n\t                    unitRadian = restAngle / valueSumLargerThanMinAngle;\n\t                    currentAngle = startAngle;\n\t                    data.each('value', function (value, idx) {\n\t                        var layout = data.getItemLayout(idx);\n\t                        var angle = layout.angle === minAngle\n\t                            ? minAngle : value * unitRadian;\n\t                        layout.startAngle = currentAngle;\n\t                        layout.endAngle = currentAngle + dir * angle;\n\t                        currentAngle += dir * angle;\n\t                    });\n\t                }\n\t            }\n\n\t            labelLayout(seriesModel, r, width, height);\n\t        });\n\t    };\n\n\n/***/ },\n/* 148 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t// FIXME emphasis label position is not same with normal label position\n\n\n\t    var textContain = __webpack_require__(8);\n\n\t    function adjustSingleSide(list, cx, cy, r, dir, viewWidth, viewHeight) {\n\t        list.sort(function (a, b) {\n\t            return a.y - b.y;\n\t        });\n\n\t        // 压\n\t        function shiftDown(start, end, delta, dir) {\n\t            for (var j = start; j < end; j++) {\n\t                list[j].y += delta;\n\t                if (j > start\n\t                    && j + 1 < end\n\t                    && list[j + 1].y > list[j].y + list[j].height\n\t                ) {\n\t                    shiftUp(j, delta / 2);\n\t                    return;\n\t                }\n\t            }\n\n\t            shiftUp(end - 1, delta / 2);\n\t        }\n\n\t        // 弹\n\t        function shiftUp(end, delta) {\n\t            for (var j = end; j >= 0; j--) {\n\t                list[j].y -= delta;\n\t                if (j > 0\n\t                    && list[j].y > list[j - 1].y + list[j - 1].height\n\t                ) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\n\t        function changeX(list, isDownList, cx, cy, r, dir) {\n\t            var lastDeltaX = dir > 0\n\t                ? isDownList                // 右侧\n\t                    ? Number.MAX_VALUE      // 下\n\t                    : 0                     // 上\n\t                : isDownList                // 左侧\n\t                    ? Number.MAX_VALUE      // 下\n\t                    : 0;                    // 上\n\n\t            for (var i = 0, l = list.length; i < l; i++) {\n\t                // Not change x for center label\n\t                if (list[i].position === 'center') {\n\t                    continue;\n\t                }\n\t                var deltaY = Math.abs(list[i].y - cy);\n\t                var length = list[i].len;\n\t                var length2 = list[i].len2;\n\t                var deltaX = (deltaY < r + length)\n\t                    ? Math.sqrt(\n\t                          (r + length + length2) * (r + length + length2)\n\t                          - deltaY * deltaY\n\t                      )\n\t                    : Math.abs(list[i].x - cx);\n\t                if (isDownList && deltaX >= lastDeltaX) {\n\t                    // 右下，左下\n\t                    deltaX = lastDeltaX - 10;\n\t                }\n\t                if (!isDownList && deltaX <= lastDeltaX) {\n\t                    // 右上，左上\n\t                    deltaX = lastDeltaX + 10;\n\t                }\n\n\t                list[i].x = cx + deltaX * dir;\n\t                lastDeltaX = deltaX;\n\t            }\n\t        }\n\n\t        var lastY = 0;\n\t        var delta;\n\t        var len = list.length;\n\t        var upList = [];\n\t        var downList = [];\n\t        for (var i = 0; i < len; i++) {\n\t            delta = list[i].y - lastY;\n\t            if (delta < 0) {\n\t                shiftDown(i, len, -delta, dir);\n\t            }\n\t            lastY = list[i].y + list[i].height;\n\t        }\n\t        if (viewHeight - lastY < 0) {\n\t            shiftUp(len - 1, lastY - viewHeight);\n\t        }\n\t        for (var i = 0; i < len; i++) {\n\t            if (list[i].y >= cy) {\n\t                downList.push(list[i]);\n\t            }\n\t            else {\n\t                upList.push(list[i]);\n\t            }\n\t        }\n\t        changeX(upList, false, cx, cy, r, dir);\n\t        changeX(downList, true, cx, cy, r, dir);\n\t    }\n\n\t    function avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight) {\n\t        var leftList = [];\n\t        var rightList = [];\n\t        for (var i = 0; i < labelLayoutList.length; i++) {\n\t            if (labelLayoutList[i].x < cx) {\n\t                leftList.push(labelLayoutList[i]);\n\t            }\n\t            else {\n\t                rightList.push(labelLayoutList[i]);\n\t            }\n\t        }\n\n\t        adjustSingleSide(rightList, cx, cy, r, 1, viewWidth, viewHeight);\n\t        adjustSingleSide(leftList, cx, cy, r, -1, viewWidth, viewHeight);\n\n\t        for (var i = 0; i < labelLayoutList.length; i++) {\n\t            var linePoints = labelLayoutList[i].linePoints;\n\t            if (linePoints) {\n\t                var dist = linePoints[1][0] - linePoints[2][0];\n\t                if (labelLayoutList[i].x < cx) {\n\t                    linePoints[2][0] = labelLayoutList[i].x + 3;\n\t                }\n\t                else {\n\t                    linePoints[2][0] = labelLayoutList[i].x - 3;\n\t                }\n\t                linePoints[1][1] = linePoints[2][1] = labelLayoutList[i].y;\n\t                linePoints[1][0] = linePoints[2][0] + dist;\n\t            }\n\t        }\n\t    }\n\n\t    module.exports = function (seriesModel, r, viewWidth, viewHeight) {\n\t        var data = seriesModel.getData();\n\t        var labelLayoutList = [];\n\t        var cx;\n\t        var cy;\n\t        var hasLabelRotate = false;\n\n\t        data.each(function (idx) {\n\t            var layout = data.getItemLayout(idx);\n\n\t            var itemModel = data.getItemModel(idx);\n\t            var labelModel = itemModel.getModel('label.normal');\n\t            // Use position in normal or emphasis\n\t            var labelPosition = labelModel.get('position') || itemModel.get('label.emphasis.position');\n\n\t            var labelLineModel = itemModel.getModel('labelLine.normal');\n\t            var labelLineLen = labelLineModel.get('length');\n\t            var labelLineLen2 = labelLineModel.get('length2');\n\n\t            var midAngle = (layout.startAngle + layout.endAngle) / 2;\n\t            var dx = Math.cos(midAngle);\n\t            var dy = Math.sin(midAngle);\n\n\t            var textX;\n\t            var textY;\n\t            var linePoints;\n\t            var textAlign;\n\n\t            cx = layout.cx;\n\t            cy = layout.cy;\n\n\t            var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';\n\t            if (labelPosition === 'center') {\n\t                textX = layout.cx;\n\t                textY = layout.cy;\n\t                textAlign = 'center';\n\t            }\n\t            else {\n\t                var x1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dx : layout.r * dx) + cx;\n\t                var y1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dy : layout.r * dy) + cy;\n\n\t                textX = x1 + dx * 3;\n\t                textY = y1 + dy * 3;\n\n\t                if (!isLabelInside) {\n\t                    // For roseType\n\t                    var x2 = x1 + dx * (labelLineLen + r - layout.r);\n\t                    var y2 = y1 + dy * (labelLineLen + r - layout.r);\n\t                    var x3 = x2 + ((dx < 0 ? -1 : 1) * labelLineLen2);\n\t                    var y3 = y2;\n\n\t                    textX = x3 + (dx < 0 ? -5 : 5);\n\t                    textY = y3;\n\t                    linePoints = [[x1, y1], [x2, y2], [x3, y3]];\n\t                }\n\n\t                textAlign = isLabelInside ? 'center' : (dx > 0 ? 'left' : 'right');\n\t            }\n\t            var font = labelModel.getModel('textStyle').getFont();\n\n\t            var labelRotate = labelModel.get('rotate')\n\t                ? (dx < 0 ? -midAngle + Math.PI : -midAngle) : 0;\n\t            var text = seriesModel.getFormattedLabel(idx, 'normal')\n\t                        || data.getName(idx);\n\t            var textRect = textContain.getBoundingRect(\n\t                text, font, textAlign, 'top'\n\t            );\n\t            hasLabelRotate = !!labelRotate;\n\t            layout.label = {\n\t                x: textX,\n\t                y: textY,\n\t                position: labelPosition,\n\t                height: textRect.height,\n\t                len: labelLineLen,\n\t                len2: labelLineLen2,\n\t                linePoints: linePoints,\n\t                textAlign: textAlign,\n\t                verticalAlign: 'middle',\n\t                font: font,\n\t                rotation: labelRotate\n\t            };\n\n\t            // Not layout the inside label\n\t            if (!isLabelInside) {\n\t                labelLayoutList.push(layout.label);\n\t            }\n\t        });\n\t        if (!hasLabelRotate && seriesModel.get('avoidLabelOverlap')) {\n\t            avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight);\n\t        }\n\t    };\n\n\n/***/ },\n/* 149 */\n/***/ function(module, exports) {\n\n\t\n\t    module.exports = function (seriesType, ecModel) {\n\t        var legendModels = ecModel.findComponents({\n\t            mainType: 'legend'\n\t        });\n\t        if (!legendModels || !legendModels.length) {\n\t            return;\n\t        }\n\t        ecModel.eachSeriesByType(seriesType, function (series) {\n\t            var data = series.getData();\n\t            data.filterSelf(function (idx) {\n\t                var name = data.getName(idx);\n\t                // If in any legend component the status is not selected.\n\t                for (var i = 0; i < legendModels.length; i++) {\n\t                    if (!legendModels[i].isSelected(name)) {\n\t                        return false;\n\t                    }\n\t                }\n\t                return true;\n\t            }, this);\n\t        }, this);\n\t    };\n\n\n/***/ },\n/* 150 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var echarts = __webpack_require__(1);\n\n\t    __webpack_require__(151);\n\t    __webpack_require__(152);\n\n\t    echarts.registerVisual(zrUtil.curry(\n\t        __webpack_require__(110), 'scatter', 'circle', null\n\t    ));\n\t    echarts.registerLayout(zrUtil.curry(\n\t        __webpack_require__(111), 'scatter'\n\t    ));\n\n\t    // In case developer forget to include grid component\n\t    __webpack_require__(113);\n\n\n/***/ },\n/* 151 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var createListFromArray = __webpack_require__(102);\n\t    var SeriesModel = __webpack_require__(28);\n\n\t    module.exports = SeriesModel.extend({\n\n\t        type: 'series.scatter',\n\n\t        dependencies: ['grid', 'polar'],\n\n\t        getInitialData: function (option, ecModel) {\n\t            var list = createListFromArray(option.data, this, ecModel);\n\t            return list;\n\t        },\n\n\t        brushSelector: 'point',\n\n\t        defaultOption: {\n\t            coordinateSystem: 'cartesian2d',\n\t            zlevel: 0,\n\t            z: 2,\n\t            legendHoverLink: true,\n\n\t            hoverAnimation: true,\n\t            // Cartesian coordinate system\n\t            // xAxisIndex: 0,\n\t            // yAxisIndex: 0,\n\n\t            // Polar coordinate system\n\t            // polarIndex: 0,\n\n\t            // Geo coordinate system\n\t            // geoIndex: 0,\n\n\t            // symbol: null,        // 图形类型\n\t            symbolSize: 10,          // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2\n\t            // symbolRotate: null,  // 图形旋转控制\n\n\t            large: false,\n\t            // Available when large is true\n\t            largeThreshold: 2000,\n\n\t            // label: {\n\t                // normal: {\n\t                    // show: false\n\t                    // distance: 5,\n\t                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调\n\t                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为\n\t                    //           'inside'|'left'|'right'|'top'|'bottom'\n\t                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n\t            //     }\n\t            // },\n\t            itemStyle: {\n\t                normal: {\n\t                    opacity: 0.8\n\t                    // color: 各异\n\t                }\n\t            }\n\t        }\n\n\t    });\n\n\n/***/ },\n/* 152 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var SymbolDraw = __webpack_require__(105);\n\t    var LargeSymbolDraw = __webpack_require__(153);\n\n\t    __webpack_require__(1).extendChartView({\n\n\t        type: 'scatter',\n\n\t        init: function () {\n\t            this._normalSymbolDraw = new SymbolDraw();\n\t            this._largeSymbolDraw = new LargeSymbolDraw();\n\t        },\n\n\t        render: function (seriesModel, ecModel, api) {\n\t            var data = seriesModel.getData();\n\t            var largeSymbolDraw = this._largeSymbolDraw;\n\t            var normalSymbolDraw = this._normalSymbolDraw;\n\t            var group = this.group;\n\n\t            var symbolDraw = seriesModel.get('large') && data.count() > seriesModel.get('largeThreshold')\n\t                ? largeSymbolDraw : normalSymbolDraw;\n\n\t            this._symbolDraw = symbolDraw;\n\t            symbolDraw.updateData(data);\n\t            group.add(symbolDraw.group);\n\n\t            group.remove(\n\t                symbolDraw === largeSymbolDraw\n\t                ? normalSymbolDraw.group : largeSymbolDraw.group\n\t            );\n\t        },\n\n\t        updateLayout: function (seriesModel) {\n\t            this._symbolDraw.updateLayout(seriesModel);\n\t        },\n\n\t        remove: function (ecModel, api) {\n\t            this._symbolDraw && this._symbolDraw.remove(api, true);\n\t        },\n\n\t        dispose: function () {}\n\t    });\n\n\n/***/ },\n/* 153 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// TODO Batch by color\n\n\n\n\t    var graphic = __webpack_require__(43);\n\t    var symbolUtil = __webpack_require__(107);\n\n\t    var LargeSymbolPath = graphic.extendShape({\n\n\t        shape: {\n\t            points: null,\n\t            sizes: null\n\t        },\n\n\t        symbolProxy: null,\n\n\t        buildPath: function (path, shape) {\n\t            var points = shape.points;\n\t            var sizes = shape.sizes;\n\n\t            var symbolProxy = this.symbolProxy;\n\t            var symbolProxyShape = symbolProxy.shape;\n\t            for (var i = 0; i < points.length; i++) {\n\t                var pt = points[i];\n\t                var size = sizes[i];\n\t                if (size[0] < 4) {\n\t                    // Optimize for small symbol\n\t                    path.rect(\n\t                        pt[0] - size[0] / 2, pt[1] - size[1] / 2,\n\t                        size[0], size[1]\n\t                    );\n\t                }\n\t                else {\n\t                    symbolProxyShape.x = pt[0] - size[0] / 2;\n\t                    symbolProxyShape.y = pt[1] - size[1] / 2;\n\t                    symbolProxyShape.width = size[0];\n\t                    symbolProxyShape.height = size[1];\n\n\t                    symbolProxy.buildPath(path, symbolProxyShape, true);\n\t                }\n\t            }\n\t        },\n\n\t        findDataIndex: function (x, y) {\n\t            var shape = this.shape;\n\t            var points = shape.points;\n\t            var sizes = shape.sizes;\n\n\t            // Not consider transform\n\t            // Treat each element as a rect\n\t            // top down traverse\n\t            for (var i = points.length - 1; i >= 0; i--) {\n\t                var pt = points[i];\n\t                var size = sizes[i];\n\t                var x0 = pt[0] - size[0] / 2;\n\t                var y0 = pt[1] - size[1] / 2;\n\t                if (x >= x0 && y >= y0 && x <= x0 + size[0] && y <= y0 + size[1]) {\n\t                    // i is dataIndex\n\t                    return i;\n\t                }\n\t            }\n\n\t            return -1;\n\t        }\n\t    });\n\n\t    function LargeSymbolDraw() {\n\t        this.group = new graphic.Group();\n\n\t        this._symbolEl = new LargeSymbolPath({\n\t            // rectHover: true,\n\t            // cursor: 'default'\n\t        });\n\t    }\n\n\t    var largeSymbolProto = LargeSymbolDraw.prototype;\n\n\t    /**\n\t     * Update symbols draw by new data\n\t     * @param {module:echarts/data/List} data\n\t     */\n\t    largeSymbolProto.updateData = function (data) {\n\t        this.group.removeAll();\n\n\t        var symbolEl = this._symbolEl;\n\n\t        var seriesModel = data.hostModel;\n\n\t        symbolEl.setShape({\n\t            points: data.mapArray(data.getItemLayout),\n\t            sizes: data.mapArray(\n\t                function (idx) {\n\t                    var size = data.getItemVisual(idx, 'symbolSize');\n\t                    if (!(size instanceof Array)) {\n\t                        size = [size, size];\n\t                    }\n\t                    return size;\n\t                }\n\t            )\n\t        });\n\n\t        // Create symbolProxy to build path for each data\n\t        symbolEl.symbolProxy = symbolUtil.createSymbol(\n\t            data.getVisual('symbol'), 0, 0, 0, 0\n\t        );\n\t        // Use symbolProxy setColor method\n\t        symbolEl.setColor = symbolEl.symbolProxy.setColor;\n\n\t        symbolEl.useStyle(\n\t            seriesModel.getModel('itemStyle.normal').getItemStyle(['color'])\n\t        );\n\n\t        var visualColor = data.getVisual('color');\n\t        if (visualColor) {\n\t            symbolEl.setColor(visualColor);\n\t        }\n\n\t        // Enable tooltip\n\t        // PENDING May have performance issue when path is extremely large\n\t        symbolEl.seriesIndex = seriesModel.seriesIndex;\n\t        symbolEl.on('mousemove', function (e) {\n\t            symbolEl.dataIndex = null;\n\t            var dataIndex = symbolEl.findDataIndex(e.offsetX, e.offsetY);\n\t            if (dataIndex > 0) {\n\t                // Provide dataIndex for tooltip\n\t                symbolEl.dataIndex = dataIndex;\n\t            }\n\t        });\n\n\t        // Add back\n\t        this.group.add(symbolEl);\n\t    };\n\n\t    largeSymbolProto.updateLayout = function (seriesModel) {\n\t        var data = seriesModel.getData();\n\t        this._symbolEl.setShape({\n\t            points: data.mapArray(data.getItemLayout)\n\t        });\n\t    };\n\n\t    largeSymbolProto.remove = function () {\n\t        this.group.removeAll();\n\t    };\n\n\t    module.exports = LargeSymbolDraw;\n\n\n/***/ },\n/* 154 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var echarts = __webpack_require__(1);\n\n\t    // Must use radar component\n\t    __webpack_require__(155);\n\n\t    __webpack_require__(160);\n\t    __webpack_require__(161);\n\n\t    echarts.registerVisual(zrUtil.curry(__webpack_require__(146), 'radar'));\n\t    echarts.registerVisual(zrUtil.curry(\n\t        __webpack_require__(110), 'radar', 'circle', null\n\t    ));\n\t    echarts.registerLayout(__webpack_require__(162));\n\n\t    echarts.registerProcessor(\n\t        zrUtil.curry(__webpack_require__(149), 'radar')\n\t    );\n\n\t    echarts.registerPreprocessor(__webpack_require__(163));\n\n\n/***/ },\n/* 155 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    __webpack_require__(156);\n\t    __webpack_require__(158);\n\n\t    __webpack_require__(159);\n\n\n/***/ },\n/* 156 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// TODO clockwise\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var IndicatorAxis = __webpack_require__(157);\n\t    var IntervalScale = __webpack_require__(118);\n\t    var numberUtil = __webpack_require__(7);\n\t    var axisHelper = __webpack_require__(115);\n\n\t    function Radar(radarModel, ecModel, api) {\n\n\t        this._model = radarModel;\n\t        /**\n\t         * Radar dimensions\n\t         * @type {Array.<string>}\n\t         */\n\t        this.dimensions = [];\n\n\t        this._indicatorAxes = zrUtil.map(radarModel.getIndicatorModels(), function (indicatorModel, idx) {\n\t            var dim = 'indicator_' + idx;\n\t            var indicatorAxis = new IndicatorAxis(dim, new IntervalScale());\n\t            indicatorAxis.name = indicatorModel.get('name');\n\t            // Inject model and axis\n\t            indicatorAxis.model = indicatorModel;\n\t            indicatorModel.axis = indicatorAxis;\n\t            this.dimensions.push(dim);\n\t            return indicatorAxis;\n\t        }, this);\n\n\t        this.resize(radarModel, api);\n\n\t        /**\n\t         * @type {number}\n\t         * @readOnly\n\t         */\n\t        this.cx;\n\t        /**\n\t         * @type {number}\n\t         * @readOnly\n\t         */\n\t        this.cy;\n\t        /**\n\t         * @type {number}\n\t         * @readOnly\n\t         */\n\t        this.r;\n\t        /**\n\t         * @type {number}\n\t         * @readOnly\n\t         */\n\t        this.startAngle;\n\t    }\n\n\t    Radar.prototype.getIndicatorAxes = function () {\n\t        return this._indicatorAxes;\n\t    };\n\n\t    Radar.prototype.dataToPoint = function (value, indicatorIndex) {\n\t        var indicatorAxis = this._indicatorAxes[indicatorIndex];\n\n\t        return this.coordToPoint(indicatorAxis.dataToCoord(value), indicatorIndex);\n\t    };\n\n\t    Radar.prototype.coordToPoint = function (coord, indicatorIndex) {\n\t        var indicatorAxis = this._indicatorAxes[indicatorIndex];\n\t        var angle = indicatorAxis.angle;\n\t        var x = this.cx + coord * Math.cos(angle);\n\t        var y = this.cy - coord * Math.sin(angle);\n\t        return [x, y];\n\t    };\n\n\t    Radar.prototype.pointToData = function (pt) {\n\t        var dx = pt[0] - this.cx;\n\t        var dy = pt[1] - this.cy;\n\t        var radius = Math.sqrt(dx * dx + dy * dy);\n\t        dx /= radius;\n\t        dy /= radius;\n\n\t        var radian = Math.atan2(-dy, dx);\n\n\t        // Find the closest angle\n\t        // FIXME index can calculated directly\n\t        var minRadianDiff = Infinity;\n\t        var closestAxis;\n\t        var closestAxisIdx = -1;\n\t        for (var i = 0; i < this._indicatorAxes.length; i++) {\n\t            var indicatorAxis = this._indicatorAxes[i];\n\t            var diff = Math.abs(radian - indicatorAxis.angle);\n\t            if (diff < minRadianDiff) {\n\t                closestAxis = indicatorAxis;\n\t                closestAxisIdx = i;\n\t                minRadianDiff = diff;\n\t            }\n\t        }\n\n\t        return [closestAxisIdx, +(closestAxis && closestAxis.coodToData(radius))];\n\t    };\n\n\t    Radar.prototype.resize = function (radarModel, api) {\n\t        var center = radarModel.get('center');\n\t        var viewWidth = api.getWidth();\n\t        var viewHeight = api.getHeight();\n\t        var viewSize = Math.min(viewWidth, viewHeight) / 2;\n\t        this.cx = numberUtil.parsePercent(center[0], viewWidth);\n\t        this.cy = numberUtil.parsePercent(center[1], viewHeight);\n\n\t        this.startAngle = radarModel.get('startAngle') * Math.PI / 180;\n\n\t        this.r = numberUtil.parsePercent(radarModel.get('radius'), viewSize);\n\n\t        zrUtil.each(this._indicatorAxes, function (indicatorAxis, idx) {\n\t            indicatorAxis.setExtent(0, this.r);\n\t            var angle = (this.startAngle + idx * Math.PI * 2 / this._indicatorAxes.length);\n\t            // Normalize to [-PI, PI]\n\t            angle = Math.atan2(Math.sin(angle), Math.cos(angle));\n\t            indicatorAxis.angle = angle;\n\t        }, this);\n\t    };\n\n\t    Radar.prototype.update = function (ecModel, api) {\n\t        var indicatorAxes = this._indicatorAxes;\n\t        var radarModel = this._model;\n\t        zrUtil.each(indicatorAxes, function (indicatorAxis) {\n\t            indicatorAxis.scale.setExtent(Infinity, -Infinity);\n\t        });\n\t        ecModel.eachSeriesByType('radar', function (radarSeries, idx) {\n\t            if (radarSeries.get('coordinateSystem') !== 'radar'\n\t                || ecModel.getComponent('radar', radarSeries.get('radarIndex')) !== radarModel\n\t            ) {\n\t                return;\n\t            }\n\t            var data = radarSeries.getData();\n\t            zrUtil.each(indicatorAxes, function (indicatorAxis) {\n\t                indicatorAxis.scale.unionExtentFromData(data, indicatorAxis.dim);\n\t            });\n\t        }, this);\n\n\t        var splitNumber = radarModel.get('splitNumber');\n\n\t        function increaseInterval(interval) {\n\t            var exp10 = Math.pow(10, Math.floor(Math.log(interval) / Math.LN10));\n\t            // Increase interval\n\t            var f = interval / exp10;\n\t            if (f === 2) {\n\t                f = 5;\n\t            }\n\t            else { // f is 2 or 5\n\t                f *= 2;\n\t            }\n\t            return f * exp10;\n\t        }\n\t        // Force all the axis fixing the maxSplitNumber.\n\t        zrUtil.each(indicatorAxes, function (indicatorAxis, idx) {\n\t            var rawExtent = axisHelper.getScaleExtent(indicatorAxis, indicatorAxis.model);\n\t            axisHelper.niceScaleExtent(indicatorAxis, indicatorAxis.model);\n\n\t            var axisModel = indicatorAxis.model;\n\t            var scale = indicatorAxis.scale;\n\t            var fixedMin = axisModel.getMin();\n\t            var fixedMax = axisModel.getMax();\n\t            var interval = scale.getInterval();\n\n\t            if (fixedMin != null && fixedMax != null) {\n\t                // User set min, max, divide to get new interval\n\t                // FIXME precision\n\t                scale.setInterval(\n\t                    (fixedMax - fixedMin) / splitNumber\n\t                );\n\t            }\n\t            else if (fixedMin != null) {\n\t                var max;\n\t                // User set min, expand extent on the other side\n\t                do {\n\t                    max = fixedMin + interval * splitNumber;\n\t                    scale.setExtent(+fixedMin, max);\n\t                    // Interval must been set after extent\n\t                    // FIXME\n\t                    scale.setInterval(interval);\n\n\t                    interval = increaseInterval(interval);\n\t                } while (max < rawExtent[1] && isFinite(max) && isFinite(rawExtent[1]));\n\t            }\n\t            else if (fixedMax != null) {\n\t                var min;\n\t                // User set min, expand extent on the other side\n\t                do {\n\t                    min = fixedMax - interval * splitNumber;\n\t                    scale.setExtent(min, +fixedMax);\n\t                    scale.setInterval(interval);\n\t                    interval = increaseInterval(interval);\n\t                } while (min > rawExtent[0] && isFinite(min) && isFinite(rawExtent[0]));\n\t            }\n\t            else {\n\t                var nicedSplitNumber = scale.getTicks().length - 1;\n\t                if (nicedSplitNumber > splitNumber) {\n\t                    interval = increaseInterval(interval);\n\t                }\n\t                // PENDING\n\t                var center = Math.round((rawExtent[0] + rawExtent[1]) / 2 / interval) * interval;\n\t                var halfSplitNumber = Math.round(splitNumber / 2);\n\t                scale.setExtent(\n\t                    numberUtil.round(center - halfSplitNumber * interval),\n\t                    numberUtil.round(center + (splitNumber - halfSplitNumber) * interval)\n\t                );\n\t                scale.setInterval(interval);\n\t            }\n\t        });\n\t    };\n\n\t    /**\n\t     * Radar dimensions is based on the data\n\t     * @type {Array}\n\t     */\n\t    Radar.dimensions = [];\n\n\t    Radar.create = function (ecModel, api) {\n\t        var radarList = [];\n\t        ecModel.eachComponent('radar', function (radarModel) {\n\t            var radar = new Radar(radarModel, ecModel, api);\n\t            radarList.push(radar);\n\t            radarModel.coordinateSystem = radar;\n\t        });\n\t        ecModel.eachSeriesByType('radar', function (radarSeries) {\n\t            if (radarSeries.get('coordinateSystem') === 'radar') {\n\t                // Inject coordinate system\n\t                radarSeries.coordinateSystem = radarList[radarSeries.get('radarIndex') || 0];\n\t            }\n\t        });\n\t        return radarList;\n\t    };\n\n\t    __webpack_require__(26).register('radar', Radar);\n\t    module.exports = Radar;\n\n\n/***/ },\n/* 157 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var Axis = __webpack_require__(124);\n\n\t    function IndicatorAxis(dim, scale, radiusExtent) {\n\t        Axis.call(this, dim, scale, radiusExtent);\n\n\t        /**\n\t         * Axis type\n\t         *  - 'category'\n\t         *  - 'value'\n\t         *  - 'time'\n\t         *  - 'log'\n\t         * @type {string}\n\t         */\n\t        this.type = 'value';\n\n\t        this.angle = 0;\n\n\t        /**\n\t         * Indicator name\n\t         * @type {string}\n\t         */\n\t        this.name = '';\n\t        /**\n\t         * @type {module:echarts/model/Model}\n\t         */\n\t        this.model;\n\t    }\n\n\t    zrUtil.inherits(IndicatorAxis, Axis);\n\n\t    module.exports = IndicatorAxis;\n\n\n/***/ },\n/* 158 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\n\t    var axisDefault = __webpack_require__(129);\n\t    var valueAxisDefault = axisDefault.valueAxis;\n\t    var Model = __webpack_require__(12);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var axisModelCommonMixin = __webpack_require__(130);\n\n\t    function defaultsShow(opt, show) {\n\t        return zrUtil.defaults({\n\t            show: show\n\t        }, opt);\n\t    }\n\n\t    var RadarModel = __webpack_require__(1).extendComponentModel({\n\n\t        type: 'radar',\n\n\t        optionUpdated: function () {\n\t            var boundaryGap = this.get('boundaryGap');\n\t            var splitNumber = this.get('splitNumber');\n\t            var scale = this.get('scale');\n\t            var axisLine = this.get('axisLine');\n\t            var axisTick = this.get('axisTick');\n\t            var axisLabel = this.get('axisLabel');\n\t            var nameTextStyle = this.get('name.textStyle');\n\t            var showName = this.get('name.show');\n\t            var nameFormatter = this.get('name.formatter');\n\t            var nameGap = this.get('nameGap');\n\t            var triggerEvent = this.get('triggerEvent');\n\n\t            var indicatorModels = zrUtil.map(this.get('indicator') || [], function (indicatorOpt) {\n\t                // PENDING\n\t                if (indicatorOpt.max != null && indicatorOpt.max > 0 && !indicatorOpt.min) {\n\t                    indicatorOpt.min = 0;\n\t                }\n\t                else if (indicatorOpt.min != null && indicatorOpt.min < 0 && !indicatorOpt.max) {\n\t                    indicatorOpt.max = 0;\n\t                }\n\t                // Use same configuration\n\t                indicatorOpt = zrUtil.merge(zrUtil.clone(indicatorOpt), {\n\t                    boundaryGap: boundaryGap,\n\t                    splitNumber: splitNumber,\n\t                    scale: scale,\n\t                    axisLine: axisLine,\n\t                    axisTick: axisTick,\n\t                    axisLabel: axisLabel,\n\t                    // Competitable with 2 and use text\n\t                    name: indicatorOpt.text,\n\t                    nameLocation: 'end',\n\t                    nameGap: nameGap,\n\t                    // min: 0,\n\t                    nameTextStyle: nameTextStyle,\n\t                    triggerEvent: triggerEvent\n\t                }, false);\n\t                if (!showName) {\n\t                    indicatorOpt.name = '';\n\t                }\n\t                if (typeof nameFormatter === 'string') {\n\t                    var indName = indicatorOpt.name;\n\t                    indicatorOpt.name = nameFormatter.replace('{value}', indName != null ? indName : '');\n\t                }\n\t                else if (typeof nameFormatter === 'function') {\n\t                    indicatorOpt.name = nameFormatter(\n\t                        indicatorOpt.name, indicatorOpt\n\t                    );\n\t                }\n\t                var model = zrUtil.extend(\n\t                    new Model(indicatorOpt, null, this.ecModel),\n\t                    axisModelCommonMixin\n\t                );\n\n\t                // For triggerEvent.\n\t                model.mainType = 'radar';\n\t                model.componentIndex = this.componentIndex;\n\n\t                return model;\n\t            }, this);\n\n\t            this.getIndicatorModels = function () {\n\t                return indicatorModels;\n\t            };\n\t        },\n\n\t        defaultOption: {\n\n\t            zlevel: 0,\n\n\t            z: 0,\n\n\t            center: ['50%', '50%'],\n\n\t            radius: '75%',\n\n\t            startAngle: 90,\n\n\t            name: {\n\t                show: true\n\t                // formatter: null\n\t                // textStyle: {}\n\t            },\n\n\t            boundaryGap: [0, 0],\n\n\t            splitNumber: 5,\n\n\t            nameGap: 15,\n\n\t            scale: false,\n\n\t            // Polygon or circle\n\t            shape: 'polygon',\n\n\t            axisLine: zrUtil.merge(\n\t                {\n\t                    lineStyle: {\n\t                        color: '#bbb'\n\t                    }\n\t                },\n\t                valueAxisDefault.axisLine\n\t            ),\n\t            axisLabel: defaultsShow(valueAxisDefault.axisLabel, false),\n\t            axisTick: defaultsShow(valueAxisDefault.axisTick, false),\n\t            splitLine: defaultsShow(valueAxisDefault.splitLine, true),\n\t            splitArea: defaultsShow(valueAxisDefault.splitArea, true),\n\n\t            // {text, min, max}\n\t            indicator: []\n\t        }\n\t    });\n\n\t    module.exports = RadarModel;\n\n\n/***/ },\n/* 159 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var AxisBuilder = __webpack_require__(133);\n\t    var zrUtil = __webpack_require__(4);\n\t    var graphic = __webpack_require__(43);\n\n\t    var axisBuilderAttrs = [\n\t        'axisLine', 'axisLabel', 'axisTick', 'axisName'\n\t    ];\n\n\t    module.exports = __webpack_require__(1).extendComponentView({\n\n\t        type: 'radar',\n\n\t        render: function (radarModel, ecModel, api) {\n\t            var group = this.group;\n\t            group.removeAll();\n\n\t            this._buildAxes(radarModel);\n\t            this._buildSplitLineAndArea(radarModel);\n\t        },\n\n\t        _buildAxes: function (radarModel) {\n\t            var radar = radarModel.coordinateSystem;\n\t            var indicatorAxes = radar.getIndicatorAxes();\n\t            var axisBuilders = zrUtil.map(indicatorAxes, function (indicatorAxis) {\n\t                var axisBuilder = new AxisBuilder(indicatorAxis.model, {\n\t                    position: [radar.cx, radar.cy],\n\t                    rotation: indicatorAxis.angle,\n\t                    labelDirection: -1,\n\t                    tickDirection: -1,\n\t                    nameDirection: 1\n\t                });\n\t                return axisBuilder;\n\t            });\n\n\t            zrUtil.each(axisBuilders, function (axisBuilder) {\n\t                zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n\t                this.group.add(axisBuilder.getGroup());\n\t            }, this);\n\t        },\n\n\t        _buildSplitLineAndArea: function (radarModel) {\n\t            var radar = radarModel.coordinateSystem;\n\t            var indicatorAxes = radar.getIndicatorAxes();\n\t            if (!indicatorAxes.length) {\n\t                return;\n\t            }\n\t            var shape = radarModel.get('shape');\n\t            var splitLineModel = radarModel.getModel('splitLine');\n\t            var splitAreaModel = radarModel.getModel('splitArea');\n\t            var lineStyleModel = splitLineModel.getModel('lineStyle');\n\t            var areaStyleModel = splitAreaModel.getModel('areaStyle');\n\n\t            var showSplitLine = splitLineModel.get('show');\n\t            var showSplitArea = splitAreaModel.get('show');\n\t            var splitLineColors = lineStyleModel.get('color');\n\t            var splitAreaColors = areaStyleModel.get('color');\n\n\t            splitLineColors = zrUtil.isArray(splitLineColors) ? splitLineColors : [splitLineColors];\n\t            splitAreaColors = zrUtil.isArray(splitAreaColors) ? splitAreaColors : [splitAreaColors];\n\n\t            var splitLines = [];\n\t            var splitAreas = [];\n\n\t            function getColorIndex(areaOrLine, areaOrLineColorList, idx) {\n\t                var colorIndex = idx % areaOrLineColorList.length;\n\t                areaOrLine[colorIndex] = areaOrLine[colorIndex] || [];\n\t                return colorIndex;\n\t            }\n\n\t            if (shape === 'circle') {\n\t                var ticksRadius = indicatorAxes[0].getTicksCoords();\n\t                var cx = radar.cx;\n\t                var cy = radar.cy;\n\t                for (var i = 0; i < ticksRadius.length; i++) {\n\t                    if (showSplitLine) {\n\t                        var colorIndex = getColorIndex(splitLines, splitLineColors, i);\n\t                        splitLines[colorIndex].push(new graphic.Circle({\n\t                            shape: {\n\t                                cx: cx,\n\t                                cy: cy,\n\t                                r: ticksRadius[i]\n\t                            }\n\t                        }));\n\t                    }\n\t                    if (showSplitArea && i < ticksRadius.length - 1) {\n\t                        var colorIndex = getColorIndex(splitAreas, splitAreaColors, i);\n\t                        splitAreas[colorIndex].push(new graphic.Ring({\n\t                            shape: {\n\t                                cx: cx,\n\t                                cy: cy,\n\t                                r0: ticksRadius[i],\n\t                                r: ticksRadius[i + 1]\n\t                            }\n\t                        }));\n\t                    }\n\t                }\n\t            }\n\t            // Polyyon\n\t            else {\n\t                var realSplitNumber = -1;\n\t                var axesTicksPoints = zrUtil.map(indicatorAxes, function (indicatorAxis, idx) {\n\t                    var ticksCoords = indicatorAxis.getTicksCoords();\n\t                    realSplitNumber = Math.max(ticksCoords.length - 1, realSplitNumber);\n\t                    return zrUtil.map(ticksCoords, function (tickCoord) {\n\t                        return radar.coordToPoint(tickCoord, idx);\n\t                    });\n\t                });\n\n\t                var prevPoints = [];\n\t                for (var i = 0; i <= realSplitNumber; i++) {\n\t                    var points = [];\n\t                    for (var j = 0; j < indicatorAxes.length; j++) {\n\t                        points.push(axesTicksPoints[j][i]);\n\t                    }\n\t                    // Close\n\t                    if (points[0]) {\n\t                        points.push(points[0].slice());\n\t                    }\n\t                    else {\n\t                        if (true) {\n\t                            console.error('Can\\'t draw value axis ' + i);\n\t                        }\n\t                    }\n\t                    if (showSplitLine) {\n\t                        var colorIndex = getColorIndex(splitLines, splitLineColors, i);\n\t                        splitLines[colorIndex].push(new graphic.Polyline({\n\t                            shape: {\n\t                                points: points\n\t                            }\n\t                        }));\n\t                    }\n\t                    if (showSplitArea && prevPoints) {\n\t                        var colorIndex = getColorIndex(splitAreas, splitAreaColors, i - 1);\n\t                        splitAreas[colorIndex].push(new graphic.Polygon({\n\t                            shape: {\n\t                                points: points.concat(prevPoints)\n\t                            }\n\t                        }));\n\t                    }\n\t                    prevPoints = points.slice().reverse();\n\t                }\n\t            }\n\n\t            var lineStyle = lineStyleModel.getLineStyle();\n\t            var areaStyle = areaStyleModel.getAreaStyle();\n\t            // Add splitArea before splitLine\n\t            zrUtil.each(splitAreas, function (splitAreas, idx) {\n\t                this.group.add(graphic.mergePath(\n\t                    splitAreas, {\n\t                        style: zrUtil.defaults({\n\t                            stroke: 'none',\n\t                            fill: splitAreaColors[idx % splitAreaColors.length]\n\t                        }, areaStyle),\n\t                        silent: true\n\t                    }\n\t                ));\n\t            }, this);\n\n\t            zrUtil.each(splitLines, function (splitLines, idx) {\n\t                this.group.add(graphic.mergePath(\n\t                    splitLines, {\n\t                        style: zrUtil.defaults({\n\t                            fill: 'none',\n\t                            stroke: splitLineColors[idx % splitLineColors.length]\n\t                        }, lineStyle),\n\t                        silent: true\n\t                    }\n\t                ));\n\t            }, this);\n\n\t        }\n\t    });\n\n\n/***/ },\n/* 160 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var SeriesModel = __webpack_require__(28);\n\t    var List = __webpack_require__(98);\n\t    var completeDimensions = __webpack_require__(103);\n\t    var zrUtil = __webpack_require__(4);\n\t    var encodeHTML = __webpack_require__(6).encodeHTML;\n\n\t    var RadarSeries = SeriesModel.extend({\n\n\t        type: 'series.radar',\n\n\t        dependencies: ['radar'],\n\n\n\t        // Overwrite\n\t        init: function (option) {\n\t            RadarSeries.superApply(this, 'init', arguments);\n\n\t            // Enable legend selection for each data item\n\t            // Use a function instead of direct access because data reference may changed\n\t            this.legendDataProvider = function () {\n\t                return this.getRawData();\n\t            };\n\t        },\n\n\t        getInitialData: function (option, ecModel) {\n\t            var data = option.data || [];\n\t            var dimensions = completeDimensions(\n\t                [], data, [], 'indicator_'\n\t            );\n\t            var list = new List(dimensions, this);\n\t            list.initData(data);\n\t            return list;\n\t        },\n\n\t        formatTooltip: function (dataIndex) {\n\t            var value = this.getRawValue(dataIndex);\n\t            var coordSys = this.coordinateSystem;\n\t            var indicatorAxes = coordSys.getIndicatorAxes();\n\t            var name = this.getData().getName(dataIndex);\n\t            return encodeHTML(name === '' ? this.name : name) + '<br/>'\n\t                + zrUtil.map(indicatorAxes, function (axis, idx) {\n\t                    return encodeHTML(axis.name + ' : ' + value[idx]);\n\t                }).join('<br />');\n\t        },\n\n\t        defaultOption: {\n\t            zlevel: 0,\n\t            z: 2,\n\t            coordinateSystem: 'radar',\n\t            legendHoverLink: true,\n\t            radarIndex: 0,\n\t            lineStyle: {\n\t                normal: {\n\t                    width: 2,\n\t                    type: 'solid'\n\t                }\n\t            },\n\t            label: {\n\t                normal: {\n\t                    position: 'top'\n\t                }\n\t            },\n\t            // areaStyle: {\n\t            // },\n\t            // itemStyle: {}\n\t            symbol: 'emptyCircle',\n\t            symbolSize: 4\n\t            // symbolRotate: null\n\t        }\n\t    });\n\n\t    module.exports = RadarSeries;\n\n\n/***/ },\n/* 161 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var graphic = __webpack_require__(43);\n\t    var zrUtil = __webpack_require__(4);\n\t    var symbolUtil = __webpack_require__(107);\n\n\t    function normalizeSymbolSize(symbolSize) {\n\t        if (!zrUtil.isArray(symbolSize)) {\n\t            symbolSize = [+symbolSize, +symbolSize];\n\t        }\n\t        return symbolSize;\n\t    }\n\t    module.exports = __webpack_require__(1).extendChartView({\n\t        type: 'radar',\n\n\t        render: function (seriesModel, ecModel, api) {\n\t            var polar = seriesModel.coordinateSystem;\n\t            var group = this.group;\n\n\t            var data = seriesModel.getData();\n\t            var oldData = this._data;\n\n\t            function createSymbol(data, idx) {\n\t                var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';\n\t                var color = data.getItemVisual(idx, 'color');\n\t                if (symbolType === 'none') {\n\t                    return;\n\t                }\n\t                var symbolPath = symbolUtil.createSymbol(\n\t                    symbolType, -0.5, -0.5, 1, 1, color\n\t                );\n\t                symbolPath.attr({\n\t                    style: {\n\t                        strokeNoScale: true\n\t                    },\n\t                    z2: 100,\n\t                    scale: normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'))\n\t                });\n\t                return symbolPath;\n\t            }\n\n\t            function updateSymbols(oldPoints, newPoints, symbolGroup, data, idx, isInit) {\n\t                // Simply rerender all\n\t                symbolGroup.removeAll();\n\t                for (var i = 0; i < newPoints.length - 1; i++) {\n\t                    var symbolPath = createSymbol(data, idx);\n\t                    if (symbolPath) {\n\t                        symbolPath.__dimIdx = i;\n\t                        if (oldPoints[i]) {\n\t                            symbolPath.attr('position', oldPoints[i]);\n\t                            graphic[isInit ? 'initProps' : 'updateProps'](\n\t                                symbolPath, {\n\t                                    position: newPoints[i]\n\t                                }, seriesModel, idx\n\t                            );\n\t                        }\n\t                        else {\n\t                            symbolPath.attr('position', newPoints[i]);\n\t                        }\n\t                        symbolGroup.add(symbolPath);\n\t                    }\n\t                }\n\t            }\n\n\t            function getInitialPoints(points) {\n\t                return zrUtil.map(points, function (pt) {\n\t                    return [polar.cx, polar.cy];\n\t                });\n\t            }\n\t            data.diff(oldData)\n\t                .add(function (idx) {\n\t                    var points = data.getItemLayout(idx);\n\t                    if (!points) {\n\t                        return;\n\t                    }\n\t                    var polygon = new graphic.Polygon();\n\t                    var polyline = new graphic.Polyline();\n\t                    var target = {\n\t                        shape: {\n\t                            points: points\n\t                        }\n\t                    };\n\t                    polygon.shape.points = getInitialPoints(points);\n\t                    polyline.shape.points = getInitialPoints(points);\n\t                    graphic.initProps(polygon, target, seriesModel, idx);\n\t                    graphic.initProps(polyline, target, seriesModel, idx);\n\n\t                    var itemGroup = new graphic.Group();\n\t                    var symbolGroup = new graphic.Group();\n\t                    itemGroup.add(polyline);\n\t                    itemGroup.add(polygon);\n\t                    itemGroup.add(symbolGroup);\n\n\t                    updateSymbols(\n\t                        polyline.shape.points, points, symbolGroup, data, idx, true\n\t                    );\n\n\t                    data.setItemGraphicEl(idx, itemGroup);\n\t                })\n\t                .update(function (newIdx, oldIdx) {\n\t                    var itemGroup = oldData.getItemGraphicEl(oldIdx);\n\t                    var polyline = itemGroup.childAt(0);\n\t                    var polygon = itemGroup.childAt(1);\n\t                    var symbolGroup = itemGroup.childAt(2);\n\t                    var target = {\n\t                        shape: {\n\t                            points: data.getItemLayout(newIdx)\n\t                        }\n\t                    };\n\t                    if (!target.shape.points) {\n\t                        return;\n\t                    }\n\t                    updateSymbols(\n\t                        polyline.shape.points, target.shape.points, symbolGroup, data, newIdx, false\n\t                    );\n\n\t                    graphic.updateProps(polyline, target, seriesModel);\n\t                    graphic.updateProps(polygon, target, seriesModel);\n\n\t                    data.setItemGraphicEl(newIdx, itemGroup);\n\t                })\n\t                .remove(function (idx) {\n\t                    group.remove(oldData.getItemGraphicEl(idx));\n\t                })\n\t                .execute();\n\n\t            data.eachItemGraphicEl(function (itemGroup, idx) {\n\t                var itemModel = data.getItemModel(idx);\n\t                var polyline = itemGroup.childAt(0);\n\t                var polygon = itemGroup.childAt(1);\n\t                var symbolGroup = itemGroup.childAt(2);\n\t                var color = data.getItemVisual(idx, 'color');\n\n\t                group.add(itemGroup);\n\n\t                polyline.useStyle(\n\t                    zrUtil.defaults(\n\t                        itemModel.getModel('lineStyle.normal').getLineStyle(),\n\t                        {\n\t                            fill: 'none',\n\t                            stroke: color\n\t                        }\n\t                    )\n\t                );\n\t                polyline.hoverStyle = itemModel.getModel('lineStyle.emphasis').getLineStyle();\n\n\t                var areaStyleModel = itemModel.getModel('areaStyle.normal');\n\t                var hoverAreaStyleModel = itemModel.getModel('areaStyle.emphasis');\n\t                var polygonIgnore = areaStyleModel.isEmpty() && areaStyleModel.parentModel.isEmpty();\n\t                var hoverPolygonIgnore = hoverAreaStyleModel.isEmpty() && hoverAreaStyleModel.parentModel.isEmpty();\n\n\t                hoverPolygonIgnore = hoverPolygonIgnore && polygonIgnore;\n\t                polygon.ignore = polygonIgnore;\n\n\t                polygon.useStyle(\n\t                    zrUtil.defaults(\n\t                        areaStyleModel.getAreaStyle(),\n\t                        {\n\t                            fill: color,\n\t                            opacity: 0.7\n\t                        }\n\t                    )\n\t                );\n\t                polygon.hoverStyle = hoverAreaStyleModel.getAreaStyle();\n\n\t                var itemStyle = itemModel.getModel('itemStyle.normal').getItemStyle(['color']);\n\t                var itemHoverStyle = itemModel.getModel('itemStyle.emphasis').getItemStyle();\n\t                var labelModel = itemModel.getModel('label.normal');\n\t                var labelHoverModel = itemModel.getModel('label.emphasis');\n\t                symbolGroup.eachChild(function (symbolPath) {\n\t                    symbolPath.setStyle(itemStyle);\n\t                    symbolPath.hoverStyle = zrUtil.clone(itemHoverStyle);\n\n\t                    var defaultText = data.get(data.dimensions[symbolPath.__dimIdx], idx);\n\t                    graphic.setText(symbolPath.style, labelModel, color);\n\t                    symbolPath.setStyle({\n\t                        text: labelModel.get('show') ? zrUtil.retrieve(\n\t                            seriesModel.getFormattedLabel(\n\t                                idx, 'normal', null, symbolPath.__dimIdx\n\t                            ),\n\t                            defaultText\n\t                        ) : ''\n\t                    });\n\n\t                    graphic.setText(symbolPath.hoverStyle, labelHoverModel, color);\n\t                    symbolPath.hoverStyle.text = labelHoverModel.get('show') ? zrUtil.retrieve(\n\t                        seriesModel.getFormattedLabel(\n\t                            idx, 'emphasis', null, symbolPath.__dimIdx\n\t                        ),\n\t                        defaultText\n\t                    ) : '';\n\t                });\n\n\t                function onEmphasis() {\n\t                    polygon.attr('ignore', hoverPolygonIgnore);\n\t                }\n\n\t                function onNormal() {\n\t                    polygon.attr('ignore', polygonIgnore);\n\t                }\n\n\t                itemGroup.off('mouseover').off('mouseout').off('normal').off('emphasis');\n\t                itemGroup.on('emphasis', onEmphasis)\n\t                    .on('mouseover', onEmphasis)\n\t                    .on('normal', onNormal)\n\t                    .on('mouseout', onNormal);\n\n\t                graphic.setHoverStyle(itemGroup);\n\t            });\n\n\t            this._data = data;\n\t        },\n\n\t        remove: function () {\n\t            this.group.removeAll();\n\t            this._data = null;\n\t        },\n\n\t        dispose: function () {}\n\t    });\n\n\n/***/ },\n/* 162 */\n/***/ function(module, exports) {\n\n\t\n\n\t    module.exports = function (ecModel) {\n\t        ecModel.eachSeriesByType('radar', function (seriesModel) {\n\t            var data = seriesModel.getData();\n\t            var points = [];\n\t            var coordSys = seriesModel.coordinateSystem;\n\t            if (!coordSys) {\n\t                return;\n\t            }\n\n\t            function pointsConverter(val, idx) {\n\t                points[idx] = points[idx] || [];\n\t                points[idx][i] = coordSys.dataToPoint(val, i);\n\t            }\n\t            for (var i = 0; i < coordSys.getIndicatorAxes().length; i++) {\n\t                var dim = data.dimensions[i];\n\t                data.each(dim, pointsConverter);\n\t            }\n\n\t            data.each(function (idx) {\n\t                // Close polygon\n\t                points[idx][0] && points[idx].push(points[idx][0].slice());\n\t                data.setItemLayout(idx, points[idx]);\n\t            });\n\t        });\n\t    };\n\n\n/***/ },\n/* 163 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Backward compat for radar chart in 2\n\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    module.exports = function (option) {\n\t        var polarOptArr = option.polar;\n\t        if (polarOptArr) {\n\t            if (!zrUtil.isArray(polarOptArr)) {\n\t                polarOptArr = [polarOptArr];\n\t            }\n\t            var polarNotRadar = [];\n\t            zrUtil.each(polarOptArr, function (polarOpt, idx) {\n\t                if (polarOpt.indicator) {\n\t                    if (polarOpt.type && !polarOpt.shape) {\n\t                        polarOpt.shape = polarOpt.type;\n\t                    }\n\t                    option.radar = option.radar || [];\n\t                    if (!zrUtil.isArray(option.radar)) {\n\t                        option.radar = [option.radar];\n\t                    }\n\t                    option.radar.push(polarOpt);\n\t                }\n\t                else {\n\t                    polarNotRadar.push(polarOpt);\n\t                }\n\t            });\n\t            option.polar = polarNotRadar;\n\t        }\n\t        zrUtil.each(option.series, function (seriesOpt) {\n\t            if (seriesOpt.type === 'radar' && seriesOpt.polarIndex) {\n\t                seriesOpt.radarIndex = seriesOpt.polarIndex;\n\t            }\n\t        });\n\t    };\n\n\n/***/ },\n/* 164 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var echarts = __webpack_require__(1);\n\t    var PRIORITY = echarts.PRIORITY;\n\n\t    __webpack_require__(165);\n\n\t    __webpack_require__(175);\n\n\t    __webpack_require__(179);\n\n\t    __webpack_require__(166);\n\n\t    echarts.registerLayout(__webpack_require__(181));\n\n\t    echarts.registerVisual(__webpack_require__(182));\n\n\t    echarts.registerProcessor(PRIORITY.PROCESSOR.STATISTIC, __webpack_require__(183));\n\n\t    echarts.registerPreprocessor(__webpack_require__(184));\n\n\t    __webpack_require__(145)('map', [{\n\t        type: 'mapToggleSelect',\n\t        event: 'mapselectchanged',\n\t        method: 'toggleSelected'\n\t    }, {\n\t        type: 'mapSelect',\n\t        event: 'mapselected',\n\t        method: 'select'\n\t    }, {\n\t        type: 'mapUnSelect',\n\t        event: 'mapunselected',\n\t        method: 'unSelect'\n\t    }]);\n\n\n/***/ },\n/* 165 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var List = __webpack_require__(98);\n\t    var SeriesModel = __webpack_require__(28);\n\t    var zrUtil = __webpack_require__(4);\n\t    var completeDimensions = __webpack_require__(103);\n\n\t    var formatUtil = __webpack_require__(6);\n\t    var encodeHTML = formatUtil.encodeHTML;\n\t    var addCommas = formatUtil.addCommas;\n\n\t    var dataSelectableMixin = __webpack_require__(143);\n\n\t    var geoCreator = __webpack_require__(166);\n\n\t    var MapSeries = SeriesModel.extend({\n\n\t        type: 'series.map',\n\n\t        dependencies: ['geo'],\n\n\t        layoutMode: 'box',\n\n\t        /**\n\t         * Only first map series of same mapType will drawMap\n\t         * @type {boolean}\n\t         */\n\t        needsDrawMap: false,\n\n\t        /**\n\t         * Group of all map series with same mapType\n\t         * @type {boolean}\n\t         */\n\t        seriesGroup: [],\n\n\t        init: function (option) {\n\n\t            option = this._fillOption(option, this.getMapType());\n\t            this.option = option;\n\n\t            MapSeries.superApply(this, 'init', arguments);\n\n\t            this.updateSelectedMap(option.data);\n\t        },\n\n\t        getInitialData: function (option) {\n\t            var dimensions = completeDimensions(['value'], option.data || []);\n\n\t            var list = new List(dimensions, this);\n\n\t            list.initData(option.data);\n\n\t            return list;\n\t        },\n\n\t        mergeOption: function (newOption) {\n\t            if (newOption.data) {\n\t                newOption = this._fillOption(newOption, this.getMapType());\n\t            }\n\n\t            MapSeries.superCall(this, 'mergeOption', newOption);\n\n\t            this.updateSelectedMap(this.option.data);\n\t        },\n\n\t        /**\n\t         * If no host geo model, return null, which means using a\n\t         * inner exclusive geo model.\n\t         */\n\t        getHostGeoModel: function () {\n\t            var geoIndex = this.option.geoIndex;\n\t            return geoIndex != null\n\t                ? this.dependentModels.geo[geoIndex]\n\t                : null;\n\t        },\n\n\t        getMapType: function () {\n\t            return (this.getHostGeoModel() || this).option.map;\n\t        },\n\n\t        _fillOption: function (option, mapName) {\n\t            // Shallow clone\n\t            option = zrUtil.extend({}, option);\n\n\t            option.data = geoCreator.getFilledRegions(option.data, mapName);\n\n\t            return option;\n\t        },\n\n\t        getRawValue: function (dataIndex) {\n\t            // Use value stored in data instead because it is calculated from multiple series\n\t            // FIXME Provide all value of multiple series ?\n\t            return this.getData().get('value', dataIndex);\n\t        },\n\n\t        /**\n\t         * Get model of region\n\t         * @param  {string} name\n\t         * @return {module:echarts/model/Model}\n\t         */\n\t        getRegionModel: function (regionName) {\n\t            var data = this.getData();\n\t            return data.getItemModel(data.indexOfName(regionName));\n\t        },\n\n\t        /**\n\t         * Map tooltip formatter\n\t         *\n\t         * @param {number} dataIndex\n\t         */\n\t        formatTooltip: function (dataIndex) {\n\t            // FIXME orignalData and data is a bit confusing\n\t            var data = this.getData();\n\t            var formattedValue = addCommas(this.getRawValue(dataIndex));\n\t            var name = data.getName(dataIndex);\n\n\t            var seriesGroup = this.seriesGroup;\n\t            var seriesNames = [];\n\t            for (var i = 0; i < seriesGroup.length; i++) {\n\t                var otherIndex = seriesGroup[i].originalData.indexOfName(name);\n\t                if (!isNaN(seriesGroup[i].originalData.get('value', otherIndex))) {\n\t                    seriesNames.push(\n\t                        encodeHTML(seriesGroup[i].name)\n\t                    );\n\t                }\n\t            }\n\n\t            return seriesNames.join(', ') + '<br />'\n\t                + encodeHTML(name + ' : ' + formattedValue);\n\t        },\n\n\t        /**\n\t         * @implement\n\t         */\n\t        getTooltipPosition: function (dataIndex) {\n\t            if (dataIndex != null) {\n\t                var name = this.getData().getName(dataIndex);\n\t                var geo = this.coordinateSystem;\n\t                var region = geo.getRegion(name);\n\n\t                return region && geo.dataToPoint(region.center);\n\t            }\n\t        },\n\n\t        setZoom: function (zoom) {\n\t            this.option.zoom = zoom;\n\t        },\n\n\t        setCenter: function (center) {\n\t            this.option.center = center;\n\t        },\n\n\t        defaultOption: {\n\t            // 一级层叠\n\t            zlevel: 0,\n\t            // 二级层叠\n\t            z: 2,\n\n\t            coordinateSystem: 'geo',\n\n\t            // map should be explicitly specified since ec3.\n\t            map: '',\n\n\t            // If `geoIndex` is not specified, a exclusive geo will be\n\t            // created. Otherwise use the specified geo component, and\n\t            // `map` and `mapType` are ignored.\n\t            // geoIndex: 0,\n\n\t            // 'center' | 'left' | 'right' | 'x%' | {number}\n\t            left: 'center',\n\t            // 'center' | 'top' | 'bottom' | 'x%' | {number}\n\t            top: 'center',\n\t            // right\n\t            // bottom\n\t            // width:\n\t            // height\n\n\t            // Aspect is width / height. Inited to be geoJson bbox aspect\n\t            // This parameter is used for scale this aspect\n\t            aspectScale: 0.75,\n\n\t            ///// Layout with center and size\n\t            // If you wan't to put map in a fixed size box with right aspect ratio\n\t            // This two properties may more conveninet\n\t            // layoutCenter: [50%, 50%]\n\t            // layoutSize: 100\n\n\n\t            // 数值合并方式，默认加和，可选为：\n\t            // 'sum' | 'average' | 'max' | 'min'\n\t            // mapValueCalculation: 'sum',\n\t            // 地图数值计算结果小数精度\n\t            // mapValuePrecision: 0,\n\n\n\t            // 显示图例颜色标识（系列标识的小圆点），图例开启时有效\n\t            showLegendSymbol: true,\n\t            // 选择模式，默认关闭，可选single，multiple\n\t            // selectedMode: false,\n\t            dataRangeHoverLink: true,\n\t            // 是否开启缩放及漫游模式\n\t            // roam: false,\n\n\t            // Default on center of map\n\t            center: null,\n\n\t            zoom: 1,\n\n\t            scaleLimit: null,\n\n\t            label: {\n\t                normal: {\n\t                    show: false,\n\t                    textStyle: {\n\t                        color: '#000'\n\t                    }\n\t                },\n\t                emphasis: {\n\t                    show: true,\n\t                    textStyle: {\n\t                        color: 'rgb(100,0,0)'\n\t                    }\n\t                }\n\t            },\n\t            // scaleLimit: null,\n\t            itemStyle: {\n\t                normal: {\n\t                    // color: 各异,\n\t                    borderWidth: 0.5,\n\t                    borderColor: '#444',\n\t                    areaColor: '#eee'\n\t                },\n\t                // 也是选中样式\n\t                emphasis: {\n\t                    areaColor: 'rgba(255,215,0,0.8)'\n\t                }\n\t            }\n\t        }\n\n\t    });\n\n\t    zrUtil.mixin(MapSeries, dataSelectableMixin);\n\n\t    module.exports = MapSeries;\n\n\n/***/ },\n/* 166 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var Geo = __webpack_require__(167);\n\n\t    var layout = __webpack_require__(21);\n\t    var zrUtil = __webpack_require__(4);\n\t    var numberUtil = __webpack_require__(7);\n\n\t    var mapDataStores = {};\n\n\t    /**\n\t     * Resize method bound to the geo\n\t     * @param {module:echarts/coord/geo/GeoModel|module:echarts/chart/map/MapModel} geoModel\n\t     * @param {module:echarts/ExtensionAPI} api\n\t     */\n\t    function resizeGeo (geoModel, api) {\n\t        var rect = this.getBoundingRect();\n\n\t        var boxLayoutOption;\n\n\t        var center = geoModel.get('layoutCenter');\n\t        var size = geoModel.get('layoutSize');\n\n\t        var viewWidth = api.getWidth();\n\t        var viewHeight = api.getHeight();\n\n\t        var aspectScale = geoModel.get('aspectScale') || 0.75;\n\t        var aspect = rect.width / rect.height * aspectScale;\n\n\t        var useCenterAndSize = false;\n\t        if (center && size) {\n\t            center = [\n\t                numberUtil.parsePercent(center[0], viewWidth),\n\t                numberUtil.parsePercent(center[1], viewHeight)\n\t            ];\n\t            size = numberUtil.parsePercent(size, Math.min(viewWidth, viewHeight));\n\n\t            if (!isNaN(center[0]) && !isNaN(center[1]) && !isNaN(size)) {\n\t                useCenterAndSize = true;\n\t            }\n\t            else {\n\t                if (true) {\n\t                    console.warn('Given layoutCenter or layoutSize data are invalid. Use left/top/width/height instead.');\n\t                }\n\t            }\n\t        }\n\n\t        var viewRect;\n\t        if (useCenterAndSize) {\n\t            var viewRect = {};\n\t            if (aspect > 1) {\n\t                // Width is same with size\n\t                viewRect.width = size;\n\t                viewRect.height = size / aspect;\n\t            }\n\t            else {\n\t                viewRect.height = size;\n\t                viewRect.width = size * aspect;\n\t            }\n\t            viewRect.y = center[1] - viewRect.height / 2;\n\t            viewRect.x = center[0] - viewRect.width / 2;\n\t        }\n\t        else {\n\t            // Use left/top/width/height\n\t            boxLayoutOption = geoModel.getBoxLayoutParams();\n\n\t            // 0.75 rate\n\t            boxLayoutOption.aspect = aspect;\n\n\t            viewRect = layout.getLayoutRect(boxLayoutOption, {\n\t                width: viewWidth,\n\t                height: viewHeight\n\t            });\n\t        }\n\n\t        this.setViewRect(viewRect.x, viewRect.y, viewRect.width, viewRect.height);\n\n\t        this.setCenter(geoModel.get('center'));\n\t        this.setZoom(geoModel.get('zoom'));\n\t    }\n\n\t    /**\n\t     * @param {module:echarts/coord/Geo} geo\n\t     * @param {module:echarts/model/Model} model\n\t     * @inner\n\t     */\n\t    function setGeoCoords(geo, model) {\n\t        zrUtil.each(model.get('geoCoord'), function (geoCoord, name) {\n\t            geo.addGeoCoord(name, geoCoord);\n\t        });\n\t    }\n\n\t    if (true) {\n\t        var mapNotExistsError = function (name) {\n\t            console.error('Map ' + name + ' not exists. You can download map file on http://echarts.baidu.com/download-map.html');\n\t        };\n\t    }\n\n\t    var geoCreator = {\n\n\t        // For deciding which dimensions to use when creating list data\n\t        dimensions: Geo.prototype.dimensions,\n\n\t        create: function (ecModel, api) {\n\t            var geoList = [];\n\n\t            // FIXME Create each time may be slow\n\t            ecModel.eachComponent('geo', function (geoModel, idx) {\n\t                var name = geoModel.get('map');\n\t                var mapData = mapDataStores[name];\n\t                if (true) {\n\t                    if (!mapData) {\n\t                        mapNotExistsError(name);\n\t                    }\n\t                }\n\t                var geo = new Geo(\n\t                    name + idx, name,\n\t                    mapData && mapData.geoJson, mapData && mapData.specialAreas,\n\t                    geoModel.get('nameMap')\n\t                );\n\t                geo.zoomLimit = geoModel.get('scaleLimit');\n\t                geoList.push(geo);\n\n\t                setGeoCoords(geo, geoModel);\n\n\t                geoModel.coordinateSystem = geo;\n\t                geo.model = geoModel;\n\n\t                // Inject resize method\n\t                geo.resize = resizeGeo;\n\n\t                geo.resize(geoModel, api);\n\t            });\n\n\t            ecModel.eachSeries(function (seriesModel) {\n\t                var coordSys = seriesModel.get('coordinateSystem');\n\t                if (coordSys === 'geo') {\n\t                    var geoIndex = seriesModel.get('geoIndex') || 0;\n\t                    seriesModel.coordinateSystem = geoList[geoIndex];\n\t                }\n\t            });\n\n\t            // If has map series\n\t            var mapModelGroupBySeries = {};\n\n\t            ecModel.eachSeriesByType('map', function (seriesModel) {\n\t                if (!seriesModel.getHostGeoModel()) {\n\t                    var mapType = seriesModel.getMapType();\n\t                    mapModelGroupBySeries[mapType] = mapModelGroupBySeries[mapType] || [];\n\t                    mapModelGroupBySeries[mapType].push(seriesModel);\n\t                }\n\t            });\n\n\t            zrUtil.each(mapModelGroupBySeries, function (mapSeries, mapType) {\n\t                var mapData = mapDataStores[mapType];\n\t                if (true) {\n\t                    if (!mapData) {\n\t                        mapNotExistsError(mapSeries[0].get('map'));\n\t                    }\n\t                }\n\n\t                var nameMapList = zrUtil.map(mapSeries, function (singleMapSeries) {\n\t                    return singleMapSeries.get('nameMap');\n\t                });\n\t                var geo = new Geo(\n\t                    mapType, mapType,\n\t                    mapData && mapData.geoJson, mapData && mapData.specialAreas,\n\t                    zrUtil.mergeAll(nameMapList)\n\t                );\n\t                geo.zoomLimit = zrUtil.retrieve.apply(null, zrUtil.map(mapSeries, function (singleMapSeries) {\n\t                    return singleMapSeries.get('scaleLimit');\n\t                }));\n\t                geoList.push(geo);\n\n\t                // Inject resize method\n\t                geo.resize = resizeGeo;\n\n\t                geo.resize(mapSeries[0], api);\n\n\t                zrUtil.each(mapSeries, function (singleMapSeries) {\n\t                    singleMapSeries.coordinateSystem = geo;\n\n\t                    setGeoCoords(geo, singleMapSeries);\n\t                });\n\t            });\n\n\t            return geoList;\n\t        },\n\n\t        /**\n\t         * @param {string} mapName\n\t         * @param {Object|string} geoJson\n\t         * @param {Object} [specialAreas]\n\t         *\n\t         * @example\n\t         *     $.get('USA.json', function (geoJson) {\n\t         *         echarts.registerMap('USA', geoJson);\n\t         *         // Or\n\t         *         echarts.registerMap('USA', {\n\t         *             geoJson: geoJson,\n\t         *             specialAreas: {}\n\t         *         })\n\t         *     });\n\t         */\n\t        registerMap: function (mapName, geoJson, specialAreas) {\n\t            if (geoJson.geoJson && !geoJson.features) {\n\t                specialAreas = geoJson.specialAreas;\n\t                geoJson = geoJson.geoJson;\n\t            }\n\t            if (typeof geoJson === 'string') {\n\t                geoJson = (typeof JSON !== 'undefined' && JSON.parse)\n\t                    ? JSON.parse(geoJson) : (new Function('return (' + geoJson + ');'))();\n\t            }\n\t            mapDataStores[mapName] = {\n\t                geoJson: geoJson,\n\t                specialAreas: specialAreas\n\t            };\n\t        },\n\n\t        /**\n\t         * @param {string} mapName\n\t         * @return {Object}\n\t         */\n\t        getMap: function (mapName) {\n\t            return mapDataStores[mapName];\n\t        },\n\n\t        /**\n\t         * Fill given regions array\n\t         * @param  {Array.<Object>} originRegionArr\n\t         * @param  {string} mapName\n\t         * @return {Array}\n\t         */\n\t        getFilledRegions: function (originRegionArr, mapName) {\n\t            // Not use the original\n\t            var regionsArr = (originRegionArr || []).slice();\n\n\t            var map = geoCreator.getMap(mapName);\n\t            var geoJson = map && map.geoJson;\n\t            if (!geoJson) {\n\t                if (true) {\n\t                    mapNotExistsError(mapName);\n\t                }\n\t                return originRegionArr;\n\t            }\n\n\t            var dataNameMap = {};\n\t            var features = geoJson.features;\n\t            for (var i = 0; i < regionsArr.length; i++) {\n\t                dataNameMap[regionsArr[i].name] = regionsArr[i];\n\t            }\n\n\t            for (var i = 0; i < features.length; i++) {\n\t                var name = features[i].properties.name;\n\t                if (!dataNameMap[name]) {\n\t                    regionsArr.push({\n\t                        name: name\n\t                    });\n\t                }\n\t            }\n\t            return regionsArr;\n\t        }\n\t    };\n\n\t    // Inject methods into echarts\n\t    var echarts = __webpack_require__(1);\n\n\t    echarts.registerMap = geoCreator.registerMap;\n\n\t    echarts.getMap = geoCreator.getMap;\n\n\t    // TODO\n\t    echarts.loadMap = function () {};\n\n\t    echarts.registerCoordinateSystem('geo', geoCreator);\n\n\t    module.exports = geoCreator;\n\n\n/***/ },\n/* 167 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var parseGeoJson = __webpack_require__(168);\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var BoundingRect = __webpack_require__(9);\n\n\t    var View = __webpack_require__(171);\n\n\n\t    // Geo fix functions\n\t    var geoFixFuncs = [\n\t        __webpack_require__(172),\n\t        __webpack_require__(173),\n\t        __webpack_require__(174)\n\t    ];\n\n\t    /**\n\t     * [Geo description]\n\t     * @param {string} name Geo name\n\t     * @param {string} map Map type\n\t     * @param {Object} geoJson\n\t     * @param {Object} [specialAreas]\n\t     *        Specify the positioned areas by left, top, width, height\n\t     * @param {Object.<string, string>} [nameMap]\n\t     *        Specify name alias\n\t     */\n\t    function Geo(name, map, geoJson, specialAreas, nameMap) {\n\n\t        View.call(this, name);\n\n\t        /**\n\t         * Map type\n\t         * @type {string}\n\t         */\n\t        this.map = map;\n\n\t        this._nameCoordMap = {};\n\n\t        this.loadGeoJson(geoJson, specialAreas, nameMap);\n\t    }\n\n\t    Geo.prototype = {\n\n\t        constructor: Geo,\n\n\t        type: 'geo',\n\n\t        /**\n\t         * @param {Array.<string>}\n\t         * @readOnly\n\t         */\n\t        dimensions: ['lng', 'lat'],\n\n\t        /**\n\t         * If contain given lng,lat coord\n\t         * @param {Array.<number>}\n\t         * @readOnly\n\t         */\n\t        containCoord: function (coord) {\n\t            var regions = this.regions;\n\t            for (var i = 0; i < regions.length; i++) {\n\t                if (regions[i].contain(coord)) {\n\t                    return true;\n\t                }\n\t            }\n\t            return false;\n\t        },\n\t        /**\n\t         * @param {Object} geoJson\n\t         * @param {Object} [specialAreas]\n\t         *        Specify the positioned areas by left, top, width, height\n\t         * @param {Object.<string, string>} [nameMap]\n\t         *        Specify name alias\n\t         */\n\t        loadGeoJson: function (geoJson, specialAreas, nameMap) {\n\t            // https://jsperf.com/try-catch-performance-overhead\n\t            try {\n\t                this.regions = geoJson ? parseGeoJson(geoJson) : [];\n\t            }\n\t            catch (e) {\n\t                throw 'Invalid geoJson format\\n' + e;\n\t            }\n\t            specialAreas = specialAreas || {};\n\t            nameMap = nameMap || {};\n\t            var regions = this.regions;\n\t            var regionsMap = {};\n\t            for (var i = 0; i < regions.length; i++) {\n\t                var regionName = regions[i].name;\n\t                // Try use the alias in nameMap\n\t                regionName = nameMap[regionName] || regionName;\n\t                regions[i].name = regionName;\n\n\t                regionsMap[regionName] = regions[i];\n\t                // Add geoJson\n\t                this.addGeoCoord(regionName, regions[i].center);\n\n\t                // Some area like Alaska in USA map needs to be tansformed\n\t                // to look better\n\t                var specialArea = specialAreas[regionName];\n\t                if (specialArea) {\n\t                    regions[i].transformTo(\n\t                        specialArea.left, specialArea.top, specialArea.width, specialArea.height\n\t                    );\n\t                }\n\t            }\n\n\t            this._regionsMap = regionsMap;\n\n\t            this._rect = null;\n\n\t            zrUtil.each(geoFixFuncs, function (fixFunc) {\n\t                fixFunc(this);\n\t            }, this);\n\t        },\n\n\t        // Overwrite\n\t        transformTo: function (x, y, width, height) {\n\t            var rect = this.getBoundingRect();\n\n\t            rect = rect.clone();\n\t            // Longitute is inverted\n\t            rect.y = -rect.y - rect.height;\n\n\t            var viewTransform = this._viewTransform;\n\n\t            viewTransform.transform = rect.calculateTransform(\n\t                new BoundingRect(x, y, width, height)\n\t            );\n\n\t            viewTransform.decomposeTransform();\n\n\t            var scale = viewTransform.scale;\n\t            scale[1] = -scale[1];\n\n\t            viewTransform.updateTransform();\n\n\t            this._updateTransform();\n\t        },\n\n\t        /**\n\t         * @param {string} name\n\t         * @return {module:echarts/coord/geo/Region}\n\t         */\n\t        getRegion: function (name) {\n\t            return this._regionsMap[name];\n\t        },\n\n\t        getRegionByCoord: function (coord) {\n\t            var regions = this.regions;\n\t            for (var i = 0; i < regions.length; i++) {\n\t                if (regions[i].contain(coord)) {\n\t                    return regions[i];\n\t                }\n\t            }\n\t        },\n\n\t        /**\n\t         * Add geoCoord for indexing by name\n\t         * @param {string} name\n\t         * @param {Array.<number>} geoCoord\n\t         */\n\t        addGeoCoord: function (name, geoCoord) {\n\t            this._nameCoordMap[name] = geoCoord;\n\t        },\n\n\t        /**\n\t         * Get geoCoord by name\n\t         * @param {string} name\n\t         * @return {Array.<number>}\n\t         */\n\t        getGeoCoord: function (name) {\n\t            return this._nameCoordMap[name];\n\t        },\n\n\t        // Overwrite\n\t        getBoundingRect: function () {\n\t            if (this._rect) {\n\t                return this._rect;\n\t            }\n\t            var rect;\n\n\t            var regions = this.regions;\n\t            for (var i = 0; i < regions.length; i++) {\n\t                var regionRect = regions[i].getBoundingRect();\n\t                rect = rect || regionRect.clone();\n\t                rect.union(regionRect);\n\t            }\n\t            // FIXME Always return new ?\n\t            return (this._rect = rect || new BoundingRect(0, 0, 0, 0));\n\t        },\n\n\t        /**\n\t         * Convert series data to a list of points\n\t         * @param {module:echarts/data/List} data\n\t         * @param {boolean} stack\n\t         * @return {Array}\n\t         *  Return list of points. For example:\n\t         *  `[[10, 10], [20, 20], [30, 30]]`\n\t         */\n\t        dataToPoints: function (data) {\n\t            var item = [];\n\t            return data.mapArray(['lng', 'lat'], function (lon, lat) {\n\t                item[0] = lon;\n\t                item[1] = lat;\n\t                return this.dataToPoint(item);\n\t            }, this);\n\t        },\n\n\t        // Overwrite\n\t        /**\n\t         * @param {string|Array.<number>} data\n\t         * @return {Array.<number>}\n\t         */\n\t        dataToPoint: function (data) {\n\t            if (typeof data === 'string') {\n\t                // Map area name to geoCoord\n\t                data = this.getGeoCoord(data);\n\t            }\n\t            if (data) {\n\t                return View.prototype.dataToPoint.call(this, data);\n\t            }\n\t        },\n\n\t        /**\n\t         * @override\n\t         * @implements\n\t         * see {module:echarts/CoodinateSystem}\n\t         */\n\t        convertToPixel: zrUtil.curry(doConvert, 'dataToPoint'),\n\n\t        /**\n\t         * @override\n\t         * @implements\n\t         * see {module:echarts/CoodinateSystem}\n\t         */\n\t        convertFromPixel: zrUtil.curry(doConvert, 'pointToData')\n\n\t    };\n\n\t    zrUtil.mixin(Geo, View);\n\n\t    function doConvert(methodName, ecModel, finder, value) {\n\t        var geoModel = finder.geoModel;\n\t        var seriesModel = finder.seriesModel;\n\n\t        var coordSys = geoModel\n\t            ? geoModel.coordinateSystem\n\t            : seriesModel\n\t            ? (\n\t                seriesModel.coordinateSystem // For map.\n\t                || (seriesModel.getReferringComponents('geo')[0] || {}).coordinateSystem\n\t            )\n\t            : null;\n\n\t        return coordSys === this ? coordSys[methodName](value) : null;\n\t    }\n\n\t    module.exports = Geo;\n\n\n/***/ },\n/* 168 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Parse and decode geo json\n\t * @module echarts/coord/geo/parseGeoJson\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var Region = __webpack_require__(169);\n\n\t    function decode(json) {\n\t        if (!json.UTF8Encoding) {\n\t            return json;\n\t        }\n\t        var features = json.features;\n\n\t        for (var f = 0; f < features.length; f++) {\n\t            var feature = features[f];\n\t            var geometry = feature.geometry;\n\t            var coordinates = geometry.coordinates;\n\t            var encodeOffsets = geometry.encodeOffsets;\n\n\t            for (var c = 0; c < coordinates.length; c++) {\n\t                var coordinate = coordinates[c];\n\n\t                if (geometry.type === 'Polygon') {\n\t                    coordinates[c] = decodePolygon(\n\t                        coordinate,\n\t                        encodeOffsets[c]\n\t                    );\n\t                }\n\t                else if (geometry.type === 'MultiPolygon') {\n\t                    for (var c2 = 0; c2 < coordinate.length; c2++) {\n\t                        var polygon = coordinate[c2];\n\t                        coordinate[c2] = decodePolygon(\n\t                            polygon,\n\t                            encodeOffsets[c][c2]\n\t                        );\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        // Has been decoded\n\t        json.UTF8Encoding = false;\n\t        return json;\n\t    }\n\n\t    function decodePolygon(coordinate, encodeOffsets) {\n\t        var result = [];\n\t        var prevX = encodeOffsets[0];\n\t        var prevY = encodeOffsets[1];\n\n\t        for (var i = 0; i < coordinate.length; i += 2) {\n\t            var x = coordinate.charCodeAt(i) - 64;\n\t            var y = coordinate.charCodeAt(i + 1) - 64;\n\t            // ZigZag decoding\n\t            x = (x >> 1) ^ (-(x & 1));\n\t            y = (y >> 1) ^ (-(y & 1));\n\t            // Delta deocding\n\t            x += prevX;\n\t            y += prevY;\n\n\t            prevX = x;\n\t            prevY = y;\n\t            // Dequantize\n\t            result.push([x / 1024, y / 1024]);\n\t        }\n\n\t        return result;\n\t    }\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function flattern2D(array) {\n\t        var ret = [];\n\t        for (var i = 0; i < array.length; i++) {\n\t            for (var k = 0; k < array[i].length; k++) {\n\t                ret.push(array[i][k]);\n\t            }\n\t        }\n\t        return ret;\n\t    }\n\n\t    /**\n\t     * @alias module:echarts/coord/geo/parseGeoJson\n\t     * @param {Object} geoJson\n\t     * @return {module:zrender/container/Group}\n\t     */\n\t    module.exports = function (geoJson) {\n\n\t        decode(geoJson);\n\n\t        return zrUtil.map(zrUtil.filter(geoJson.features, function (featureObj) {\n\t            // Output of mapshaper may have geometry null\n\t            return featureObj.geometry && featureObj.properties;\n\t        }), function (featureObj) {\n\t            var properties = featureObj.properties;\n\t            var geometry = featureObj.geometry;\n\n\t            var coordinates = geometry.coordinates;\n\n\t            if (geometry.type === 'MultiPolygon') {\n\t                coordinates = flattern2D(coordinates);\n\t            }\n\n\t            return new Region(\n\t                properties.name,\n\t                coordinates,\n\t                properties.cp\n\t            );\n\t        });\n\t    };\n\n\n/***/ },\n/* 169 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @module echarts/coord/geo/Region\n\t */\n\n\n\t    var polygonContain = __webpack_require__(170);\n\n\t    var BoundingRect = __webpack_require__(9);\n\n\t    var bbox = __webpack_require__(51);\n\t    var vec2 = __webpack_require__(10);\n\n\t    /**\n\t     * @param {string} name\n\t     * @param {Array} contours\n\t     * @param {Array.<number>} cp\n\t     */\n\t    function Region(name, contours, cp) {\n\n\t        /**\n\t         * @type {string}\n\t         * @readOnly\n\t         */\n\t        this.name = name;\n\n\t        /**\n\t         * @type {Array.<Array>}\n\t         * @readOnly\n\t         */\n\t        this.contours = contours;\n\n\t        if (!cp) {\n\t            var rect = this.getBoundingRect();\n\t            cp = [\n\t                rect.x + rect.width / 2,\n\t                rect.y + rect.height / 2\n\t            ];\n\t        }\n\t        else {\n\t            cp = [cp[0], cp[1]];\n\t        }\n\t        /**\n\t         * @type {Array.<number>}\n\t         */\n\t        this.center = cp;\n\t    }\n\n\t    Region.prototype = {\n\n\t        constructor: Region,\n\n\t        /**\n\t         * @return {module:zrender/core/BoundingRect}\n\t         */\n\t        getBoundingRect: function () {\n\t            var rect = this._rect;\n\t            if (rect) {\n\t                return rect;\n\t            }\n\n\t            var MAX_NUMBER = Number.MAX_VALUE;\n\t            var min = [MAX_NUMBER, MAX_NUMBER];\n\t            var max = [-MAX_NUMBER, -MAX_NUMBER];\n\t            var min2 = [];\n\t            var max2 = [];\n\t            var contours = this.contours;\n\t            for (var i = 0; i < contours.length; i++) {\n\t                bbox.fromPoints(contours[i], min2, max2);\n\t                vec2.min(min, min, min2);\n\t                vec2.max(max, max, max2);\n\t            }\n\t            // No data\n\t            if (i === 0) {\n\t                min[0] = min[1] = max[0] = max[1] = 0;\n\t            }\n\n\t            return (this._rect = new BoundingRect(\n\t                min[0], min[1], max[0] - min[0], max[1] - min[1]\n\t            ));\n\t        },\n\n\t        /**\n\t         * @param {<Array.<number>} coord\n\t         * @return {boolean}\n\t         */\n\t        contain: function (coord) {\n\t            var rect = this.getBoundingRect();\n\t            var contours = this.contours;\n\t            if (rect.contain(coord[0], coord[1])) {\n\t                for (var i = 0, len = contours.length; i < len; i++) {\n\t                    if (polygonContain.contain(contours[i], coord[0], coord[1])) {\n\t                        return true;\n\t                    }\n\t                }\n\t            }\n\t            return false;\n\t        },\n\n\t        transformTo: function (x, y, width, height) {\n\t            var rect = this.getBoundingRect();\n\t            var aspect = rect.width / rect.height;\n\t            if (!width) {\n\t                width = aspect * height;\n\t            }\n\t            else if (!height) {\n\t                height = width / aspect ;\n\t            }\n\t            var target = new BoundingRect(x, y, width, height);\n\t            var transform = rect.calculateTransform(target);\n\t            var contours = this.contours;\n\t            for (var i = 0; i < contours.length; i++) {\n\t                for (var p = 0; p < contours[i].length; p++) {\n\t                    vec2.applyTransform(contours[i][p], contours[i][p], transform);\n\t                }\n\t            }\n\t            rect = this._rect;\n\t            rect.copy(target);\n\t            // Update center\n\t            this.center = [\n\t                rect.x + rect.width / 2,\n\t                rect.y + rect.height / 2\n\t            ];\n\t        }\n\t    };\n\n\t    module.exports = Region;\n\n\n/***/ },\n/* 170 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var windingLine = __webpack_require__(58);\n\n\t    var EPSILON = 1e-8;\n\n\t    function isAroundEqual(a, b) {\n\t        return Math.abs(a - b) < EPSILON;\n\t    }\n\n\t    function contain(points, x, y) {\n\t        var w = 0;\n\t        var p = points[0];\n\n\t        if (!p) {\n\t            return false;\n\t        }\n\n\t        for (var i = 1; i < points.length; i++) {\n\t            var p2 = points[i];\n\t            w += windingLine(p[0], p[1], p2[0], p2[1], x, y);\n\t            p = p2;\n\t        }\n\n\t        // Close polygon\n\t        var p0 = points[0];\n\t        if (!isAroundEqual(p[0], p0[0]) || !isAroundEqual(p[1], p0[1])) {\n\t            w += windingLine(p[0], p[1], p0[0], p0[1], x, y);\n\t        }\n\n\t        return w !== 0;\n\t    }\n\n\n\t    module.exports = {\n\t        contain: contain\n\t    };\n\n\n/***/ },\n/* 171 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Simple view coordinate system\n\t * Mapping given x, y to transformd view x, y\n\t */\n\n\n\t    var vector = __webpack_require__(10);\n\t    var matrix = __webpack_require__(11);\n\n\t    var Transformable = __webpack_require__(34);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var BoundingRect = __webpack_require__(9);\n\n\t    var v2ApplyTransform = vector.applyTransform;\n\n\t    // Dummy transform node\n\t    function TransformDummy() {\n\t        Transformable.call(this);\n\t    }\n\t    zrUtil.mixin(TransformDummy, Transformable);\n\n\t    function View(name) {\n\t        /**\n\t         * @type {string}\n\t         */\n\t        this.name = name;\n\n\t        /**\n\t         * @type {Object}\n\t         */\n\t        this.zoomLimit;\n\n\t        Transformable.call(this);\n\n\t        this._roamTransform = new TransformDummy();\n\n\t        this._viewTransform = new TransformDummy();\n\n\t        this._center;\n\t        this._zoom;\n\t    }\n\n\t    View.prototype = {\n\n\t        constructor: View,\n\n\t        type: 'view',\n\n\t        /**\n\t         * @param {Array.<string>}\n\t         * @readOnly\n\t         */\n\t        dimensions: ['x', 'y'],\n\n\t        /**\n\t         * Set bounding rect\n\t         * @param {number} x\n\t         * @param {number} y\n\t         * @param {number} width\n\t         * @param {number} height\n\t         */\n\n\t        // PENDING to getRect\n\t        setBoundingRect: function (x, y, width, height) {\n\t            this._rect = new BoundingRect(x, y, width, height);\n\t            return this._rect;\n\t        },\n\n\t        /**\n\t         * @return {module:zrender/core/BoundingRect}\n\t         */\n\t        // PENDING to getRect\n\t        getBoundingRect: function () {\n\t            return this._rect;\n\t        },\n\n\t        /**\n\t         * @param {number} x\n\t         * @param {number} y\n\t         * @param {number} width\n\t         * @param {number} height\n\t         */\n\t        setViewRect: function (x, y, width, height) {\n\t            this.transformTo(x, y, width, height);\n\t            this._viewRect = new BoundingRect(x, y, width, height);\n\t        },\n\n\t        /**\n\t         * Transformed to particular position and size\n\t         * @param {number} x\n\t         * @param {number} y\n\t         * @param {number} width\n\t         * @param {number} height\n\t         */\n\t        transformTo: function (x, y, width, height) {\n\t            var rect = this.getBoundingRect();\n\t            var viewTransform = this._viewTransform;\n\n\t            viewTransform.transform = rect.calculateTransform(\n\t                new BoundingRect(x, y, width, height)\n\t            );\n\n\t            viewTransform.decomposeTransform();\n\n\t            this._updateTransform();\n\t        },\n\n\t        /**\n\t         * Set center of view\n\t         * @param {Array.<number>} [centerCoord]\n\t         */\n\t        setCenter: function (centerCoord) {\n\t            if (!centerCoord) {\n\t                return;\n\t            }\n\t            this._center = centerCoord;\n\n\t            this._updateCenterAndZoom();\n\t        },\n\n\t        /**\n\t         * @param {number} zoom\n\t         */\n\t        setZoom: function (zoom) {\n\t            zoom = zoom || 1;\n\n\t            var zoomLimit = this.zoomLimit;\n\t            if (zoomLimit) {\n\t                if (zoomLimit.max != null) {\n\t                    zoom = Math.min(zoomLimit.max, zoom);\n\t                }\n\t                if (zoomLimit.min != null) {\n\t                    zoom = Math.max(zoomLimit.min, zoom);\n\t                }\n\t            }\n\t            this._zoom = zoom;\n\n\t            this._updateCenterAndZoom();\n\t        },\n\n\t        /**\n\t         * Get default center without roam\n\t         */\n\t        getDefaultCenter: function () {\n\t            // Rect before any transform\n\t            var rawRect = this.getBoundingRect();\n\t            var cx = rawRect.x + rawRect.width / 2;\n\t            var cy = rawRect.y + rawRect.height / 2;\n\n\t            return [cx, cy];\n\t        },\n\n\t        getCenter: function () {\n\t            return this._center || this.getDefaultCenter();\n\t        },\n\n\t        getZoom: function () {\n\t            return this._zoom || 1;\n\t        },\n\n\t        /**\n\t         * @return {Array.<number}\n\t         */\n\t        getRoamTransform: function () {\n\t            return this._roamTransform;\n\t        },\n\n\t        _updateCenterAndZoom: function () {\n\t            // Must update after view transform updated\n\t            var viewTransformMatrix = this._viewTransform.getLocalTransform();\n\t            var roamTransform = this._roamTransform;\n\t            var defaultCenter = this.getDefaultCenter();\n\t            var center = this.getCenter();\n\t            var zoom = this.getZoom();\n\n\t            center = vector.applyTransform([], center, viewTransformMatrix);\n\t            defaultCenter = vector.applyTransform([], defaultCenter, viewTransformMatrix);\n\n\t            roamTransform.origin = center;\n\t            roamTransform.position = [\n\t                defaultCenter[0] - center[0],\n\t                defaultCenter[1] - center[1]\n\t            ];\n\t            roamTransform.scale = [zoom, zoom];\n\n\t            this._updateTransform();\n\t        },\n\n\t        /**\n\t         * Update transform from roam and mapLocation\n\t         * @private\n\t         */\n\t        _updateTransform: function () {\n\t            var roamTransform = this._roamTransform;\n\t            var viewTransform = this._viewTransform;\n\n\t            viewTransform.parent = roamTransform;\n\t            roamTransform.updateTransform();\n\t            viewTransform.updateTransform();\n\n\t            viewTransform.transform\n\t                && matrix.copy(this.transform || (this.transform = []), viewTransform.transform);\n\n\t            if (this.transform) {\n\t                this.invTransform = this.invTransform || [];\n\t                matrix.invert(this.invTransform, this.transform);\n\t            }\n\t            else {\n\t                this.invTransform = null;\n\t            }\n\t            this.decomposeTransform();\n\t        },\n\n\t        /**\n\t         * @return {module:zrender/core/BoundingRect}\n\t         */\n\t        getViewRect: function () {\n\t            return this._viewRect;\n\t        },\n\n\t        /**\n\t         * Get view rect after roam transform\n\t         * @return {module:zrender/core/BoundingRect}\n\t         */\n\t        getViewRectAfterRoam: function () {\n\t            var rect = this.getBoundingRect().clone();\n\t            rect.applyTransform(this.transform);\n\t            return rect;\n\t        },\n\n\t        /**\n\t         * Convert a single (lon, lat) data item to (x, y) point.\n\t         * @param {Array.<number>} data\n\t         * @return {Array.<number>}\n\t         */\n\t        dataToPoint: function (data) {\n\t            var transform = this.transform;\n\t            return transform\n\t                ? v2ApplyTransform([], data, transform)\n\t                : [data[0], data[1]];\n\t        },\n\n\t        /**\n\t         * Convert a (x, y) point to (lon, lat) data\n\t         * @param {Array.<number>} point\n\t         * @return {Array.<number>}\n\t         */\n\t        pointToData: function (point) {\n\t            var invTransform = this.invTransform;\n\t            return invTransform\n\t                ? v2ApplyTransform([], point, invTransform)\n\t                : [point[0], point[1]];\n\t        },\n\n\t        /**\n\t         * @implements\n\t         * see {module:echarts/CoodinateSystem}\n\t         */\n\t        convertToPixel: zrUtil.curry(doConvert, 'dataToPoint'),\n\n\t        /**\n\t         * @implements\n\t         * see {module:echarts/CoodinateSystem}\n\t         */\n\t        convertFromPixel: zrUtil.curry(doConvert, 'pointToData'),\n\n\t        /**\n\t         * @implements\n\t         * see {module:echarts/CoodinateSystem}\n\t         */\n\t        containPoint: function (point) {\n\t            return this.getViewRectAfterRoam().contain(point[0], point[1]);\n\t        }\n\n\t        /**\n\t         * @return {number}\n\t         */\n\t        // getScalarScale: function () {\n\t        //     // Use determinant square root of transform to mutiply scalar\n\t        //     var m = this.transform;\n\t        //     var det = Math.sqrt(Math.abs(m[0] * m[3] - m[2] * m[1]));\n\t        //     return det;\n\t        // }\n\t    };\n\n\t    zrUtil.mixin(View, Transformable);\n\n\t    function doConvert(methodName, ecModel, finder, value) {\n\t        var seriesModel = finder.seriesModel;\n\t        var coordSys = seriesModel ? seriesModel.coordinateSystem : null; // e.g., graph.\n\t        return coordSys === this ? coordSys[methodName](value) : null;\n\t    }\n\n\t    module.exports = View;\n\n\n/***/ },\n/* 172 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Fix for 南海诸岛\n\n\n\t    var Region = __webpack_require__(169);\n\n\t    var geoCoord = [126, 25];\n\n\t    var points = [\n\t        [[0,3.5],[7,11.2],[15,11.9],[30,7],[42,0.7],[52,0.7],\n\t         [56,7.7],[59,0.7],[64,0.7],[64,0],[5,0],[0,3.5]],\n\t        [[13,16.1],[19,14.7],[16,21.7],[11,23.1],[13,16.1]],\n\t        [[12,32.2],[14,38.5],[15,38.5],[13,32.2],[12,32.2]],\n\t        [[16,47.6],[12,53.2],[13,53.2],[18,47.6],[16,47.6]],\n\t        [[6,64.4],[8,70],[9,70],[8,64.4],[6,64.4]],\n\t        [[23,82.6],[29,79.8],[30,79.8],[25,82.6],[23,82.6]],\n\t        [[37,70.7],[43,62.3],[44,62.3],[39,70.7],[37,70.7]],\n\t        [[48,51.1],[51,45.5],[53,45.5],[50,51.1],[48,51.1]],\n\t        [[51,35],[51,28.7],[53,28.7],[53,35],[51,35]],\n\t        [[52,22.4],[55,17.5],[56,17.5],[53,22.4],[52,22.4]],\n\t        [[58,12.6],[62,7],[63,7],[60,12.6],[58,12.6]],\n\t        [[0,3.5],[0,93.1],[64,93.1],[64,0],[63,0],[63,92.4],\n\t         [1,92.4],[1,3.5],[0,3.5]]\n\t    ];\n\t    for (var i = 0; i < points.length; i++) {\n\t        for (var k = 0; k < points[i].length; k++) {\n\t            points[i][k][0] /= 10.5;\n\t            points[i][k][1] /= -10.5 / 0.75;\n\n\t            points[i][k][0] += geoCoord[0];\n\t            points[i][k][1] += geoCoord[1];\n\t        }\n\t    }\n\t    module.exports = function (geo) {\n\t        if (geo.map === 'china') {\n\t            geo.regions.push(new Region(\n\t                '南海诸岛', points, geoCoord\n\t            ));\n\t        }\n\t    };\n\n\n/***/ },\n/* 173 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var coordsOffsetMap = {\n\t        '南海诸岛' : [32, 80],\n\t        // 全国\n\t        '广东': [0, -10],\n\t        '香港': [10, 5],\n\t        '澳门': [-10, 10],\n\t        //'北京': [-10, 0],\n\t        '天津': [5, 5]\n\t    };\n\n\t    module.exports = function (geo) {\n\t        zrUtil.each(geo.regions, function (region) {\n\t            var coordFix = coordsOffsetMap[region.name];\n\t            if (coordFix) {\n\t                var cp = region.center;\n\t                cp[0] += coordFix[0] / 10.5;\n\t                cp[1] += -coordFix[1] / (10.5 / 0.75);\n\t            }\n\t        });\n\t    };\n\n\n/***/ },\n/* 174 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var geoCoordMap = {\n\t        'Russia': [100, 60],\n\t        'United States of America': [-99, 38]\n\t    };\n\n\t    module.exports = function (geo) {\n\t        zrUtil.each(geo.regions, function (region) {\n\t            var geoCoord = geoCoordMap[region.name];\n\t            if (geoCoord) {\n\t                var cp = region.center;\n\t                cp[0] = geoCoord[0];\n\t                cp[1] = geoCoord[1];\n\t            }\n\t        });\n\t    };\n\n\n/***/ },\n/* 175 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    // var zrUtil = require('zrender/lib/core/util');\n\t    var graphic = __webpack_require__(43);\n\n\t    var MapDraw = __webpack_require__(176);\n\n\t    __webpack_require__(1).extendChartView({\n\n\t        type: 'map',\n\n\t        render: function (mapModel, ecModel, api, payload) {\n\t            // Not render if it is an toggleSelect action from self\n\t            if (payload && payload.type === 'mapToggleSelect'\n\t                && payload.from === this.uid\n\t            ) {\n\t                return;\n\t            }\n\n\t            var group = this.group;\n\t            group.removeAll();\n\n\t            if (mapModel.getHostGeoModel()) {\n\t                return;\n\t            }\n\n\t            // Not update map if it is an roam action from self\n\t            if (!(payload && payload.type === 'geoRoam'\n\t                    && payload.componentType === 'series'\n\t                    && payload.seriesId === mapModel.id\n\t                )\n\t            ) {\n\t                if (mapModel.needsDrawMap) {\n\t                    var mapDraw = this._mapDraw || new MapDraw(api, true);\n\t                    group.add(mapDraw.group);\n\n\t                    mapDraw.draw(mapModel, ecModel, api, this, payload);\n\n\t                    this._mapDraw = mapDraw;\n\t                }\n\t                else {\n\t                    // Remove drawed map\n\t                    this._mapDraw && this._mapDraw.remove();\n\t                    this._mapDraw = null;\n\t                }\n\t            }\n\t            else {\n\t                var mapDraw = this._mapDraw;\n\t                mapDraw && group.add(mapDraw.group);\n\t            }\n\n\t            mapModel.get('showLegendSymbol') && ecModel.getComponent('legend')\n\t                && this._renderSymbols(mapModel, ecModel, api);\n\t        },\n\n\t        remove: function () {\n\t            this._mapDraw && this._mapDraw.remove();\n\t            this._mapDraw = null;\n\t            this.group.removeAll();\n\t        },\n\n\t        dispose: function () {\n\t            this._mapDraw && this._mapDraw.remove();\n\t            this._mapDraw = null;\n\t        },\n\n\t        _renderSymbols: function (mapModel, ecModel, api) {\n\t            var originalData = mapModel.originalData;\n\t            var group = this.group;\n\n\t            originalData.each('value', function (value, idx) {\n\t                if (isNaN(value)) {\n\t                    return;\n\t                }\n\n\t                var layout = originalData.getItemLayout(idx);\n\n\t                if (!layout || !layout.point) {\n\t                    // Not exists in map\n\t                    return;\n\t                }\n\n\t                var point = layout.point;\n\t                var offset = layout.offset;\n\n\t                var circle = new graphic.Circle({\n\t                    style: {\n\t                        // Because the special of map draw.\n\t                        // Which needs statistic of multiple series and draw on one map.\n\t                        // And each series also need a symbol with legend color\n\t                        //\n\t                        // Layout and visual are put one the different data\n\t                        fill: mapModel.getData().getVisual('color')\n\t                    },\n\t                    shape: {\n\t                        cx: point[0] + offset * 9,\n\t                        cy: point[1],\n\t                        r: 3\n\t                    },\n\t                    silent: true,\n\t                    z2: 10\n\t                });\n\n\t                // First data on the same region\n\t                if (!offset) {\n\t                    var fullData = mapModel.mainSeries.getData();\n\t                    var name = originalData.getName(idx);\n\t                    var labelText = name;\n\t                    var fullIndex = fullData.indexOfName(name);\n\n\t                    var itemModel = originalData.getItemModel(idx);\n\t                    var labelModel = itemModel.getModel('label.normal');\n\t                    var hoverLabelModel = itemModel.getModel('label.emphasis');\n\n\t                    var textStyleModel = labelModel.getModel('textStyle');\n\t                    var hoverTextStyleModel = hoverLabelModel.getModel('textStyle');\n\n\t                    var polygonGroups = fullData.getItemGraphicEl(fullIndex);\n\t                    circle.setStyle({\n\t                        textPosition: 'bottom'\n\t                    });\n\n\t                    var onEmphasis = function () {\n\t                        circle.setStyle({\n\t                            text: hoverLabelModel.get('show') ? labelText : '',\n\t                            textFill: hoverTextStyleModel.getTextColor(),\n\t                            textFont: hoverTextStyleModel.getFont()\n\t                        });\n\t                    };\n\n\t                    var onNormal = function () {\n\t                        circle.setStyle({\n\t                            text: labelModel.get('show') ? labelText : '',\n\t                            textFill: textStyleModel.getTextColor(),\n\t                            textFont: textStyleModel.getFont()\n\t                        });\n\t                    };\n\n\t                    polygonGroups.on('mouseover', onEmphasis)\n\t                        .on('mouseout', onNormal)\n\t                        .on('emphasis', onEmphasis)\n\t                        .on('normal', onNormal);\n\n\t                    onNormal();\n\t                }\n\n\t                group.add(circle);\n\t            });\n\t        }\n\t    });\n\n\n/***/ },\n/* 176 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @module echarts/component/helper/MapDraw\n\t */\n\n\n\t    var RoamController = __webpack_require__(177);\n\t    var graphic = __webpack_require__(43);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    function getFixedItemStyle(model, scale) {\n\t        var itemStyle = model.getItemStyle();\n\t        var areaColor = model.get('areaColor');\n\n\t        // If user want the color not to be changed when hover,\n\t        // they should both set areaColor and color to be null.\n\t        if (areaColor != null) {\n\t            itemStyle.fill = areaColor;\n\t        }\n\n\t        return itemStyle;\n\t    }\n\n\t    function updateMapSelectHandler(mapDraw, mapOrGeoModel, group, api, fromView) {\n\t        group.off('click');\n\t        group.off('mousedown');\n\n\t        if (mapOrGeoModel.get('selectedMode')) {\n\n\t            group.on('mousedown', function () {\n\t                mapDraw._mouseDownFlag = true;\n\t            });\n\n\t            group.on('click', function (e) {\n\t                if (!mapDraw._mouseDownFlag) {\n\t                    return;\n\t                }\n\t                mapDraw._mouseDownFlag = false;\n\n\t                var el = e.target;\n\t                while (!el.__region) {\n\t                    el = el.parent;\n\t                }\n\t                if (!el) {\n\t                    return;\n\t                }\n\n\t                var region = el.__region;\n\t                var action = {\n\t                    type: (mapOrGeoModel.mainType === 'geo' ? 'geo' : 'map') + 'ToggleSelect',\n\t                    name: region.name,\n\t                    from: fromView.uid\n\t                };\n\t                action[mapOrGeoModel.mainType + 'Id'] = mapOrGeoModel.id;\n\n\t                api.dispatchAction(action);\n\n\t                updateMapSelected(mapOrGeoModel, group);\n\t            });\n\t        }\n\t    }\n\n\t    function updateMapSelected(mapOrGeoModel, group) {\n\t        // FIXME\n\t        group.eachChild(function (otherRegionEl) {\n\t            if (otherRegionEl.__region) {\n\t                otherRegionEl.trigger(mapOrGeoModel.isSelected(otherRegionEl.__region.name) ? 'emphasis' : 'normal');\n\t            }\n\t        });\n\t    }\n\n\t    /**\n\t     * @alias module:echarts/component/helper/MapDraw\n\t     * @param {module:echarts/ExtensionAPI} api\n\t     * @param {boolean} updateGroup\n\t     */\n\t    function MapDraw(api, updateGroup) {\n\n\t        var group = new graphic.Group();\n\n\t        /**\n\t         * @type {module:echarts/component/helper/RoamController}\n\t         * @private\n\t         */\n\t        this._controller = new RoamController(\n\t            api.getZr(), updateGroup ? group : null, null\n\t        );\n\n\t        /**\n\t         * @type {module:zrender/container/Group}\n\t         * @readOnly\n\t         */\n\t        this.group = group;\n\n\t        /**\n\t         * @type {boolean}\n\t         * @private\n\t         */\n\t        this._updateGroup = updateGroup;\n\n\t        /**\n\t         * This flag is used to make sure that only one among\n\t         * `pan`, `zoom`, `click` can occurs, otherwise 'selected'\n\t         * action may be triggered when `pan`, which is unexpected.\n\t         * @type {booelan}\n\t         */\n\t        this._mouseDownFlag;\n\t    }\n\n\t    MapDraw.prototype = {\n\n\t        constructor: MapDraw,\n\n\t        draw: function (mapOrGeoModel, ecModel, api, fromView, payload) {\n\n\t            var isGeo = mapOrGeoModel.mainType === 'geo';\n\n\t            // map series has data, geo model that controlled by map series\n\t            // has no data, otherwise data exists.\n\t            var data = mapOrGeoModel.getData && mapOrGeoModel.getData();\n\t            isGeo && ecModel.eachComponent({mainType: 'series', subType: 'map'}, function (mapSeries) {\n\t                if (!data && mapSeries.getHostGeoModel() === mapOrGeoModel) {\n\t                    data = mapSeries.getData();\n\t                }\n\t            });\n\n\t            var geo = mapOrGeoModel.coordinateSystem;\n\n\t            var group = this.group;\n\n\t            var scale = geo.scale;\n\t            var groupNewProp = {\n\t                position: geo.position,\n\t                scale: scale\n\t            };\n\n\t            // No animation when first draw or in action\n\t            if (!group.childAt(0) || payload) {\n\t                group.attr(groupNewProp);\n\t            }\n\t            else {\n\t                graphic.updateProps(group, groupNewProp, mapOrGeoModel);\n\t            }\n\n\t            group.removeAll();\n\n\t            var itemStyleAccessPath = ['itemStyle', 'normal'];\n\t            var hoverItemStyleAccessPath = ['itemStyle', 'emphasis'];\n\t            var labelAccessPath = ['label', 'normal'];\n\t            var hoverLabelAccessPath = ['label', 'emphasis'];\n\n\t            zrUtil.each(geo.regions, function (region) {\n\n\t                var regionGroup = new graphic.Group();\n\t                var compoundPath = new graphic.CompoundPath({\n\t                    shape: {\n\t                        paths: []\n\t                    }\n\t                });\n\t                regionGroup.add(compoundPath);\n\n\t                var regionModel = mapOrGeoModel.getRegionModel(region.name) || mapOrGeoModel;\n\n\t                var itemStyleModel = regionModel.getModel(itemStyleAccessPath);\n\t                var hoverItemStyleModel = regionModel.getModel(hoverItemStyleAccessPath);\n\t                var itemStyle = getFixedItemStyle(itemStyleModel, scale);\n\t                var hoverItemStyle = getFixedItemStyle(hoverItemStyleModel, scale);\n\n\t                var labelModel = regionModel.getModel(labelAccessPath);\n\t                var hoverLabelModel = regionModel.getModel(hoverLabelAccessPath);\n\n\t                var dataIdx;\n\t                // Use the itemStyle in data if has data\n\t                if (data) {\n\t                    dataIdx = data.indexOfName(region.name);\n\t                    // Only visual color of each item will be used. It can be encoded by dataRange\n\t                    // But visual color of series is used in symbol drawing\n\t                    //\n\t                    // Visual color for each series is for the symbol draw\n\t                    var visualColor = data.getItemVisual(dataIdx, 'color', true);\n\t                    if (visualColor) {\n\t                        itemStyle.fill = visualColor;\n\t                    }\n\t                }\n\n\t                var textStyleModel = labelModel.getModel('textStyle');\n\t                var hoverTextStyleModel = hoverLabelModel.getModel('textStyle');\n\n\t                zrUtil.each(region.contours, function (contour) {\n\n\t                    var polygon = new graphic.Polygon({\n\t                        shape: {\n\t                            points: contour\n\t                        }\n\t                    });\n\n\t                    compoundPath.shape.paths.push(polygon);\n\t                });\n\n\t                compoundPath.setStyle(itemStyle);\n\t                compoundPath.style.strokeNoScale = true;\n\t                compoundPath.culling = true;\n\t                // Label\n\t                var showLabel = labelModel.get('show');\n\t                var hoverShowLabel = hoverLabelModel.get('show');\n\n\t                var isDataNaN = data && isNaN(data.get('value', dataIdx));\n\t                var itemLayout = data && data.getItemLayout(dataIdx);\n\t                // In the following cases label will be drawn\n\t                // 1. In map series and data value is NaN\n\t                // 2. In geo component\n\t                // 4. Region has no series legendSymbol, which will be add a showLabel flag in mapSymbolLayout\n\t                if (\n\t                    (isGeo || isDataNaN && (showLabel || hoverShowLabel))\n\t                 || (itemLayout && itemLayout.showLabel)\n\t                 ) {\n\t                    var query = data ? dataIdx : region.name;\n\t                    var formattedStr = mapOrGeoModel.getFormattedLabel(query, 'normal');\n\t                    var hoverFormattedStr = mapOrGeoModel.getFormattedLabel(query, 'emphasis');\n\t                    var text = new graphic.Text({\n\t                        style: {\n\t                            text: showLabel ? (formattedStr || region.name) : '',\n\t                            fill: textStyleModel.getTextColor(),\n\t                            textFont: textStyleModel.getFont(),\n\t                            textAlign: 'center',\n\t                            textVerticalAlign: 'middle'\n\t                        },\n\t                        hoverStyle: {\n\t                            text: hoverShowLabel ? (hoverFormattedStr || region.name) : '',\n\t                            fill: hoverTextStyleModel.getTextColor(),\n\t                            textFont: hoverTextStyleModel.getFont()\n\t                        },\n\t                        position: region.center.slice(),\n\t                        scale: [1 / scale[0], 1 / scale[1]],\n\t                        z2: 10,\n\t                        silent: true\n\t                    });\n\n\t                    regionGroup.add(text);\n\t                }\n\n\t                // setItemGraphicEl, setHoverStyle after all polygons and labels\n\t                // are added to the rigionGroup\n\t                if (data) {\n\t                    data.setItemGraphicEl(dataIdx, regionGroup);\n\t                }\n\t                else {\n\t                    var regionModel = mapOrGeoModel.getRegionModel(region.name);\n\t                    // Package custom mouse event for geo component\n\t                    compoundPath.eventData = {\n\t                        componentType: 'geo',\n\t                        geoIndex: mapOrGeoModel.componentIndex,\n\t                        name: region.name,\n\t                        region: (regionModel && regionModel.option) || {}\n\t                    };\n\t                }\n\n\t                regionGroup.__region = region;\n\n\t                graphic.setHoverStyle(\n\t                    regionGroup,\n\t                    hoverItemStyle,\n\t                    {hoverSilentOnTouch: !!mapOrGeoModel.get('selectedMode')}\n\t                );\n\n\t                group.add(regionGroup);\n\t            });\n\n\t            this._updateController(mapOrGeoModel, ecModel, api);\n\n\t            updateMapSelectHandler(this, mapOrGeoModel, group, api, fromView);\n\n\t            updateMapSelected(mapOrGeoModel, group);\n\t        },\n\n\t        remove: function () {\n\t            this.group.removeAll();\n\t            this._controller.dispose();\n\t        },\n\n\t        _updateController: function (mapOrGeoModel, ecModel, api) {\n\t            var geo = mapOrGeoModel.coordinateSystem;\n\t            var controller = this._controller;\n\t            controller.zoomLimit = mapOrGeoModel.get('scaleLimit');\n\t            // Update zoom from model\n\t            controller.zoom = geo.getZoom();\n\t            // roamType is will be set default true if it is null\n\t            controller.enable(mapOrGeoModel.get('roam') || false);\n\t            var mainType = mapOrGeoModel.mainType;\n\n\t            function makeActionBase() {\n\t                var action = {\n\t                    type: 'geoRoam',\n\t                    componentType: mainType\n\t                };\n\t                action[mainType + 'Id'] = mapOrGeoModel.id;\n\t                return action;\n\t            }\n\n\t            controller.off('pan').on('pan', function (dx, dy) {\n\t                this._mouseDownFlag = false;\n\n\t                api.dispatchAction(zrUtil.extend(makeActionBase(), {\n\t                    dx: dx,\n\t                    dy: dy\n\t                }));\n\t            }, this);\n\n\t            controller.off('zoom').on('zoom', function (zoom, mouseX, mouseY) {\n\t                this._mouseDownFlag = false;\n\n\t                api.dispatchAction(zrUtil.extend(makeActionBase(), {\n\t                    zoom: zoom,\n\t                    originX: mouseX,\n\t                    originY: mouseY\n\t                }));\n\n\t                if (this._updateGroup) {\n\t                    var group = this.group;\n\t                    var scale = group.scale;\n\t                    group.traverse(function (el) {\n\t                        if (el.type === 'text') {\n\t                            el.attr('scale', [1 / scale[0], 1 / scale[1]]);\n\t                        }\n\t                    });\n\t                }\n\t            }, this);\n\n\t            controller.setContainsPoint(function (x, y) {\n\t                return geo.getViewRectAfterRoam().contain(x, y);\n\t            });\n\t        }\n\t    };\n\n\t    module.exports = MapDraw;\n\n\n/***/ },\n/* 177 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @module echarts/component/helper/RoamController\n\t */\n\n\n\n\t    var Eventful = __webpack_require__(33);\n\t    var zrUtil = __webpack_require__(4);\n\t    var eventTool = __webpack_require__(88);\n\t    var interactionMutex = __webpack_require__(178);\n\n\t    function mousedown(e) {\n\t        if (e.target && e.target.draggable) {\n\t            return;\n\t        }\n\n\t        var x = e.offsetX;\n\t        var y = e.offsetY;\n\n\t        if (this.containsPoint && this.containsPoint(x, y)) {\n\t            this._x = x;\n\t            this._y = y;\n\t            this._dragging = true;\n\t        }\n\t    }\n\n\t    function mousemove(e) {\n\t        if (!this._dragging) {\n\t            return;\n\t        }\n\n\t        eventTool.stop(e.event);\n\n\t        if (e.gestureEvent !== 'pinch') {\n\n\t            if (interactionMutex.isTaken(this._zr, 'globalPan')) {\n\t                return;\n\t            }\n\n\t            var x = e.offsetX;\n\t            var y = e.offsetY;\n\n\t            var oldX = this._x;\n\t            var oldY = this._y;\n\n\t            var dx = x - oldX;\n\t            var dy = y - oldY;\n\n\t            this._x = x;\n\t            this._y = y;\n\n\t            var target = this.target;\n\n\t            if (target) {\n\t                var pos = target.position;\n\t                pos[0] += dx;\n\t                pos[1] += dy;\n\t                target.dirty();\n\t            }\n\n\t            eventTool.stop(e.event);\n\t            this.trigger('pan', dx, dy, oldX, oldY, x, y);\n\t        }\n\t    }\n\n\t    function mouseup(e) {\n\t        this._dragging = false;\n\t    }\n\n\t    function mousewheel(e) {\n\t        // Convenience:\n\t        // Mac and VM Windows on Mac: scroll up: zoom out.\n\t        // Windows: scroll up: zoom in.\n\t        var zoomDelta = e.wheelDelta > 0 ? 1.1 : 1 / 1.1;\n\t        zoom.call(this, e, zoomDelta, e.offsetX, e.offsetY);\n\t    }\n\n\t    function pinch(e) {\n\t        if (interactionMutex.isTaken(this._zr, 'globalPan')) {\n\t            return;\n\t        }\n\t        var zoomDelta = e.pinchScale > 1 ? 1.1 : 1 / 1.1;\n\t        zoom.call(this, e, zoomDelta, e.pinchX, e.pinchY);\n\t    }\n\n\t    function zoom(e, zoomDelta, zoomX, zoomY) {\n\t        if (this.containsPoint && this.containsPoint(zoomX, zoomY)) {\n\t            // When mouse is out of roamController rect,\n\t            // default befavoius should be be disabled, otherwise\n\t            // page sliding is disabled, contrary to expectation.\n\t            eventTool.stop(e.event);\n\n\t            var target = this.target;\n\t            var zoomLimit = this.zoomLimit;\n\n\t            if (target) {\n\t                var pos = target.position;\n\t                var scale = target.scale;\n\n\t                var newZoom = this.zoom = this.zoom || 1;\n\t                newZoom *= zoomDelta;\n\t                if (zoomLimit) {\n\t                    var zoomMin = zoomLimit.min || 0;\n\t                    var zoomMax = zoomLimit.max || Infinity;\n\t                    newZoom = Math.max(\n\t                        Math.min(zoomMax, newZoom),\n\t                        zoomMin\n\t                    );\n\t                }\n\t                var zoomScale = newZoom / this.zoom;\n\t                this.zoom = newZoom;\n\t                // Keep the mouse center when scaling\n\t                pos[0] -= (zoomX - pos[0]) * (zoomScale - 1);\n\t                pos[1] -= (zoomY - pos[1]) * (zoomScale - 1);\n\t                scale[0] *= zoomScale;\n\t                scale[1] *= zoomScale;\n\n\t                target.dirty();\n\t            }\n\n\t            this.trigger('zoom', zoomDelta, zoomX, zoomY);\n\t        }\n\t    }\n\n\t    /**\n\t     * @alias module:echarts/component/helper/RoamController\n\t     * @constructor\n\t     * @mixin {module:zrender/mixin/Eventful}\n\t     *\n\t     * @param {module:zrender/zrender~ZRender} zr\n\t     * @param {module:zrender/Element} target\n\t     */\n\t    function RoamController(zr, target) {\n\n\t        /**\n\t         * @type {module:zrender/Element}\n\t         */\n\t        this.target = target;\n\n\t        /**\n\t         * @type {Function}\n\t         */\n\t        this.containsPoint;\n\n\t        /**\n\t         * { min: 1, max: 2 }\n\t         * @type {Object}\n\t         */\n\t        this.zoomLimit;\n\n\t        /**\n\t         * @type {number}\n\t         */\n\t        this.zoom;\n\t        /**\n\t         * @type {module:zrender}\n\t         */\n\t        this._zr = zr;\n\n\t        // Avoid two roamController bind the same handler\n\t        var bind = zrUtil.bind;\n\t        var mousedownHandler = bind(mousedown, this);\n\t        var mousemoveHandler = bind(mousemove, this);\n\t        var mouseupHandler = bind(mouseup, this);\n\t        var mousewheelHandler = bind(mousewheel, this);\n\t        var pinchHandler = bind(pinch, this);\n\n\t        Eventful.call(this);\n\n\t        /**\n\t         * @param {Function} containsPoint\n\t         *                   input: x, y\n\t         *                   output: boolean\n\t         */\n\t        this.setContainsPoint = function (containsPoint) {\n\t            this.containsPoint = containsPoint;\n\t        };\n\n\t        /**\n\t         * Notice: only enable needed types. For example, if 'zoom'\n\t         * is not needed, 'zoom' should not be enabled, otherwise\n\t         * default mousewheel behaviour (scroll page) will be disabled.\n\t         *\n\t         * @param  {boolean|string} [controlType=true] Specify the control type,\n\t         *                          which can be null/undefined or true/false\n\t         *                          or 'pan/move' or 'zoom'/'scale'\n\t         */\n\t        this.enable = function (controlType) {\n\t            // Disable previous first\n\t            this.disable();\n\n\t            if (controlType == null) {\n\t                controlType = true;\n\t            }\n\n\t            if (controlType === true || (controlType === 'move' || controlType === 'pan')) {\n\t                zr.on('mousedown', mousedownHandler);\n\t                zr.on('mousemove', mousemoveHandler);\n\t                zr.on('mouseup', mouseupHandler);\n\t            }\n\t            if (controlType === true || (controlType === 'scale' || controlType === 'zoom')) {\n\t                zr.on('mousewheel', mousewheelHandler);\n\t                zr.on('pinch', pinchHandler);\n\t            }\n\t        };\n\n\t        this.disable = function () {\n\t            zr.off('mousedown', mousedownHandler);\n\t            zr.off('mousemove', mousemoveHandler);\n\t            zr.off('mouseup', mouseupHandler);\n\t            zr.off('mousewheel', mousewheelHandler);\n\t            zr.off('pinch', pinchHandler);\n\t        };\n\n\t        this.dispose = this.disable;\n\n\t        this.isDragging = function () {\n\t            return this._dragging;\n\t        };\n\n\t        this.isPinching = function () {\n\t            return this._pinching;\n\t        };\n\t    }\n\n\t    zrUtil.mixin(RoamController, Eventful);\n\n\t    module.exports = RoamController;\n\n\n/***/ },\n/* 178 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var ATTR = '\\0_ec_interaction_mutex';\n\n\t    var interactionMutex = {\n\n\t        take: function (zr, resourceKey, userKey) {\n\t            var store = getStore(zr);\n\t            store[resourceKey] = userKey;\n\t        },\n\n\t        release: function (zr, resourceKey, userKey) {\n\t            var store = getStore(zr);\n\t            var uKey = store[resourceKey];\n\n\t            if (uKey === userKey) {\n\t                store[resourceKey] = null;\n\t            }\n\t        },\n\n\t        isTaken: function (zr, resourceKey) {\n\t            return !!getStore(zr)[resourceKey];\n\t        }\n\t    };\n\n\t    function getStore(zr) {\n\t        return zr[ATTR] || (zr[ATTR] = {});\n\t    }\n\n\t    /**\n\t     * payload: {\n\t     *     type: 'takeGlobalCursor',\n\t     *     key: 'dataZoomSelect', or 'brush', or ...,\n\t     *         If no userKey, release global cursor.\n\t     * }\n\t     */\n\t    __webpack_require__(1).registerAction(\n\t        {type: 'takeGlobalCursor', event: 'globalCursorTaken', update: 'update'},\n\t        function () {}\n\t    );\n\n\t    module.exports = interactionMutex;\n\n\n/***/ },\n/* 179 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var roamHelper = __webpack_require__(180);\n\n\t    var echarts = __webpack_require__(1);\n\n\t    /**\n\t     * @payload\n\t     * @property {string} [componentType=series]\n\t     * @property {number} [dx]\n\t     * @property {number} [dy]\n\t     * @property {number} [zoom]\n\t     * @property {number} [originX]\n\t     * @property {number} [originY]\n\t     */\n\t    echarts.registerAction({\n\t        type: 'geoRoam',\n\t        event: 'geoRoam',\n\t        update: 'updateLayout'\n\t    }, function (payload, ecModel) {\n\t        var componentType = payload.componentType || 'series';\n\n\t        ecModel.eachComponent(\n\t            { mainType: componentType, query: payload },\n\t            function (componentModel) {\n\t                var geo = componentModel.coordinateSystem;\n\t                if (geo.type !== 'geo') {\n\t                    return;\n\t                }\n\n\t                var res = roamHelper.updateCenterAndZoom(\n\t                    geo, payload, componentModel.get('scaleLimit')\n\t                );\n\n\t                componentModel.setCenter\n\t                    && componentModel.setCenter(res.center);\n\n\t                componentModel.setZoom\n\t                    && componentModel.setZoom(res.zoom);\n\n\t                // All map series with same `map` use the same geo coordinate system\n\t                // So the center and zoom must be in sync. Include the series not selected by legend\n\t                if (componentType === 'series') {\n\t                    zrUtil.each(componentModel.seriesGroup, function (seriesModel) {\n\t                        seriesModel.setCenter(res.center);\n\t                        seriesModel.setZoom(res.zoom);\n\t                    });\n\t                }\n\t            }\n\t        );\n\t    });\n\n\n/***/ },\n/* 180 */\n/***/ function(module, exports) {\n\n\t\n\n\t    var roamHelper = {};\n\n\t    /**\n\t     * @param {module:echarts/coord/View} view\n\t     * @param {Object} payload\n\t     * @param {Object} [zoomLimit]\n\t     */\n\t    roamHelper.updateCenterAndZoom = function (\n\t        view, payload, zoomLimit\n\t    ) {\n\t        var previousZoom = view.getZoom();\n\t        var center = view.getCenter();\n\t        var zoom = payload.zoom;\n\n\t        var point = view.dataToPoint(center);\n\n\t        if (payload.dx != null && payload.dy != null) {\n\t            point[0] -= payload.dx;\n\t            point[1] -= payload.dy;\n\n\t            var center = view.pointToData(point);\n\t            view.setCenter(center);\n\t        }\n\t        if (zoom != null) {\n\t            if (zoomLimit) {\n\t                var zoomMin = zoomLimit.min || 0;\n\t                var zoomMax = zoomLimit.max || Infinity;\n\t                zoom = Math.max(\n\t                    Math.min(previousZoom * zoom, zoomMax),\n\t                    zoomMin\n\t                ) / previousZoom;\n\t            }\n\n\t            // Zoom on given point(originX, originY)\n\t            view.scale[0] *= zoom;\n\t            view.scale[1] *= zoom;\n\t            var position = view.position;\n\t            var fixX = (payload.originX - position[0]) * (zoom - 1);\n\t            var fixY = (payload.originY - position[1]) * (zoom - 1);\n\n\t            position[0] -= fixX;\n\t            position[1] -= fixY;\n\n\t            view.updateTransform();\n\t            // Get the new center\n\t            var center = view.pointToData(point);\n\t            view.setCenter(center);\n\t            view.setZoom(zoom * previousZoom);\n\t        }\n\n\t        return {\n\t            center: view.getCenter(),\n\t            zoom: view.getZoom()\n\t        };\n\t    };\n\n\t    module.exports = roamHelper;\n\n\n/***/ },\n/* 181 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    module.exports = function (ecModel) {\n\n\t        var processedMapType = {};\n\n\t        ecModel.eachSeriesByType('map', function (mapSeries) {\n\t            var mapType = mapSeries.getMapType();\n\t            if (mapSeries.getHostGeoModel() || processedMapType[mapType]) {\n\t                return;\n\t            }\n\n\t            var mapSymbolOffsets = {};\n\n\t            zrUtil.each(mapSeries.seriesGroup, function (subMapSeries) {\n\t                var geo = subMapSeries.coordinateSystem;\n\t                var data = subMapSeries.originalData;\n\t                if (subMapSeries.get('showLegendSymbol') && ecModel.getComponent('legend')) {\n\t                    data.each('value', function (value, idx) {\n\t                        var name = data.getName(idx);\n\t                        var region = geo.getRegion(name);\n\n\t                        // If input series.data is [11, 22, '-'/null/undefined, 44],\n\t                        // it will be filled with NaN: [11, 22, NaN, 44] and NaN will\n\t                        // not be drawn. So here must validate if value is NaN.\n\t                        if (!region || isNaN(value)) {\n\t                            return;\n\t                        }\n\n\t                        var offset = mapSymbolOffsets[name] || 0;\n\n\t                        var point = geo.dataToPoint(region.center);\n\n\t                        mapSymbolOffsets[name] = offset + 1;\n\n\t                        data.setItemLayout(idx, {\n\t                            point: point,\n\t                            offset: offset\n\t                        });\n\t                    });\n\t                }\n\t            });\n\n\t            // Show label of those region not has legendSymbol(which is offset 0)\n\t            var data = mapSeries.getData();\n\t            data.each(function (idx) {\n\t                var name = data.getName(idx);\n\t                var layout = data.getItemLayout(idx) || {};\n\t                layout.showLabel = !mapSymbolOffsets[name];\n\t                data.setItemLayout(idx, layout);\n\t            });\n\n\t            processedMapType[mapType] = true;\n\t        });\n\t    };\n\n\n/***/ },\n/* 182 */\n/***/ function(module, exports) {\n\n\t\n\t    module.exports = function (ecModel) {\n\t        ecModel.eachSeriesByType('map', function (seriesModel) {\n\t            var colorList = seriesModel.get('color');\n\t            var itemStyleModel = seriesModel.getModel('itemStyle.normal');\n\n\t            var areaColor = itemStyleModel.get('areaColor');\n\t            var color = itemStyleModel.get('color')\n\t                || colorList[seriesModel.seriesIndex % colorList.length];\n\n\t            seriesModel.getData().setVisual({\n\t                'areaColor': areaColor,\n\t                'color': color\n\t            });\n\t        });\n\t    };\n\n\n/***/ },\n/* 183 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    // FIXME 公用？\n\t    /**\n\t     * @param {Array.<module:echarts/data/List>} datas\n\t     * @param {string} statisticType 'average' 'sum'\n\t     * @inner\n\t     */\n\t    function dataStatistics(datas, statisticType) {\n\t        var dataNameMap = {};\n\t        var dims = ['value'];\n\n\t        zrUtil.each(datas, function (data) {\n\t            data.each(dims, function (value, idx) {\n\t                var name = data.getName(idx);\n\t                dataNameMap[name] = dataNameMap[name] || [];\n\t                if (!isNaN(value)) {\n\t                    dataNameMap[name].push(value);\n\t                }\n\t            });\n\t        });\n\n\t        return datas[0].map(dims, function (value, idx) {\n\t            var name = datas[0].getName(idx);\n\t            var sum = 0;\n\t            var min = Infinity;\n\t            var max = -Infinity;\n\t            var len = dataNameMap[name].length;\n\t            for (var i = 0; i < len; i++) {\n\t                min = Math.min(min, dataNameMap[name][i]);\n\t                max = Math.max(max, dataNameMap[name][i]);\n\t                sum += dataNameMap[name][i];\n\t            }\n\t            var result;\n\t            if (statisticType === 'min') {\n\t                result = min;\n\t            }\n\t            else if (statisticType === 'max') {\n\t                result = max;\n\t            }\n\t            else if (statisticType === 'average') {\n\t                result = sum / len;\n\t            }\n\t            else {\n\t                result = sum;\n\t            }\n\t            return len === 0 ? NaN : result;\n\t        });\n\t    }\n\n\t    module.exports = function (ecModel) {\n\t        var seriesGroups = {};\n\t        ecModel.eachSeriesByType('map', function (seriesModel) {\n\t            var hostGeoModel = seriesModel.getHostGeoModel();\n\t            var key = hostGeoModel ? 'o' + hostGeoModel.id : 'i' + seriesModel.getMapType();\n\t            (seriesGroups[key] = seriesGroups[key] || []).push(seriesModel);\n\t        });\n\n\t        zrUtil.each(seriesGroups, function (seriesList, key) {\n\t            var data = dataStatistics(\n\t                zrUtil.map(seriesList, function (seriesModel) {\n\t                    return seriesModel.getData();\n\t                }),\n\t                seriesList[0].get('mapValueCalculation')\n\t            );\n\n\t            for (var i = 0; i < seriesList.length; i++) {\n\t                seriesList[i].originalData = seriesList[i].getData();\n\t            }\n\n\t            // FIXME Put where?\n\t            for (var i = 0; i < seriesList.length; i++) {\n\t                seriesList[i].seriesGroup = seriesList;\n\t                seriesList[i].needsDrawMap = i === 0 && !seriesList[i].getHostGeoModel();\n\n\t                seriesList[i].setData(data.cloneShallow());\n\t                seriesList[i].mainSeries = seriesList[0];\n\t            }\n\t        });\n\t    };\n\n\n/***/ },\n/* 184 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    module.exports = function (option) {\n\t        // Save geoCoord\n\t        var mapSeries = [];\n\t        zrUtil.each(option.series, function (seriesOpt) {\n\t            if (seriesOpt.type === 'map') {\n\t                mapSeries.push(seriesOpt);\n\t            }\n\t        });\n\n\t        zrUtil.each(mapSeries, function (seriesOpt) {\n\t            seriesOpt.map = seriesOpt.map || seriesOpt.mapType;\n\t            // Put x, y, width, height, x2, y2 in the top level\n\t            zrUtil.defaults(seriesOpt, seriesOpt.mapLocation);\n\t        });\n\t    };\n\n\n/***/ },\n/* 185 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var echarts = __webpack_require__(1);\n\n\t    __webpack_require__(186);\n\t    __webpack_require__(190);\n\t    __webpack_require__(193);\n\n\t    echarts.registerVisual(__webpack_require__(194));\n\n\t    echarts.registerLayout(__webpack_require__(196));\n\n\n/***/ },\n/* 186 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var SeriesModel = __webpack_require__(28);\n\t    var Tree = __webpack_require__(187);\n\t    var zrUtil = __webpack_require__(4);\n\t    var Model = __webpack_require__(12);\n\t    var formatUtil = __webpack_require__(6);\n\t    var helper = __webpack_require__(189);\n\t    var encodeHTML = formatUtil.encodeHTML;\n\t    var addCommas = formatUtil.addCommas;\n\n\n\t    module.exports = SeriesModel.extend({\n\n\t        type: 'series.treemap',\n\n\t        layoutMode: 'box',\n\n\t        dependencies: ['grid', 'polar'],\n\n\t        /**\n\t         * @type {module:echarts/data/Tree~Node}\n\t         */\n\t        _viewRoot: null,\n\n\t        defaultOption: {\n\t            // Disable progressive rendering\n\t            progressive: 0,\n\t            hoverLayerThreshold: Infinity,\n\t            // center: ['50%', '50%'],          // not supported in ec3.\n\t            // size: ['80%', '80%'],            // deprecated, compatible with ec2.\n\t            left: 'center',\n\t            top: 'middle',\n\t            right: null,\n\t            bottom: null,\n\t            width: '80%',\n\t            height: '80%',\n\t            sort: true,                         // Can be null or false or true\n\t                                                // (order by desc default, asc not supported yet (strange effect))\n\t            clipWindow: 'origin',               // Size of clipped window when zooming. 'origin' or 'fullscreen'\n\t            squareRatio: 0.5 * (1 + Math.sqrt(5)), // golden ratio\n\t            leafDepth: null,                    // Nodes on depth from root are regarded as leaves.\n\t                                                // Count from zero (zero represents only view root).\n\t            drillDownIcon: '▶',                 // Use html character temporarily because it is complicated\n\t                                                // to align specialized icon. ▷▶❒❐▼✚\n\n\t            zoomToNodeRatio: 0.32 * 0.32,       // Be effective when using zoomToNode. Specify the proportion of the\n\t                                                // target node area in the view area.\n\t            roam: true,                         // true, false, 'scale' or 'zoom', 'move'.\n\t            nodeClick: 'zoomToNode',            // Leaf node click behaviour: 'zoomToNode', 'link', false.\n\t                                                // If leafDepth is set and clicking a node which has children but\n\t                                                // be on left depth, the behaviour would be changing root. Otherwise\n\t                                                // use behavious defined above.\n\t            animation: true,\n\t            animationDurationUpdate: 900,\n\t            animationEasing: 'quinticInOut',\n\t            breadcrumb: {\n\t                show: true,\n\t                height: 22,\n\t                left: 'center',\n\t                top: 'bottom',\n\t                // right\n\t                // bottom\n\t                emptyItemWidth: 25,             // Width of empty node.\n\t                itemStyle: {\n\t                    normal: {\n\t                        color: 'rgba(0,0,0,0.7)', //'#5793f3',\n\t                        borderColor: 'rgba(255,255,255,0.7)',\n\t                        borderWidth: 1,\n\t                        shadowColor: 'rgba(150,150,150,1)',\n\t                        shadowBlur: 3,\n\t                        shadowOffsetX: 0,\n\t                        shadowOffsetY: 0,\n\t                        textStyle: {\n\t                            color: '#fff'\n\t                        }\n\t                    },\n\t                    emphasis: {\n\t                        textStyle: {}\n\t                    }\n\t                }\n\t            },\n\t            label: {\n\t                normal: {\n\t                    show: true,\n\t                    position: 'inside', // Can be [5, '5%'] or position stirng like 'insideTopLeft', ...\n\t                    textStyle: {\n\t                        color: '#fff',\n\t                        ellipsis: true\n\t                    }\n\t                }\n\t            },\n\t            itemStyle: {\n\t                normal: {\n\t                    color: null,            // Can be 'none' if not necessary.\n\t                    colorAlpha: null,       // Can be 'none' if not necessary.\n\t                    colorSaturation: null,  // Can be 'none' if not necessary.\n\t                    borderWidth: 0,\n\t                    gapWidth: 0,\n\t                    borderColor: '#fff',\n\t                    borderColorSaturation: null // If specified, borderColor will be ineffective, and the\n\t                                                // border color is evaluated by color of current node and\n\t                                                // borderColorSaturation.\n\t                },\n\t                emphasis: {\n\n\t                }\n\t            },\n\n\t            visualDimension: 0,                 // Can be 0, 1, 2, 3.\n\t            visualMin: null,\n\t            visualMax: null,\n\n\t            color: [],                  // + treemapSeries.color should not be modified. Please only modified\n\t                                        // level[n].color (if necessary).\n\t                                        // + Specify color list of each level. level[0].color would be global\n\t                                        // color list if not specified. (see method `setDefault`).\n\t                                        // + But set as a empty array to forbid fetch color from global palette\n\t                                        // when using nodeModel.get('color'), otherwise nodes on deep level\n\t                                        // will always has color palette set and are not able to inherit color\n\t                                        // from parent node.\n\t                                        // + TreemapSeries.color can not be set as 'none', otherwise effect\n\t                                        // legend color fetching (see seriesColor.js).\n\t            colorAlpha: null,           // Array. Specify color alpha range of each level, like [0.2, 0.8]\n\t            colorSaturation: null,      // Array. Specify color saturation of each level, like [0.2, 0.5]\n\t            colorMappingBy: 'index',    // 'value' or 'index' or 'id'.\n\t            visibleMin: 10,             // If area less than this threshold (unit: pixel^2), node will not\n\t                                        // be rendered. Only works when sort is 'asc' or 'desc'.\n\t            childrenVisibleMin: null,   // If area of a node less than this threshold (unit: pixel^2),\n\t                                        // grandchildren will not show.\n\t                                        // Why grandchildren? If not grandchildren but children,\n\t                                        // some siblings show children and some not,\n\t                                        // the appearance may be mess and not consistent,\n\t            levels: []                  // Each item: {\n\t                                        //     visibleMin, itemStyle, visualDimension, label\n\t                                        // }\n\t            // data: {\n\t            //      value: [],\n\t            //      children: [],\n\t            //      link: 'http://xxx.xxx.xxx',\n\t            //      target: 'blank' or 'self'\n\t            // }\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        getInitialData: function (option, ecModel) {\n\t            var data = option.data || [];\n\t            var rootName = option.name;\n\t            rootName == null && (rootName = option.name);\n\n\t            // Create a virtual root.\n\t            var root = {name: rootName, children: option.data};\n\t            var value0 = (data[0] || {}).value;\n\n\t            completeTreeValue(root, zrUtil.isArray(value0) ? value0.length : -1);\n\n\t            // FIXME\n\t            // sereis.mergeOption 的 getInitData是否放在merge后，从而能直接获取merege后的结果而非手动判断。\n\t            var levels = option.levels || [];\n\n\t            levels = option.levels = setDefault(levels, ecModel);\n\n\t            // Make sure always a new tree is created when setOption,\n\t            // in TreemapView, we check whether oldTree === newTree\n\t            // to choose mappings approach among old shapes and new shapes.\n\t            return Tree.createTree(root, this, levels).data;\n\t        },\n\n\t        optionUpdated: function () {\n\t            this.resetViewRoot();\n\t        },\n\n\t        /**\n\t         * @override\n\t         * @param {number} dataIndex\n\t         * @param {boolean} [mutipleSeries=false]\n\t         */\n\t        formatTooltip: function (dataIndex) {\n\t            var data = this.getData();\n\t            var value = this.getRawValue(dataIndex);\n\t            var formattedValue = zrUtil.isArray(value)\n\t                ? addCommas(value[0]) : addCommas(value);\n\t            var name = data.getName(dataIndex);\n\n\t            return encodeHTML(name + ': ' + formattedValue);\n\t        },\n\n\t        /**\n\t         * Add tree path to tooltip param\n\t         *\n\t         * @override\n\t         * @param {number} dataIndex\n\t         * @return {Object}\n\t         */\n\t        getDataParams: function (dataIndex) {\n\t            var params = SeriesModel.prototype.getDataParams.apply(this, arguments);\n\n\t            var node = this.getData().tree.getNodeByDataIndex(dataIndex);\n\t            params.treePathInfo = helper.wrapTreePathInfo(node, this);\n\n\t            return params;\n\t        },\n\n\t        /**\n\t         * @public\n\t         * @param {Object} layoutInfo {\n\t         *                                x: containerGroup x\n\t         *                                y: containerGroup y\n\t         *                                width: containerGroup width\n\t         *                                height: containerGroup height\n\t         *                            }\n\t         */\n\t        setLayoutInfo: function (layoutInfo) {\n\t            /**\n\t             * @readOnly\n\t             * @type {Object}\n\t             */\n\t            this.layoutInfo = this.layoutInfo || {};\n\t            zrUtil.extend(this.layoutInfo, layoutInfo);\n\t        },\n\n\t        /**\n\t         * @param  {string} id\n\t         * @return {number} index\n\t         */\n\t        mapIdToIndex: function (id) {\n\t            // A feature is implemented:\n\t            // index is monotone increasing with the sequence of\n\t            // input id at the first time.\n\t            // This feature can make sure that each data item and its\n\t            // mapped color have the same index between data list and\n\t            // color list at the beginning, which is useful for user\n\t            // to adjust data-color mapping.\n\n\t            /**\n\t             * @private\n\t             * @type {Object}\n\t             */\n\t            var idIndexMap = this._idIndexMap;\n\n\t            if (!idIndexMap) {\n\t                idIndexMap = this._idIndexMap = {};\n\t                /**\n\t                 * @private\n\t                 * @type {number}\n\t                 */\n\t                this._idIndexMapCount = 0;\n\t            }\n\n\t            var index = idIndexMap[id];\n\t            if (index == null) {\n\t                idIndexMap[id] = index = this._idIndexMapCount++;\n\t            }\n\n\t            return index;\n\t        },\n\n\t        getViewRoot: function () {\n\t            return this._viewRoot;\n\t        },\n\n\t        /**\n\t         * @param {module:echarts/data/Tree~Node} [viewRoot]\n\t         */\n\t        resetViewRoot: function (viewRoot) {\n\t            viewRoot\n\t                ? (this._viewRoot = viewRoot)\n\t                : (viewRoot = this._viewRoot);\n\n\t            var root = this.getData().tree.root;\n\n\t            if (!viewRoot\n\t                || (viewRoot !== root && !root.contains(viewRoot))\n\t            ) {\n\t                this._viewRoot = root;\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * @param {Object} dataNode\n\t     */\n\t    function completeTreeValue(dataNode, arrValueLength) {\n\t        // Postorder travel tree.\n\t        // If value of none-leaf node is not set,\n\t        // calculate it by suming up the value of all children.\n\t        var sum = 0;\n\n\t        zrUtil.each(dataNode.children, function (child) {\n\n\t            completeTreeValue(child, arrValueLength);\n\n\t            var childValue = child.value;\n\t            zrUtil.isArray(childValue) && (childValue = childValue[0]);\n\n\t            sum += childValue;\n\t        });\n\n\t        var thisValue = dataNode.value;\n\n\t        if (arrValueLength >= 0) {\n\t            if (!zrUtil.isArray(thisValue)) {\n\t                dataNode.value = new Array(arrValueLength);\n\t            }\n\t            else {\n\t                thisValue = thisValue[0];\n\t            }\n\t        }\n\n\t        if (thisValue == null || isNaN(thisValue)) {\n\t            thisValue = sum;\n\t        }\n\t        // Value should not less than 0.\n\t        if (thisValue < 0) {\n\t            thisValue = 0;\n\t        }\n\n\t        arrValueLength >= 0\n\t            ? (dataNode.value[0] = thisValue)\n\t            : (dataNode.value = thisValue);\n\t    }\n\n\t    /**\n\t     * set default to level configuration\n\t     */\n\t    function setDefault(levels, ecModel) {\n\t        var globalColorList = ecModel.get('color');\n\n\t        if (!globalColorList) {\n\t            return;\n\t        }\n\n\t        levels = levels || [];\n\t        var hasColorDefine;\n\t        zrUtil.each(levels, function (levelDefine) {\n\t            var model = new Model(levelDefine);\n\t            var modelColor = model.get('color');\n\n\t            if (model.get('itemStyle.normal.color')\n\t                || (modelColor && modelColor !== 'none')\n\t            ) {\n\t                hasColorDefine = true;\n\t            }\n\t        });\n\n\t        if (!hasColorDefine) {\n\t            var level0 = levels[0] || (levels[0] = {});\n\t            level0.color = globalColorList.slice();\n\t        }\n\n\t        return levels;\n\t    }\n\n\n\n/***/ },\n/* 187 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Tree data structure\n\t *\n\t * @module echarts/data/Tree\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var Model = __webpack_require__(12);\n\t    var List = __webpack_require__(98);\n\t    var linkList = __webpack_require__(188);\n\t    var completeDimensions = __webpack_require__(103);\n\n\t    /**\n\t     * @constructor module:echarts/data/Tree~TreeNode\n\t     * @param {string} name\n\t     * @param {module:echarts/data/Tree} hostTree\n\t     */\n\t    var TreeNode = function (name, hostTree) {\n\t        /**\n\t         * @type {string}\n\t         */\n\t        this.name = name || '';\n\n\t        /**\n\t         * Depth of node\n\t         *\n\t         * @type {number}\n\t         * @readOnly\n\t         */\n\t        this.depth = 0;\n\n\t        /**\n\t         * Height of the subtree rooted at this node.\n\t         * @type {number}\n\t         * @readOnly\n\t         */\n\t        this.height = 0;\n\n\t        /**\n\t         * @type {module:echarts/data/Tree~TreeNode}\n\t         * @readOnly\n\t         */\n\t        this.parentNode = null;\n\n\t        /**\n\t         * Reference to list item.\n\t         * Do not persistent dataIndex outside,\n\t         * besause it may be changed by list.\n\t         * If dataIndex -1,\n\t         * this node is logical deleted (filtered) in list.\n\t         *\n\t         * @type {Object}\n\t         * @readOnly\n\t         */\n\t        this.dataIndex = -1;\n\n\t        /**\n\t         * @type {Array.<module:echarts/data/Tree~TreeNode>}\n\t         * @readOnly\n\t         */\n\t        this.children = [];\n\n\t        /**\n\t         * @type {Array.<module:echarts/data/Tree~TreeNode>}\n\t         * @pubilc\n\t         */\n\t        this.viewChildren = [];\n\n\t        /**\n\t         * @type {moduel:echarts/data/Tree}\n\t         * @readOnly\n\t         */\n\t        this.hostTree = hostTree;\n\t    };\n\n\t    TreeNode.prototype = {\n\n\t        constructor: TreeNode,\n\n\t        /**\n\t         * The node is removed.\n\t         * @return {boolean} is removed.\n\t         */\n\t        isRemoved: function () {\n\t            return this.dataIndex < 0;\n\t        },\n\n\t        /**\n\t         * Travel this subtree (include this node).\n\t         * Usage:\n\t         *    node.eachNode(function () { ... }); // preorder\n\t         *    node.eachNode('preorder', function () { ... }); // preorder\n\t         *    node.eachNode('postorder', function () { ... }); // postorder\n\t         *    node.eachNode(\n\t         *        {order: 'postorder', attr: 'viewChildren'},\n\t         *        function () { ... }\n\t         *    ); // postorder\n\t         *\n\t         * @param {(Object|string)} options If string, means order.\n\t         * @param {string=} options.order 'preorder' or 'postorder'\n\t         * @param {string=} options.attr 'children' or 'viewChildren'\n\t         * @param {Function} cb If in preorder and return false,\n\t         *                      its subtree will not be visited.\n\t         * @param {Object} [context]\n\t         */\n\t        eachNode: function (options, cb, context) {\n\t            if (typeof options === 'function') {\n\t                context = cb;\n\t                cb = options;\n\t                options = null;\n\t            }\n\n\t            options = options || {};\n\t            if (zrUtil.isString(options)) {\n\t                options = {order: options};\n\t            }\n\n\t            var order = options.order || 'preorder';\n\t            var children = this[options.attr || 'children'];\n\n\t            var suppressVisitSub;\n\t            order === 'preorder' && (suppressVisitSub = cb.call(context, this));\n\n\t            for (var i = 0; !suppressVisitSub && i < children.length; i++) {\n\t                children[i].eachNode(options, cb, context);\n\t            }\n\n\t            order === 'postorder' && cb.call(context, this);\n\t        },\n\n\t        /**\n\t         * Update depth and height of this subtree.\n\t         *\n\t         * @param  {number} depth\n\t         */\n\t        updateDepthAndHeight: function (depth) {\n\t            var height = 0;\n\t            this.depth = depth;\n\t            for (var i = 0; i < this.children.length; i++) {\n\t                var child = this.children[i];\n\t                child.updateDepthAndHeight(depth + 1);\n\t                if (child.height > height) {\n\t                    height = child.height;\n\t                }\n\t            }\n\t            this.height = height + 1;\n\t        },\n\n\t        /**\n\t         * @param  {string} id\n\t         * @return {module:echarts/data/Tree~TreeNode}\n\t         */\n\t        getNodeById: function (id) {\n\t            if (this.getId() === id) {\n\t                return this;\n\t            }\n\t            for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n\t                var res = children[i].getNodeById(id);\n\t                if (res) {\n\t                    return res;\n\t                }\n\t            }\n\t        },\n\n\t        /**\n\t         * @param {module:echarts/data/Tree~TreeNode} node\n\t         * @return {boolean}\n\t         */\n\t        contains: function (node) {\n\t            if (node === this) {\n\t                return true;\n\t            }\n\t            for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n\t                var res = children[i].contains(node);\n\t                if (res) {\n\t                    return res;\n\t                }\n\t            }\n\t        },\n\n\t        /**\n\t         * @param {boolean} includeSelf Default false.\n\t         * @return {Array.<module:echarts/data/Tree~TreeNode>} order: [root, child, grandchild, ...]\n\t         */\n\t        getAncestors: function (includeSelf) {\n\t            var ancestors = [];\n\t            var node = includeSelf ? this : this.parentNode;\n\t            while (node) {\n\t                ancestors.push(node);\n\t                node = node.parentNode;\n\t            }\n\t            ancestors.reverse();\n\t            return ancestors;\n\t        },\n\n\t        /**\n\t         * @param {string|Array=} [dimension='value'] Default 'value'. can be 0, 1, 2, 3\n\t         * @return {number} Value.\n\t         */\n\t        getValue: function (dimension) {\n\t            var data = this.hostTree.data;\n\t            return data.get(data.getDimension(dimension || 'value'), this.dataIndex);\n\t        },\n\n\t        /**\n\t         * @param {Object} layout\n\t         * @param {boolean=} [merge=false]\n\t         */\n\t        setLayout: function (layout, merge) {\n\t            this.dataIndex >= 0\n\t                && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);\n\t        },\n\n\t        /**\n\t         * @return {Object} layout\n\t         */\n\t        getLayout: function () {\n\t            return this.hostTree.data.getItemLayout(this.dataIndex);\n\t        },\n\n\t        /**\n\t         * @param {string} path\n\t         * @return {module:echarts/model/Model}\n\t         */\n\t        getModel: function (path) {\n\t            if (this.dataIndex < 0) {\n\t                return;\n\t            }\n\t            var hostTree = this.hostTree;\n\t            var itemModel = hostTree.data.getItemModel(this.dataIndex);\n\t            var levelModel = this.getLevelModel();\n\n\t            return itemModel.getModel(path, (levelModel || hostTree.hostModel).getModel(path));\n\t        },\n\n\t        /**\n\t         * @return {module:echarts/model/Model}\n\t         */\n\t        getLevelModel: function () {\n\t            return (this.hostTree.levelModels || [])[this.depth];\n\t        },\n\n\t        /**\n\t         * @example\n\t         *  setItemVisual('color', color);\n\t         *  setItemVisual({\n\t         *      'color': color\n\t         *  });\n\t         */\n\t        setVisual: function (key, value) {\n\t            this.dataIndex >= 0\n\t                && this.hostTree.data.setItemVisual(this.dataIndex, key, value);\n\t        },\n\n\t        /**\n\t         * Get item visual\n\t         */\n\t        getVisual: function (key, ignoreParent) {\n\t            return this.hostTree.data.getItemVisual(this.dataIndex, key, ignoreParent);\n\t        },\n\n\t        /**\n\t         * @public\n\t         * @return {number}\n\t         */\n\t        getRawIndex: function () {\n\t            return this.hostTree.data.getRawIndex(this.dataIndex);\n\t        },\n\n\t        /**\n\t         * @public\n\t         * @return {string}\n\t         */\n\t        getId: function () {\n\t            return this.hostTree.data.getId(this.dataIndex);\n\t        }\n\t    };\n\n\t    /**\n\t     * @constructor\n\t     * @alias module:echarts/data/Tree\n\t     * @param {module:echarts/model/Model} hostModel\n\t     * @param {Array.<Object>} levelOptions\n\t     */\n\t    function Tree(hostModel, levelOptions) {\n\t        /**\n\t         * @type {module:echarts/data/Tree~TreeNode}\n\t         * @readOnly\n\t         */\n\t        this.root;\n\n\t        /**\n\t         * @type {module:echarts/data/List}\n\t         * @readOnly\n\t         */\n\t        this.data;\n\n\t        /**\n\t         * Index of each item is the same as the raw index of coresponding list item.\n\t         * @private\n\t         * @type {Array.<module:echarts/data/Tree~TreeNode}\n\t         */\n\t        this._nodes = [];\n\n\t        /**\n\t         * @private\n\t         * @readOnly\n\t         * @type {module:echarts/model/Model}\n\t         */\n\t        this.hostModel = hostModel;\n\n\t        /**\n\t         * @private\n\t         * @readOnly\n\t         * @type {Array.<module:echarts/model/Model}\n\t         */\n\t        this.levelModels = zrUtil.map(levelOptions || [], function (levelDefine) {\n\t            return new Model(levelDefine, hostModel, hostModel.ecModel);\n\t        });\n\t    }\n\n\t    Tree.prototype = {\n\n\t        constructor: Tree,\n\n\t        type: 'tree',\n\n\t        /**\n\t         * Travel this subtree (include this node).\n\t         * Usage:\n\t         *    node.eachNode(function () { ... }); // preorder\n\t         *    node.eachNode('preorder', function () { ... }); // preorder\n\t         *    node.eachNode('postorder', function () { ... }); // postorder\n\t         *    node.eachNode(\n\t         *        {order: 'postorder', attr: 'viewChildren'},\n\t         *        function () { ... }\n\t         *    ); // postorder\n\t         *\n\t         * @param {(Object|string)} options If string, means order.\n\t         * @param {string=} options.order 'preorder' or 'postorder'\n\t         * @param {string=} options.attr 'children' or 'viewChildren'\n\t         * @param {Function} cb\n\t         * @param {Object}   [context]\n\t         */\n\t        eachNode: function(options, cb, context) {\n\t            this.root.eachNode(options, cb, context);\n\t        },\n\n\t        /**\n\t         * @param {number} dataIndex\n\t         * @return {module:echarts/data/Tree~TreeNode}\n\t         */\n\t        getNodeByDataIndex: function (dataIndex) {\n\t            var rawIndex = this.data.getRawIndex(dataIndex);\n\t            return this._nodes[rawIndex];\n\t        },\n\n\t        /**\n\t         * @param {string} name\n\t         * @return {module:echarts/data/Tree~TreeNode}\n\t         */\n\t        getNodeByName: function (name) {\n\t            return this.root.getNodeByName(name);\n\t        },\n\n\t        /**\n\t         * Update item available by list,\n\t         * when list has been performed options like 'filterSelf' or 'map'.\n\t         */\n\t        update: function () {\n\t            var data = this.data;\n\t            var nodes = this._nodes;\n\n\t            for (var i = 0, len = nodes.length; i < len; i++) {\n\t                nodes[i].dataIndex = -1;\n\t            }\n\n\t            for (var i = 0, len = data.count(); i < len; i++) {\n\t                nodes[data.getRawIndex(i)].dataIndex = i;\n\t            }\n\t        },\n\n\t        /**\n\t         * Clear all layouts\n\t         */\n\t        clearLayouts: function () {\n\t            this.data.clearItemLayouts();\n\t        }\n\t    };\n\n\t    /**\n\t     * data node format:\n\t     * {\n\t     *     name: ...\n\t     *     value: ...\n\t     *     children: [\n\t     *         {\n\t     *             name: ...\n\t     *             value: ...\n\t     *             children: ...\n\t     *         },\n\t     *         ...\n\t     *     ]\n\t     * }\n\t     *\n\t     * @static\n\t     * @param {Objec} dataRoot Root node.\n\t     * @param {module:echarts/model/Model} hostModel\n\t     * @param {Array.<Object>} levelOptions\n\t     * @return module:echarts/data/Tree\n\t     */\n\t    Tree.createTree = function (dataRoot, hostModel, levelOptions) {\n\n\t        var tree = new Tree(hostModel, levelOptions);\n\t        var listData = [];\n\n\t        buildHierarchy(dataRoot);\n\n\t        function buildHierarchy(dataNode, parentNode) {\n\t            listData.push(dataNode);\n\n\t            var node = new TreeNode(dataNode.name, tree);\n\t            parentNode\n\t                ? addChild(node, parentNode)\n\t                : (tree.root = node);\n\n\t            tree._nodes.push(node);\n\n\t            var children = dataNode.children;\n\t            if (children) {\n\t                for (var i = 0; i < children.length; i++) {\n\t                    buildHierarchy(children[i], node);\n\t                }\n\t            }\n\t        }\n\n\t        tree.root.updateDepthAndHeight(0);\n\n\t        var dimensions = completeDimensions([{name: 'value'}], listData);\n\t        var list = new List(dimensions, hostModel);\n\t        list.initData(listData);\n\n\t        linkList({\n\t            mainData: list,\n\t            struct: tree,\n\t            structAttr: 'tree'\n\t        });\n\n\t        tree.update();\n\n\t        return tree;\n\t    };\n\n\t    /**\n\t     * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,\n\t     * so this function is not ready and not necessary to be public.\n\t     *\n\t     * @param {(module:echarts/data/Tree~TreeNode|Object)} child\n\t     */\n\t    function addChild(child, node) {\n\t        var children = node.children;\n\t        if (child.parentNode === node) {\n\t            return;\n\t        }\n\n\t        children.push(child);\n\t        child.parentNode = node;\n\t    }\n\n\t    module.exports = Tree;\n\n\n/***/ },\n/* 188 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Link lists and struct (graph or tree)\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var each = zrUtil.each;\n\n\t    var DATAS = '\\0__link_datas';\n\t    var MAIN_DATA = '\\0__link_mainData';\n\n\t    // Caution:\n\t    // In most case, either list or its shallow clones (see list.cloneShallow)\n\t    // is active in echarts process. So considering heap memory consumption,\n\t    // we do not clone tree or graph, but share them among list and its shallow clones.\n\t    // But in some rare case, we have to keep old list (like do animation in chart). So\n\t    // please take care that both the old list and the new list share the same tree/graph.\n\n\t    /**\n\t     * @param {Object} opt\n\t     * @param {module:echarts/data/List} opt.mainData\n\t     * @param {Object} [opt.struct] For example, instance of Graph or Tree.\n\t     * @param {string} [opt.structAttr] designation: list[structAttr] = struct;\n\t     * @param {Object} [opt.datas] {dataType: data},\n\t     *                 like: {node: nodeList, edge: edgeList}.\n\t     *                 Should contain mainData.\n\t     * @param {Object} [opt.datasAttr] {dataType: attr},\n\t     *                 designation: struct[datasAttr[dataType]] = list;\n\t     */\n\t    function linkList(opt) {\n\t        var mainData = opt.mainData;\n\t        var datas = opt.datas;\n\n\t        if (!datas) {\n\t            datas = {main: mainData};\n\t            opt.datasAttr = {main: 'data'};\n\t        }\n\t        opt.datas = opt.mainData = null;\n\n\t        linkAll(mainData, datas, opt);\n\n\t        // Porxy data original methods.\n\t        each(datas, function (data) {\n\t            each(mainData.TRANSFERABLE_METHODS, function (methodName) {\n\t                data.wrapMethod(methodName, zrUtil.curry(transferInjection, opt));\n\t            });\n\n\t        });\n\n\t        // Beyond transfer, additional features should be added to `cloneShallow`.\n\t        mainData.wrapMethod('cloneShallow', zrUtil.curry(cloneShallowInjection, opt));\n\n\t        // Only mainData trigger change, because struct.update may trigger\n\t        // another changable methods, which may bring about dead lock.\n\t        each(mainData.CHANGABLE_METHODS, function (methodName) {\n\t            mainData.wrapMethod(methodName, zrUtil.curry(changeInjection, opt));\n\t        });\n\n\t        // Make sure datas contains mainData.\n\t        zrUtil.assert(datas[mainData.dataType] === mainData);\n\t    }\n\n\t    function transferInjection(opt, res) {\n\t        if (isMainData(this)) {\n\t            // Transfer datas to new main data.\n\t            var datas = zrUtil.extend({}, this[DATAS]);\n\t            datas[this.dataType] = res;\n\t            linkAll(res, datas, opt);\n\t        }\n\t        else {\n\t            // Modify the reference in main data to point newData.\n\t            linkSingle(res, this.dataType, this[MAIN_DATA], opt);\n\t        }\n\t        return res;\n\t    }\n\n\t    function changeInjection(opt, res) {\n\t        opt.struct && opt.struct.update(this);\n\t        return res;\n\t    }\n\n\t    function cloneShallowInjection(opt, res) {\n\t        // cloneShallow, which brings about some fragilities, may be inappropriate\n\t        // to be exposed as an API. So for implementation simplicity we can make\n\t        // the restriction that cloneShallow of not-mainData should not be invoked\n\t        // outside, but only be invoked here.\n\t        each(res[DATAS], function (data, dataType) {\n\t            data !== res && linkSingle(data.cloneShallow(), dataType, res, opt);\n\t        });\n\t        return res;\n\t    }\n\n\t    /**\n\t     * Supplement method to List.\n\t     *\n\t     * @public\n\t     * @param {string} [dataType] If not specified, return mainData.\n\t     * @return {module:echarts/data/List}\n\t     */\n\t    function getLinkedData(dataType) {\n\t        var mainData = this[MAIN_DATA];\n\t        return (dataType == null || mainData == null)\n\t            ? mainData\n\t            : mainData[DATAS][dataType];\n\t    }\n\n\t    function isMainData(data) {\n\t        return data[MAIN_DATA] === data;\n\t    }\n\n\t    function linkAll(mainData, datas, opt) {\n\t        mainData[DATAS] = {};\n\t        each(datas, function (data, dataType) {\n\t            linkSingle(data, dataType, mainData, opt);\n\t        });\n\t    }\n\n\t    function linkSingle(data, dataType, mainData, opt) {\n\t        mainData[DATAS][dataType] = data;\n\t        data[MAIN_DATA] = mainData;\n\t        data.dataType = dataType;\n\n\t        if (opt.struct) {\n\t            data[opt.structAttr] = opt.struct;\n\t            opt.struct[opt.datasAttr[dataType]] = data;\n\t        }\n\n\t        // Supplement method.\n\t        data.getLinkedData = getLinkedData;\n\t    }\n\n\t    module.exports = linkList;\n\n\n/***/ },\n/* 189 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var helper = {\n\n\t        retrieveTargetInfo: function (payload, seriesModel) {\n\t            if (payload\n\t                && (\n\t                    payload.type === 'treemapZoomToNode'\n\t                    || payload.type === 'treemapRootToNode'\n\t                )\n\t            ) {\n\t                var root = seriesModel.getData().tree.root;\n\t                var targetNode = payload.targetNode;\n\t                if (targetNode && root.contains(targetNode)) {\n\t                    return {node: targetNode};\n\t                }\n\n\t                var targetNodeId = payload.targetNodeId;\n\t                if (targetNodeId != null && (targetNode = root.getNodeById(targetNodeId))) {\n\t                    return {node: targetNode};\n\t                }\n\t            }\n\t        },\n\n\t        // Not includes the given node at the last item.\n\t        getPathToRoot: function (node) {\n\t            var path = [];\n\t            while (node) {\n\t                node = node.parentNode;\n\t                node && path.push(node);\n\t            }\n\t            return path.reverse();\n\t        },\n\n\t        aboveViewRoot: function (viewRoot, node) {\n\t            var viewPath = helper.getPathToRoot(viewRoot);\n\t            return zrUtil.indexOf(viewPath, node) >= 0;\n\t        },\n\n\t        // From root to the input node (the input node will be included).\n\t        wrapTreePathInfo: function (node, seriesModel) {\n\t            var treePathInfo = [];\n\n\t            while (node) {\n\t                var nodeDataIndex = node.dataIndex;\n\t                treePathInfo.push({\n\t                    name: node.name,\n\t                    dataIndex: nodeDataIndex,\n\t                    value: seriesModel.getRawValue(nodeDataIndex)\n\t                });\n\t                node = node.parentNode;\n\t            }\n\n\t            treePathInfo.reverse();\n\n\t            return treePathInfo;\n\t        }\n\t    };\n\n\t    module.exports = helper;\n\n\n/***/ },\n/* 190 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t \n\n\t    var zrUtil = __webpack_require__(4);\n\t    var graphic = __webpack_require__(43);\n\t    var DataDiffer = __webpack_require__(99);\n\t    var helper = __webpack_require__(189);\n\t    var Breadcrumb = __webpack_require__(191);\n\t    var RoamController = __webpack_require__(177);\n\t    var BoundingRect = __webpack_require__(9);\n\t    var matrix = __webpack_require__(11);\n\t    var animationUtil = __webpack_require__(192);\n\t    var bind = zrUtil.bind;\n\t    var Group = graphic.Group;\n\t    var Rect = graphic.Rect;\n\t    var each = zrUtil.each;\n\n\t    var DRAG_THRESHOLD = 3;\n\t    var PATH_LABEL_NORMAL = ['label', 'normal'];\n\t    var PATH_LABEL_EMPHASIS = ['label', 'emphasis'];\n\t    var Z_BASE = 10; // Should bigger than every z.\n\t    var Z_BG = 1;\n\t    var Z_CONTENT = 2;\n\n\t    module.exports = __webpack_require__(1).extendChartView({\n\n\t        type: 'treemap',\n\n\t        /**\n\t         * @override\n\t         */\n\t        init: function (o, api) {\n\n\t            /**\n\t             * @private\n\t             * @type {module:zrender/container/Group}\n\t             */\n\t            this._containerGroup;\n\n\t            /**\n\t             * @private\n\t             * @type {Object.<string, Array.<module:zrender/container/Group>>}\n\t             */\n\t            this._storage = createStorage();\n\n\t            /**\n\t             * @private\n\t             * @type {module:echarts/data/Tree}\n\t             */\n\t            this._oldTree;\n\n\t            /**\n\t             * @private\n\t             * @type {module:echarts/chart/treemap/Breadcrumb}\n\t             */\n\t            this._breadcrumb;\n\n\t            /**\n\t             * @private\n\t             * @type {module:echarts/component/helper/RoamController}\n\t             */\n\t            this._controller;\n\n\t            /**\n\t             * 'ready', 'animating'\n\t             * @private\n\t             */\n\t            this._state = 'ready';\n\n\t            /**\n\t             * @private\n\t             * @type {boolean}\n\t             */\n\t            this._mayClick;\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        render: function (seriesModel, ecModel, api, payload) {\n\n\t            var models = ecModel.findComponents({\n\t                mainType: 'series', subType: 'treemap', query: payload\n\t            });\n\t            if (zrUtil.indexOf(models, seriesModel) < 0) {\n\t                return;\n\t            }\n\n\t            this.seriesModel = seriesModel;\n\t            this.api = api;\n\t            this.ecModel = ecModel;\n\n\t            var targetInfo = helper.retrieveTargetInfo(payload, seriesModel);\n\t            var payloadType = payload && payload.type;\n\t            var layoutInfo = seriesModel.layoutInfo;\n\t            var isInit = !this._oldTree;\n\t            var thisStorage = this._storage;\n\n\t            // Mark new root when action is treemapRootToNode.\n\t            var reRoot = (payloadType === 'treemapRootToNode' && targetInfo && thisStorage)\n\t                ? {\n\t                    rootNodeGroup: thisStorage.nodeGroup[targetInfo.node.getRawIndex()],\n\t                    direction: payload.direction\n\t                }\n\t                : null;\n\n\t            var containerGroup = this._giveContainerGroup(layoutInfo);\n\n\t            var renderResult = this._doRender(containerGroup, seriesModel, reRoot);\n\t            (\n\t                !isInit && (\n\t                    !payloadType\n\t                    || payloadType === 'treemapZoomToNode'\n\t                    || payloadType === 'treemapRootToNode'\n\t                )\n\t            )\n\t                ? this._doAnimation(containerGroup, renderResult, seriesModel, reRoot)\n\t                : renderResult.renderFinally();\n\n\t            this._resetController(api);\n\n\t            this._renderBreadcrumb(seriesModel, api, targetInfo);\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _giveContainerGroup: function (layoutInfo) {\n\t            var containerGroup = this._containerGroup;\n\t            if (!containerGroup) {\n\t                // FIXME\n\t                // 加一层containerGroup是为了clip，但是现在clip功能并没有实现。\n\t                containerGroup = this._containerGroup = new Group();\n\t                this._initEvents(containerGroup);\n\t                this.group.add(containerGroup);\n\t            }\n\t            containerGroup.attr('position', [layoutInfo.x, layoutInfo.y]);\n\n\t            return containerGroup;\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _doRender: function (containerGroup, seriesModel, reRoot) {\n\t            var thisTree = seriesModel.getData().tree;\n\t            var oldTree = this._oldTree;\n\n\t            // Clear last shape records.\n\t            var lastsForAnimation = createStorage();\n\t            var thisStorage = createStorage();\n\t            var oldStorage = this._storage;\n\t            var willInvisibleEls = [];\n\t            var doRenderNode = zrUtil.curry(\n\t                renderNode, seriesModel,\n\t                thisStorage, oldStorage, reRoot,\n\t                lastsForAnimation, willInvisibleEls\n\t            );\n\n\t            // Notice: when thisTree and oldTree are the same tree (see list.cloneShadow),\n\t            // the oldTree is actually losted, so we can not find all of the old graphic\n\t            // elements from tree. So we use this stragegy: make element storage, move\n\t            // from old storage to new storage, clear old storage.\n\n\t            dualTravel(\n\t                thisTree.root ? [thisTree.root] : [],\n\t                (oldTree && oldTree.root) ? [oldTree.root] : [],\n\t                containerGroup,\n\t                thisTree === oldTree || !oldTree,\n\t                0\n\t            );\n\n\t            // Process all removing.\n\t            var willDeleteEls = clearStorage(oldStorage);\n\n\t            this._oldTree = thisTree;\n\t            this._storage = thisStorage;\n\n\t            return {\n\t                lastsForAnimation: lastsForAnimation,\n\t                willDeleteEls: willDeleteEls,\n\t                renderFinally: renderFinally\n\t            };\n\n\t            function dualTravel(thisViewChildren, oldViewChildren, parentGroup, sameTree, depth) {\n\t                // When 'render' is triggered by action,\n\t                // 'this' and 'old' may be the same tree,\n\t                // we use rawIndex in that case.\n\t                if (sameTree) {\n\t                    oldViewChildren = thisViewChildren;\n\t                    each(thisViewChildren, function (child, index) {\n\t                        !child.isRemoved() && processNode(index, index);\n\t                    });\n\t                }\n\t                // Diff hierarchically (diff only in each subtree, but not whole).\n\t                // because, consistency of view is important.\n\t                else {\n\t                    (new DataDiffer(oldViewChildren, thisViewChildren, getKey, getKey))\n\t                        .add(processNode)\n\t                        .update(processNode)\n\t                        .remove(zrUtil.curry(processNode, null))\n\t                        .execute();\n\t                }\n\n\t                function getKey(node) {\n\t                    // Identify by name or raw index.\n\t                    return node.getId();\n\t                }\n\n\t                function processNode(newIndex, oldIndex) {\n\t                    var thisNode = newIndex != null ? thisViewChildren[newIndex] : null;\n\t                    var oldNode = oldIndex != null ? oldViewChildren[oldIndex] : null;\n\n\t                    var group = doRenderNode(thisNode, oldNode, parentGroup, depth);\n\n\t                    group && dualTravel(\n\t                        thisNode && thisNode.viewChildren || [],\n\t                        oldNode && oldNode.viewChildren || [],\n\t                        group,\n\t                        sameTree,\n\t                        depth + 1\n\t                    );\n\t                }\n\t            }\n\n\t            function clearStorage(storage) {\n\t                var willDeleteEls = createStorage();\n\t                storage && each(storage, function (store, storageName) {\n\t                    var delEls = willDeleteEls[storageName];\n\t                    each(store, function (el) {\n\t                        el && (delEls.push(el), el.__tmWillDelete = 1);\n\t                    });\n\t                });\n\t                return willDeleteEls;\n\t            }\n\n\t            function renderFinally() {\n\t                each(willDeleteEls, function (els) {\n\t                    each(els, function (el) {\n\t                        el.parent && el.parent.remove(el);\n\t                    });\n\t                });\n\t                each(willInvisibleEls, function (el) {\n\t                    el.invisible = true;\n\t                    // Setting invisible is for optimizing, so no need to set dirty,\n\t                    // just mark as invisible.\n\t                    el.dirty();\n\t                });\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _doAnimation: function (containerGroup, renderResult, seriesModel, reRoot) {\n\t            if (!seriesModel.get('animation')) {\n\t                return;\n\t            }\n\n\t            var duration = seriesModel.get('animationDurationUpdate');\n\t            var easing = seriesModel.get('animationEasing');\n\t            var animationWrap = animationUtil.createWrap();\n\n\t            // Make delete animations.\n\t            each(renderResult.willDeleteEls, function (store, storageName) {\n\t                each(store, function (el, rawIndex) {\n\t                    if (el.invisible) {\n\t                        return;\n\t                    }\n\n\t                    var parent = el.parent; // Always has parent, and parent is nodeGroup.\n\t                    var target;\n\n\t                    if (reRoot && reRoot.direction === 'drillDown') {\n\t                        target = parent === reRoot.rootNodeGroup\n\t                            // This is the content element of view root.\n\t                            // Only `content` will enter this branch, because\n\t                            // `background` and `nodeGroup` will not be deleted.\n\t                            ? {\n\t                                shape: {\n\t                                    x: 0,\n\t                                    y: 0,\n\t                                    width: parent.__tmNodeWidth,\n\t                                    height: parent.__tmNodeHeight\n\t                                },\n\t                                style: {\n\t                                    opacity: 0\n\t                                }\n\t                            }\n\t                            // Others.\n\t                            : {style: {opacity: 0}};\n\t                    }\n\t                    else {\n\t                        var targetX = 0;\n\t                        var targetY = 0;\n\n\t                        if (!parent.__tmWillDelete) {\n\t                            // Let node animate to right-bottom corner, cooperating with fadeout,\n\t                            // which is appropriate for user understanding.\n\t                            // Divided by 2 for reRoot rolling up effect.\n\t                            targetX = parent.__tmNodeWidth / 2;\n\t                            targetY = parent.__tmNodeHeight / 2;\n\t                        }\n\n\t                        target = storageName === 'nodeGroup'\n\t                            ? {position: [targetX, targetY], style: {opacity: 0}}\n\t                            : {\n\t                                shape: {x: targetX, y: targetY, width: 0, height: 0},\n\t                                style: {opacity: 0}\n\t                            };\n\t                    }\n\n\t                    target && animationWrap.add(el, target, duration, easing);\n\t                });\n\t            });\n\n\t            // Make other animations\n\t            each(this._storage, function (store, storageName) {\n\t                each(store, function (el, rawIndex) {\n\t                    var last = renderResult.lastsForAnimation[storageName][rawIndex];\n\t                    var target = {};\n\n\t                    if (!last) {\n\t                        return;\n\t                    }\n\n\t                    if (storageName === 'nodeGroup') {\n\t                        if (last.old) {\n\t                            target.position = el.position.slice();\n\t                            el.attr('position', last.old);\n\t                        }\n\t                    }\n\t                    else {\n\t                        if (last.old) {\n\t                            target.shape = zrUtil.extend({}, el.shape);\n\t                            el.setShape(last.old);\n\t                        }\n\n\t                        if (last.fadein) {\n\t                            el.setStyle('opacity', 0);\n\t                            target.style = {opacity: 1};\n\t                        }\n\t                        // When animation is stopped for succedent animation starting,\n\t                        // el.style.opacity might not be 1\n\t                        else if (el.style.opacity !== 1) {\n\t                            target.style = {opacity: 1};\n\t                        }\n\t                    }\n\n\t                    animationWrap.add(el, target, duration, easing);\n\t                });\n\t            }, this);\n\n\t            this._state = 'animating';\n\n\t            animationWrap\n\t                .done(bind(function () {\n\t                    this._state = 'ready';\n\t                    renderResult.renderFinally();\n\t                }, this))\n\t                .start();\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _resetController: function (api) {\n\t            var controller = this._controller;\n\n\t            // Init controller.\n\t            if (!controller) {\n\t                controller = this._controller = new RoamController(api.getZr());\n\t                controller.enable(this.seriesModel.get('roam'));\n\t                controller.on('pan', bind(this._onPan, this));\n\t                controller.on('zoom', bind(this._onZoom, this));\n\t            }\n\n\t            var rect = new BoundingRect(0, 0, api.getWidth(), api.getHeight());\n\t            controller.setContainsPoint(function (x, y) {\n\t                return rect.contain(x, y);\n\t            });\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _clearController: function () {\n\t            var controller = this._controller;\n\t            if (controller) {\n\t                controller.dispose();\n\t                controller = null;\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _onPan: function (dx, dy) {\n\t            this._mayClick = false;\n\n\t            if (this._state !== 'animating'\n\t                && (Math.abs(dx) > DRAG_THRESHOLD || Math.abs(dy) > DRAG_THRESHOLD)\n\t            ) {\n\t                // These param must not be cached.\n\t                var root = this.seriesModel.getData().tree.root;\n\n\t                if (!root) {\n\t                    return;\n\t                }\n\n\t                var rootLayout = root.getLayout();\n\n\t                if (!rootLayout) {\n\t                    return;\n\t                }\n\n\t                this.api.dispatchAction({\n\t                    type: 'treemapMove',\n\t                    from: this.uid,\n\t                    seriesId: this.seriesModel.id,\n\t                    rootRect: {\n\t                        x: rootLayout.x + dx, y: rootLayout.y + dy,\n\t                        width: rootLayout.width, height: rootLayout.height\n\t                    }\n\t                });\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _onZoom: function (scale, mouseX, mouseY) {\n\t            this._mayClick = false;\n\n\t            if (this._state !== 'animating') {\n\t                // These param must not be cached.\n\t                var root = this.seriesModel.getData().tree.root;\n\n\t                if (!root) {\n\t                    return;\n\t                }\n\n\t                var rootLayout = root.getLayout();\n\n\t                if (!rootLayout) {\n\t                    return;\n\t                }\n\n\t                var rect = new BoundingRect(\n\t                    rootLayout.x, rootLayout.y, rootLayout.width, rootLayout.height\n\t                );\n\t                var layoutInfo = this.seriesModel.layoutInfo;\n\n\t                // Transform mouse coord from global to containerGroup.\n\t                mouseX -= layoutInfo.x;\n\t                mouseY -= layoutInfo.y;\n\n\t                // Scale root bounding rect.\n\t                var m = matrix.create();\n\t                matrix.translate(m, m, [-mouseX, -mouseY]);\n\t                matrix.scale(m, m, [scale, scale]);\n\t                matrix.translate(m, m, [mouseX, mouseY]);\n\n\t                rect.applyTransform(m);\n\n\t                this.api.dispatchAction({\n\t                    type: 'treemapRender',\n\t                    from: this.uid,\n\t                    seriesId: this.seriesModel.id,\n\t                    rootRect: {\n\t                        x: rect.x, y: rect.y,\n\t                        width: rect.width, height: rect.height\n\t                    }\n\t                });\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _initEvents: function (containerGroup) {\n\t            // FIXME\n\t            // 不用click以及silent的原因是，animate时视图设置silent true来避免click生效，\n\t            // 但是animate中，按下鼠标，animate结束后（silent设回为false）松开鼠标，\n\t            // 还是会触发click，期望是不触发。\n\n\t            // Mousedown occurs when drag start, and mouseup occurs when drag end,\n\t            // click event should not be triggered in that case.\n\n\t            containerGroup.on('mousedown', function (e) {\n\t                this._state === 'ready' && (this._mayClick = true);\n\t            }, this);\n\t            containerGroup.on('mouseup', function (e) {\n\t                if (this._mayClick) {\n\t                    this._mayClick = false;\n\t                    this._state === 'ready' && onClick.call(this, e);\n\t                }\n\t            }, this);\n\n\t            function onClick(e) {\n\t                var nodeClick = this.seriesModel.get('nodeClick', true);\n\n\t                if (!nodeClick) {\n\t                    return;\n\t                }\n\n\t                var targetInfo = this.findTarget(e.offsetX, e.offsetY);\n\n\t                if (!targetInfo) {\n\t                    return;\n\t                }\n\n\t                var node = targetInfo.node;\n\t                if (node.getLayout().isLeafRoot) {\n\t                    this._rootToNode(targetInfo);\n\t                }\n\t                else {\n\t                    if (nodeClick === 'zoomToNode') {\n\t                        this._zoomToNode(targetInfo);\n\t                    }\n\t                    else if (nodeClick === 'link') {\n\t                        var itemModel = node.hostTree.data.getItemModel(node.dataIndex);\n\t                        var link = itemModel.get('link', true);\n\t                        var linkTarget = itemModel.get('target', true) || 'blank';\n\t                        link && window.open(link, linkTarget);\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _renderBreadcrumb: function (seriesModel, api, targetInfo) {\n\t            if (!targetInfo) {\n\t                targetInfo = seriesModel.get('leafDepth', true) != null\n\t                    ? {node: seriesModel.getViewRoot()}\n\t                    // FIXME\n\t                    // better way?\n\t                    // Find breadcrumb tail on center of containerGroup.\n\t                    : this.findTarget(api.getWidth() / 2, api.getHeight() / 2);\n\n\t                if (!targetInfo) {\n\t                    targetInfo = {node: seriesModel.getData().tree.root};\n\t                }\n\t            }\n\n\t            (this._breadcrumb || (this._breadcrumb = new Breadcrumb(this.group)))\n\t                .render(seriesModel, api, targetInfo.node, bind(onSelect, this));\n\n\t            function onSelect(node) {\n\t                if (this._state !== 'animating') {\n\t                    helper.aboveViewRoot(seriesModel.getViewRoot(), node)\n\t                        ? this._rootToNode({node: node})\n\t                        : this._zoomToNode({node: node});\n\t                }\n\t            }\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        remove: function () {\n\t            this._clearController();\n\t            this._containerGroup && this._containerGroup.removeAll();\n\t            this._storage = createStorage();\n\t            this._state = 'ready';\n\t            this._breadcrumb && this._breadcrumb.remove();\n\t        },\n\n\t        dispose: function () {\n\t            this._clearController();\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _zoomToNode: function (targetInfo) {\n\t            this.api.dispatchAction({\n\t                type: 'treemapZoomToNode',\n\t                from: this.uid,\n\t                seriesId: this.seriesModel.id,\n\t                targetNode: targetInfo.node\n\t            });\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _rootToNode: function (targetInfo) {\n\t            this.api.dispatchAction({\n\t                type: 'treemapRootToNode',\n\t                from: this.uid,\n\t                seriesId: this.seriesModel.id,\n\t                targetNode: targetInfo.node\n\t            });\n\t        },\n\n\t        /**\n\t         * @public\n\t         * @param {number} x Global coord x.\n\t         * @param {number} y Global coord y.\n\t         * @return {Object} info If not found, return undefined;\n\t         * @return {number} info.node Target node.\n\t         * @return {number} info.offsetX x refer to target node.\n\t         * @return {number} info.offsetY y refer to target node.\n\t         */\n\t        findTarget: function (x, y) {\n\t            var targetInfo;\n\t            var viewRoot = this.seriesModel.getViewRoot();\n\n\t            viewRoot.eachNode({attr: 'viewChildren', order: 'preorder'}, function (node) {\n\t                var bgEl = this._storage.background[node.getRawIndex()];\n\t                // If invisible, there might be no element.\n\t                if (bgEl) {\n\t                    var point = bgEl.transformCoordToLocal(x, y);\n\t                    var shape = bgEl.shape;\n\n\t                    // For performance consideration, dont use 'getBoundingRect'.\n\t                    if (shape.x <= point[0]\n\t                        && point[0] <= shape.x + shape.width\n\t                        && shape.y <= point[1]\n\t                        && point[1] <= shape.y + shape.height\n\t                    ) {\n\t                        targetInfo = {node: node, offsetX: point[0], offsetY: point[1]};\n\t                    }\n\t                    else {\n\t                        return false; // Suppress visit subtree.\n\t                    }\n\t                }\n\t            }, this);\n\n\t            return targetInfo;\n\t        }\n\n\t    });\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function createStorage() {\n\t        return {nodeGroup: [], background: [], content: []};\n\t    }\n\n\t    /**\n\t     * @inner\n\t     * @return Return undefined means do not travel further.\n\t     */\n\t    function renderNode(\n\t        seriesModel, thisStorage, oldStorage, reRoot,\n\t        lastsForAnimation, willInvisibleEls,\n\t        thisNode, oldNode, parentGroup, depth\n\t    ) {\n\t        // Whether under viewRoot.\n\t        if (!thisNode) {\n\t            // Deleting nodes will be performed finally. This method just find\n\t            // element from old storage, or create new element, set them to new\n\t            // storage, and set styles.\n\t            return;\n\t        }\n\n\t        var thisLayout = thisNode.getLayout();\n\n\t        if (!thisLayout || !thisLayout.isInView) {\n\t            return;\n\t        }\n\n\t        var thisWidth = thisLayout.width;\n\t        var thisHeight = thisLayout.height;\n\t        var thisInvisible = thisLayout.invisible;\n\n\t        var thisRawIndex = thisNode.getRawIndex();\n\t        var oldRawIndex = oldNode && oldNode.getRawIndex();\n\n\t        // Node group\n\t        var group = giveGraphic('nodeGroup', Group);\n\n\t        if (!group) {\n\t            return;\n\t        }\n\n\t        parentGroup.add(group);\n\t        // x,y are not set when el is above view root.\n\t        group.attr('position', [thisLayout.x || 0, thisLayout.y || 0]);\n\t        group.__tmNodeWidth = thisWidth;\n\t        group.__tmNodeHeight = thisHeight;\n\n\t        if (thisLayout.isAboveViewRoot) {\n\t            return group;\n\t        }\n\n\t        // Background\n\t        var bg = giveGraphic('background', Rect, depth, Z_BG);\n\t        if (bg) {\n\t            bg.setShape({x: 0, y: 0, width: thisWidth, height: thisHeight});\n\t            updateStyle(bg, function () {\n\t                bg.setStyle('fill', thisNode.getVisual('borderColor', true));\n\t            });\n\t            group.add(bg);\n\t        }\n\n\t        var thisViewChildren = thisNode.viewChildren;\n\n\t        // No children, render content.\n\t        if (!thisViewChildren || !thisViewChildren.length) {\n\t            var content = giveGraphic('content', Rect, depth, Z_CONTENT);\n\t            content && renderContent(group);\n\t        }\n\n\t        return group;\n\n\t        // ----------------------------\n\t        // | Procedures in renderNode |\n\t        // ----------------------------\n\n\t        function renderContent(group) {\n\t            // For tooltip.\n\t            content.dataIndex = thisNode.dataIndex;\n\t            content.seriesIndex = seriesModel.seriesIndex;\n\n\t            var borderWidth = thisLayout.borderWidth;\n\t            var contentWidth = Math.max(thisWidth - 2 * borderWidth, 0);\n\t            var contentHeight = Math.max(thisHeight - 2 * borderWidth, 0);\n\n\t            content.culling = true;\n\t            content.setShape({\n\t                x: borderWidth,\n\t                y: borderWidth,\n\t                width: contentWidth,\n\t                height: contentHeight\n\t            });\n\n\t            var visualColor = thisNode.getVisual('color', true);\n\t            updateStyle(content, function () {\n\t                var normalStyle = {fill: visualColor};\n\t                var emphasisStyle = thisNode.getModel('itemStyle.emphasis').getItemStyle();\n\n\t                prepareText(normalStyle, emphasisStyle, visualColor, contentWidth, contentHeight);\n\n\t                content.setStyle(normalStyle);\n\t                graphic.setHoverStyle(content, emphasisStyle);\n\t            });\n\n\t            group.add(content);\n\t        }\n\n\t        function updateStyle(element, cb) {\n\t            if (!thisInvisible) {\n\t                // If invisible, do not set visual, otherwise the element will\n\t                // change immediately before animation. We think it is OK to\n\t                // remain its origin color when moving out of the view window.\n\t                cb();\n\n\t                if (!element.__tmWillVisible) {\n\t                    element.invisible = false;\n\t                }\n\t            }\n\t            else {\n\t                // Delay invisible setting utill animation finished,\n\t                // avoid element vanish suddenly before animation.\n\t                !element.invisible && willInvisibleEls.push(element);\n\t            }\n\t        }\n\n\t        function prepareText(normalStyle, emphasisStyle, visualColor, contentWidth, contentHeight) {\n\t            var nodeModel = thisNode.getModel();\n\t            var text = nodeModel.get('name');\n\t            if (thisLayout.isLeafRoot) {\n\t                var iconChar = seriesModel.get('drillDownIcon', true);\n\t                text = iconChar ? iconChar + ' ' + text : text;\n\t            }\n\n\t            setText(\n\t                text, normalStyle, nodeModel, PATH_LABEL_NORMAL,\n\t                visualColor, contentWidth, contentHeight\n\t            );\n\t            setText(\n\t                text, emphasisStyle, nodeModel, PATH_LABEL_EMPHASIS,\n\t                visualColor, contentWidth, contentHeight\n\t            );\n\t        }\n\n\t        function setText(text, style, nodeModel, labelPath, visualColor, contentWidth, contentHeight) {\n\t            var labelModel = nodeModel.getModel(labelPath);\n\t            var labelTextStyleModel = labelModel.getModel('textStyle');\n\n\t            graphic.setText(style, labelModel, visualColor);\n\n\t            // text.align and text.baseline is not included by graphic.setText,\n\t            // because in most cases the two attributes are not exposed to user,\n\t            // except in treemap.\n\t            style.textAlign = labelTextStyleModel.get('align');\n\t            style.textVerticalAlign = labelTextStyleModel.get('baseline');\n\n\t            var textRect = labelTextStyleModel.getTextRect(text);\n\t            if (!labelModel.getShallow('show') || textRect.height > contentHeight) {\n\t                style.text = '';\n\t            }\n\t            else if (textRect.width > contentWidth) {\n\t                style.text = labelTextStyleModel.get('ellipsis')\n\t                    ? labelTextStyleModel.truncateText(\n\t                        text, contentWidth, null, {minChar: 2}\n\t                    )\n\t                    : '';\n\t            }\n\t            else {\n\t                style.text = text;\n\t            }\n\t        }\n\n\t        function giveGraphic(storageName, Ctor, depth, z) {\n\t            var element = oldRawIndex != null && oldStorage[storageName][oldRawIndex];\n\t            var lasts = lastsForAnimation[storageName];\n\n\t            if (element) {\n\t                // Remove from oldStorage\n\t                oldStorage[storageName][oldRawIndex] = null;\n\t                prepareAnimationWhenHasOld(lasts, element, storageName);\n\t            }\n\t            // If invisible and no old element, do not create new element (for optimizing).\n\t            else if (!thisInvisible) {\n\t                element = new Ctor({z: calculateZ(depth, z)});\n\t                element.__tmDepth = depth;\n\t                element.__tmStorageName = storageName;\n\t                prepareAnimationWhenNoOld(lasts, element, storageName);\n\t            }\n\n\t            // Set to thisStorage\n\t            return (thisStorage[storageName][thisRawIndex] = element);\n\t        }\n\n\t        function prepareAnimationWhenHasOld(lasts, element, storageName) {\n\t            var lastCfg = lasts[thisRawIndex] = {};\n\t            lastCfg.old = storageName === 'nodeGroup'\n\t                ? element.position.slice()\n\t                : zrUtil.extend({}, element.shape);\n\t        }\n\n\t        // If a element is new, we need to find the animation start point carefully,\n\t        // otherwise it will looks strange when 'zoomToNode'.\n\t        function prepareAnimationWhenNoOld(lasts, element, storageName) {\n\t            var lastCfg = lasts[thisRawIndex] = {};\n\t            var parentNode = thisNode.parentNode;\n\n\t            if (parentNode && (!reRoot || reRoot.direction === 'drillDown')) {\n\t                var parentOldX = 0;\n\t                var parentOldY = 0;\n\n\t                // New nodes appear from right-bottom corner in 'zoomToNode' animation.\n\t                // For convenience, get old bounding rect from background.\n\t                var parentOldBg = lastsForAnimation.background[parentNode.getRawIndex()];\n\t                if (!reRoot && parentOldBg && parentOldBg.old) {\n\t                    parentOldX = parentOldBg.old.width;\n\t                    parentOldY = parentOldBg.old.height;\n\t                }\n\n\t                // When no parent old shape found, its parent is new too,\n\t                // so we can just use {x:0, y:0}.\n\t                lastCfg.old = storageName === 'nodeGroup'\n\t                    ? [0, parentOldY]\n\t                    : {x: parentOldX, y: parentOldY, width: 0, height: 0};\n\t            }\n\n\t            // Fade in, user can be aware that these nodes are new.\n\t            lastCfg.fadein = storageName !== 'nodeGroup';\n\t        }\n\t    }\n\n\t    // We can not set all backgroud with the same z, Because the behaviour of\n\t    // drill down and roll up differ background creation sequence from tree\n\t    // hierarchy sequence, which cause that lowser background element overlap\n\t    // upper ones. So we calculate z based on depth.\n\t    // Moreover, we try to shrink down z interval to [0, 1] to avoid that\n\t    // treemap with large z overlaps other components.\n\t    function calculateZ(depth, zInLevel) {\n\t        var zb = depth * Z_BASE + zInLevel;\n\t        return (zb - 1) / zb;\n\t    }\n\n\n\n/***/ },\n/* 191 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t \n\n\t    var graphic = __webpack_require__(43);\n\t    var layout = __webpack_require__(21);\n\t    var zrUtil = __webpack_require__(4);\n\t    var helper = __webpack_require__(189);\n\n\t    var TEXT_PADDING = 8;\n\t    var ITEM_GAP = 8;\n\t    var ARRAY_LENGTH = 5;\n\n\t    function Breadcrumb(containerGroup) {\n\t        /**\n\t         * @private\n\t         * @type {module:zrender/container/Group}\n\t         */\n\t        this.group = new graphic.Group();\n\n\t        containerGroup.add(this.group);\n\t    }\n\n\t    Breadcrumb.prototype = {\n\n\t        constructor: Breadcrumb,\n\n\t        render: function (seriesModel, api, targetNode, onSelect) {\n\t            var model = seriesModel.getModel('breadcrumb');\n\t            var thisGroup = this.group;\n\n\t            thisGroup.removeAll();\n\n\t            if (!model.get('show') || !targetNode) {\n\t                return;\n\t            }\n\n\t            var normalStyleModel = model.getModel('itemStyle.normal');\n\t            // var emphasisStyleModel = model.getModel('itemStyle.emphasis');\n\t            var textStyleModel = normalStyleModel.getModel('textStyle');\n\n\t            var layoutParam = {\n\t                pos: {\n\t                    left: model.get('left'),\n\t                    right: model.get('right'),\n\t                    top: model.get('top'),\n\t                    bottom: model.get('bottom')\n\t                },\n\t                box: {\n\t                    width: api.getWidth(),\n\t                    height: api.getHeight()\n\t                },\n\t                emptyItemWidth: model.get('emptyItemWidth'),\n\t                totalWidth: 0,\n\t                renderList: []\n\t            };\n\n\t            this._prepare(targetNode, layoutParam, textStyleModel);\n\t            this._renderContent(seriesModel, layoutParam, normalStyleModel, textStyleModel, onSelect);\n\n\t            layout.positionElement(thisGroup, layoutParam.pos, layoutParam.box);\n\t        },\n\n\t        /**\n\t         * Prepare render list and total width\n\t         * @private\n\t         */\n\t        _prepare: function (targetNode, layoutParam, textStyleModel) {\n\t            for (var node = targetNode; node; node = node.parentNode) {\n\t                var text = node.getModel().get('name');\n\t                var textRect = textStyleModel.getTextRect(text);\n\t                var itemWidth = Math.max(\n\t                    textRect.width + TEXT_PADDING * 2,\n\t                    layoutParam.emptyItemWidth\n\t                );\n\t                layoutParam.totalWidth += itemWidth + ITEM_GAP;\n\t                layoutParam.renderList.push({node: node, text: text, width: itemWidth});\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _renderContent: function (\n\t            seriesModel, layoutParam, normalStyleModel, textStyleModel, onSelect\n\t        ) {\n\t            // Start rendering.\n\t            var lastX = 0;\n\t            var emptyItemWidth = layoutParam.emptyItemWidth;\n\t            var height = seriesModel.get('breadcrumb.height');\n\t            var availableSize = layout.getAvailableSize(layoutParam.pos, layoutParam.box);\n\t            var totalWidth = layoutParam.totalWidth;\n\t            var renderList = layoutParam.renderList;\n\n\t            for (var i = renderList.length - 1; i >= 0; i--) {\n\t                var item = renderList[i];\n\t                var itemNode = item.node;\n\t                var itemWidth = item.width;\n\t                var text = item.text;\n\n\t                // Hdie text and shorten width if necessary.\n\t                if (totalWidth > availableSize.width) {\n\t                    totalWidth -= itemWidth - emptyItemWidth;\n\t                    itemWidth = emptyItemWidth;\n\t                    text = '';\n\t                }\n\n\t                var el = new graphic.Polygon({\n\t                    shape: {\n\t                        points: makeItemPoints(\n\t                            lastX, 0, itemWidth, height,\n\t                            i === renderList.length - 1, i === 0\n\t                        )\n\t                    },\n\t                    style: zrUtil.defaults(\n\t                        normalStyleModel.getItemStyle(),\n\t                        {\n\t                            lineJoin: 'bevel',\n\t                            text: text,\n\t                            textFill: textStyleModel.getTextColor(),\n\t                            textFont: textStyleModel.getFont()\n\t                        }\n\t                    ),\n\t                    z: 10,\n\t                    onclick: zrUtil.curry(onSelect, itemNode)\n\t                });\n\t                this.group.add(el);\n\n\t                packEventData(el, seriesModel, itemNode);\n\n\t                lastX += itemWidth + ITEM_GAP;\n\t            }\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        remove: function () {\n\t            this.group.removeAll();\n\t        }\n\t    };\n\n\t    function makeItemPoints(x, y, itemWidth, itemHeight, head, tail) {\n\t        var points = [\n\t            [head ? x : x - ARRAY_LENGTH, y],\n\t            [x + itemWidth, y],\n\t            [x + itemWidth, y + itemHeight],\n\t            [head ? x : x - ARRAY_LENGTH, y + itemHeight]\n\t        ];\n\t        !tail && points.splice(2, 0, [x + itemWidth + ARRAY_LENGTH, y + itemHeight / 2]);\n\t        !head && points.push([x, y + itemHeight / 2]);\n\t        return points;\n\t    }\n\n\t    // Package custom mouse event.\n\t    function packEventData(el, seriesModel, itemNode) {\n\t        el.eventData = {\n\t            componentType: 'series',\n\t            componentSubType: 'treemap',\n\t            seriesIndex: seriesModel.componentIndex,\n\t            seriesName: seriesModel.name,\n\t            seriesType: 'treemap',\n\t            selfType: 'breadcrumb', // Distinguish with click event on treemap node.\n\t            nodeData: {\n\t                dataIndex: itemNode && itemNode.dataIndex,\n\t                name: itemNode && itemNode.name\n\t            },\n\t            treePathInfo: itemNode && helper.wrapTreePathInfo(itemNode, seriesModel)\n\t        };\n\t    }\n\n\t    module.exports = Breadcrumb;\n\n\n/***/ },\n/* 192 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t \n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    /**\n\t     * @param {number} [time=500] Time in ms\n\t     * @param {string} [easing='linear']\n\t     * @param {number} [delay=0]\n\t     * @param {Function} [callback]\n\t     *\n\t     * @example\n\t     *  // Animate position\n\t     *  animation\n\t     *      .createWrap()\n\t     *      .add(el1, {position: [10, 10]})\n\t     *      .add(el2, {shape: {width: 500}, style: {fill: 'red'}}, 400)\n\t     *      .done(function () { // done })\n\t     *      .start('cubicOut');\n\t     */\n\t    function createWrap() {\n\n\t        var storage = [];\n\t        var elExistsMap = {};\n\t        var doneCallback;\n\n\t        return {\n\n\t            /**\n\t             * Caution: a el can only be added once, otherwise 'done'\n\t             * might not be called. This method checks this (by el.id),\n\t             * suppresses adding and returns false when existing el found.\n\t             *\n\t             * @param {modele:zrender/Element} el\n\t             * @param {Object} target\n\t             * @param {number} [time=500]\n\t             * @param {number} [delay=0]\n\t             * @param {string} [easing='linear']\n\t             * @return {boolean} Whether adding succeeded.\n\t             *\n\t             * @example\n\t             *     add(el, target, time, delay, easing);\n\t             *     add(el, target, time, easing);\n\t             *     add(el, target, time);\n\t             *     add(el, target);\n\t             */\n\t            add: function (el, target, time, delay, easing) {\n\t                if (zrUtil.isString(delay)) {\n\t                    easing = delay;\n\t                    delay = 0;\n\t                }\n\n\t                if (elExistsMap[el.id]) {\n\t                    return false;\n\t                }\n\t                elExistsMap[el.id] = 1;\n\n\t                storage.push(\n\t                    {el: el, target: target, time: time, delay: delay, easing: easing}\n\t                );\n\n\t                return true;\n\t            },\n\n\t            /**\n\t             * Only execute when animation finished. Will not execute when any\n\t             * of 'stop' or 'stopAnimation' called.\n\t             *\n\t             * @param {Function} callback\n\t             */\n\t            done: function (callback) {\n\t                doneCallback = callback;\n\t                return this;\n\t            },\n\n\t            /**\n\t             * Will stop exist animation firstly.\n\t             */\n\t            start: function () {\n\t                var count = storage.length;\n\n\t                for (var i = 0, len = storage.length; i < len; i++) {\n\t                    var item = storage[i];\n\t                    item.el.animateTo(item.target, item.time, item.delay, item.easing, done);\n\t                }\n\n\t                return this;\n\n\t                function done() {\n\t                    count--;\n\t                    if (!count) {\n\t                        storage.length = 0;\n\t                        elExistsMap = {};\n\t                        doneCallback && doneCallback();\n\t                    }\n\t                }\n\t            }\n\t        };\n\t    }\n\n\t    module.exports = {createWrap: createWrap};\n\n\n/***/ },\n/* 193 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Treemap action\n\t */\n\n\n\t    var echarts = __webpack_require__(1);\n\t    var helper = __webpack_require__(189);\n\n\t    var noop = function () {};\n\n\t    var actionTypes = [\n\t        'treemapZoomToNode',\n\t        'treemapRender',\n\t        'treemapMove'\n\t    ];\n\n\t    for (var i = 0; i < actionTypes.length; i++) {\n\t        echarts.registerAction({type: actionTypes[i], update: 'updateView'}, noop);\n\t    }\n\n\t    echarts.registerAction(\n\t        {type: 'treemapRootToNode', update: 'updateView'},\n\t        function (payload, ecModel) {\n\n\t            ecModel.eachComponent(\n\t                {mainType: 'series', subType: 'treemap', query: payload},\n\t                handleRootToNode\n\t            );\n\n\t            function handleRootToNode(model, index) {\n\t                var targetInfo = helper.retrieveTargetInfo(payload, model);\n\n\t                if (targetInfo) {\n\t                    var originViewRoot = model.getViewRoot();\n\t                    if (originViewRoot) {\n\t                        payload.direction = helper.aboveViewRoot(originViewRoot, targetInfo.node)\n\t                            ? 'rollUp' : 'drillDown';\n\t                    }\n\t                    model.resetViewRoot(targetInfo.node);\n\t                }\n\t            }\n\t        }\n\t    );\n\n\n\n/***/ },\n/* 194 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var VisualMapping = __webpack_require__(195);\n\t    var zrColor = __webpack_require__(39);\n\t    var zrUtil = __webpack_require__(4);\n\t    var isArray = zrUtil.isArray;\n\n\t    var ITEM_STYLE_NORMAL = 'itemStyle.normal';\n\n\t    module.exports = function (ecModel, api, payload) {\n\n\t        var condition = {mainType: 'series', subType: 'treemap', query: payload};\n\t        ecModel.eachComponent(condition, function (seriesModel) {\n\n\t            var tree = seriesModel.getData().tree;\n\t            var root = tree.root;\n\t            var seriesItemStyleModel = seriesModel.getModel(ITEM_STYLE_NORMAL);\n\n\t            if (root.isRemoved()) {\n\t                return;\n\t            }\n\n\t            var levelItemStyles = zrUtil.map(tree.levelModels, function (levelModel) {\n\t                return levelModel ? levelModel.get(ITEM_STYLE_NORMAL) : null;\n\t            });\n\n\t            travelTree(\n\t                root, // Visual should calculate from tree root but not view root.\n\t                {},\n\t                levelItemStyles,\n\t                seriesItemStyleModel,\n\t                seriesModel.getViewRoot().getAncestors(),\n\t                seriesModel\n\t            );\n\t        });\n\t    };\n\n\t    function travelTree(\n\t        node, designatedVisual, levelItemStyles, seriesItemStyleModel,\n\t        viewRootAncestors, seriesModel\n\t    ) {\n\t        var nodeModel = node.getModel();\n\t        var nodeLayout = node.getLayout();\n\n\t        // Optimize\n\t        if (!nodeLayout || nodeLayout.invisible || !nodeLayout.isInView) {\n\t            return;\n\t        }\n\n\t        var nodeItemStyleModel = node.getModel(ITEM_STYLE_NORMAL);\n\t        var levelItemStyle = levelItemStyles[node.depth];\n\t        var visuals = buildVisuals(\n\t            nodeItemStyleModel, designatedVisual, levelItemStyle, seriesItemStyleModel\n\t        );\n\n\t        // calculate border color\n\t        var borderColor = nodeItemStyleModel.get('borderColor');\n\t        var borderColorSaturation = nodeItemStyleModel.get('borderColorSaturation');\n\t        var thisNodeColor;\n\t        if (borderColorSaturation != null) {\n\t            // For performance, do not always execute 'calculateColor'.\n\t            thisNodeColor = calculateColor(visuals, node);\n\t            borderColor = calculateBorderColor(borderColorSaturation, thisNodeColor);\n\t        }\n\t        node.setVisual('borderColor', borderColor);\n\n\t        var viewChildren = node.viewChildren;\n\t        if (!viewChildren || !viewChildren.length) {\n\t            thisNodeColor = calculateColor(visuals, node);\n\t            // Apply visual to this node.\n\t            node.setVisual('color', thisNodeColor);\n\t        }\n\t        else {\n\t            var mapping = buildVisualMapping(\n\t                node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren\n\t            );\n\n\t            // Designate visual to children.\n\t            zrUtil.each(viewChildren, function (child, index) {\n\t                // If higher than viewRoot, only ancestors of viewRoot is needed to visit.\n\t                if (child.depth >= viewRootAncestors.length\n\t                    || child === viewRootAncestors[child.depth]\n\t                ) {\n\t                    var childVisual = mapVisual(\n\t                        nodeModel, visuals, child, index, mapping, seriesModel\n\t                    );\n\t                    travelTree(\n\t                        child, childVisual, levelItemStyles, seriesItemStyleModel,\n\t                        viewRootAncestors, seriesModel\n\t                    );\n\t                }\n\t            });\n\t        }\n\t    }\n\n\t    function buildVisuals(\n\t        nodeItemStyleModel, designatedVisual, levelItemStyle, seriesItemStyleModel\n\t    ) {\n\t        var visuals = zrUtil.extend({}, designatedVisual);\n\n\t        zrUtil.each(['color', 'colorAlpha', 'colorSaturation'], function (visualName) {\n\t            // Priority: thisNode > thisLevel > parentNodeDesignated > seriesModel\n\t            var val = nodeItemStyleModel.get(visualName, true); // Ignore parent\n\t            val == null && levelItemStyle && (val = levelItemStyle[visualName]);\n\t            val == null && (val = designatedVisual[visualName]);\n\t            val == null && (val = seriesItemStyleModel.get(visualName));\n\n\t            val != null && (visuals[visualName] = val);\n\t        });\n\n\t        return visuals;\n\t    }\n\n\t    function calculateColor(visuals) {\n\t        var color = getValueVisualDefine(visuals, 'color');\n\n\t        if (color) {\n\t            var colorAlpha = getValueVisualDefine(visuals, 'colorAlpha');\n\t            var colorSaturation = getValueVisualDefine(visuals, 'colorSaturation');\n\t            if (colorSaturation) {\n\t                color = zrColor.modifyHSL(color, null, null, colorSaturation);\n\t            }\n\t            if (colorAlpha) {\n\t                color = zrColor.modifyAlpha(color, colorAlpha);\n\t            }\n\n\t            return color;\n\t        }\n\t    }\n\n\t    function calculateBorderColor(borderColorSaturation, thisNodeColor) {\n\t        return thisNodeColor != null\n\t             ? zrColor.modifyHSL(thisNodeColor, null, null, borderColorSaturation)\n\t             : null;\n\t    }\n\n\t    function getValueVisualDefine(visuals, name) {\n\t        var value = visuals[name];\n\t        if (value != null && value !== 'none') {\n\t            return value;\n\t        }\n\t    }\n\n\t    function buildVisualMapping(\n\t        node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren\n\t    ) {\n\t        if (!viewChildren || !viewChildren.length) {\n\t            return;\n\t        }\n\n\t        var rangeVisual = getRangeVisual(nodeModel, 'color')\n\t            || (\n\t                visuals.color != null\n\t                && visuals.color !== 'none'\n\t                && (\n\t                    getRangeVisual(nodeModel, 'colorAlpha')\n\t                    || getRangeVisual(nodeModel, 'colorSaturation')\n\t                )\n\t            );\n\n\t        if (!rangeVisual) {\n\t            return;\n\t        }\n\n\t        var visualMin = nodeModel.get('visualMin');\n\t        var visualMax = nodeModel.get('visualMax');\n\t        var dataExtent = nodeLayout.dataExtent.slice();\n\t        visualMin != null && visualMin < dataExtent[0] && (dataExtent[0] = visualMin);\n\t        visualMax != null && visualMax > dataExtent[1] && (dataExtent[1] = visualMax);\n\n\t        var colorMappingBy = nodeModel.get('colorMappingBy');\n\t        var opt = {\n\t            type: rangeVisual.name,\n\t            dataExtent: dataExtent,\n\t            visual: rangeVisual.range\n\t        };\n\t        if (opt.type === 'color'\n\t            && (colorMappingBy === 'index' || colorMappingBy === 'id')\n\t        ) {\n\t            opt.mappingMethod = 'category';\n\t            opt.loop = true;\n\t            // categories is ordinal, so do not set opt.categories.\n\t        }\n\t        else {\n\t            opt.mappingMethod = 'linear';\n\t        }\n\n\t        var mapping = new VisualMapping(opt);\n\t        mapping.__drColorMappingBy = colorMappingBy;\n\n\t        return mapping;\n\t    }\n\n\t    // Notice: If we dont have the attribute 'colorRange', but only use\n\t    // attribute 'color' to represent both concepts of 'colorRange' and 'color',\n\t    // (It means 'colorRange' when 'color' is Array, means 'color' when not array),\n\t    // this problem will be encountered:\n\t    // If a level-1 node dont have children, and its siblings has children,\n\t    // and colorRange is set on level-1, then the node can not be colored.\n\t    // So we separate 'colorRange' and 'color' to different attributes.\n\t    function getRangeVisual(nodeModel, name) {\n\t        // 'colorRange', 'colorARange', 'colorSRange'.\n\t        // If not exsits on this node, fetch from levels and series.\n\t        var range = nodeModel.get(name);\n\t        return (isArray(range) && range.length) ? {name: name, range: range} : null;\n\t    }\n\n\t    function mapVisual(nodeModel, visuals, child, index, mapping, seriesModel) {\n\t        var childVisuals = zrUtil.extend({}, visuals);\n\n\t        if (mapping) {\n\t            var mappingType = mapping.type;\n\t            var colorMappingBy = mappingType === 'color' && mapping.__drColorMappingBy;\n\t            var value =\n\t                colorMappingBy === 'index'\n\t                ? index\n\t                : colorMappingBy === 'id'\n\t                ? seriesModel.mapIdToIndex(child.getId())\n\t                : child.getValue(nodeModel.get('visualDimension'));\n\n\t            childVisuals[mappingType] = mapping.mapValueToVisual(value);\n\t        }\n\n\t        return childVisuals;\n\t    }\n\n\n\n/***/ },\n/* 195 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Visual mapping.\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var zrColor = __webpack_require__(39);\n\t    var linearMap = __webpack_require__(7).linearMap;\n\t    var each = zrUtil.each;\n\t    var isObject = zrUtil.isObject;\n\n\t    var CATEGORY_DEFAULT_VISUAL_INDEX = -1;\n\n\t    /**\n\t     * @param {Object} option\n\t     * @param {string} [option.type] See visualHandlers.\n\t     * @param {string} [option.mappingMethod] 'linear' or 'piecewise' or 'category' or 'fixed'\n\t     * @param {Array.<number>=} [option.dataExtent] [minExtent, maxExtent],\n\t     *                                              required when mappingMethod is 'linear'\n\t     * @param {Array.<Object>=} [option.pieceList] [\n\t     *                                             {value: someValue},\n\t     *                                             {interval: [min1, max1], visual: {...}},\n\t     *                                             {interval: [min2, max2]}\n\t     *                                             ],\n\t     *                                            required when mappingMethod is 'piecewise'.\n\t     *                                            Visual for only each piece can be specified.\n\t     * @param {Array.<string|Object>=} [option.categories] ['cate1', 'cate2']\n\t     *                                            required when mappingMethod is 'category'.\n\t     *                                            If no option.categories, categories is set\n\t     *                                            as [0, 1, 2, ...].\n\t     * @param {boolean} [option.loop=false] Whether loop mapping when mappingMethod is 'category'.\n\t     * @param {(Array|Object|*)} [option.visual]  Visual data.\n\t     *                                            when mappingMethod is 'category',\n\t     *                                            visual data can be array or object\n\t     *                                            (like: {cate1: '#222', none: '#fff'})\n\t     *                                            or primary types (which represents\n\t     *                                            defualt category visual), otherwise visual\n\t     *                                            can be array or primary (which will be\n\t     *                                            normalized to array).\n\t     *\n\t     */\n\t    var VisualMapping = function (option) {\n\t        var mappingMethod = option.mappingMethod;\n\t        var visualType = option.type;\n\n\t        /**\n\t         * @readOnly\n\t         * @type {Object}\n\t         */\n\t        var thisOption = this.option = zrUtil.clone(option);\n\n\t        /**\n\t         * @readOnly\n\t         * @type {string}\n\t         */\n\t        this.type = visualType;\n\n\t        /**\n\t         * @readOnly\n\t         * @type {string}\n\t         */\n\t        this.mappingMethod = mappingMethod;\n\n\t        /**\n\t         * @private\n\t         * @type {Function}\n\t         */\n\t        this._normalizeData = normalizers[mappingMethod];\n\n\t        var visualHandler = visualHandlers[visualType];\n\n\t        /**\n\t         * @public\n\t         * @type {Function}\n\t         */\n\t        this.applyVisual = visualHandler.applyVisual;\n\n\t        /**\n\t         * @public\n\t         * @type {Function}\n\t         */\n\t        this.getColorMapper = visualHandler.getColorMapper;\n\n\t        /**\n\t         * @private\n\t         * @type {Function}\n\t         */\n\t        this._doMap = visualHandler._doMap[mappingMethod];\n\n\t        if (mappingMethod === 'piecewise') {\n\t            normalizeVisualRange(thisOption);\n\t            preprocessForPiecewise(thisOption);\n\t        }\n\t        else if (mappingMethod === 'category') {\n\t            thisOption.categories\n\t                ? preprocessForSpecifiedCategory(thisOption)\n\t                // categories is ordinal when thisOption.categories not specified,\n\t                // which need no more preprocess except normalize visual.\n\t                : normalizeVisualRange(thisOption, true);\n\t        }\n\t        else { // mappingMethod === 'linear' or 'fixed'\n\t            zrUtil.assert(mappingMethod !== 'linear' || thisOption.dataExtent);\n\t            normalizeVisualRange(thisOption);\n\t        }\n\t    };\n\n\t    VisualMapping.prototype = {\n\n\t        constructor: VisualMapping,\n\n\t        mapValueToVisual: function (value) {\n\t            var normalized = this._normalizeData(value);\n\t            return this._doMap(normalized, value);\n\t        },\n\n\t        getNormalizer: function () {\n\t            return zrUtil.bind(this._normalizeData, this);\n\t        }\n\t    };\n\n\t    var visualHandlers = VisualMapping.visualHandlers = {\n\n\t        color: {\n\n\t            applyVisual: makeApplyVisual('color'),\n\n\t            /**\n\t             * Create a mapper function\n\t             * @return {Function}\n\t             */\n\t            getColorMapper: function () {\n\t                var thisOption = this.option;\n\t                var parsedVisual = zrUtil.map(thisOption.visual, zrColor.parse);\n\n\t                return zrUtil.bind(\n\t                    thisOption.mappingMethod === 'category'\n\t                        ? function (value, isNormalized) {\n\t                            !isNormalized && (value = this._normalizeData(value));\n\t                            return doMapCategory.call(this, value);\n\t                        }\n\t                        : function (value, isNormalized, out) {\n\t                            // If output rgb array\n\t                            // which will be much faster and useful in pixel manipulation\n\t                            var returnRGBArray = !!out;\n\t                            !isNormalized && (value = this._normalizeData(value));\n\t                            out = zrColor.fastMapToColor(value, parsedVisual, out);\n\t                            return returnRGBArray ? out : zrUtil.stringify(out, 'rgba');\n\t                        },\n\t                    this\n\t                );\n\t            },\n\n\t            _doMap: {\n\t                linear: function (normalized) {\n\t                    return zrColor.mapToColor(normalized, this.option.visual);\n\t                },\n\t                category: doMapCategory,\n\t                piecewise: function (normalized, value) {\n\t                    var result = getSpecifiedVisual.call(this, value);\n\t                    if (result == null) {\n\t                        result = zrColor.mapToColor(normalized, this.option.visual);\n\t                    }\n\t                    return result;\n\t                },\n\t                fixed: doMapFixed\n\t            }\n\t        },\n\n\t        colorHue: makePartialColorVisualHandler(function (color, value) {\n\t            return zrColor.modifyHSL(color, value);\n\t        }),\n\n\t        colorSaturation: makePartialColorVisualHandler(function (color, value) {\n\t            return zrColor.modifyHSL(color, null, value);\n\t        }),\n\n\t        colorLightness: makePartialColorVisualHandler(function (color, value) {\n\t            return zrColor.modifyHSL(color, null, null, value);\n\t        }),\n\n\t        colorAlpha: makePartialColorVisualHandler(function (color, value) {\n\t            return zrColor.modifyAlpha(color, value);\n\t        }),\n\n\t        opacity: {\n\t            applyVisual: makeApplyVisual('opacity'),\n\t            _doMap: makeDoMap([0, 1])\n\t        },\n\n\t        symbol: {\n\t            applyVisual: function (value, getter, setter) {\n\t                var symbolCfg = this.mapValueToVisual(value);\n\t                if (zrUtil.isString(symbolCfg)) {\n\t                    setter('symbol', symbolCfg);\n\t                }\n\t                else if (isObject(symbolCfg)) {\n\t                    for (var name in symbolCfg) {\n\t                        if (symbolCfg.hasOwnProperty(name)) {\n\t                            setter(name, symbolCfg[name]);\n\t                        }\n\t                    }\n\t                }\n\t            },\n\t            _doMap: {\n\t                linear: doMapToArray,\n\t                category: doMapCategory,\n\t                piecewise: function (normalized, value) {\n\t                    var result = getSpecifiedVisual.call(this, value);\n\t                    if (result == null) {\n\t                        result = doMapToArray.call(this, normalized);\n\t                    }\n\t                    return result;\n\t                },\n\t                fixed: doMapFixed\n\t            }\n\t        },\n\n\t        symbolSize: {\n\t            applyVisual: makeApplyVisual('symbolSize'),\n\t            _doMap: makeDoMap([0, 1])\n\t        }\n\t    };\n\n\n\t    function preprocessForPiecewise(thisOption) {\n\t        var pieceList = thisOption.pieceList;\n\t        thisOption.hasSpecialVisual = false;\n\n\t        zrUtil.each(pieceList, function (piece, index) {\n\t            piece.originIndex = index;\n\t            // piece.visual is \"result visual value\" but not\n\t            // a visual range, so it does not need to be normalized.\n\t            if (piece.visual != null) {\n\t                thisOption.hasSpecialVisual = true;\n\t            }\n\t        });\n\t    }\n\n\t    function preprocessForSpecifiedCategory(thisOption) {\n\t        // Hash categories.\n\t        var categories = thisOption.categories;\n\t        var visual = thisOption.visual;\n\n\t        var categoryMap = thisOption.categoryMap = {};\n\t        each(categories, function (cate, index) {\n\t            categoryMap[cate] = index;\n\t        });\n\n\t        // Process visual map input.\n\t        if (!zrUtil.isArray(visual)) {\n\t            var visualArr = [];\n\n\t            if (zrUtil.isObject(visual)) {\n\t                each(visual, function (v, cate) {\n\t                    var index = categoryMap[cate];\n\t                    visualArr[index != null ? index : CATEGORY_DEFAULT_VISUAL_INDEX] = v;\n\t                });\n\t            }\n\t            else { // Is primary type, represents default visual.\n\t                visualArr[CATEGORY_DEFAULT_VISUAL_INDEX] = visual;\n\t            }\n\n\t            visual = thisOption.visual = visualArr;\n\t        }\n\n\t        // Remove categories that has no visual,\n\t        // then we can mapping them to CATEGORY_DEFAULT_VISUAL_INDEX.\n\t        for (var i = categories.length - 1; i >= 0; i--) {\n\t            if (visual[i] == null) {\n\t                delete categoryMap[categories[i]];\n\t                categories.pop();\n\t            }\n\t        }\n\t    }\n\n\t    function normalizeVisualRange(thisOption, isCategory) {\n\t        var visual = thisOption.visual;\n\t        var visualArr = [];\n\n\t        if (zrUtil.isObject(visual)) {\n\t            each(visual, function (v) {\n\t                visualArr.push(v);\n\t            });\n\t        }\n\t        else if (visual != null) {\n\t            visualArr.push(visual);\n\t        }\n\n\t        var doNotNeedPair = {color: 1, symbol: 1};\n\n\t        if (!isCategory\n\t            && visualArr.length === 1\n\t            && !doNotNeedPair.hasOwnProperty(thisOption.type)\n\t        ) {\n\t            // Do not care visualArr.length === 0, which is illegal.\n\t            visualArr[1] = visualArr[0];\n\t        }\n\n\t        thisOption.visual = visualArr;\n\t    }\n\n\t    function makePartialColorVisualHandler(applyValue) {\n\t        return {\n\t            applyVisual: function (value, getter, setter) {\n\t                value = this.mapValueToVisual(value);\n\t                // Must not be array value\n\t                setter('color', applyValue(getter('color'), value));\n\t            },\n\t            _doMap: makeDoMap([0, 1])\n\t        };\n\t    }\n\n\t    function doMapToArray(normalized) {\n\t        var visual = this.option.visual;\n\t        return visual[\n\t            Math.round(linearMap(normalized, [0, 1], [0, visual.length - 1], true))\n\t        ] || {};\n\t    }\n\n\t    function makeApplyVisual(visualType) {\n\t        return function (value, getter, setter) {\n\t            setter(visualType, this.mapValueToVisual(value));\n\t        };\n\t    }\n\n\t    function doMapCategory(normalized) {\n\t        var visual = this.option.visual;\n\t        return visual[\n\t            (this.option.loop && normalized !== CATEGORY_DEFAULT_VISUAL_INDEX)\n\t                ? normalized % visual.length\n\t                : normalized\n\t        ];\n\t    }\n\n\t    function doMapFixed() {\n\t        return this.option.visual[0];\n\t    }\n\n\t    function makeDoMap(sourceExtent) {\n\t        return {\n\t            linear: function (normalized) {\n\t                return linearMap(normalized, sourceExtent, this.option.visual, true);\n\t            },\n\t            category: doMapCategory,\n\t            piecewise: function (normalized, value) {\n\t                var result = getSpecifiedVisual.call(this, value);\n\t                if (result == null) {\n\t                    result = linearMap(normalized, sourceExtent, this.option.visual, true);\n\t                }\n\t                return result;\n\t            },\n\t            fixed: doMapFixed\n\t        };\n\t    }\n\n\t    function getSpecifiedVisual(value) {\n\t        var thisOption = this.option;\n\t        var pieceList = thisOption.pieceList;\n\t        if (thisOption.hasSpecialVisual) {\n\t            var pieceIndex = VisualMapping.findPieceIndex(value, pieceList);\n\t            var piece = pieceList[pieceIndex];\n\t            if (piece && piece.visual) {\n\t                return piece.visual[this.type];\n\t            }\n\t        }\n\t    }\n\n\n\t    /**\n\t     * Normalizers by mapping methods.\n\t     */\n\t    var normalizers = {\n\n\t        linear: function (value) {\n\t            return linearMap(value, this.option.dataExtent, [0, 1], true);\n\t        },\n\n\t        piecewise: function (value) {\n\t            var pieceList = this.option.pieceList;\n\t            var pieceIndex = VisualMapping.findPieceIndex(value, pieceList, true);\n\t            if (pieceIndex != null) {\n\t                return linearMap(pieceIndex, [0, pieceList.length - 1], [0, 1], true);\n\t            }\n\t        },\n\n\t        category: function (value) {\n\t            var index = this.option.categories\n\t                ? this.option.categoryMap[value]\n\t                : value; // ordinal\n\t            return index == null ? CATEGORY_DEFAULT_VISUAL_INDEX : index;\n\t        },\n\n\t        fixed: zrUtil.noop\n\t    };\n\n\n\n\t    /**\n\t     * List available visual types.\n\t     *\n\t     * @public\n\t     * @return {Array.<string>}\n\t     */\n\t    VisualMapping.listVisualTypes = function () {\n\t        var visualTypes = [];\n\t        zrUtil.each(visualHandlers, function (handler, key) {\n\t            visualTypes.push(key);\n\t        });\n\t        return visualTypes;\n\t    };\n\n\t    /**\n\t     * @public\n\t     */\n\t    VisualMapping.addVisualHandler = function (name, handler) {\n\t        visualHandlers[name] = handler;\n\t    };\n\n\t    /**\n\t     * @public\n\t     */\n\t    VisualMapping.isValidType = function (visualType) {\n\t        return visualHandlers.hasOwnProperty(visualType);\n\t    };\n\n\t    /**\n\t     * Convinent method.\n\t     * Visual can be Object or Array or primary type.\n\t     *\n\t     * @public\n\t     */\n\t    VisualMapping.eachVisual = function (visual, callback, context) {\n\t        if (zrUtil.isObject(visual)) {\n\t            zrUtil.each(visual, callback, context);\n\t        }\n\t        else {\n\t            callback.call(context, visual);\n\t        }\n\t    };\n\n\t    VisualMapping.mapVisual = function (visual, callback, context) {\n\t        var isPrimary;\n\t        var newVisual = zrUtil.isArray(visual)\n\t            ? []\n\t            : zrUtil.isObject(visual)\n\t            ? {}\n\t            : (isPrimary = true, null);\n\n\t        VisualMapping.eachVisual(visual, function (v, key) {\n\t            var newVal = callback.call(context, v, key);\n\t            isPrimary ? (newVisual = newVal) : (newVisual[key] = newVal);\n\t        });\n\t        return newVisual;\n\t    };\n\n\t    /**\n\t     * @public\n\t     * @param {Object} obj\n\t     * @return {Oject} new object containers visual values.\n\t     *                 If no visuals, return null.\n\t     */\n\t    VisualMapping.retrieveVisuals = function (obj) {\n\t        var ret = {};\n\t        var hasVisual;\n\n\t        obj && each(visualHandlers, function (h, visualType) {\n\t            if (obj.hasOwnProperty(visualType)) {\n\t                ret[visualType] = obj[visualType];\n\t                hasVisual = true;\n\t            }\n\t        });\n\n\t        return hasVisual ? ret : null;\n\t    };\n\n\t    /**\n\t     * Give order to visual types, considering colorSaturation, colorAlpha depends on color.\n\t     *\n\t     * @public\n\t     * @param {(Object|Array)} visualTypes If Object, like: {color: ..., colorSaturation: ...}\n\t     *                                     IF Array, like: ['color', 'symbol', 'colorSaturation']\n\t     * @return {Array.<string>} Sorted visual types.\n\t     */\n\t    VisualMapping.prepareVisualTypes = function (visualTypes) {\n\t        if (isObject(visualTypes)) {\n\t            var types = [];\n\t            each(visualTypes, function (item, type) {\n\t                types.push(type);\n\t            });\n\t            visualTypes = types;\n\t        }\n\t        else if (zrUtil.isArray(visualTypes)) {\n\t            visualTypes = visualTypes.slice();\n\t        }\n\t        else {\n\t            return [];\n\t        }\n\n\t        visualTypes.sort(function (type1, type2) {\n\t            // color should be front of colorSaturation, colorAlpha, ...\n\t            // symbol and symbolSize do not matter.\n\t            return (type2 === 'color' && type1 !== 'color' && type1.indexOf('color') === 0)\n\t                ? 1 : -1;\n\t        });\n\n\t        return visualTypes;\n\t    };\n\n\t    /**\n\t     * 'color', 'colorSaturation', 'colorAlpha', ... are depends on 'color'.\n\t     * Other visuals are only depends on themself.\n\t     *\n\t     * @public\n\t     * @param {string} visualType1\n\t     * @param {string} visualType2\n\t     * @return {boolean}\n\t     */\n\t    VisualMapping.dependsOn = function (visualType1, visualType2) {\n\t        return visualType2 === 'color'\n\t            ? !!(visualType1 && visualType1.indexOf(visualType2) === 0)\n\t            : visualType1 === visualType2;\n\t    };\n\n\t    /**\n\t     * @param {number} value\n\t     * @param {Array.<Object>} pieceList [{value: ..., interval: [min, max]}, ...]\n\t     *                         Always from small to big.\n\t     * @param {boolean} [findClosestWhenOutside=false]\n\t     * @return {number} index\n\t     */\n\t    VisualMapping.findPieceIndex = function (value, pieceList, findClosestWhenOutside) {\n\t        var possibleI;\n\t        var abs = Infinity;\n\n\t        // value has the higher priority.\n\t        for (var i = 0, len = pieceList.length; i < len; i++) {\n\t            var pieceValue = pieceList[i].value;\n\t            if (pieceValue != null) {\n\t                if (pieceValue === value) {\n\t                    return i;\n\t                }\n\t                findClosestWhenOutside && updatePossible(pieceValue, i);\n\t            }\n\t        }\n\n\t        for (var i = 0, len = pieceList.length; i < len; i++) {\n\t            var piece = pieceList[i];\n\t            var interval = piece.interval;\n\t            var close = piece.close;\n\n\t            if (interval) {\n\t                if (interval[0] === -Infinity) {\n\t                    if (littleThan(close[1], value, interval[1])) {\n\t                        return i;\n\t                    }\n\t                }\n\t                else if (interval[1] === Infinity) {\n\t                    if (littleThan(close[0], interval[0], value)) {\n\t                        return i;\n\t                    }\n\t                }\n\t                else if (\n\t                    littleThan(close[0], interval[0], value)\n\t                    && littleThan(close[1], value, interval[1])\n\t                ) {\n\t                    return i;\n\t                }\n\t                findClosestWhenOutside && updatePossible(interval[0], i);\n\t                findClosestWhenOutside && updatePossible(interval[1], i);\n\t            }\n\t        }\n\n\t        if (findClosestWhenOutside) {\n\t            return value === Infinity\n\t                ? pieceList.length - 1\n\t                : value === -Infinity\n\t                ? 0\n\t                : possibleI;\n\t        }\n\n\t        function updatePossible(val, index) {\n\t            var newAbs = Math.abs(val - value);\n\t            if (newAbs < abs) {\n\t                abs = newAbs;\n\t                possibleI = index;\n\t            }\n\t        }\n\n\t    };\n\n\t    function littleThan(close, a, b) {\n\t        return close ? a <= b : a < b;\n\t    }\n\n\t    module.exports = VisualMapping;\n\n\n\n/***/ },\n/* 196 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var numberUtil = __webpack_require__(7);\n\t    var layout = __webpack_require__(21);\n\t    var helper = __webpack_require__(189);\n\t    var BoundingRect = __webpack_require__(9);\n\t    var helper = __webpack_require__(189);\n\n\t    var mathMax = Math.max;\n\t    var mathMin = Math.min;\n\t    var parsePercent = numberUtil.parsePercent;\n\t    var retrieveValue = zrUtil.retrieve;\n\t    var each = zrUtil.each;\n\n\t    /**\n\t     * @public\n\t     */\n\t    function update(ecModel, api, payload) {\n\t        // Layout result in each node:\n\t        // {x, y, width, height, area, borderWidth}\n\t        var condition = {mainType: 'series', subType: 'treemap', query: payload};\n\t        ecModel.eachComponent(condition, function (seriesModel) {\n\n\t            var ecWidth = api.getWidth();\n\t            var ecHeight = api.getHeight();\n\t            var seriesOption = seriesModel.option;\n\n\t            var layoutInfo = layout.getLayoutRect(\n\t                seriesModel.getBoxLayoutParams(),\n\t                {\n\t                    width: api.getWidth(),\n\t                    height: api.getHeight()\n\t                }\n\t            );\n\n\t            var size = seriesOption.size || []; // Compatible with ec2.\n\t            var containerWidth = parsePercent(\n\t                retrieveValue(layoutInfo.width, size[0]),\n\t                ecWidth\n\t            );\n\t            var containerHeight = parsePercent(\n\t                retrieveValue(layoutInfo.height, size[1]),\n\t                ecHeight\n\t            );\n\n\t            // Fetch payload info.\n\t            var payloadType = payload && payload.type;\n\t            var targetInfo = helper.retrieveTargetInfo(payload, seriesModel);\n\t            var rootRect = (payloadType === 'treemapRender' || payloadType === 'treemapMove')\n\t                ? payload.rootRect : null;\n\t            var viewRoot = seriesModel.getViewRoot();\n\t            var viewAbovePath = helper.getPathToRoot(viewRoot);\n\n\t            if (payloadType !== 'treemapMove') {\n\t                var rootSize = payloadType === 'treemapZoomToNode'\n\t                    ? estimateRootSize(\n\t                        seriesModel, targetInfo, viewRoot, containerWidth, containerHeight\n\t                    )\n\t                    : rootRect\n\t                    ? [rootRect.width, rootRect.height]\n\t                    : [containerWidth, containerHeight];\n\n\t                var sort = seriesOption.sort;\n\t                if (sort && sort !== 'asc' && sort !== 'desc') {\n\t                    sort = 'desc';\n\t                }\n\t                var options = {\n\t                    squareRatio: seriesOption.squareRatio,\n\t                    sort: sort,\n\t                    leafDepth: seriesOption.leafDepth\n\t                };\n\n\t                // layout should be cleared because using updateView but not update.\n\t                viewRoot.hostTree.clearLayouts();\n\n\t                // TODO\n\t                // optimize: if out of view clip, do not layout.\n\t                // But take care that if do not render node out of view clip,\n\t                // how to calculate start po\n\n\t                var viewRootLayout = {\n\t                    x: 0, y: 0,\n\t                    width: rootSize[0], height: rootSize[1],\n\t                    area: rootSize[0] * rootSize[1]\n\t                };\n\t                viewRoot.setLayout(viewRootLayout);\n\n\t                squarify(viewRoot, options, false, 0);\n\t                // Supplement layout.\n\t                var viewRootLayout = viewRoot.getLayout();\n\t                each(viewAbovePath, function (node, index) {\n\t                    var childValue = (viewAbovePath[index + 1] || viewRoot).getValue();\n\t                    node.setLayout(zrUtil.extend(\n\t                        {dataExtent: [childValue, childValue], borderWidth: 0},\n\t                        viewRootLayout\n\t                    ));\n\t                });\n\t            }\n\n\t            var treeRoot = seriesModel.getData().tree.root;\n\n\t            treeRoot.setLayout(\n\t                calculateRootPosition(layoutInfo, rootRect, targetInfo),\n\t                true\n\t            );\n\n\t            seriesModel.setLayoutInfo(layoutInfo);\n\n\t            // FIXME\n\t            // 现在没有clip功能，暂时取ec高宽。\n\t            prunning(\n\t                treeRoot,\n\t                // Transform to base element coordinate system.\n\t                new BoundingRect(-layoutInfo.x, -layoutInfo.y, ecWidth, ecHeight),\n\t                viewAbovePath,\n\t                viewRoot,\n\t                0\n\t            );\n\t        });\n\t    }\n\n\t    /**\n\t     * Layout treemap with squarify algorithm.\n\t     * @see https://graphics.ethz.ch/teaching/scivis_common/Literature/squarifiedTreeMaps.pdf\n\t     * @see https://github.com/mbostock/d3/blob/master/src/layout/treemap.js\n\t     *\n\t     * @protected\n\t     * @param {module:echarts/data/Tree~TreeNode} node\n\t     * @param {Object} options\n\t     * @param {string} options.sort 'asc' or 'desc'\n\t     * @param {number} options.squareRatio\n\t     * @param {boolean} hideChildren\n\t     * @param {number} depth\n\t     */\n\t    function squarify(node, options, hideChildren, depth) {\n\t        var width;\n\t        var height;\n\n\t        if (node.isRemoved()) {\n\t            return;\n\t        }\n\n\t        var thisLayout = node.getLayout();\n\t        width = thisLayout.width;\n\t        height = thisLayout.height;\n\n\t        // Considering border and gap\n\t        var itemStyleModel = node.getModel('itemStyle.normal');\n\t        var borderWidth = itemStyleModel.get('borderWidth');\n\t        var halfGapWidth = itemStyleModel.get('gapWidth') / 2;\n\t        var layoutOffset = borderWidth - halfGapWidth;\n\t        var nodeModel = node.getModel();\n\n\t        node.setLayout({borderWidth: borderWidth}, true);\n\n\t        width = mathMax(width - 2 * layoutOffset, 0);\n\t        height = mathMax(height - 2 * layoutOffset, 0);\n\n\t        var totalArea = width * height;\n\t        var viewChildren = initChildren(\n\t            node, nodeModel, totalArea, options, hideChildren, depth\n\t        );\n\n\t        if (!viewChildren.length) {\n\t            return;\n\t        }\n\n\t        var rect = {x: layoutOffset, y: layoutOffset, width: width, height: height};\n\t        var rowFixedLength = mathMin(width, height);\n\t        var best = Infinity; // the best row score so far\n\t        var row = [];\n\t        row.area = 0;\n\n\t        for (var i = 0, len = viewChildren.length; i < len;) {\n\t            var child = viewChildren[i];\n\n\t            row.push(child);\n\t            row.area += child.getLayout().area;\n\t            var score = worst(row, rowFixedLength, options.squareRatio);\n\n\t            // continue with this orientation\n\t            if (score <= best) {\n\t                i++;\n\t                best = score;\n\t            }\n\t            // abort, and try a different orientation\n\t            else {\n\t                row.area -= row.pop().getLayout().area;\n\t                position(row, rowFixedLength, rect, halfGapWidth, false);\n\t                rowFixedLength = mathMin(rect.width, rect.height);\n\t                row.length = row.area = 0;\n\t                best = Infinity;\n\t            }\n\t        }\n\n\t        if (row.length) {\n\t            position(row, rowFixedLength, rect, halfGapWidth, true);\n\t        }\n\n\t        if (!hideChildren) {\n\t            var childrenVisibleMin = nodeModel.get('childrenVisibleMin');\n\t            if (childrenVisibleMin != null && totalArea < childrenVisibleMin) {\n\t                hideChildren = true;\n\t            }\n\t        }\n\n\t        for (var i = 0, len = viewChildren.length; i < len; i++) {\n\t            squarify(viewChildren[i], options, hideChildren, depth + 1);\n\t        }\n\t    }\n\n\t    /**\n\t     * Set area to each child, and calculate data extent for visual coding.\n\t     */\n\t    function initChildren(node, nodeModel, totalArea, options, hideChildren, depth) {\n\t        var viewChildren = node.children || [];\n\t        var orderBy = options.sort;\n\t        orderBy !== 'asc' && orderBy !== 'desc' && (orderBy = null);\n\n\t        var overLeafDepth = options.leafDepth != null && options.leafDepth <= depth;\n\n\t        // leafDepth has higher priority.\n\t        if (hideChildren && !overLeafDepth) {\n\t            return (node.viewChildren = []);\n\t        }\n\n\t        // Sort children, order by desc.\n\t        viewChildren = zrUtil.filter(viewChildren, function (child) {\n\t            return !child.isRemoved();\n\t        });\n\n\t        sort(viewChildren, orderBy);\n\n\t        var info = statistic(nodeModel, viewChildren, orderBy);\n\n\t        if (info.sum === 0) {\n\t            return (node.viewChildren = []);\n\t        }\n\n\t        info.sum = filterByThreshold(nodeModel, totalArea, info.sum, orderBy, viewChildren);\n\n\t        if (info.sum === 0) {\n\t            return (node.viewChildren = []);\n\t        }\n\n\t        // Set area to each child.\n\t        for (var i = 0, len = viewChildren.length; i < len; i++) {\n\t            var area = viewChildren[i].getValue() / info.sum * totalArea;\n\t            // Do not use setLayout({...}, true), because it is needed to clear last layout.\n\t            viewChildren[i].setLayout({area: area});\n\t        }\n\n\t        if (overLeafDepth) {\n\t            viewChildren.length && node.setLayout({isLeafRoot: true}, true);\n\t            viewChildren.length = 0;\n\t        }\n\n\t        node.viewChildren = viewChildren;\n\t        node.setLayout({dataExtent: info.dataExtent}, true);\n\n\t        return viewChildren;\n\t    }\n\n\t    /**\n\t     * Consider 'visibleMin'. Modify viewChildren and get new sum.\n\t     */\n\t    function filterByThreshold(nodeModel, totalArea, sum, orderBy, orderedChildren) {\n\n\t        // visibleMin is not supported yet when no option.sort.\n\t        if (!orderBy) {\n\t            return sum;\n\t        }\n\n\t        var visibleMin = nodeModel.get('visibleMin');\n\t        var len = orderedChildren.length;\n\t        var deletePoint = len;\n\n\t        // Always travel from little value to big value.\n\t        for (var i = len - 1; i >= 0; i--) {\n\t            var value = orderedChildren[\n\t                orderBy === 'asc' ? len - i - 1 : i\n\t            ].getValue();\n\n\t            if (value / sum * totalArea < visibleMin) {\n\t                deletePoint = i;\n\t                sum -= value;\n\t            }\n\t        }\n\n\t        orderBy === 'asc'\n\t            ? orderedChildren.splice(0, len - deletePoint)\n\t            : orderedChildren.splice(deletePoint, len - deletePoint);\n\n\t        return sum;\n\t    }\n\n\t    /**\n\t     * Sort\n\t     */\n\t    function sort(viewChildren, orderBy) {\n\t        if (orderBy) {\n\t            viewChildren.sort(function (a, b) {\n\t                return orderBy === 'asc'\n\t                    ?  a.getValue() - b.getValue() : b.getValue() - a.getValue();\n\t            });\n\t        }\n\t        return viewChildren;\n\t    }\n\n\t    /**\n\t     * Statistic\n\t     */\n\t    function statistic(nodeModel, children, orderBy) {\n\t        // Calculate sum.\n\t        var sum = 0;\n\t        for (var i = 0, len = children.length; i < len; i++) {\n\t            sum += children[i].getValue();\n\t        }\n\n\t        // Statistic data extent for latter visual coding.\n\t        // Notice: data extent should be calculate based on raw children\n\t        // but not filtered view children, otherwise visual mapping will not\n\t        // be stable when zoom (where children is filtered by visibleMin).\n\n\t        var dimension = nodeModel.get('visualDimension');\n\t        var dataExtent;\n\n\t        // The same as area dimension.\n\t        if (!children || !children.length) {\n\t            dataExtent = [NaN, NaN];\n\t        }\n\t        else if (dimension === 'value' && orderBy) {\n\t            dataExtent = [\n\t                children[children.length - 1].getValue(),\n\t                children[0].getValue()\n\t            ];\n\t            orderBy === 'asc' && dataExtent.reverse();\n\t        }\n\t        // Other dimension.\n\t        else {\n\t            var dataExtent = [Infinity, -Infinity];\n\t            each(children, function (child) {\n\t                var value = child.getValue(dimension);\n\t                value < dataExtent[0] && (dataExtent[0] = value);\n\t                value > dataExtent[1] && (dataExtent[1] = value);\n\t            });\n\t        }\n\n\t        return {sum: sum, dataExtent: dataExtent};\n\t    }\n\n\t    /**\n\t     * Computes the score for the specified row,\n\t     * as the worst aspect ratio.\n\t     */\n\t    function worst(row, rowFixedLength, ratio) {\n\t        var areaMax = 0;\n\t        var areaMin = Infinity;\n\n\t        for (var i = 0, area, len = row.length; i < len; i++) {\n\t            area = row[i].getLayout().area;\n\t            if (area) {\n\t                area < areaMin && (areaMin = area);\n\t                area > areaMax && (areaMax = area);\n\t            }\n\t        }\n\n\t        var squareArea = row.area * row.area;\n\t        var f = rowFixedLength * rowFixedLength * ratio;\n\n\t        return squareArea\n\t            ? mathMax(\n\t                (f * areaMax) / squareArea,\n\t                squareArea / (f * areaMin)\n\t            )\n\t            : Infinity;\n\t    }\n\n\t    /**\n\t     * Positions the specified row of nodes. Modifies `rect`.\n\t     */\n\t    function position(row, rowFixedLength, rect, halfGapWidth, flush) {\n\t        // When rowFixedLength === rect.width,\n\t        // it is horizontal subdivision,\n\t        // rowFixedLength is the width of the subdivision,\n\t        // rowOtherLength is the height of the subdivision,\n\t        // and nodes will be positioned from left to right.\n\n\t        // wh[idx0WhenH] means: when horizontal,\n\t        //      wh[idx0WhenH] => wh[0] => 'width'.\n\t        //      xy[idx1WhenH] => xy[1] => 'y'.\n\t        var idx0WhenH = rowFixedLength === rect.width ? 0 : 1;\n\t        var idx1WhenH = 1 - idx0WhenH;\n\t        var xy = ['x', 'y'];\n\t        var wh = ['width', 'height'];\n\n\t        var last = rect[xy[idx0WhenH]];\n\t        var rowOtherLength = rowFixedLength\n\t            ? row.area / rowFixedLength : 0;\n\n\t        if (flush || rowOtherLength > rect[wh[idx1WhenH]]) {\n\t            rowOtherLength = rect[wh[idx1WhenH]]; // over+underflow\n\t        }\n\t        for (var i = 0, rowLen = row.length; i < rowLen; i++) {\n\t            var node = row[i];\n\t            var nodeLayout = {};\n\t            var step = rowOtherLength\n\t                ? node.getLayout().area / rowOtherLength : 0;\n\n\t            var wh1 = nodeLayout[wh[idx1WhenH]] = mathMax(rowOtherLength - 2 * halfGapWidth, 0);\n\n\t            // We use Math.max/min to avoid negative width/height when considering gap width.\n\t            var remain = rect[xy[idx0WhenH]] + rect[wh[idx0WhenH]] - last;\n\t            var modWH = (i === rowLen - 1 || remain < step) ? remain : step;\n\t            var wh0 = nodeLayout[wh[idx0WhenH]] = mathMax(modWH - 2 * halfGapWidth, 0);\n\n\t            nodeLayout[xy[idx1WhenH]] = rect[xy[idx1WhenH]] + mathMin(halfGapWidth, wh1 / 2);\n\t            nodeLayout[xy[idx0WhenH]] = last + mathMin(halfGapWidth, wh0 / 2);\n\n\t            last += modWH;\n\t            node.setLayout(nodeLayout, true);\n\t        }\n\n\t        rect[xy[idx1WhenH]] += rowOtherLength;\n\t        rect[wh[idx1WhenH]] -= rowOtherLength;\n\t    }\n\n\t    // Return [containerWidth, containerHeight] as defualt.\n\t    function estimateRootSize(seriesModel, targetInfo, viewRoot, containerWidth, containerHeight) {\n\t        // If targetInfo.node exists, we zoom to the node,\n\t        // so estimate whold width and heigth by target node.\n\t        var currNode = (targetInfo || {}).node;\n\t        var defaultSize = [containerWidth, containerHeight];\n\n\t        if (!currNode || currNode === viewRoot) {\n\t            return defaultSize;\n\t        }\n\n\t        var parent;\n\t        var viewArea = containerWidth * containerHeight;\n\t        var area = viewArea * seriesModel.option.zoomToNodeRatio;\n\n\t        while (parent = currNode.parentNode) { // jshint ignore:line\n\t            var sum = 0;\n\t            var siblings = parent.children;\n\n\t            for (var i = 0, len = siblings.length; i < len; i++) {\n\t                sum += siblings[i].getValue();\n\t            }\n\t            var currNodeValue = currNode.getValue();\n\t            if (currNodeValue === 0) {\n\t                return defaultSize;\n\t            }\n\t            area *= sum / currNodeValue;\n\n\t            var borderWidth = parent.getModel('itemStyle.normal').get('borderWidth');\n\n\t            if (isFinite(borderWidth)) {\n\t                // Considering border, suppose aspect ratio is 1.\n\t                area += 4 * borderWidth * borderWidth + 4 * borderWidth * Math.pow(area, 0.5);\n\t            }\n\n\t            area > numberUtil.MAX_SAFE_INTEGER && (area = numberUtil.MAX_SAFE_INTEGER);\n\n\t            currNode = parent;\n\t        }\n\n\t        area < viewArea && (area = viewArea);\n\t        var scale = Math.pow(area / viewArea, 0.5);\n\n\t        return [containerWidth * scale, containerHeight * scale];\n\t    }\n\n\t    // Root postion base on coord of containerGroup\n\t    function calculateRootPosition(layoutInfo, rootRect, targetInfo) {\n\t        if (rootRect) {\n\t            return {x: rootRect.x, y: rootRect.y};\n\t        }\n\n\t        var defaultPosition = {x: 0, y: 0};\n\t        if (!targetInfo) {\n\t            return defaultPosition;\n\t        }\n\n\t        // If targetInfo is fetched by 'retrieveTargetInfo',\n\t        // old tree and new tree are the same tree,\n\t        // so the node still exists and we can visit it.\n\n\t        var targetNode = targetInfo.node;\n\t        var layout = targetNode.getLayout();\n\n\t        if (!layout) {\n\t            return defaultPosition;\n\t        }\n\n\t        // Transform coord from local to container.\n\t        var targetCenter = [layout.width / 2, layout.height / 2];\n\t        var node = targetNode;\n\t        while (node) {\n\t            var nodeLayout = node.getLayout();\n\t            targetCenter[0] += nodeLayout.x;\n\t            targetCenter[1] += nodeLayout.y;\n\t            node = node.parentNode;\n\t        }\n\n\t        return {\n\t            x: layoutInfo.width / 2 - targetCenter[0],\n\t            y: layoutInfo.height / 2 - targetCenter[1]\n\t        };\n\t    }\n\n\t    // Mark nodes visible for prunning when visual coding and rendering.\n\t    // Prunning depends on layout and root position, so we have to do it after layout.\n\t    function prunning(node, clipRect, viewAbovePath, viewRoot, depth) {\n\t        var nodeLayout = node.getLayout();\n\t        var nodeInViewAbovePath = viewAbovePath[depth];\n\t        var isAboveViewRoot = nodeInViewAbovePath && nodeInViewAbovePath === node;\n\n\t        if (\n\t            (nodeInViewAbovePath && !isAboveViewRoot)\n\t            || (depth === viewAbovePath.length && node !== viewRoot)\n\t        ) {\n\t            return;\n\t        }\n\n\t        node.setLayout({\n\t            // isInView means: viewRoot sub tree + viewAbovePath\n\t            isInView: true,\n\t            // invisible only means: outside view clip so that the node can not\n\t            // see but still layout for animation preparation but not render.\n\t            invisible: !isAboveViewRoot && !clipRect.intersect(nodeLayout),\n\t            isAboveViewRoot: isAboveViewRoot\n\t        }, true);\n\n\t        // Transform to child coordinate.\n\t        var childClipRect = new BoundingRect(\n\t            clipRect.x - nodeLayout.x,\n\t            clipRect.y - nodeLayout.y,\n\t            clipRect.width,\n\t            clipRect.height\n\t        );\n\n\t        each(node.viewChildren || [], function (child) {\n\t            prunning(child, childClipRect, viewAbovePath, viewRoot, depth + 1);\n\t        });\n\t    }\n\n\t    module.exports = update;\n\n\n/***/ },\n/* 197 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var echarts = __webpack_require__(1);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    __webpack_require__(198);\n\t    __webpack_require__(201);\n\n\t    __webpack_require__(206);\n\n\t    echarts.registerProcessor(__webpack_require__(207));\n\n\t    echarts.registerVisual(zrUtil.curry(\n\t        __webpack_require__(110), 'graph', 'circle', null\n\t    ));\n\t    echarts.registerVisual(__webpack_require__(208));\n\t    echarts.registerVisual(__webpack_require__(209));\n\n\t    echarts.registerLayout(__webpack_require__(210));\n\t    echarts.registerLayout(__webpack_require__(213));\n\t    echarts.registerLayout(__webpack_require__(215));\n\n\t    // Graph view coordinate system\n\t    echarts.registerCoordinateSystem('graphView', {\n\t        create: __webpack_require__(217)\n\t    });\n\n\n/***/ },\n/* 198 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var List = __webpack_require__(98);\n\t    var zrUtil = __webpack_require__(4);\n\t    var modelUtil = __webpack_require__(5);\n\t    var Model = __webpack_require__(12);\n\t    var formatUtil = __webpack_require__(6);\n\n\t    var createGraphFromNodeEdge = __webpack_require__(199);\n\n\t    var GraphSeries = __webpack_require__(1).extendSeriesModel({\n\n\t        type: 'series.graph',\n\n\t        init: function (option) {\n\t            GraphSeries.superApply(this, 'init', arguments);\n\n\t            // Provide data for legend select\n\t            this.legendDataProvider = function () {\n\t                return this._categoriesData;\n\t            };\n\n\t            this.fillDataTextStyle(option.edges || option.links);\n\n\t            this._updateCategoriesData();\n\t        },\n\n\t        mergeOption: function (option) {\n\t            GraphSeries.superApply(this, 'mergeOption', arguments);\n\n\t            this.fillDataTextStyle(option.edges || option.links);\n\n\t            this._updateCategoriesData();\n\t        },\n\n\t        mergeDefaultAndTheme: function (option) {\n\t            GraphSeries.superApply(this, 'mergeDefaultAndTheme', arguments);\n\t            modelUtil.defaultEmphasis(option.edgeLabel, modelUtil.LABEL_OPTIONS);\n\t        },\n\n\t        getInitialData: function (option, ecModel) {\n\t            var edges = option.edges || option.links || [];\n\t            var nodes = option.data || option.nodes || [];\n\t            var self = this;\n\n\t            if (nodes && edges) {\n\t                return createGraphFromNodeEdge(nodes, edges, this, true, beforeLink).data;\n\t            }\n\n\t            function beforeLink(nodeData, edgeData) {\n\t                // Overwrite nodeData.getItemModel to\n\t                nodeData.wrapMethod('getItemModel', function (model) {\n\t                    var categoriesModels = self._categoriesModels;\n\t                    var categoryIdx = model.getShallow('category');\n\t                    var categoryModel = categoriesModels[categoryIdx];\n\t                    if (categoryModel) {\n\t                        categoryModel.parentModel = model.parentModel;\n\t                        model.parentModel = categoryModel;\n\t                    }\n\t                    return model;\n\t                });\n\n\t                var edgeLabelModel = self.getModel('edgeLabel');\n\t                // For option `edgeLabel` can be found by label.xxx.xxx on item mode.\n\t                var fakeSeriesModel = new Model(\n\t                    {label: edgeLabelModel.option},\n\t                    edgeLabelModel.parentModel,\n\t                    ecModel\n\t                );\n\n\t                edgeData.wrapMethod('getItemModel', function (model) {\n\t                    model.customizeGetParent(edgeGetParent);\n\t                    return model;\n\t                });\n\n\t                function edgeGetParent(path) {\n\t                    path = this.parsePath(path);\n\t                    return (path && path[0] === 'label')\n\t                        ? fakeSeriesModel\n\t                        : this.parentModel;\n\t                }\n\t            }\n\t        },\n\n\t        /**\n\t         * @return {module:echarts/data/Graph}\n\t         */\n\t        getGraph: function () {\n\t            return this.getData().graph;\n\t        },\n\n\t        /**\n\t         * @return {module:echarts/data/List}\n\t         */\n\t        getEdgeData: function () {\n\t            return this.getGraph().edgeData;\n\t        },\n\n\t        /**\n\t         * @return {module:echarts/data/List}\n\t         */\n\t        getCategoriesData: function () {\n\t            return this._categoriesData;\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        formatTooltip: function (dataIndex, multipleSeries, dataType) {\n\t            if (dataType === 'edge') {\n\t                var nodeData = this.getData();\n\t                var params = this.getDataParams(dataIndex, dataType);\n\t                var edge = nodeData.graph.getEdgeByIndex(dataIndex);\n\t                var sourceName = nodeData.getName(edge.node1.dataIndex);\n\t                var targetName = nodeData.getName(edge.node2.dataIndex);\n\n\t                var html = [];\n\t                sourceName != null && html.push(sourceName);\n\t                targetName != null && html.push(targetName);\n\t                html = formatUtil.encodeHTML(html.join(' > '));\n\n\t                if (params.value) {\n\t                    html += ' : ' + formatUtil.encodeHTML(params.value);\n\t                }\n\t                return html;\n\t            }\n\t            else { // dataType === 'node' or empty\n\t                return GraphSeries.superApply(this, 'formatTooltip', arguments);\n\t            }\n\t        },\n\n\t        _updateCategoriesData: function () {\n\t            var categories = zrUtil.map(this.option.categories || [], function (category) {\n\t                // Data must has value\n\t                return category.value != null ? category : zrUtil.extend({\n\t                    value: 0\n\t                }, category);\n\t            });\n\t            var categoriesData = new List(['value'], this);\n\t            categoriesData.initData(categories);\n\n\t            this._categoriesData = categoriesData;\n\n\t            this._categoriesModels = categoriesData.mapArray(function (idx) {\n\t                return categoriesData.getItemModel(idx, true);\n\t            });\n\t        },\n\n\t        setZoom: function (zoom) {\n\t            this.option.zoom = zoom;\n\t        },\n\n\t        setCenter: function (center) {\n\t            this.option.center = center;\n\t        },\n\n\t        isAnimationEnabled: function () {\n\t            return GraphSeries.superCall(this, 'isAnimationEnabled')\n\t                // Not enable animation when do force layout\n\t                && !(this.get('layout') === 'force' && this.get('force.layoutAnimation'));\n\t        },\n\n\t        defaultOption: {\n\t            zlevel: 0,\n\t            z: 2,\n\n\t            coordinateSystem: 'view',\n\n\t            // Default option for all coordinate systems\n\t            // xAxisIndex: 0,\n\t            // yAxisIndex: 0,\n\t            // polarIndex: 0,\n\t            // geoIndex: 0,\n\n\t            legendHoverLink: true,\n\n\t            hoverAnimation: true,\n\n\t            layout: null,\n\n\t            focusNodeAdjacency: false,\n\n\t            // Configuration of circular layout\n\t            circular: {\n\t                rotateLabel: false\n\t            },\n\t            // Configuration of force directed layout\n\t            force: {\n\t                initLayout: null,\n\t                // Node repulsion. Can be an array to represent range.\n\t                repulsion: [0, 50],\n\t                gravity: 0.1,\n\n\t                // Edge length. Can be an array to represent range.\n\t                edgeLength: 30,\n\n\t                layoutAnimation: true\n\t            },\n\n\t            left: 'center',\n\t            top: 'center',\n\t            // right: null,\n\t            // bottom: null,\n\t            // width: '80%',\n\t            // height: '80%',\n\n\t            symbol: 'circle',\n\t            symbolSize: 10,\n\n\t            edgeSymbol: ['none', 'none'],\n\t            edgeSymbolSize: 10,\n\t            edgeLabel: {\n\t                normal: {\n\t                    position: 'middle'\n\t                },\n\t                emphasis: {}\n\t            },\n\n\t            draggable: false,\n\n\t            roam: false,\n\n\t            // Default on center of graph\n\t            center: null,\n\n\t            zoom: 1,\n\t            // Symbol size scale ratio in roam\n\t            nodeScaleRatio: 0.6,\n\n\t            // categories: [],\n\n\t            // data: []\n\t            // Or\n\t            // nodes: []\n\t            //\n\t            // links: []\n\t            // Or\n\t            // edges: []\n\n\t            label: {\n\t                normal: {\n\t                    show: false,\n\t                    formatter: '{b}'\n\t                },\n\t                emphasis: {\n\t                    show: true\n\t                }\n\t            },\n\n\t            itemStyle: {\n\t                normal: {},\n\t                emphasis: {}\n\t            },\n\n\t            lineStyle: {\n\t                normal: {\n\t                    color: '#aaa',\n\t                    width: 1,\n\t                    curveness: 0,\n\t                    opacity: 0.5\n\t                },\n\t                emphasis: {}\n\t            }\n\t        }\n\t    });\n\n\t    module.exports = GraphSeries;\n\n\n/***/ },\n/* 199 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var List = __webpack_require__(98);\n\t    var Graph = __webpack_require__(200);\n\t    var linkList = __webpack_require__(188);\n\t    var completeDimensions = __webpack_require__(103);\n\t    var CoordinateSystem = __webpack_require__(26);\n\t    var zrUtil = __webpack_require__(4);\n\t    var createListFromArray = __webpack_require__(102);\n\n\t    module.exports = function (nodes, edges, hostModel, directed, beforeLink) {\n\t        var graph = new Graph(directed);\n\t        for (var i = 0; i < nodes.length; i++) {\n\t            graph.addNode(zrUtil.retrieve(\n\t                // Id, name, dataIndex\n\t                nodes[i].id, nodes[i].name, i\n\t            ), i);\n\t        }\n\n\t        var linkNameList = [];\n\t        var validEdges = [];\n\t        var linkCount = 0;\n\t        for (var i = 0; i < edges.length; i++) {\n\t            var link = edges[i];\n\t            var source = link.source;\n\t            var target = link.target;\n\t            // addEdge may fail when source or target not exists\n\t            if (graph.addEdge(source, target, linkCount)) {\n\t                validEdges.push(link);\n\t                linkNameList.push(zrUtil.retrieve(link.id, source + ' > ' + target));\n\t                linkCount++;\n\t            }\n\t        }\n\n\t        var coordSys = hostModel.get('coordinateSystem');\n\t        var nodeData;\n\t        if (coordSys === 'cartesian2d' || coordSys === 'polar') {\n\t            nodeData = createListFromArray(nodes, hostModel, hostModel.ecModel);\n\t        }\n\t        else {\n\t            // FIXME\n\t            var coordSysCtor = CoordinateSystem.get(coordSys);\n\t            // FIXME\n\t            var dimensionNames = completeDimensions(\n\t                ((coordSysCtor && coordSysCtor.type !== 'view') ? (coordSysCtor.dimensions || []) : []).concat(['value']),\n\t                nodes\n\t            );\n\t            nodeData = new List(dimensionNames, hostModel);\n\t            nodeData.initData(nodes);\n\t        }\n\n\t        var edgeData = new List(['value'], hostModel);\n\t        edgeData.initData(validEdges, linkNameList);\n\n\t        beforeLink && beforeLink(nodeData, edgeData);\n\n\t        linkList({\n\t            mainData: nodeData,\n\t            struct: graph,\n\t            structAttr: 'graph',\n\t            datas: {node: nodeData, edge: edgeData},\n\t            datasAttr: {node: 'data', edge: 'edgeData'}\n\t        });\n\n\t        // Update dataIndex of nodes and edges because invalid edge may be removed\n\t        graph.update();\n\n\t        return graph;\n\t    };\n\n\n/***/ },\n/* 200 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * Graph data structure\n\t *\n\t * @module echarts/data/Graph\n\t * @author Yi Shen(https://www.github.com/pissang)\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    /**\n\t     * @alias module:echarts/data/Graph\n\t     * @constructor\n\t     * @param {boolean} directed\n\t     */\n\t    var Graph = function(directed) {\n\t        /**\n\t         * 是否是有向图\n\t         * @type {boolean}\n\t         * @private\n\t         */\n\t        this._directed = directed || false;\n\n\t        /**\n\t         * @type {Array.<module:echarts/data/Graph.Node>}\n\t         * @readOnly\n\t         */\n\t        this.nodes = [];\n\n\t        /**\n\t         * @type {Array.<module:echarts/data/Graph.Edge>}\n\t         * @readOnly\n\t         */\n\t        this.edges = [];\n\n\t        /**\n\t         * @type {Object.<string, module:echarts/data/Graph.Node>}\n\t         * @private\n\t         */\n\t        this._nodesMap = {};\n\t        /**\n\t         * @type {Object.<string, module:echarts/data/Graph.Edge>}\n\t         * @private\n\t         */\n\t        this._edgesMap = {};\n\n\t        /**\n\t         * @type {module:echarts/data/List}\n\t         * @readOnly\n\t         */\n\t        this.data;\n\n\t        /**\n\t         * @type {module:echarts/data/List}\n\t         * @readOnly\n\t         */\n\t        this.edgeData;\n\t    };\n\n\t    var graphProto = Graph.prototype;\n\t    /**\n\t     * @type {string}\n\t     */\n\t    graphProto.type = 'graph';\n\n\t    /**\n\t     * If is directed graph\n\t     * @return {boolean}\n\t     */\n\t    graphProto.isDirected = function () {\n\t        return this._directed;\n\t    };\n\n\t    /**\n\t     * Add a new node\n\t     * @param {string} id\n\t     * @param {number} [dataIndex]\n\t     */\n\t    graphProto.addNode = function (id, dataIndex) {\n\t        id = id || ('' + dataIndex);\n\n\t        var nodesMap = this._nodesMap;\n\n\t        if (nodesMap[id]) {\n\t            return;\n\t        }\n\n\t        var node = new Node(id, dataIndex);\n\t        node.hostGraph = this;\n\n\t        this.nodes.push(node);\n\n\t        nodesMap[id] = node;\n\t        return node;\n\t    };\n\n\t    /**\n\t     * Get node by data index\n\t     * @param  {number} dataIndex\n\t     * @return {module:echarts/data/Graph~Node}\n\t     */\n\t    graphProto.getNodeByIndex = function (dataIndex) {\n\t        var rawIdx = this.data.getRawIndex(dataIndex);\n\t        return this.nodes[rawIdx];\n\t    };\n\t    /**\n\t     * Get node by id\n\t     * @param  {string} id\n\t     * @return {module:echarts/data/Graph.Node}\n\t     */\n\t    graphProto.getNodeById = function (id) {\n\t        return this._nodesMap[id];\n\t    };\n\n\t    /**\n\t     * Add a new edge\n\t     * @param {number|string|module:echarts/data/Graph.Node} n1\n\t     * @param {number|string|module:echarts/data/Graph.Node} n2\n\t     * @param {number} [dataIndex=-1]\n\t     * @return {module:echarts/data/Graph.Edge}\n\t     */\n\t    graphProto.addEdge = function (n1, n2, dataIndex) {\n\t        var nodesMap = this._nodesMap;\n\t        var edgesMap = this._edgesMap;\n\n\t        // PNEDING\n\t        if (typeof n1 === 'number') {\n\t            n1 = this.nodes[n1];\n\t        }\n\t        if (typeof n2 === 'number') {\n\t            n2 = this.nodes[n2];\n\t        }\n\n\t        if (!(n1 instanceof Node)) {\n\t            n1 = nodesMap[n1];\n\t        }\n\t        if (!(n2 instanceof Node)) {\n\t            n2 = nodesMap[n2];\n\t        }\n\t        if (!n1 || !n2) {\n\t            return;\n\t        }\n\n\t        var key = n1.id + '-' + n2.id;\n\t        // PENDING\n\t        if (edgesMap[key]) {\n\t            return;\n\t        }\n\n\t        var edge = new Edge(n1, n2, dataIndex);\n\t        edge.hostGraph = this;\n\n\t        if (this._directed) {\n\t            n1.outEdges.push(edge);\n\t            n2.inEdges.push(edge);\n\t        }\n\t        n1.edges.push(edge);\n\t        if (n1 !== n2) {\n\t            n2.edges.push(edge);\n\t        }\n\n\t        this.edges.push(edge);\n\t        edgesMap[key] = edge;\n\n\t        return edge;\n\t    };\n\n\t    /**\n\t     * Get edge by data index\n\t     * @param  {number} dataIndex\n\t     * @return {module:echarts/data/Graph~Node}\n\t     */\n\t    graphProto.getEdgeByIndex = function (dataIndex) {\n\t        var rawIdx = this.edgeData.getRawIndex(dataIndex);\n\t        return this.edges[rawIdx];\n\t    };\n\t    /**\n\t     * Get edge by two linked nodes\n\t     * @param  {module:echarts/data/Graph.Node|string} n1\n\t     * @param  {module:echarts/data/Graph.Node|string} n2\n\t     * @return {module:echarts/data/Graph.Edge}\n\t     */\n\t    graphProto.getEdge = function (n1, n2) {\n\t        if (n1 instanceof Node) {\n\t            n1 = n1.id;\n\t        }\n\t        if (n2 instanceof Node) {\n\t            n2 = n2.id;\n\t        }\n\n\t        var edgesMap = this._edgesMap;\n\n\t        if (this._directed) {\n\t            return edgesMap[n1 + '-' + n2];\n\t        } else {\n\t            return edgesMap[n1 + '-' + n2]\n\t                || edgesMap[n2 + '-' + n1];\n\t        }\n\t    };\n\n\t    /**\n\t     * Iterate all nodes\n\t     * @param  {Function} cb\n\t     * @param  {*} [context]\n\t     */\n\t    graphProto.eachNode = function (cb, context) {\n\t        var nodes = this.nodes;\n\t        var len = nodes.length;\n\t        for (var i = 0; i < len; i++) {\n\t            if (nodes[i].dataIndex >= 0) {\n\t                cb.call(context, nodes[i], i);\n\t            }\n\t        }\n\t    };\n\n\t    /**\n\t     * Iterate all edges\n\t     * @param  {Function} cb\n\t     * @param  {*} [context]\n\t     */\n\t    graphProto.eachEdge = function (cb, context) {\n\t        var edges = this.edges;\n\t        var len = edges.length;\n\t        for (var i = 0; i < len; i++) {\n\t            if (edges[i].dataIndex >= 0\n\t                && edges[i].node1.dataIndex >= 0\n\t                && edges[i].node2.dataIndex >= 0\n\t            ) {\n\t                cb.call(context, edges[i], i);\n\t            }\n\t        }\n\t    };\n\n\t    /**\n\t     * Breadth first traverse\n\t     * @param {Function} cb\n\t     * @param {module:echarts/data/Graph.Node} startNode\n\t     * @param {string} [direction='none'] 'none'|'in'|'out'\n\t     * @param {*} [context]\n\t     */\n\t    graphProto.breadthFirstTraverse = function (\n\t        cb, startNode, direction, context\n\t    ) {\n\t        if (!(startNode instanceof Node)) {\n\t            startNode = this._nodesMap[startNode];\n\t        }\n\t        if (!startNode) {\n\t            return;\n\t        }\n\n\t        var edgeType = direction === 'out'\n\t            ? 'outEdges' : (direction === 'in' ? 'inEdges' : 'edges');\n\n\t        for (var i = 0; i < this.nodes.length; i++) {\n\t            this.nodes[i].__visited = false;\n\t        }\n\n\t        if (cb.call(context, startNode, null)) {\n\t            return;\n\t        }\n\n\t        var queue = [startNode];\n\t        while (queue.length) {\n\t            var currentNode = queue.shift();\n\t            var edges = currentNode[edgeType];\n\n\t            for (var i = 0; i < edges.length; i++) {\n\t                var e = edges[i];\n\t                var otherNode = e.node1 === currentNode\n\t                    ? e.node2 : e.node1;\n\t                if (!otherNode.__visited) {\n\t                    if (cb.call(otherNode, otherNode, currentNode)) {\n\t                        // Stop traversing\n\t                        return;\n\t                    }\n\t                    queue.push(otherNode);\n\t                    otherNode.__visited = true;\n\t                }\n\t            }\n\t        }\n\t    };\n\n\t    // TODO\n\t    // graphProto.depthFirstTraverse = function (\n\t    //     cb, startNode, direction, context\n\t    // ) {\n\n\t    // };\n\n\t    // Filter update\n\t    graphProto.update = function () {\n\t        var data = this.data;\n\t        var edgeData = this.edgeData;\n\t        var nodes = this.nodes;\n\t        var edges = this.edges;\n\n\t        for (var i = 0, len = nodes.length; i < len; i++) {\n\t            nodes[i].dataIndex = -1;\n\t        }\n\t        for (var i = 0, len = data.count(); i < len; i++) {\n\t            nodes[data.getRawIndex(i)].dataIndex = i;\n\t        }\n\n\t        edgeData.filterSelf(function (idx) {\n\t            var edge = edges[edgeData.getRawIndex(idx)];\n\t            return edge.node1.dataIndex >= 0 && edge.node2.dataIndex >= 0;\n\t        });\n\n\t        // Update edge\n\t        for (var i = 0, len = edges.length; i < len; i++) {\n\t            edges[i].dataIndex = -1;\n\t        }\n\t        for (var i = 0, len = edgeData.count(); i < len; i++) {\n\t            edges[edgeData.getRawIndex(i)].dataIndex = i;\n\t        }\n\t    };\n\n\t    /**\n\t     * @return {module:echarts/data/Graph}\n\t     */\n\t    graphProto.clone = function () {\n\t        var graph = new Graph(this._directed);\n\t        var nodes = this.nodes;\n\t        var edges = this.edges;\n\t        for (var i = 0; i < nodes.length; i++) {\n\t            graph.addNode(nodes[i].id, nodes[i].dataIndex);\n\t        }\n\t        for (var i = 0; i < edges.length; i++) {\n\t            var e = edges[i];\n\t            graph.addEdge(e.node1.id, e.node2.id, e.dataIndex);\n\t        }\n\t        return graph;\n\t    };\n\n\n\t    /**\n\t     * @alias module:echarts/data/Graph.Node\n\t     */\n\t    function Node(id, dataIndex) {\n\t        /**\n\t        * @type {string}\n\t        */\n\t        this.id = id == null ? '' : id;\n\n\t        /**\n\t        * @type {Array.<module:echarts/data/Graph.Edge>}\n\t        */\n\t        this.inEdges = [];\n\t        /**\n\t        * @type {Array.<module:echarts/data/Graph.Edge>}\n\t        */\n\t        this.outEdges = [];\n\t        /**\n\t        * @type {Array.<module:echarts/data/Graph.Edge>}\n\t        */\n\t        this.edges = [];\n\t        /**\n\t         * @type {module:echarts/data/Graph}\n\t         */\n\t        this.hostGraph;\n\n\t        /**\n\t         * @type {number}\n\t         */\n\t        this.dataIndex = dataIndex == null ? -1 : dataIndex;\n\t    }\n\n\t    Node.prototype = {\n\n\t        constructor: Node,\n\n\t        /**\n\t         * @return {number}\n\t         */\n\t        degree: function () {\n\t            return this.edges.length;\n\t        },\n\n\t        /**\n\t         * @return {number}\n\t         */\n\t        inDegree: function () {\n\t            return this.inEdges.length;\n\t        },\n\n\t        /**\n\t        * @return {number}\n\t        */\n\t        outDegree: function () {\n\t            return this.outEdges.length;\n\t        },\n\n\t        /**\n\t         * @param {string} [path]\n\t         * @return {module:echarts/model/Model}\n\t         */\n\t        getModel: function (path) {\n\t            if (this.dataIndex < 0) {\n\t                return;\n\t            }\n\t            var graph = this.hostGraph;\n\t            var itemModel = graph.data.getItemModel(this.dataIndex);\n\n\t            return itemModel.getModel(path);\n\t        }\n\t    };\n\n\t    /**\n\t     * 图边\n\t     * @alias module:echarts/data/Graph.Edge\n\t     * @param {module:echarts/data/Graph.Node} n1\n\t     * @param {module:echarts/data/Graph.Node} n2\n\t     * @param {number} [dataIndex=-1]\n\t     */\n\t    function Edge(n1, n2, dataIndex) {\n\n\t        /**\n\t         * 节点1，如果是有向图则为源节点\n\t         * @type {module:echarts/data/Graph.Node}\n\t         */\n\t        this.node1 = n1;\n\n\t        /**\n\t         * 节点2，如果是有向图则为目标节点\n\t         * @type {module:echarts/data/Graph.Node}\n\t         */\n\t        this.node2 = n2;\n\n\t        this.dataIndex = dataIndex == null ? -1 : dataIndex;\n\t    }\n\n\t    /**\n\t     * @param {string} [path]\n\t     * @return {module:echarts/model/Model}\n\t     */\n\t     Edge.prototype.getModel = function (path) {\n\t        if (this.dataIndex < 0) {\n\t            return;\n\t        }\n\t        var graph = this.hostGraph;\n\t        var itemModel = graph.edgeData.getItemModel(this.dataIndex);\n\n\t        return itemModel.getModel(path);\n\t    };\n\n\t    var createGraphDataProxyMixin = function (hostName, dataName) {\n\t        return {\n\t            /**\n\t             * @param {string=} [dimension='value'] Default 'value'. can be 'a', 'b', 'c', 'd', 'e'.\n\t             * @return {number}\n\t             */\n\t            getValue: function (dimension) {\n\t                var data = this[hostName][dataName];\n\t                return data.get(data.getDimension(dimension || 'value'), this.dataIndex);\n\t            },\n\n\t            /**\n\t             * @param {Object|string} key\n\t             * @param {*} [value]\n\t             */\n\t            setVisual: function (key, value) {\n\t                this.dataIndex >= 0\n\t                    && this[hostName][dataName].setItemVisual(this.dataIndex, key, value);\n\t            },\n\n\t            /**\n\t             * @param {string} key\n\t             * @return {boolean}\n\t             */\n\t            getVisual: function (key, ignoreParent) {\n\t                return this[hostName][dataName].getItemVisual(this.dataIndex, key, ignoreParent);\n\t            },\n\n\t            /**\n\t             * @param {Object} layout\n\t             * @return {boolean} [merge=false]\n\t             */\n\t            setLayout: function (layout, merge) {\n\t                this.dataIndex >= 0\n\t                    && this[hostName][dataName].setItemLayout(this.dataIndex, layout, merge);\n\t            },\n\n\t            /**\n\t             * @return {Object}\n\t             */\n\t            getLayout: function () {\n\t                return this[hostName][dataName].getItemLayout(this.dataIndex);\n\t            },\n\n\t            /**\n\t             * @return {module:zrender/Element}\n\t             */\n\t            getGraphicEl: function () {\n\t                return this[hostName][dataName].getItemGraphicEl(this.dataIndex);\n\t            },\n\n\t            /**\n\t             * @return {number}\n\t             */\n\t            getRawIndex: function () {\n\t                return this[hostName][dataName].getRawIndex(this.dataIndex);\n\t            }\n\t        };\n\t    };\n\n\t    zrUtil.mixin(Node, createGraphDataProxyMixin('hostGraph', 'data'));\n\t    zrUtil.mixin(Edge, createGraphDataProxyMixin('hostGraph', 'edgeData'));\n\n\t    Graph.Node = Node;\n\t    Graph.Edge = Edge;\n\n\t    module.exports = Graph;\n\n\n/***/ },\n/* 201 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\n\t    var SymbolDraw = __webpack_require__(105);\n\t    var LineDraw = __webpack_require__(202);\n\t    var RoamController = __webpack_require__(177);\n\n\t    var graphic = __webpack_require__(43);\n\t    var adjustEdge = __webpack_require__(205);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var nodeOpacityPath = ['itemStyle', 'normal', 'opacity'];\n\t    var lineOpacityPath = ['lineStyle', 'normal', 'opacity'];\n\n\t    function getItemOpacity(item, opacityPath) {\n\t        return item.getVisual('opacity') || item.getModel().get(opacityPath);\n\t    }\n\n\t    __webpack_require__(1).extendChartView({\n\n\t        type: 'graph',\n\n\t        init: function (ecModel, api) {\n\t            var symbolDraw = new SymbolDraw();\n\t            var lineDraw = new LineDraw();\n\t            var group = this.group;\n\n\t            var controller = new RoamController(api.getZr(), group);\n\n\t            group.add(symbolDraw.group);\n\t            group.add(lineDraw.group);\n\n\t            this._symbolDraw = symbolDraw;\n\t            this._lineDraw = lineDraw;\n\t            this._controller = controller;\n\n\t            this._firstRender = true;\n\t        },\n\n\t        render: function (seriesModel, ecModel, api) {\n\t            var coordSys = seriesModel.coordinateSystem;\n\n\t            this._model = seriesModel;\n\t            this._nodeScaleRatio = seriesModel.get('nodeScaleRatio');\n\n\t            var symbolDraw = this._symbolDraw;\n\t            var lineDraw = this._lineDraw;\n\n\t            var group = this.group;\n\n\t            if (coordSys.type === 'view') {\n\t                var groupNewProp = {\n\t                    position: coordSys.position,\n\t                    scale: coordSys.scale\n\t                };\n\t                if (this._firstRender) {\n\t                    group.attr(groupNewProp);\n\t                }\n\t                else {\n\t                    graphic.updateProps(group, groupNewProp, seriesModel);\n\t                }\n\t            }\n\t            // Fix edge contact point with node\n\t            adjustEdge(seriesModel.getGraph(), this._getNodeGlobalScale(seriesModel));\n\n\t            var data = seriesModel.getData();\n\t            symbolDraw.updateData(data);\n\n\t            var edgeData = seriesModel.getEdgeData();\n\t            lineDraw.updateData(edgeData);\n\n\t            this._updateNodeAndLinkScale();\n\n\t            this._updateController(seriesModel, api);\n\n\t            clearTimeout(this._layoutTimeout);\n\t            var forceLayout = seriesModel.forceLayout;\n\t            var layoutAnimation = seriesModel.get('force.layoutAnimation');\n\t            if (forceLayout) {\n\t                this._startForceLayoutIteration(forceLayout, layoutAnimation);\n\t            }\n\t            data.eachItemGraphicEl(function (el, idx) {\n\t                var itemModel = data.getItemModel(idx);\n\t                // Update draggable\n\t                el.off('drag').off('dragend');\n\t                var draggable = data.getItemModel(idx).get('draggable');\n\t                if (draggable) {\n\t                    el.on('drag', function () {\n\t                        if (forceLayout) {\n\t                            forceLayout.warmUp();\n\t                            !this._layouting\n\t                                && this._startForceLayoutIteration(forceLayout, layoutAnimation);\n\t                            forceLayout.setFixed(idx);\n\t                            // Write position back to layout\n\t                            data.setItemLayout(idx, el.position);\n\t                        }\n\t                    }, this).on('dragend', function () {\n\t                        if (forceLayout) {\n\t                            forceLayout.setUnfixed(idx);\n\t                        }\n\t                    }, this);\n\t                }\n\t                el.setDraggable(draggable && forceLayout);\n\n\t                el.off('mouseover', el.__focusNodeAdjacency);\n\t                el.off('mouseout', el.__unfocusNodeAdjacency);\n\n\t                if (itemModel.get('focusNodeAdjacency')) {\n\t                    el.on('mouseover', el.__focusNodeAdjacency = function () {\n\t                        api.dispatchAction({\n\t                            type: 'focusNodeAdjacency',\n\t                            seriesId: seriesModel.id,\n\t                            dataIndex: el.dataIndex\n\t                        });\n\t                    });\n\t                    el.on('mouseout', el.__unfocusNodeAdjacency = function () {\n\t                        api.dispatchAction({\n\t                            type: 'unfocusNodeAdjacency',\n\t                            seriesId: seriesModel.id\n\t                        });\n\t                    });\n\t                }\n\n\t            }, this);\n\n\t            var circularRotateLabel = seriesModel.get('layout') === 'circular' && seriesModel.get('circular.rotateLabel');\n\t            var cx = data.getLayout('cx');\n\t            var cy = data.getLayout('cy');\n\t            data.eachItemGraphicEl(function (el, idx) {\n\t                var symbolPath = el.getSymbolPath();\n\t                if (circularRotateLabel) {\n\t                    var pos = data.getItemLayout(idx);\n\t                    var rad = Math.atan2(pos[1] - cy, pos[0] - cx);\n\t                    if (rad < 0) {\n\t                        rad = Math.PI * 2 + rad;\n\t                    }\n\t                    var isLeft = pos[0] < cx;\n\t                    if (isLeft) {\n\t                        rad = rad - Math.PI;\n\t                    }\n\t                    var textPosition = isLeft ? 'left' : 'right';\n\t                    symbolPath.setStyle({\n\t                        textRotation: rad,\n\t                        textPosition: textPosition\n\t                    });\n\t                    symbolPath.hoverStyle && (symbolPath.hoverStyle.textPosition = textPosition);\n\t                }\n\t                else {\n\t                    symbolPath.setStyle({\n\t                        textRotation: 0\n\t                    });\n\t                }\n\t            });\n\n\t            this._firstRender = false;\n\t        },\n\n\t        dispose: function () {\n\t            this._controller && this._controller.dispose();\n\t        },\n\n\t        focusNodeAdjacency: function (seriesModel, ecModel, api, payload) {\n\t            var data = this._model.getData();\n\t            var dataIndex = payload.dataIndex;\n\t            var el = data.getItemGraphicEl(dataIndex);\n\n\t            if (!el) {\n\t                return;\n\t            }\n\n\t            var graph = data.graph;\n\t            var dataType = el.dataType;\n\n\t            function fadeOutItem(item, opacityPath) {\n\t                var opacity = getItemOpacity(item, opacityPath);\n\t                var el = item.getGraphicEl();\n\t                if (opacity == null) {\n\t                    opacity = 1;\n\t                }\n\n\t                el.traverse(function (child) {\n\t                    child.trigger('normal');\n\t                    if (child.type !== 'group') {\n\t                        child.setStyle('opacity', opacity * 0.1);\n\t                    }\n\t                });\n\t            }\n\n\t            function fadeInItem(item, opacityPath) {\n\t                var opacity = getItemOpacity(item, opacityPath);\n\t                var el = item.getGraphicEl();\n\n\t                el.traverse(function (child) {\n\t                    child.trigger('emphasis');\n\t                    if (child.type !== 'group') {\n\t                        child.setStyle('opacity', opacity);\n\t                    }\n\t                });\n\t            }\n\t            if (dataIndex !== null && dataType !== 'edge') {\n\t                graph.eachNode(function (node) {\n\t                    fadeOutItem(node, nodeOpacityPath);\n\t                });\n\t                graph.eachEdge(function (edge) {\n\t                    fadeOutItem(edge, lineOpacityPath);\n\t                });\n\n\t                var node = graph.getNodeByIndex(dataIndex);\n\t                fadeInItem(node, nodeOpacityPath);\n\t                zrUtil.each(node.edges, function (edge) {\n\t                    if (edge.dataIndex < 0) {\n\t                        return;\n\t                    }\n\t                    fadeInItem(edge, lineOpacityPath);\n\t                    fadeInItem(edge.node1, nodeOpacityPath);\n\t                    fadeInItem(edge.node2, nodeOpacityPath);\n\t                });\n\t            }\n\t        },\n\n\t        unfocusNodeAdjacency: function (seriesModel, ecModel, api, payload) {\n\t            var graph = this._model.getData().graph;\n\t            graph.eachNode(function (node) {\n\t                var opacity = getItemOpacity(node, nodeOpacityPath);\n\t                node.getGraphicEl().traverse(function (child) {\n\t                    child.trigger('normal');\n\t                    if (child.type !== 'group') {\n\t                        child.setStyle('opacity', opacity);\n\t                    }\n\t                });\n\t            });\n\t            graph.eachEdge(function (edge) {\n\t                var opacity = getItemOpacity(edge, lineOpacityPath);\n\t                edge.getGraphicEl().traverse(function (child) {\n\t                    child.trigger('normal');\n\t                    if (child.type !== 'group') {\n\t                        child.setStyle('opacity', opacity);\n\t                    }\n\t                });\n\t            });\n\t        },\n\n\t        _startForceLayoutIteration: function (forceLayout, layoutAnimation) {\n\t            var self = this;\n\t            (function step() {\n\t                forceLayout.step(function (stopped) {\n\t                    self.updateLayout(self._model);\n\t                    (self._layouting = !stopped) && (\n\t                        layoutAnimation\n\t                            ? (self._layoutTimeout = setTimeout(step, 16))\n\t                            : step()\n\t                    );\n\t                });\n\t            })();\n\t        },\n\n\t        _updateController: function (seriesModel, api) {\n\t            var controller = this._controller;\n\t            var group = this.group;\n\n\t            controller.setContainsPoint(function (x, y) {\n\t                var rect = group.getBoundingRect();\n\t                rect.applyTransform(group.transform);\n\t                return rect.contain(x, y);\n\t            });\n\n\t            if (seriesModel.coordinateSystem.type !== 'view') {\n\t                controller.disable();\n\t                return;\n\t            }\n\t            controller.enable(seriesModel.get('roam'));\n\t            controller.zoomLimit = seriesModel.get('scaleLimit');\n\t            // Update zoom from model\n\t            controller.zoom = seriesModel.coordinateSystem.getZoom();\n\n\t            controller\n\t                .off('pan')\n\t                .off('zoom')\n\t                .on('pan', function (dx, dy) {\n\t                    api.dispatchAction({\n\t                        seriesId: seriesModel.id,\n\t                        type: 'graphRoam',\n\t                        dx: dx,\n\t                        dy: dy\n\t                    });\n\t                })\n\t                .on('zoom', function (zoom, mouseX, mouseY) {\n\t                    api.dispatchAction({\n\t                        seriesId: seriesModel.id,\n\t                        type: 'graphRoam',\n\t                        zoom:  zoom,\n\t                        originX: mouseX,\n\t                        originY: mouseY\n\t                    });\n\t                    this._updateNodeAndLinkScale();\n\t                    adjustEdge(seriesModel.getGraph(), this._getNodeGlobalScale(seriesModel));\n\t                    this._lineDraw.updateLayout();\n\t                }, this);\n\t        },\n\n\t        _updateNodeAndLinkScale: function () {\n\t            var seriesModel = this._model;\n\t            var data = seriesModel.getData();\n\n\t            var nodeScale = this._getNodeGlobalScale(seriesModel);\n\t            var invScale = [nodeScale, nodeScale];\n\n\t            data.eachItemGraphicEl(function (el, idx) {\n\t                el.attr('scale', invScale);\n\t            });\n\t        },\n\n\t        _getNodeGlobalScale: function (seriesModel) {\n\t            var coordSys = seriesModel.coordinateSystem;\n\t            if (coordSys.type !== 'view') {\n\t                return 1;\n\t            }\n\n\t            var nodeScaleRatio = this._nodeScaleRatio;\n\n\t            var groupScale = coordSys.scale;\n\t            var groupZoom = (groupScale && groupScale[0]) || 1;\n\t            // Scale node when zoom changes\n\t            var roamZoom = coordSys.getZoom();\n\t            var nodeScale = (roamZoom - 1) * nodeScaleRatio + 1;\n\n\t            return nodeScale / groupZoom;\n\t        },\n\n\t        updateLayout: function (seriesModel) {\n\t            adjustEdge(seriesModel.getGraph(), this._getNodeGlobalScale(seriesModel));\n\n\t            this._symbolDraw.updateLayout();\n\t            this._lineDraw.updateLayout();\n\t        },\n\n\t        remove: function (ecModel, api) {\n\t            this._symbolDraw && this._symbolDraw.remove();\n\t            this._lineDraw && this._lineDraw.remove();\n\t        }\n\t    });\n\n\n/***/ },\n/* 202 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @module echarts/chart/helper/LineDraw\n\t */\n\n\n\t    var graphic = __webpack_require__(43);\n\t    var LineGroup = __webpack_require__(203);\n\n\n\t    function isPointNaN(pt) {\n\t        return isNaN(pt[0]) || isNaN(pt[1]);\n\t    }\n\t    function lineNeedsDraw(pts) {\n\t        return !isPointNaN(pts[0]) && !isPointNaN(pts[1]);\n\t    }\n\t    /**\n\t     * @alias module:echarts/component/marker/LineDraw\n\t     * @constructor\n\t     */\n\t    function LineDraw(ctor) {\n\t        this._ctor = ctor || LineGroup;\n\t        this.group = new graphic.Group();\n\t    }\n\n\t    var lineDrawProto = LineDraw.prototype;\n\n\t    /**\n\t     * @param {module:echarts/data/List} lineData\n\t     */\n\t    lineDrawProto.updateData = function (lineData) {\n\n\t        var oldLineData = this._lineData;\n\t        var group = this.group;\n\t        var LineCtor = this._ctor;\n\n\t        var hostModel = lineData.hostModel;\n\n\t        var seriesScope = {\n\t            lineStyle: hostModel.getModel('lineStyle.normal').getLineStyle(),\n\t            hoverLineStyle: hostModel.getModel('lineStyle.emphasis').getLineStyle(),\n\t            labelModel: hostModel.getModel('label.normal'),\n\t            hoverLabelModel: hostModel.getModel('label.emphasis')\n\t        };\n\n\t        lineData.diff(oldLineData)\n\t            .add(function (idx) {\n\t                if (!lineNeedsDraw(lineData.getItemLayout(idx))) {\n\t                    return;\n\t                }\n\t                var lineGroup = new LineCtor(lineData, idx, seriesScope);\n\n\t                lineData.setItemGraphicEl(idx, lineGroup);\n\n\t                group.add(lineGroup);\n\t            })\n\t            .update(function (newIdx, oldIdx) {\n\t                var lineGroup = oldLineData.getItemGraphicEl(oldIdx);\n\t                if (!lineNeedsDraw(lineData.getItemLayout(newIdx))) {\n\t                    group.remove(lineGroup);\n\t                    return;\n\t                }\n\n\t                if (!lineGroup) {\n\t                    lineGroup = new LineCtor(lineData, newIdx, seriesScope);\n\t                }\n\t                else {\n\t                    lineGroup.updateData(lineData, newIdx, seriesScope);\n\t                }\n\n\t                lineData.setItemGraphicEl(newIdx, lineGroup);\n\n\t                group.add(lineGroup);\n\t            })\n\t            .remove(function (idx) {\n\t                group.remove(oldLineData.getItemGraphicEl(idx));\n\t            })\n\t            .execute();\n\n\t        this._lineData = lineData;\n\t    };\n\n\t    lineDrawProto.updateLayout = function () {\n\t        var lineData = this._lineData;\n\t        lineData.eachItemGraphicEl(function (el, idx) {\n\t            el.updateLayout(lineData, idx);\n\t        }, this);\n\t    };\n\n\t    lineDrawProto.remove = function () {\n\t        this.group.removeAll();\n\t    };\n\n\t    module.exports = LineDraw;\n\n\n/***/ },\n/* 203 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @module echarts/chart/helper/Line\n\t */\n\n\n\t    var symbolUtil = __webpack_require__(107);\n\t    var vector = __webpack_require__(10);\n\t    // var matrix = require('zrender/lib/core/matrix');\n\t    var LinePath = __webpack_require__(204);\n\t    var graphic = __webpack_require__(43);\n\t    var zrUtil = __webpack_require__(4);\n\t    var numberUtil = __webpack_require__(7);\n\n\t    var SYMBOL_CATEGORIES = ['fromSymbol', 'toSymbol'];\n\t    function makeSymbolTypeKey(symbolCategory) {\n\t        return '_' + symbolCategory + 'Type';\n\t    }\n\t    /**\n\t     * @inner\n\t     */\n\t    function createSymbol(name, lineData, idx) {\n\t        var color = lineData.getItemVisual(idx, 'color');\n\t        var symbolType = lineData.getItemVisual(idx, name);\n\t        var symbolSize = lineData.getItemVisual(idx, name + 'Size');\n\n\t        if (!symbolType || symbolType === 'none') {\n\t            return;\n\t        }\n\n\t        if (!zrUtil.isArray(symbolSize)) {\n\t            symbolSize = [symbolSize, symbolSize];\n\t        }\n\t        var symbolPath = symbolUtil.createSymbol(\n\t            symbolType, -symbolSize[0] / 2, -symbolSize[1] / 2,\n\t            symbolSize[0], symbolSize[1], color\n\t        );\n\n\t        symbolPath.name = name;\n\n\t        return symbolPath;\n\t    }\n\n\t    function createLine(points) {\n\t        var line = new LinePath({\n\t            name: 'line'\n\t        });\n\t        setLinePoints(line.shape, points);\n\t        return line;\n\t    }\n\n\t    function setLinePoints(targetShape, points) {\n\t        var p1 = points[0];\n\t        var p2 = points[1];\n\t        var cp1 = points[2];\n\t        targetShape.x1 = p1[0];\n\t        targetShape.y1 = p1[1];\n\t        targetShape.x2 = p2[0];\n\t        targetShape.y2 = p2[1];\n\t        targetShape.percent = 1;\n\n\t        if (cp1) {\n\t            targetShape.cpx1 = cp1[0];\n\t            targetShape.cpy1 = cp1[1];\n\t        }\n\t        else {\n\t            targetShape.cpx1 = NaN;\n\t            targetShape.cpy1 = NaN;\n\t        }\n\t    }\n\n\t    function updateSymbolAndLabelBeforeLineUpdate () {\n\t        var lineGroup = this;\n\t        var symbolFrom = lineGroup.childOfName('fromSymbol');\n\t        var symbolTo = lineGroup.childOfName('toSymbol');\n\t        var label = lineGroup.childOfName('label');\n\t        // Quick reject\n\t        if (!symbolFrom && !symbolTo && label.ignore) {\n\t            return;\n\t        }\n\n\t        var invScale = 1;\n\t        var parentNode = this.parent;\n\t        while (parentNode) {\n\t            if (parentNode.scale) {\n\t                invScale /= parentNode.scale[0];\n\t            }\n\t            parentNode = parentNode.parent;\n\t        }\n\n\t        var line = lineGroup.childOfName('line');\n\t        // If line not changed\n\t        // FIXME Parent scale changed\n\t        if (!this.__dirty && !line.__dirty) {\n\t            return;\n\t        }\n\n\t        var percent = line.shape.percent;\n\t        var fromPos = line.pointAt(0);\n\t        var toPos = line.pointAt(percent);\n\n\t        var d = vector.sub([], toPos, fromPos);\n\t        vector.normalize(d, d);\n\n\t        if (symbolFrom) {\n\t            symbolFrom.attr('position', fromPos);\n\t            var tangent = line.tangentAt(0);\n\t            symbolFrom.attr('rotation', Math.PI / 2 - Math.atan2(\n\t                tangent[1], tangent[0]\n\t            ));\n\t            symbolFrom.attr('scale', [invScale * percent, invScale * percent]);\n\t        }\n\t        if (symbolTo) {\n\t            symbolTo.attr('position', toPos);\n\t            var tangent = line.tangentAt(1);\n\t            symbolTo.attr('rotation', -Math.PI / 2 - Math.atan2(\n\t                tangent[1], tangent[0]\n\t            ));\n\t            symbolTo.attr('scale', [invScale * percent, invScale * percent]);\n\t        }\n\n\t        if (!label.ignore) {\n\t            label.attr('position', toPos);\n\n\t            var textPosition;\n\t            var textAlign;\n\t            var textVerticalAlign;\n\n\t            var distance = 5 * invScale;\n\t            // End\n\t            if (label.__position === 'end') {\n\t                textPosition = [d[0] * distance + toPos[0], d[1] * distance + toPos[1]];\n\t                textAlign = d[0] > 0.8 ? 'left' : (d[0] < -0.8 ? 'right' : 'center');\n\t                textVerticalAlign = d[1] > 0.8 ? 'top' : (d[1] < -0.8 ? 'bottom' : 'middle');\n\t            }\n\t            // Middle\n\t            else if (label.__position === 'middle') {\n\t                var halfPercent = percent / 2;\n\t                var tangent = line.tangentAt(halfPercent);\n\t                var n = [tangent[1], -tangent[0]];\n\t                var cp = line.pointAt(halfPercent);\n\t                if (n[1] > 0) {\n\t                    n[0] = -n[0];\n\t                    n[1] = -n[1];\n\t                }\n\t                textPosition = [cp[0] + n[0] * distance, cp[1] + n[1] * distance];\n\t                textAlign = 'center';\n\t                textVerticalAlign = 'bottom';\n\t                var rotation = -Math.atan2(tangent[1], tangent[0]);\n\t                if (toPos[0] < fromPos[0]) {\n\t                    rotation = Math.PI + rotation;\n\t                }\n\t                label.attr('rotation', rotation);\n\t            }\n\t            // Start\n\t            else {\n\t                textPosition = [-d[0] * distance + fromPos[0], -d[1] * distance + fromPos[1]];\n\t                textAlign = d[0] > 0.8 ? 'right' : (d[0] < -0.8 ? 'left' : 'center');\n\t                textVerticalAlign = d[1] > 0.8 ? 'bottom' : (d[1] < -0.8 ? 'top' : 'middle');\n\t            }\n\t            label.attr({\n\t                style: {\n\t                    // Use the user specified text align and baseline first\n\t                    textVerticalAlign: label.__verticalAlign || textVerticalAlign,\n\t                    textAlign: label.__textAlign || textAlign\n\t                },\n\t                position: textPosition,\n\t                scale: [invScale, invScale]\n\t            });\n\t        }\n\t    }\n\n\t    /**\n\t     * @constructor\n\t     * @extends {module:zrender/graphic/Group}\n\t     * @alias {module:echarts/chart/helper/Line}\n\t     */\n\t    function Line(lineData, idx, seriesScope) {\n\t        graphic.Group.call(this);\n\n\t        this._createLine(lineData, idx, seriesScope);\n\t    }\n\n\t    var lineProto = Line.prototype;\n\n\t    // Update symbol position and rotation\n\t    lineProto.beforeUpdate = updateSymbolAndLabelBeforeLineUpdate;\n\n\t    lineProto._createLine = function (lineData, idx, seriesScope) {\n\t        var seriesModel = lineData.hostModel;\n\t        var linePoints = lineData.getItemLayout(idx);\n\n\t        var line = createLine(linePoints);\n\t        line.shape.percent = 0;\n\t        graphic.initProps(line, {\n\t            shape: {\n\t                percent: 1\n\t            }\n\t        }, seriesModel, idx);\n\n\t        this.add(line);\n\n\t        var label = new graphic.Text({\n\t            name: 'label'\n\t        });\n\t        this.add(label);\n\n\t        zrUtil.each(SYMBOL_CATEGORIES, function (symbolCategory) {\n\t            var symbol = createSymbol(symbolCategory, lineData, idx);\n\t            // symbols must added after line to make sure\n\t            // it will be updated after line#update.\n\t            // Or symbol position and rotation update in line#beforeUpdate will be one frame slow\n\t            this.add(symbol);\n\t            this[makeSymbolTypeKey(symbolCategory)] = lineData.getItemVisual(idx, symbolCategory);\n\t        }, this);\n\n\t        this._updateCommonStl(lineData, idx, seriesScope);\n\t    };\n\n\t    lineProto.updateData = function (lineData, idx, seriesScope) {\n\t        var seriesModel = lineData.hostModel;\n\n\t        var line = this.childOfName('line');\n\t        var linePoints = lineData.getItemLayout(idx);\n\t        var target = {\n\t            shape: {}\n\t        };\n\t        setLinePoints(target.shape, linePoints);\n\t        graphic.updateProps(line, target, seriesModel, idx);\n\n\t        zrUtil.each(SYMBOL_CATEGORIES, function (symbolCategory) {\n\t            var symbolType = lineData.getItemVisual(idx, symbolCategory);\n\t            var key = makeSymbolTypeKey(symbolCategory);\n\t            // Symbol changed\n\t            if (this[key] !== symbolType) {\n\t                this.remove(this.childOfName(symbolCategory));\n\t                var symbol = createSymbol(symbolCategory, lineData, idx);\n\t                this.add(symbol);\n\t            }\n\t            this[key] = symbolType;\n\t        }, this);\n\n\t        this._updateCommonStl(lineData, idx, seriesScope);\n\t    };\n\n\t    lineProto._updateCommonStl = function (lineData, idx, seriesScope) {\n\t        var seriesModel = lineData.hostModel;\n\n\t        var line = this.childOfName('line');\n\n\t        var lineStyle = seriesScope && seriesScope.lineStyle;\n\t        var hoverLineStyle = seriesScope && seriesScope.hoverLineStyle;\n\t        var labelModel = seriesScope && seriesScope.labelModel;\n\t        var hoverLabelModel = seriesScope && seriesScope.hoverLabelModel;\n\n\t        // Optimization for large dataset\n\t        if (!seriesScope || lineData.hasItemOption) {\n\t            var itemModel = lineData.getItemModel(idx);\n\n\t            lineStyle = itemModel.getModel('lineStyle.normal').getLineStyle();\n\t            hoverLineStyle = itemModel.getModel('lineStyle.emphasis').getLineStyle();\n\n\t            labelModel = itemModel.getModel('label.normal');\n\t            hoverLabelModel = itemModel.getModel('label.emphasis');\n\t        }\n\n\t        var visualColor = lineData.getItemVisual(idx, 'color');\n\t        var visualOpacity = zrUtil.retrieve(\n\t            lineData.getItemVisual(idx, 'opacity'),\n\t            lineStyle.opacity,\n\t            1\n\t        );\n\n\t        line.useStyle(zrUtil.defaults(\n\t            {\n\t                strokeNoScale: true,\n\t                fill: 'none',\n\t                stroke: visualColor,\n\t                opacity: visualOpacity\n\t            },\n\t            lineStyle\n\t        ));\n\t        line.hoverStyle = hoverLineStyle;\n\n\t        // Update symbol\n\t        zrUtil.each(SYMBOL_CATEGORIES, function (symbolCategory) {\n\t            var symbol = this.childOfName(symbolCategory);\n\t            if (symbol) {\n\t                symbol.setColor(visualColor);\n\t                symbol.setStyle({\n\t                    opacity: visualOpacity\n\t                });\n\t            }\n\t        }, this);\n\n\t        var showLabel = labelModel.getShallow('show');\n\t        var hoverShowLabel = hoverLabelModel.getShallow('show');\n\n\t        var label = this.childOfName('label');\n\t        var defaultLabelColor;\n\t        var defaultText;\n\n\t        if (showLabel || hoverShowLabel) {\n\t            var rawVal = seriesModel.getRawValue(idx);\n\t            defaultText = rawVal == null\n\t                ? defaultText = lineData.getName(idx)\n\t                : isFinite(rawVal)\n\t                ? numberUtil.round(rawVal)\n\t                : rawVal;\n\t            defaultLabelColor = visualColor || '#000';\n\t        }\n\n\t        // label.afterUpdate = lineAfterUpdate;\n\t        if (showLabel) {\n\t            var textStyleModel = labelModel.getModel('textStyle');\n\t            label.setStyle({\n\t                text: zrUtil.retrieve(\n\t                    seriesModel.getFormattedLabel(idx, 'normal', lineData.dataType),\n\t                    defaultText\n\t                ),\n\t                textFont: textStyleModel.getFont(),\n\t                fill: textStyleModel.getTextColor() || defaultLabelColor\n\t            });\n\n\t            label.__textAlign = textStyleModel.get('align');\n\t            label.__verticalAlign = textStyleModel.get('baseline');\n\t            label.__position = labelModel.get('position');\n\t        }\n\t        else {\n\t            label.setStyle('text', '');\n\t        }\n\t        if (hoverShowLabel) {\n\t            var textStyleHoverModel = hoverLabelModel.getModel('textStyle');\n\n\t            label.hoverStyle = {\n\t                text: zrUtil.retrieve(\n\t                    seriesModel.getFormattedLabel(idx, 'emphasis', lineData.dataType),\n\t                    defaultText\n\t                ),\n\t                textFont: textStyleHoverModel.getFont(),\n\t                fill: textStyleHoverModel.getTextColor() || defaultLabelColor\n\t            };\n\t        }\n\t        else {\n\t            label.hoverStyle = {\n\t                text: ''\n\t            };\n\t        }\n\n\t        label.ignore = !showLabel && !hoverShowLabel;\n\n\t        graphic.setHoverStyle(this);\n\t    };\n\n\t    lineProto.updateLayout = function (lineData, idx) {\n\t        this.setLinePoints(lineData.getItemLayout(idx));\n\t    };\n\n\t    lineProto.setLinePoints = function (points) {\n\t        var linePath = this.childOfName('line');\n\t        setLinePoints(linePath.shape, points);\n\t        linePath.dirty();\n\t    };\n\n\t    zrUtil.inherits(Line, graphic.Group);\n\n\t    module.exports = Line;\n\n\n/***/ },\n/* 204 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Line path for bezier and straight line draw\n\t */\n\n\t    var graphic = __webpack_require__(43);\n\t    var vec2 = __webpack_require__(10);\n\n\t    var straightLineProto = graphic.Line.prototype;\n\t    var bezierCurveProto = graphic.BezierCurve.prototype;\n\n\t    function isLine(shape) {\n\t        return isNaN(+shape.cpx1) || isNaN(+shape.cpy1);\n\t    }\n\n\t    module.exports = graphic.extendShape({\n\n\t        type: 'ec-line',\n\n\t        style: {\n\t            stroke: '#000',\n\t            fill: null\n\t        },\n\n\t        shape: {\n\t            x1: 0,\n\t            y1: 0,\n\t            x2: 0,\n\t            y2: 0,\n\t            percent: 1,\n\t            cpx1: null,\n\t            cpy1: null\n\t        },\n\n\t        buildPath: function (ctx, shape) {\n\t            (isLine(shape) ? straightLineProto : bezierCurveProto).buildPath(ctx, shape);\n\t        },\n\n\t        pointAt: function (t) {\n\t            return isLine(this.shape)\n\t                ? straightLineProto.pointAt.call(this, t)\n\t                : bezierCurveProto.pointAt.call(this, t);\n\t        },\n\n\t        tangentAt: function (t) {\n\t            var shape = this.shape;\n\t            var p = isLine(shape)\n\t                ? [shape.x2 - shape.x1, shape.y2 - shape.y1]\n\t                : bezierCurveProto.tangentAt.call(this, t);\n\t            return vec2.normalize(p, p);\n\t        }\n\t    });\n\n\n/***/ },\n/* 205 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var curveTool = __webpack_require__(50);\n\t    var vec2 = __webpack_require__(10);\n\n\t    var v1 = [];\n\t    var v2 = [];\n\t    var v3 = [];\n\t    var quadraticAt = curveTool.quadraticAt;\n\t    var v2DistSquare = vec2.distSquare;\n\t    var mathAbs = Math.abs;\n\t    function intersectCurveCircle(curvePoints, center, radius) {\n\t        var p0 = curvePoints[0];\n\t        var p1 = curvePoints[1];\n\t        var p2 = curvePoints[2];\n\n\t        var d = Infinity;\n\t        var t;\n\t        var radiusSquare = radius * radius;\n\t        var interval = 0.1;\n\n\t        for (var _t = 0.1; _t <= 0.9; _t += 0.1) {\n\t            v1[0] = quadraticAt(p0[0], p1[0], p2[0], _t);\n\t            v1[1] = quadraticAt(p0[1], p1[1], p2[1], _t);\n\t            var diff = mathAbs(v2DistSquare(v1, center) - radiusSquare);\n\t            if (diff < d) {\n\t                d = diff;\n\t                t = _t;\n\t            }\n\t        }\n\n\t        // Assume the segment is monotone，Find root through Bisection method\n\t        // At most 32 iteration\n\t        for (var i = 0; i < 32; i++) {\n\t            // var prev = t - interval;\n\t            var next = t + interval;\n\t            // v1[0] = quadraticAt(p0[0], p1[0], p2[0], prev);\n\t            // v1[1] = quadraticAt(p0[1], p1[1], p2[1], prev);\n\t            v2[0] = quadraticAt(p0[0], p1[0], p2[0], t);\n\t            v2[1] = quadraticAt(p0[1], p1[1], p2[1], t);\n\t            v3[0] = quadraticAt(p0[0], p1[0], p2[0], next);\n\t            v3[1] = quadraticAt(p0[1], p1[1], p2[1], next);\n\n\t            var diff = v2DistSquare(v2, center) - radiusSquare;\n\t            if (mathAbs(diff) < 1e-2) {\n\t                break;\n\t            }\n\n\t            // var prevDiff = v2DistSquare(v1, center) - radiusSquare;\n\t            var nextDiff = v2DistSquare(v3, center) - radiusSquare;\n\n\t            interval /= 2;\n\t            if (diff < 0) {\n\t                if (nextDiff >= 0) {\n\t                    t = t + interval;\n\t                }\n\t                else {\n\t                    t = t - interval;\n\t                }\n\t            }\n\t            else {\n\t                if (nextDiff >= 0) {\n\t                    t = t - interval;\n\t                }\n\t                else {\n\t                    t = t + interval;\n\t                }\n\t            }\n\t        }\n\n\t        return t;\n\t    }\n\t    // Adjust edge to avoid\n\t    module.exports = function (graph, scale) {\n\t        var tmp0 = [];\n\t        var quadraticSubdivide = curveTool.quadraticSubdivide;\n\t        var pts = [[], [], []];\n\t        var pts2 = [[], []];\n\t        var v = [];\n\t        scale /= 2;\n\n\t        function getSymbolSize(node) {\n\t            var symbolSize = node.getVisual('symbolSize');\n\t            if (symbolSize instanceof Array) {\n\t                symbolSize = (symbolSize[0] + symbolSize[1]) / 2;\n\t            }\n\t            return symbolSize;\n\t        }\n\t        graph.eachEdge(function (edge, idx) {\n\t            var linePoints = edge.getLayout();\n\t            var fromSymbol = edge.getVisual('fromSymbol');\n\t            var toSymbol = edge.getVisual('toSymbol');\n\n\t            if (!linePoints.__original) {\n\t                linePoints.__original = [\n\t                    vec2.clone(linePoints[0]),\n\t                    vec2.clone(linePoints[1])\n\t                ];\n\t                if (linePoints[2]) {\n\t                    linePoints.__original.push(vec2.clone(linePoints[2]));\n\t                }\n\t            }\n\t            var originalPoints = linePoints.__original;\n\t            // Quadratic curve\n\t            if (linePoints[2] != null) {\n\t                vec2.copy(pts[0], originalPoints[0]);\n\t                vec2.copy(pts[1], originalPoints[2]);\n\t                vec2.copy(pts[2], originalPoints[1]);\n\t                if (fromSymbol && fromSymbol != 'none') {\n\t                    var symbolSize = getSymbolSize(edge.node1);\n\n\t                    var t = intersectCurveCircle(pts, originalPoints[0], symbolSize * scale);\n\t                    // Subdivide and get the second\n\t                    quadraticSubdivide(pts[0][0], pts[1][0], pts[2][0], t, tmp0);\n\t                    pts[0][0] = tmp0[3];\n\t                    pts[1][0] = tmp0[4];\n\t                    quadraticSubdivide(pts[0][1], pts[1][1], pts[2][1], t, tmp0);\n\t                    pts[0][1] = tmp0[3];\n\t                    pts[1][1] = tmp0[4];\n\t                }\n\t                if (toSymbol && toSymbol != 'none') {\n\t                    var symbolSize = getSymbolSize(edge.node2);\n\n\t                    var t = intersectCurveCircle(pts, originalPoints[1], symbolSize * scale);\n\t                    // Subdivide and get the first\n\t                    quadraticSubdivide(pts[0][0], pts[1][0], pts[2][0], t, tmp0);\n\t                    pts[1][0] = tmp0[1];\n\t                    pts[2][0] = tmp0[2];\n\t                    quadraticSubdivide(pts[0][1], pts[1][1], pts[2][1], t, tmp0);\n\t                    pts[1][1] = tmp0[1];\n\t                    pts[2][1] = tmp0[2];\n\t                }\n\t                // Copy back to layout\n\t                vec2.copy(linePoints[0], pts[0]);\n\t                vec2.copy(linePoints[1], pts[2]);\n\t                vec2.copy(linePoints[2], pts[1]);\n\t            }\n\t            // Line\n\t            else {\n\t                vec2.copy(pts2[0], originalPoints[0]);\n\t                vec2.copy(pts2[1], originalPoints[1]);\n\n\t                vec2.sub(v, pts2[1], pts2[0]);\n\t                vec2.normalize(v, v);\n\t                if (fromSymbol && fromSymbol != 'none') {\n\n\t                    var symbolSize = getSymbolSize(edge.node1);\n\n\t                    vec2.scaleAndAdd(pts2[0], pts2[0], v, symbolSize * scale);\n\t                }\n\t                if (toSymbol && toSymbol != 'none') {\n\t                    var symbolSize = getSymbolSize(edge.node2);\n\n\t                    vec2.scaleAndAdd(pts2[1], pts2[1], v, -symbolSize * scale);\n\t                }\n\t                vec2.copy(linePoints[0], pts2[0]);\n\t                vec2.copy(linePoints[1], pts2[1]);\n\t            }\n\t        });\n\t    };\n\n\n/***/ },\n/* 206 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var echarts = __webpack_require__(1);\n\t    var roamHelper = __webpack_require__(180);\n\n\t    var actionInfo = {\n\t        type: 'graphRoam',\n\t        event: 'graphRoam',\n\t        update: 'none'\n\t    };\n\n\t    /**\n\t     * @payload\n\t     * @property {string} name Series name\n\t     * @property {number} [dx]\n\t     * @property {number} [dy]\n\t     * @property {number} [zoom]\n\t     * @property {number} [originX]\n\t     * @property {number} [originY]\n\t     */\n\t    echarts.registerAction(actionInfo, function (payload, ecModel) {\n\t        ecModel.eachComponent({mainType: 'series', query: payload}, function (seriesModel) {\n\t            var coordSys = seriesModel.coordinateSystem;\n\n\t            var res = roamHelper.updateCenterAndZoom(coordSys, payload);\n\n\t            seriesModel.setCenter\n\t                && seriesModel.setCenter(res.center);\n\n\t            seriesModel.setZoom\n\t                && seriesModel.setZoom(res.zoom);\n\t        });\n\t    });\n\n\n\t    /**\n\t     * @payload\n\t     * @property {number} [seriesIndex]\n\t     * @property {string} [seriesId]\n\t     * @property {string} [seriesName]\n\t     * @property {number} [dataIndex]\n\t     */\n\t    echarts.registerAction({\n\t        type: 'focusNodeAdjacency',\n\t        event: 'focusNodeAdjacency',\n\t        update: 'series.graph:focusNodeAdjacency'\n\t    }, function () {});\n\n\t    /**\n\t     * @payload\n\t     * @property {number} [seriesIndex]\n\t     * @property {string} [seriesId]\n\t     * @property {string} [seriesName]\n\t     */\n\t    echarts.registerAction({\n\t        type: 'unfocusNodeAdjacency',\n\t        event: 'unfocusNodeAdjacency',\n\t        update: 'series.graph:unfocusNodeAdjacency'\n\t    }, function () {});\n\n\n\n/***/ },\n/* 207 */\n/***/ function(module, exports) {\n\n\t\n\n\t    module.exports = function (ecModel) {\n\t        var legendModels = ecModel.findComponents({\n\t            mainType: 'legend'\n\t        });\n\t        if (!legendModels || !legendModels.length) {\n\t            return;\n\t        }\n\t        ecModel.eachSeriesByType('graph', function (graphSeries) {\n\t            var categoriesData = graphSeries.getCategoriesData();\n\t            var graph = graphSeries.getGraph();\n\t            var data = graph.data;\n\n\t            var categoryNames = categoriesData.mapArray(categoriesData.getName);\n\n\t            data.filterSelf(function (idx) {\n\t                var model = data.getItemModel(idx);\n\t                var category = model.getShallow('category');\n\t                if (category != null) {\n\t                    if (typeof category === 'number') {\n\t                        category = categoryNames[category];\n\t                    }\n\t                    // If in any legend component the status is not selected.\n\t                    for (var i = 0; i < legendModels.length; i++) {\n\t                        if (!legendModels[i].isSelected(category)) {\n\t                            return false;\n\t                        }\n\t                    }\n\t                }\n\t                return true;\n\t            });\n\t        }, this);\n\t    };\n\n\n/***/ },\n/* 208 */\n/***/ function(module, exports) {\n\n\t\n\n\t    module.exports = function (ecModel) {\n\n\t        var paletteScope = {};\n\t        ecModel.eachSeriesByType('graph', function (seriesModel) {\n\t            var categoriesData = seriesModel.getCategoriesData();\n\t            var data = seriesModel.getData();\n\n\t            var categoryNameIdxMap = {};\n\n\t            categoriesData.each(function (idx) {\n\t                var name = categoriesData.getName(idx);\n\t                categoryNameIdxMap[name] = idx;\n\n\t                var itemModel = categoriesData.getItemModel(idx);\n\t                var color = itemModel.get('itemStyle.normal.color')\n\t                    || seriesModel.getColorFromPalette(name, paletteScope);\n\t                categoriesData.setItemVisual(idx, 'color', color);\n\t            });\n\n\t            // Assign category color to visual\n\t            if (categoriesData.count()) {\n\t                data.each(function (idx) {\n\t                    var model = data.getItemModel(idx);\n\t                    var category = model.getShallow('category');\n\t                    if (category != null) {\n\t                        if (typeof category === 'string') {\n\t                            category = categoryNameIdxMap[category];\n\t                        }\n\t                        if (!data.getItemVisual(idx, 'color', true)) {\n\t                            data.setItemVisual(\n\t                                idx, 'color',\n\t                                categoriesData.getItemVisual(category, 'color')\n\t                            );\n\t                        }\n\t                    }\n\t                });\n\t            }\n\t        });\n\t    };\n\n\n/***/ },\n/* 209 */\n/***/ function(module, exports) {\n\n\t\n\n\t    function normalize(a) {\n\t        if (!(a instanceof Array)) {\n\t            a = [a, a];\n\t        }\n\t        return a;\n\t    }\n\t    module.exports = function (ecModel) {\n\t        ecModel.eachSeriesByType('graph', function (seriesModel) {\n\t            var graph = seriesModel.getGraph();\n\t            var edgeData = seriesModel.getEdgeData();\n\t            var symbolType = normalize(seriesModel.get('edgeSymbol'));\n\t            var symbolSize = normalize(seriesModel.get('edgeSymbolSize'));\n\n\t            var colorQuery = 'lineStyle.normal.color'.split('.');\n\t            var opacityQuery = 'lineStyle.normal.opacity'.split('.');\n\n\t            edgeData.setVisual('fromSymbol', symbolType && symbolType[0]);\n\t            edgeData.setVisual('toSymbol', symbolType && symbolType[1]);\n\t            edgeData.setVisual('fromSymbolSize', symbolSize && symbolSize[0]);\n\t            edgeData.setVisual('toSymbolSize', symbolSize && symbolSize[1]);\n\t            edgeData.setVisual('color', seriesModel.get(colorQuery));\n\t            edgeData.setVisual('opacity', seriesModel.get(opacityQuery));\n\n\t            edgeData.each(function (idx) {\n\t                var itemModel = edgeData.getItemModel(idx);\n\t                var edge = graph.getEdgeByIndex(idx);\n\t                var symbolType = normalize(itemModel.getShallow('symbol', true));\n\t                var symbolSize = normalize(itemModel.getShallow('symbolSize', true));\n\t                // Edge visual must after node visual\n\t                var color = itemModel.get(colorQuery);\n\t                var opacity = itemModel.get(opacityQuery);\n\t                switch (color) {\n\t                    case 'source':\n\t                        color = edge.node1.getVisual('color');\n\t                        break;\n\t                    case 'target':\n\t                        color = edge.node2.getVisual('color');\n\t                        break;\n\t                }\n\n\t                symbolType[0] && edge.setVisual('fromSymbol', symbolType[0]);\n\t                symbolType[1] && edge.setVisual('toSymbol', symbolType[1]);\n\t                symbolSize[0] && edge.setVisual('fromSymbolSize', symbolSize[0]);\n\t                symbolSize[1] && edge.setVisual('toSymbolSize', symbolSize[1]);\n\n\t                edge.setVisual('color', color);\n\t                edge.setVisual('opacity', opacity);\n\t            });\n\t        });\n\t    };\n\n\n/***/ },\n/* 210 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var simpleLayoutHelper = __webpack_require__(211);\n\t    var simpleLayoutEdge = __webpack_require__(212);\n\t    module.exports = function (ecModel, api) {\n\t        ecModel.eachSeriesByType('graph', function (seriesModel) {\n\t            var layout = seriesModel.get('layout');\n\t            var coordSys = seriesModel.coordinateSystem;\n\t            if (coordSys && coordSys.type !== 'view') {\n\t                var data = seriesModel.getData();\n\t                data.each(coordSys.dimensions, function (x, y, idx) {\n\t                    if (!isNaN(x) && !isNaN(y)) {\n\t                        data.setItemLayout(idx, coordSys.dataToPoint([x, y]));\n\t                    }\n\t                    else {\n\t                        // Also {Array.<number>}, not undefined to avoid if...else... statement\n\t                        data.setItemLayout(idx, [NaN, NaN]);\n\t                    }\n\t                });\n\n\t                simpleLayoutEdge(data.graph);\n\t            }\n\t            else if (!layout || layout === 'none') {\n\t                simpleLayoutHelper(seriesModel);\n\t            }\n\t        });\n\t    };\n\n\n/***/ },\n/* 211 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var simpleLayoutEdge = __webpack_require__(212);\n\n\t    module.exports = function (seriesModel) {\n\t        var coordSys = seriesModel.coordinateSystem;\n\t        if (coordSys && coordSys.type !== 'view') {\n\t            return;\n\t        }\n\t        var graph = seriesModel.getGraph();\n\n\t        graph.eachNode(function (node) {\n\t            var model = node.getModel();\n\t            node.setLayout([+model.get('x'), +model.get('y')]);\n\t        });\n\n\t        simpleLayoutEdge(graph);\n\t    };\n\n\n/***/ },\n/* 212 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t    var vec2 = __webpack_require__(10);\n\t    module.exports = function (graph) {\n\t        graph.eachEdge(function (edge) {\n\t            var curveness = edge.getModel().get('lineStyle.normal.curveness') || 0;\n\t            var p1 = vec2.clone(edge.node1.getLayout());\n\t            var p2 = vec2.clone(edge.node2.getLayout());\n\t            var points = [p1, p2];\n\t            if (+curveness) {\n\t                points.push([\n\t                    (p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * curveness,\n\t                    (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * curveness\n\t                ]);\n\t            }\n\t            edge.setLayout(points);\n\t        });\n\t    };\n\n\n/***/ },\n/* 213 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t    var circularLayoutHelper = __webpack_require__(214);\n\t    module.exports = function (ecModel) {\n\t        ecModel.eachSeriesByType('graph', function (seriesModel) {\n\t            if (seriesModel.get('layout') === 'circular') {\n\t                circularLayoutHelper(seriesModel);\n\t            }\n\t        });\n\t    };\n\n\n/***/ },\n/* 214 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t    var vec2 = __webpack_require__(10);\n\t    module.exports = function (seriesModel) {\n\t        var coordSys = seriesModel.coordinateSystem;\n\t        if (coordSys && coordSys.type !== 'view') {\n\t            return;\n\t        }\n\n\t        var rect = coordSys.getBoundingRect();\n\n\t        var nodeData = seriesModel.getData();\n\t        var graph = nodeData.graph;\n\n\t        var angle = 0;\n\t        var sum = nodeData.getSum('value');\n\t        var unitAngle = Math.PI * 2 / (sum || nodeData.count());\n\n\t        var cx = rect.width / 2 + rect.x;\n\t        var cy = rect.height / 2 + rect.y;\n\n\t        var r = Math.min(rect.width, rect.height) / 2;\n\n\t        graph.eachNode(function (node) {\n\t            var value = node.getValue('value');\n\n\t            angle += unitAngle * (sum ? value : 1) / 2;\n\n\t            node.setLayout([\n\t                r * Math.cos(angle) + cx,\n\t                r * Math.sin(angle) + cy\n\t            ]);\n\n\t            angle += unitAngle * (sum ? value : 1) / 2;\n\t        });\n\n\t        nodeData.setLayout({\n\t            cx: cx,\n\t            cy: cy\n\t        });\n\n\t        graph.eachEdge(function (edge) {\n\t            var curveness = edge.getModel().get('lineStyle.normal.curveness') || 0;\n\t            var p1 = vec2.clone(edge.node1.getLayout());\n\t            var p2 = vec2.clone(edge.node2.getLayout());\n\t            var cp1;\n\t            var x12 = (p1[0] + p2[0]) / 2;\n\t            var y12 = (p1[1] + p2[1]) / 2;\n\t            if (+curveness) {\n\t                curveness *= 3;\n\t                cp1 = [\n\t                    cx * curveness + x12 * (1 - curveness),\n\t                    cy * curveness + y12 * (1 - curveness)\n\t                ];\n\t            }\n\t            edge.setLayout([p1, p2, cp1]);\n\t        });\n\t    };\n\n\n/***/ },\n/* 215 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var forceHelper = __webpack_require__(216);\n\t    var numberUtil = __webpack_require__(7);\n\t    var simpleLayoutHelper = __webpack_require__(211);\n\t    var circularLayoutHelper = __webpack_require__(214);\n\t    var vec2 = __webpack_require__(10);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    module.exports = function (ecModel) {\n\t        ecModel.eachSeriesByType('graph', function (graphSeries) {\n\t            var coordSys = graphSeries.coordinateSystem;\n\t            if (coordSys && coordSys.type !== 'view') {\n\t                return;\n\t            }\n\t            if (graphSeries.get('layout') === 'force') {\n\t                var preservedPoints = graphSeries.preservedPoints || {};\n\t                var graph = graphSeries.getGraph();\n\t                var nodeData = graph.data;\n\t                var edgeData = graph.edgeData;\n\t                var forceModel = graphSeries.getModel('force');\n\t                var initLayout = forceModel.get('initLayout');\n\t                if (graphSeries.preservedPoints) {\n\t                    nodeData.each(function (idx) {\n\t                        var id = nodeData.getId(idx);\n\t                        nodeData.setItemLayout(idx, preservedPoints[id] || [NaN, NaN]);\n\t                    });\n\t                }\n\t                else if (!initLayout || initLayout === 'none') {\n\t                    simpleLayoutHelper(graphSeries);\n\t                }\n\t                else if (initLayout === 'circular') {\n\t                    circularLayoutHelper(graphSeries);\n\t                }\n\n\t                var nodeDataExtent = nodeData.getDataExtent('value');\n\t                var edgeDataExtent = edgeData.getDataExtent('value');\n\t                // var edgeDataExtent = edgeData.getDataExtent('value');\n\t                var repulsion = forceModel.get('repulsion');\n\t                var edgeLength = forceModel.get('edgeLength');\n\t                if (!zrUtil.isArray(repulsion)) {\n\t                    repulsion = [repulsion, repulsion];\n\t                }\n\t                if (!zrUtil.isArray(edgeLength)) {\n\t                    edgeLength = [edgeLength, edgeLength];\n\t                }\n\t                // Larger value has smaller length\n\t                edgeLength = [edgeLength[1], edgeLength[0]];\n\n\t                var nodes = nodeData.mapArray('value', function (value, idx) {\n\t                    var point = nodeData.getItemLayout(idx);\n\t                    // var w = numberUtil.linearMap(value, nodeDataExtent, [0, 50]);\n\t                    var rep = numberUtil.linearMap(value, nodeDataExtent, repulsion);\n\t                    if (isNaN(rep)) {\n\t                        rep = (repulsion[0] + repulsion[1]) / 2;\n\t                    }\n\t                    return {\n\t                        w: rep,\n\t                        rep: rep,\n\t                        p: (!point || isNaN(point[0]) || isNaN(point[1])) ? null : point\n\t                    };\n\t                });\n\t                var edges = edgeData.mapArray('value', function (value, idx) {\n\t                    var edge = graph.getEdgeByIndex(idx);\n\t                    var d = numberUtil.linearMap(value, edgeDataExtent, edgeLength);\n\t                    if (isNaN(d)) {\n\t                        d = (edgeLength[0] + edgeLength[1]) / 2;\n\t                    }\n\t                    return {\n\t                        n1: nodes[edge.node1.dataIndex],\n\t                        n2: nodes[edge.node2.dataIndex],\n\t                        d: d,\n\t                        curveness: edge.getModel().get('lineStyle.normal.curveness') || 0\n\t                    };\n\t                });\n\n\t                var coordSys = graphSeries.coordinateSystem;\n\t                var rect = coordSys.getBoundingRect();\n\t                var forceInstance = forceHelper(nodes, edges, {\n\t                    rect: rect,\n\t                    gravity: forceModel.get('gravity')\n\t                });\n\t                var oldStep = forceInstance.step;\n\t                forceInstance.step = function (cb) {\n\t                    for (var i = 0, l = nodes.length; i < l; i++) {\n\t                        if (nodes[i].fixed) {\n\t                            // Write back to layout instance\n\t                            vec2.copy(nodes[i].p, graph.getNodeByIndex(i).getLayout());\n\t                        }\n\t                    }\n\t                    oldStep(function (nodes, edges, stopped) {\n\t                        for (var i = 0, l = nodes.length; i < l; i++) {\n\t                            if (!nodes[i].fixed) {\n\t                                graph.getNodeByIndex(i).setLayout(nodes[i].p);\n\t                            }\n\t                            preservedPoints[nodeData.getId(i)] = nodes[i].p;\n\t                        }\n\t                        for (var i = 0, l = edges.length; i < l; i++) {\n\t                            var e = edges[i];\n\t                            var edge = graph.getEdgeByIndex(i);\n\t                            var p1 = e.n1.p;\n\t                            var p2 = e.n2.p;\n\t                            var points = edge.getLayout();\n\t                            points = points ? points.slice() : [];\n\t                            points[0] = points[0] || [];\n\t                            points[1] = points[1] || [];\n\t                            vec2.copy(points[0], p1);\n\t                            vec2.copy(points[1], p2);\n\t                            if (+e.curveness) {\n\t                                points[2] = [\n\t                                    (p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * e.curveness,\n\t                                    (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * e.curveness\n\t                                ];\n\t                            }\n\t                            edge.setLayout(points);\n\t                        }\n\t                        // Update layout\n\n\t                        cb && cb(stopped);\n\t                    });\n\t                };\n\t                graphSeries.forceLayout = forceInstance;\n\t                graphSeries.preservedPoints = preservedPoints;\n\n\t                // Step to get the layout\n\t                forceInstance.step();\n\t            }\n\t            else {\n\t                // Remove prev injected forceLayout instance\n\t                graphSeries.forceLayout = null;\n\t            }\n\t        });\n\t    };\n\n\n/***/ },\n/* 216 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var vec2 = __webpack_require__(10);\n\t    var scaleAndAdd = vec2.scaleAndAdd;\n\n\t    // function adjacentNode(n, e) {\n\t    //     return e.n1 === n ? e.n2 : e.n1;\n\t    // }\n\n\t    module.exports = function (nodes, edges, opts) {\n\t        var rect = opts.rect;\n\t        var width = rect.width;\n\t        var height = rect.height;\n\t        var center = [rect.x + width / 2, rect.y + height / 2];\n\t        // var scale = opts.scale || 1;\n\t        var gravity = opts.gravity == null ? 0.1 : opts.gravity;\n\n\t        // for (var i = 0; i < edges.length; i++) {\n\t        //     var e = edges[i];\n\t        //     var n1 = e.n1;\n\t        //     var n2 = e.n2;\n\t        //     n1.edges = n1.edges || [];\n\t        //     n2.edges = n2.edges || [];\n\t        //     n1.edges.push(e);\n\t        //     n2.edges.push(e);\n\t        // }\n\t        // Init position\n\t        for (var i = 0; i < nodes.length; i++) {\n\t            var n = nodes[i];\n\t            if (!n.p) {\n\t                // Use the position from first adjecent node with defined position\n\t                // Or use a random position\n\t                // From d3\n\t                // if (n.edges) {\n\t                //     var j = -1;\n\t                //     while (++j < n.edges.length) {\n\t                //         var e = n.edges[j];\n\t                //         var other = adjacentNode(n, e);\n\t                //         if (other.p) {\n\t                //             n.p = vec2.clone(other.p);\n\t                //             break;\n\t                //         }\n\t                //     }\n\t                // }\n\t                // if (!n.p) {\n\t                    n.p = vec2.create(\n\t                        width * (Math.random() - 0.5) + center[0],\n\t                        height * (Math.random() - 0.5) + center[1]\n\t                    );\n\t                // }\n\t            }\n\t            n.pp = vec2.clone(n.p);\n\t            n.edges = null;\n\t        }\n\n\t        // Formula in 'Graph Drawing by Force-directed Placement'\n\t        // var k = scale * Math.sqrt(width * height / nodes.length);\n\t        // var k2 = k * k;\n\n\t        var friction = 0.6;\n\n\t        return {\n\t            warmUp: function () {\n\t                friction = 0.5;\n\t            },\n\n\t            setFixed: function (idx) {\n\t                nodes[idx].fixed = true;\n\t            },\n\n\t            setUnfixed: function (idx) {\n\t                nodes[idx].fixed = false;\n\t            },\n\n\t            step: function (cb) {\n\t                var v12 = [];\n\t                var nLen = nodes.length;\n\t                for (var i = 0; i < edges.length; i++) {\n\t                    var e = edges[i];\n\t                    var n1 = e.n1;\n\t                    var n2 = e.n2;\n\n\t                    vec2.sub(v12, n2.p, n1.p);\n\t                    var d = vec2.len(v12) - e.d;\n\t                    var w = n2.w / (n1.w + n2.w);\n\t                    vec2.normalize(v12, v12);\n\n\t                    !n1.fixed && scaleAndAdd(n1.p, n1.p, v12, w * d * friction);\n\t                    !n2.fixed && scaleAndAdd(n2.p, n2.p, v12, -(1 - w) * d * friction);\n\t                }\n\t                // Gravity\n\t                for (var i = 0; i < nLen; i++) {\n\t                    var n = nodes[i];\n\t                    if (!n.fixed) {\n\t                        vec2.sub(v12, center, n.p);\n\t                        // var d = vec2.len(v12);\n\t                        // vec2.scale(v12, v12, 1 / d);\n\t                        // var gravityFactor = gravity;\n\t                        vec2.scaleAndAdd(n.p, n.p, v12, gravity * friction);\n\t                    }\n\t                }\n\n\t                // Repulsive\n\t                // PENDING\n\t                for (var i = 0; i < nLen; i++) {\n\t                    var n1 = nodes[i];\n\t                    for (var j = i + 1; j < nLen; j++) {\n\t                        var n2 = nodes[j];\n\t                        vec2.sub(v12, n2.p, n1.p);\n\t                        var d = vec2.len(v12);\n\t                        if (d === 0) {\n\t                            // Random repulse\n\t                            vec2.set(v12, Math.random() - 0.5, Math.random() - 0.5);\n\t                            d = 1;\n\t                        }\n\t                        var repFact = (n1.rep + n2.rep) / d / d;\n\t                        !n1.fixed && scaleAndAdd(n1.pp, n1.pp, v12, repFact);\n\t                        !n2.fixed && scaleAndAdd(n2.pp, n2.pp, v12, -repFact);\n\t                    }\n\t                }\n\t                var v = [];\n\t                for (var i = 0; i < nLen; i++) {\n\t                    var n = nodes[i];\n\t                    if (!n.fixed) {\n\t                        vec2.sub(v, n.p, n.pp);\n\t                        vec2.scaleAndAdd(n.p, n.p, v, friction);\n\t                        vec2.copy(n.pp, n.p);\n\t                    }\n\t                }\n\n\t                friction = friction * 0.992;\n\n\t                cb && cb(nodes, edges, friction < 0.01);\n\t            }\n\t        };\n\t    };\n\n\n/***/ },\n/* 217 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t    // FIXME Where to create the simple view coordinate system\n\t    var View = __webpack_require__(171);\n\t    var layout = __webpack_require__(21);\n\t    var bbox = __webpack_require__(51);\n\n\t    function getViewRect(seriesModel, api, aspect) {\n\t        var option = seriesModel.getBoxLayoutParams();\n\t        option.aspect = aspect;\n\t        return layout.getLayoutRect(option, {\n\t            width: api.getWidth(),\n\t            height: api.getHeight()\n\t        });\n\t    }\n\n\t    module.exports = function (ecModel, api) {\n\t        var viewList = [];\n\t        ecModel.eachSeriesByType('graph', function (seriesModel) {\n\t            var coordSysType = seriesModel.get('coordinateSystem');\n\t            if (!coordSysType || coordSysType === 'view') {\n\n\t                var data = seriesModel.getData();\n\t                var positions = data.mapArray(function (idx) {\n\t                    var itemModel = data.getItemModel(idx);\n\t                    return [+itemModel.get('x'), +itemModel.get('y')];\n\t                });\n\n\t                var min = [];\n\t                var max = [];\n\n\t                bbox.fromPoints(positions, min, max);\n\n\t                // If width or height is 0\n\t                if (max[0] - min[0] === 0) {\n\t                    max[0] += 1;\n\t                    min[0] -= 1;\n\t                }\n\t                if (max[1] - min[1] === 0) {\n\t                    max[1] += 1;\n\t                    min[1] -= 1;\n\t                }\n\t                var aspect = (max[0] - min[0]) / (max[1] - min[1]);\n\t                // FIXME If get view rect after data processed?\n\t                var viewRect = getViewRect(seriesModel, api, aspect);\n\t                // Position may be NaN, use view rect instead\n\t                if (isNaN(aspect)) {\n\t                    min = [viewRect.x, viewRect.y];\n\t                    max = [viewRect.x + viewRect.width, viewRect.y + viewRect.height];\n\t                }\n\n\t                var bbWidth = max[0] - min[0];\n\t                var bbHeight = max[1] - min[1];\n\n\t                var viewWidth = viewRect.width;\n\t                var viewHeight = viewRect.height;\n\n\t                var viewCoordSys = seriesModel.coordinateSystem = new View();\n\t                viewCoordSys.zoomLimit = seriesModel.get('scaleLimit');\n\n\t                viewCoordSys.setBoundingRect(\n\t                    min[0], min[1], bbWidth, bbHeight\n\t                );\n\t                viewCoordSys.setViewRect(\n\t                    viewRect.x, viewRect.y, viewWidth, viewHeight\n\t                );\n\n\t                // Update roam info\n\t                viewCoordSys.setCenter(seriesModel.get('center'));\n\t                viewCoordSys.setZoom(seriesModel.get('zoom'));\n\n\t                viewList.push(viewCoordSys);\n\t            }\n\t        });\n\t        return viewList;\n\t    };\n\n\n/***/ },\n/* 218 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t    __webpack_require__(219);\n\t    __webpack_require__(220);\n\n\n/***/ },\n/* 219 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var List = __webpack_require__(98);\n\t    var SeriesModel = __webpack_require__(28);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var GaugeSeries = SeriesModel.extend({\n\n\t        type: 'series.gauge',\n\n\t        getInitialData: function (option, ecModel) {\n\t            var list = new List(['value'], this);\n\t            var dataOpt = option.data || [];\n\t            if (!zrUtil.isArray(dataOpt)) {\n\t                dataOpt = [dataOpt];\n\t            }\n\t            // Only use the first data item\n\t            list.initData(dataOpt);\n\t            return list;\n\t        },\n\n\t        defaultOption: {\n\t            zlevel: 0,\n\t            z: 2,\n\t            // 默认全局居中\n\t            center: ['50%', '50%'],\n\t            legendHoverLink: true,\n\t            radius: '75%',\n\t            startAngle: 225,\n\t            endAngle: -45,\n\t            clockwise: true,\n\t            // 最小值\n\t            min: 0,\n\t            // 最大值\n\t            max: 100,\n\t            // 分割段数，默认为10\n\t            splitNumber: 10,\n\t            // 坐标轴线\n\t            axisLine: {\n\t                // 默认显示，属性show控制显示与否\n\t                show: true,\n\t                lineStyle: {       // 属性lineStyle控制线条样式\n\t                    color: [[0.2, '#91c7ae'], [0.8, '#63869e'], [1, '#c23531']],\n\t                    width: 30\n\t                }\n\t            },\n\t            // 分隔线\n\t            splitLine: {\n\t                // 默认显示，属性show控制显示与否\n\t                show: true,\n\t                // 属性length控制线长\n\t                length: 30,\n\t                // 属性lineStyle（详见lineStyle）控制线条样式\n\t                lineStyle: {\n\t                    color: '#eee',\n\t                    width: 2,\n\t                    type: 'solid'\n\t                }\n\t            },\n\t            // 坐标轴小标记\n\t            axisTick: {\n\t                // 属性show控制显示与否，默认不显示\n\t                show: true,\n\t                // 每份split细分多少段\n\t                splitNumber: 5,\n\t                // 属性length控制线长\n\t                length: 8,\n\t                // 属性lineStyle控制线条样式\n\t                lineStyle: {\n\t                    color: '#eee',\n\t                    width: 1,\n\t                    type: 'solid'\n\t                }\n\t            },\n\t            axisLabel: {\n\t                show: true,\n\t                distance: 5,\n\t                // formatter: null,\n\t                textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n\t                    color: 'auto'\n\t                }\n\t            },\n\t            pointer: {\n\t                show: true,\n\t                length: '80%',\n\t                width: 8\n\t            },\n\t            itemStyle: {\n\t                normal: {\n\t                    color: 'auto'\n\t                }\n\t            },\n\t            title: {\n\t                show: true,\n\t                // x, y，单位px\n\t                offsetCenter: [0, '-40%'],\n\t                // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n\t                textStyle: {\n\t                    color: '#333',\n\t                    fontSize: 15\n\t                }\n\t            },\n\t            detail: {\n\t                show: true,\n\t                backgroundColor: 'rgba(0,0,0,0)',\n\t                borderWidth: 0,\n\t                borderColor: '#ccc',\n\t                width: 100,\n\t                height: 40,\n\t                // x, y，单位px\n\t                offsetCenter: [0, '40%'],\n\t                // formatter: null,\n\t                // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n\t                textStyle: {\n\t                    color: 'auto',\n\t                    fontSize: 30\n\t                }\n\t            }\n\t        }\n\t    });\n\n\t    module.exports = GaugeSeries;\n\n\n/***/ },\n/* 220 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var PointerPath = __webpack_require__(221);\n\n\t    var graphic = __webpack_require__(43);\n\t    var numberUtil = __webpack_require__(7);\n\t    var parsePercent = numberUtil.parsePercent;\n\n\t    function parsePosition(seriesModel, api) {\n\t        var center = seriesModel.get('center');\n\t        var width = api.getWidth();\n\t        var height = api.getHeight();\n\t        var size = Math.min(width, height);\n\t        var cx = parsePercent(center[0], api.getWidth());\n\t        var cy = parsePercent(center[1], api.getHeight());\n\t        var r = parsePercent(seriesModel.get('radius'), size / 2);\n\n\t        return {\n\t            cx: cx,\n\t            cy: cy,\n\t            r: r\n\t        };\n\t    }\n\n\t    function formatLabel(label, labelFormatter) {\n\t        if (labelFormatter) {\n\t            if (typeof labelFormatter === 'string') {\n\t                label = labelFormatter.replace('{value}', label != null ? label : '');\n\t            }\n\t            else if (typeof labelFormatter === 'function') {\n\t                label = labelFormatter(label);\n\t            }\n\t        }\n\n\t        return label;\n\t    }\n\n\t    var PI2 = Math.PI * 2;\n\n\t    var GaugeView = __webpack_require__(42).extend({\n\n\t        type: 'gauge',\n\n\t        render: function (seriesModel, ecModel, api) {\n\n\t            this.group.removeAll();\n\n\t            var colorList = seriesModel.get('axisLine.lineStyle.color');\n\t            var posInfo = parsePosition(seriesModel, api);\n\n\t            this._renderMain(\n\t                seriesModel, ecModel, api, colorList, posInfo\n\t            );\n\t        },\n\n\t        dispose: function () {},\n\n\t        _renderMain: function (seriesModel, ecModel, api, colorList, posInfo) {\n\t            var group = this.group;\n\n\t            var axisLineModel = seriesModel.getModel('axisLine');\n\t            var lineStyleModel = axisLineModel.getModel('lineStyle');\n\n\t            var clockwise = seriesModel.get('clockwise');\n\t            var startAngle = -seriesModel.get('startAngle') / 180 * Math.PI;\n\t            var endAngle = -seriesModel.get('endAngle') / 180 * Math.PI;\n\n\t            var angleRangeSpan = (endAngle - startAngle) % PI2;\n\n\t            var prevEndAngle = startAngle;\n\t            var axisLineWidth = lineStyleModel.get('width');\n\n\t            for (var i = 0; i < colorList.length; i++) {\n\t                // Clamp\n\t                var percent = Math.min(Math.max(colorList[i][0], 0), 1);\n\t                var endAngle = startAngle + angleRangeSpan * percent;\n\t                var sector = new graphic.Sector({\n\t                    shape: {\n\t                        startAngle: prevEndAngle,\n\t                        endAngle: endAngle,\n\t                        cx: posInfo.cx,\n\t                        cy: posInfo.cy,\n\t                        clockwise: clockwise,\n\t                        r0: posInfo.r - axisLineWidth,\n\t                        r: posInfo.r\n\t                    },\n\t                    silent: true\n\t                });\n\n\t                sector.setStyle({\n\t                    fill: colorList[i][1]\n\t                });\n\n\t                sector.setStyle(lineStyleModel.getLineStyle(\n\t                    // Because we use sector to simulate arc\n\t                    // so the properties for stroking are useless\n\t                    ['color', 'borderWidth', 'borderColor']\n\t                ));\n\n\t                group.add(sector);\n\n\t                prevEndAngle = endAngle;\n\t            }\n\n\t            var getColor = function (percent) {\n\t                // Less than 0\n\t                if (percent <= 0) {\n\t                    return colorList[0][1];\n\t                }\n\t                for (var i = 0; i < colorList.length; i++) {\n\t                    if (colorList[i][0] >= percent\n\t                        && (i === 0 ? 0 : colorList[i - 1][0]) < percent\n\t                    ) {\n\t                        return colorList[i][1];\n\t                    }\n\t                }\n\t                // More than 1\n\t                return colorList[i - 1][1];\n\t            };\n\n\t            if (!clockwise) {\n\t                var tmp = startAngle;\n\t                startAngle = endAngle;\n\t                endAngle = tmp;\n\t            }\n\n\t            this._renderTicks(\n\t                seriesModel, ecModel, api, getColor, posInfo,\n\t                startAngle, endAngle, clockwise\n\t            );\n\n\t            this._renderPointer(\n\t                seriesModel, ecModel, api, getColor, posInfo,\n\t                startAngle, endAngle, clockwise\n\t            );\n\n\t            this._renderTitle(\n\t                seriesModel, ecModel, api, getColor, posInfo\n\t            );\n\t            this._renderDetail(\n\t                seriesModel, ecModel, api, getColor, posInfo\n\t            );\n\t        },\n\n\t        _renderTicks: function (\n\t            seriesModel, ecModel, api, getColor, posInfo,\n\t            startAngle, endAngle, clockwise\n\t        ) {\n\t            var group = this.group;\n\t            var cx = posInfo.cx;\n\t            var cy = posInfo.cy;\n\t            var r = posInfo.r;\n\n\t            var minVal = +seriesModel.get('min');\n\t            var maxVal = +seriesModel.get('max');\n\n\t            var splitLineModel = seriesModel.getModel('splitLine');\n\t            var tickModel = seriesModel.getModel('axisTick');\n\t            var labelModel = seriesModel.getModel('axisLabel');\n\n\t            var splitNumber = seriesModel.get('splitNumber');\n\t            var subSplitNumber = tickModel.get('splitNumber');\n\n\t            var splitLineLen = parsePercent(\n\t                splitLineModel.get('length'), r\n\t            );\n\t            var tickLen = parsePercent(\n\t                tickModel.get('length'), r\n\t            );\n\n\t            var angle = startAngle;\n\t            var step = (endAngle - startAngle) / splitNumber;\n\t            var subStep = step / subSplitNumber;\n\n\t            var splitLineStyle = splitLineModel.getModel('lineStyle').getLineStyle();\n\t            var tickLineStyle = tickModel.getModel('lineStyle').getLineStyle();\n\t            var textStyleModel = labelModel.getModel('textStyle');\n\n\t            for (var i = 0; i <= splitNumber; i++) {\n\t                var unitX = Math.cos(angle);\n\t                var unitY = Math.sin(angle);\n\t                // Split line\n\t                if (splitLineModel.get('show')) {\n\t                    var splitLine = new graphic.Line({\n\t                        shape: {\n\t                            x1: unitX * r + cx,\n\t                            y1: unitY * r + cy,\n\t                            x2: unitX * (r - splitLineLen) + cx,\n\t                            y2: unitY * (r - splitLineLen) + cy\n\t                        },\n\t                        style: splitLineStyle,\n\t                        silent: true\n\t                    });\n\t                    if (splitLineStyle.stroke === 'auto') {\n\t                        splitLine.setStyle({\n\t                            stroke: getColor(i / splitNumber)\n\t                        });\n\t                    }\n\n\t                    group.add(splitLine);\n\t                }\n\n\t                // Label\n\t                if (labelModel.get('show')) {\n\t                    var label = formatLabel(\n\t                        numberUtil.round(i / splitNumber * (maxVal - minVal) + minVal),\n\t                        labelModel.get('formatter')\n\t                    );\n\t                    var distance = labelModel.get('distance');\n\n\t                    var text = new graphic.Text({\n\t                        style: {\n\t                            text: label,\n\t                            x: unitX * (r - splitLineLen - distance) + cx,\n\t                            y: unitY * (r - splitLineLen - distance) + cy,\n\t                            fill: textStyleModel.getTextColor(),\n\t                            textFont: textStyleModel.getFont(),\n\t                            textVerticalAlign: unitY < -0.4 ? 'top' : (unitY > 0.4 ? 'bottom' : 'middle'),\n\t                            textAlign: unitX < -0.4 ? 'left' : (unitX > 0.4 ? 'right' : 'center')\n\t                        },\n\t                        silent: true\n\t                    });\n\t                    if (text.style.fill === 'auto') {\n\t                        text.setStyle({\n\t                            fill: getColor(i / splitNumber)\n\t                        });\n\t                    }\n\n\t                    group.add(text);\n\t                }\n\n\t                // Axis tick\n\t                if (tickModel.get('show') && i !== splitNumber) {\n\t                    for (var j = 0; j <= subSplitNumber; j++) {\n\t                        var unitX = Math.cos(angle);\n\t                        var unitY = Math.sin(angle);\n\t                        var tickLine = new graphic.Line({\n\t                            shape: {\n\t                                x1: unitX * r + cx,\n\t                                y1: unitY * r + cy,\n\t                                x2: unitX * (r - tickLen) + cx,\n\t                                y2: unitY * (r - tickLen) + cy\n\t                            },\n\t                            silent: true,\n\t                            style: tickLineStyle\n\t                        });\n\n\t                        if (tickLineStyle.stroke === 'auto') {\n\t                            tickLine.setStyle({\n\t                                stroke: getColor((i + j / subSplitNumber) / splitNumber)\n\t                            });\n\t                        }\n\n\t                        group.add(tickLine);\n\t                        angle += subStep;\n\t                    }\n\t                    angle -= subStep;\n\t                }\n\t                else {\n\t                    angle += step;\n\t                }\n\t            }\n\t        },\n\n\t        _renderPointer: function (\n\t            seriesModel, ecModel, api, getColor, posInfo,\n\t            startAngle, endAngle, clockwise\n\t        ) {\n\n\t            var group = this.group;\n\t            var oldData = this._data;\n\n\t            if (!seriesModel.get('pointer.show')) {\n\t                // Remove old element\n\t                oldData.eachItemGraphicEl(function (el) {\n\t                    group.remove(el);\n\t                });\n\t                return;\n\t            }\n\n\t            var valueExtent = [+seriesModel.get('min'), +seriesModel.get('max')];\n\t            var angleExtent = [startAngle, endAngle];\n\n\t            var data = seriesModel.getData();\n\n\t            data.diff(oldData)\n\t                .add(function (idx) {\n\t                    var pointer = new PointerPath({\n\t                        shape: {\n\t                            angle: startAngle\n\t                        }\n\t                    });\n\n\t                    graphic.updateProps(pointer, {\n\t                        shape: {\n\t                            angle: numberUtil.linearMap(data.get('value', idx), valueExtent, angleExtent, true)\n\t                        }\n\t                    }, seriesModel);\n\n\t                    group.add(pointer);\n\t                    data.setItemGraphicEl(idx, pointer);\n\t                })\n\t                .update(function (newIdx, oldIdx) {\n\t                    var pointer = oldData.getItemGraphicEl(oldIdx);\n\n\t                    graphic.updateProps(pointer, {\n\t                        shape: {\n\t                            angle: numberUtil.linearMap(data.get('value', newIdx), valueExtent, angleExtent, true)\n\t                        }\n\t                    }, seriesModel);\n\n\t                    group.add(pointer);\n\t                    data.setItemGraphicEl(newIdx, pointer);\n\t                })\n\t                .remove(function (idx) {\n\t                    var pointer = oldData.getItemGraphicEl(idx);\n\t                    group.remove(pointer);\n\t                })\n\t                .execute();\n\n\t            data.eachItemGraphicEl(function (pointer, idx) {\n\t                var itemModel = data.getItemModel(idx);\n\t                var pointerModel = itemModel.getModel('pointer');\n\n\t                pointer.setShape({\n\t                    x: posInfo.cx,\n\t                    y: posInfo.cy,\n\t                    width: parsePercent(\n\t                        pointerModel.get('width'), posInfo.r\n\t                    ),\n\t                    r: parsePercent(pointerModel.get('length'), posInfo.r)\n\t                });\n\n\t                pointer.useStyle(itemModel.getModel('itemStyle.normal').getItemStyle());\n\n\t                if (pointer.style.fill === 'auto') {\n\t                    pointer.setStyle('fill', getColor(\n\t                        (data.get('value', idx) - valueExtent[0]) / (valueExtent[1] - valueExtent[0])\n\t                    ));\n\t                }\n\n\t                graphic.setHoverStyle(\n\t                    pointer, itemModel.getModel('itemStyle.emphasis').getItemStyle()\n\t                );\n\t            });\n\n\t            this._data = data;\n\t        },\n\n\t        _renderTitle: function (\n\t            seriesModel, ecModel, api, getColor, posInfo\n\t        ) {\n\t            var titleModel = seriesModel.getModel('title');\n\t            if (titleModel.get('show')) {\n\t                var textStyleModel = titleModel.getModel('textStyle');\n\t                var offsetCenter = titleModel.get('offsetCenter');\n\t                var x = posInfo.cx + parsePercent(offsetCenter[0], posInfo.r);\n\t                var y = posInfo.cy + parsePercent(offsetCenter[1], posInfo.r);\n\t                var text = new graphic.Text({\n\t                    style: {\n\t                        x: x,\n\t                        y: y,\n\t                        // FIXME First data name ?\n\t                        text: seriesModel.getData().getName(0),\n\t                        fill: textStyleModel.getTextColor(),\n\t                        textFont: textStyleModel.getFont(),\n\t                        textAlign: 'center',\n\t                        textVerticalAlign: 'middle'\n\t                    }\n\t                });\n\t                this.group.add(text);\n\t            }\n\t        },\n\n\t        _renderDetail: function (\n\t            seriesModel, ecModel, api, getColor, posInfo\n\t        ) {\n\t            var detailModel = seriesModel.getModel('detail');\n\t            var minVal = +seriesModel.get('min');\n\t            var maxVal = +seriesModel.get('max');\n\t            if (detailModel.get('show')) {\n\t                var textStyleModel = detailModel.getModel('textStyle');\n\t                var offsetCenter = detailModel.get('offsetCenter');\n\t                var x = posInfo.cx + parsePercent(offsetCenter[0], posInfo.r);\n\t                var y = posInfo.cy + parsePercent(offsetCenter[1], posInfo.r);\n\t                var width = parsePercent(detailModel.get('width'), posInfo.r);\n\t                var height = parsePercent(detailModel.get('height'), posInfo.r);\n\t                var value = seriesModel.getData().get('value', 0);\n\t                var rect = new graphic.Rect({\n\t                    shape: {\n\t                        x: x - width / 2,\n\t                        y: y - height / 2,\n\t                        width: width,\n\t                        height: height\n\t                    },\n\t                    style: {\n\t                        text: formatLabel(\n\t                            // FIXME First data name ?\n\t                            value, detailModel.get('formatter')\n\t                        ),\n\t                        fill: detailModel.get('backgroundColor'),\n\t                        textFill: textStyleModel.getTextColor(),\n\t                        textFont: textStyleModel.getFont()\n\t                    }\n\t                });\n\t                if (rect.style.textFill === 'auto') {\n\t                    rect.setStyle('textFill', getColor(\n\t                        numberUtil.linearMap(value, [minVal, maxVal], [0, 1], true)\n\t                    ));\n\t                }\n\t                rect.setStyle(detailModel.getItemStyle(['color']));\n\t                this.group.add(rect);\n\t            }\n\t        }\n\t    });\n\n\t    module.exports = GaugeView;\n\n\n/***/ },\n/* 221 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    module.exports = __webpack_require__(45).extend({\n\n\t        type: 'echartsGaugePointer',\n\n\t        shape: {\n\t            angle: 0,\n\n\t            width: 10,\n\n\t            r: 10,\n\n\t            x: 0,\n\n\t            y: 0\n\t        },\n\n\t        buildPath: function (ctx, shape) {\n\t            var mathCos = Math.cos;\n\t            var mathSin = Math.sin;\n\n\t            var r = shape.r;\n\t            var width = shape.width;\n\t            var angle = shape.angle;\n\t            var x = shape.x - mathCos(angle) * width * (width >= r / 3 ? 1 : 2);\n\t            var y = shape.y - mathSin(angle) * width * (width >= r / 3 ? 1 : 2);\n\n\t            angle = shape.angle - Math.PI / 2;\n\t            ctx.moveTo(x, y);\n\t            ctx.lineTo(\n\t                shape.x + mathCos(angle) * width,\n\t                shape.y + mathSin(angle) * width\n\t            );\n\t            ctx.lineTo(\n\t                shape.x + mathCos(shape.angle) * r,\n\t                shape.y + mathSin(shape.angle) * r\n\t            );\n\t            ctx.lineTo(\n\t                shape.x - mathCos(angle) * width,\n\t                shape.y - mathSin(angle) * width\n\t            );\n\t            ctx.lineTo(x, y);\n\t            return;\n\t        }\n\t    });\n\n\n/***/ },\n/* 222 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var echarts = __webpack_require__(1);\n\n\t    __webpack_require__(223);\n\t    __webpack_require__(224);\n\n\t    echarts.registerVisual(zrUtil.curry(__webpack_require__(146), 'funnel'));\n\t    echarts.registerLayout(__webpack_require__(225));\n\n\t    echarts.registerProcessor(zrUtil.curry(__webpack_require__(149), 'funnel'));\n\n\n/***/ },\n/* 223 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var List = __webpack_require__(98);\n\t    var modelUtil = __webpack_require__(5);\n\t    var completeDimensions = __webpack_require__(103);\n\n\t    var FunnelSeries = __webpack_require__(1).extendSeriesModel({\n\n\t        type: 'series.funnel',\n\n\t        init: function (option) {\n\t            FunnelSeries.superApply(this, 'init', arguments);\n\n\t            // Enable legend selection for each data item\n\t            // Use a function instead of direct access because data reference may changed\n\t            this.legendDataProvider = function () {\n\t                return this.getRawData();\n\t            };\n\t            // Extend labelLine emphasis\n\t            this._defaultLabelLine(option);\n\t        },\n\n\t        getInitialData: function (option, ecModel) {\n\t            var dimensions = completeDimensions(['value'], option.data);\n\t            var list = new List(dimensions, this);\n\t            list.initData(option.data);\n\t            return list;\n\t        },\n\n\t        _defaultLabelLine: function (option) {\n\t            // Extend labelLine emphasis\n\t            modelUtil.defaultEmphasis(option.labelLine, ['show']);\n\n\t            var labelLineNormalOpt = option.labelLine.normal;\n\t            var labelLineEmphasisOpt = option.labelLine.emphasis;\n\t            // Not show label line if `label.normal.show = false`\n\t            labelLineNormalOpt.show = labelLineNormalOpt.show\n\t                && option.label.normal.show;\n\t            labelLineEmphasisOpt.show = labelLineEmphasisOpt.show\n\t                && option.label.emphasis.show;\n\t        },\n\n\t        defaultOption: {\n\t            zlevel: 0,                  // 一级层叠\n\t            z: 2,                       // 二级层叠\n\t            legendHoverLink: true,\n\t            left: 80,\n\t            top: 60,\n\t            right: 80,\n\t            bottom: 60,\n\t            // width: {totalWidth} - left - right,\n\t            // height: {totalHeight} - top - bottom,\n\n\t            // 默认取数据最小最大值\n\t            // min: 0,\n\t            // max: 100,\n\t            minSize: '0%',\n\t            maxSize: '100%',\n\t            sort: 'descending', // 'ascending', 'descending'\n\t            gap: 0,\n\t            funnelAlign: 'center',\n\t            label: {\n\t                normal: {\n\t                    show: true,\n\t                    position: 'outer'\n\t                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调\n\t                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE\n\t                },\n\t                emphasis: {\n\t                    show: true\n\t                }\n\t            },\n\t            labelLine: {\n\t                normal: {\n\t                    show: true,\n\t                    length: 20,\n\t                    lineStyle: {\n\t                        // color: 各异,\n\t                        width: 1,\n\t                        type: 'solid'\n\t                    }\n\t                },\n\t                emphasis: {}\n\t            },\n\t            itemStyle: {\n\t                normal: {\n\t                    // color: 各异,\n\t                    borderColor: '#fff',\n\t                    borderWidth: 1\n\t                },\n\t                emphasis: {\n\t                    // color: 各异,\n\t                }\n\t            }\n\t        }\n\t    });\n\n\t    module.exports = FunnelSeries;\n\n\n/***/ },\n/* 224 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var graphic = __webpack_require__(43);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    /**\n\t     * Piece of pie including Sector, Label, LabelLine\n\t     * @constructor\n\t     * @extends {module:zrender/graphic/Group}\n\t     */\n\t    function FunnelPiece(data, idx) {\n\n\t        graphic.Group.call(this);\n\n\t        var polygon = new graphic.Polygon();\n\t        var labelLine = new graphic.Polyline();\n\t        var text = new graphic.Text();\n\t        this.add(polygon);\n\t        this.add(labelLine);\n\t        this.add(text);\n\n\t        this.updateData(data, idx, true);\n\n\t        // Hover to change label and labelLine\n\t        function onEmphasis() {\n\t            labelLine.ignore = labelLine.hoverIgnore;\n\t            text.ignore = text.hoverIgnore;\n\t        }\n\t        function onNormal() {\n\t            labelLine.ignore = labelLine.normalIgnore;\n\t            text.ignore = text.normalIgnore;\n\t        }\n\t        this.on('emphasis', onEmphasis)\n\t            .on('normal', onNormal)\n\t            .on('mouseover', onEmphasis)\n\t            .on('mouseout', onNormal);\n\t    }\n\n\t    var funnelPieceProto = FunnelPiece.prototype;\n\n\t    function getLabelStyle(data, idx, state, labelModel) {\n\t        var textStyleModel = labelModel.getModel('textStyle');\n\t        var position = labelModel.get('position');\n\t        var isLabelInside = position === 'inside' || position === 'inner' || position === 'center';\n\t        return {\n\t            fill: textStyleModel.getTextColor()\n\t                || (isLabelInside ? '#fff' : data.getItemVisual(idx, 'color')),\n\t            textFont: textStyleModel.getFont(),\n\t            text: zrUtil.retrieve(\n\t                data.hostModel.getFormattedLabel(idx, state),\n\t                data.getName(idx)\n\t            )\n\t        };\n\t    }\n\n\t    var opacityAccessPath = ['itemStyle', 'normal', 'opacity'];\n\t    funnelPieceProto.updateData = function (data, idx, firstCreate) {\n\n\t        var polygon = this.childAt(0);\n\n\t        var seriesModel = data.hostModel;\n\t        var itemModel = data.getItemModel(idx);\n\t        var layout = data.getItemLayout(idx);\n\t        var opacity = data.getItemModel(idx).get(opacityAccessPath);\n\t        opacity = opacity == null ? 1 : opacity;\n\n\t        // Reset style\n\t        polygon.useStyle({});\n\n\t        if (firstCreate) {\n\t            polygon.setShape({\n\t                points: layout.points\n\t            });\n\t            polygon.setStyle({ opacity : 0 });\n\t            graphic.initProps(polygon, {\n\t                style: {\n\t                    opacity: opacity\n\t                }\n\t            }, seriesModel, idx);\n\t        }\n\t        else {\n\t            graphic.updateProps(polygon, {\n\t                style: {\n\t                    opacity: opacity\n\t                },\n\t                shape: {\n\t                    points: layout.points\n\t                }\n\t            }, seriesModel, idx);\n\t        }\n\n\t        // Update common style\n\t        var itemStyleModel = itemModel.getModel('itemStyle');\n\t        var visualColor = data.getItemVisual(idx, 'color');\n\n\t        polygon.setStyle(\n\t            zrUtil.defaults(\n\t                {\n\t                    lineJoin: 'round',\n\t                    fill: visualColor\n\t                },\n\t                itemStyleModel.getModel('normal').getItemStyle(['opacity'])\n\t            )\n\t        );\n\t        polygon.hoverStyle = itemStyleModel.getModel('emphasis').getItemStyle();\n\n\t        this._updateLabel(data, idx);\n\n\t        graphic.setHoverStyle(this);\n\t    };\n\n\t    funnelPieceProto._updateLabel = function (data, idx) {\n\n\t        var labelLine = this.childAt(1);\n\t        var labelText = this.childAt(2);\n\n\t        var seriesModel = data.hostModel;\n\t        var itemModel = data.getItemModel(idx);\n\t        var layout = data.getItemLayout(idx);\n\t        var labelLayout = layout.label;\n\t        var visualColor = data.getItemVisual(idx, 'color');\n\n\t        graphic.updateProps(labelLine, {\n\t            shape: {\n\t                points: labelLayout.linePoints || labelLayout.linePoints\n\t            }\n\t        }, seriesModel, idx);\n\n\t        graphic.updateProps(labelText, {\n\t            style: {\n\t                x: labelLayout.x,\n\t                y: labelLayout.y\n\t            }\n\t        }, seriesModel, idx);\n\t        labelText.attr({\n\t            style: {\n\t                textAlign: labelLayout.textAlign,\n\t                textVerticalAlign: labelLayout.verticalAlign,\n\t                textFont: labelLayout.font\n\t            },\n\t            rotation: labelLayout.rotation,\n\t            origin: [labelLayout.x, labelLayout.y],\n\t            z2: 10\n\t        });\n\n\t        var labelModel = itemModel.getModel('label.normal');\n\t        var labelHoverModel = itemModel.getModel('label.emphasis');\n\t        var labelLineModel = itemModel.getModel('labelLine.normal');\n\t        var labelLineHoverModel = itemModel.getModel('labelLine.emphasis');\n\n\t        labelText.setStyle(getLabelStyle(data, idx, 'normal', labelModel));\n\n\t        labelText.ignore = labelText.normalIgnore = !labelModel.get('show');\n\t        labelText.hoverIgnore = !labelHoverModel.get('show');\n\n\t        labelLine.ignore = labelLine.normalIgnore = !labelLineModel.get('show');\n\t        labelLine.hoverIgnore = !labelLineHoverModel.get('show');\n\n\t        // Default use item visual color\n\t        labelLine.setStyle({\n\t            stroke: visualColor\n\t        });\n\t        labelLine.setStyle(labelLineModel.getModel('lineStyle').getLineStyle());\n\n\t        labelText.hoverStyle = getLabelStyle(data, idx, 'emphasis', labelHoverModel);\n\t        labelLine.hoverStyle = labelLineHoverModel.getModel('lineStyle').getLineStyle();\n\t    };\n\n\t    zrUtil.inherits(FunnelPiece, graphic.Group);\n\n\n\t    var Funnel = __webpack_require__(42).extend({\n\n\t        type: 'funnel',\n\n\t        render: function (seriesModel, ecModel, api) {\n\t            var data = seriesModel.getData();\n\t            var oldData = this._data;\n\n\t            var group = this.group;\n\n\t            data.diff(oldData)\n\t                .add(function (idx) {\n\t                    var funnelPiece = new FunnelPiece(data, idx);\n\n\t                    data.setItemGraphicEl(idx, funnelPiece);\n\n\t                    group.add(funnelPiece);\n\t                })\n\t                .update(function (newIdx, oldIdx) {\n\t                    var piePiece = oldData.getItemGraphicEl(oldIdx);\n\n\t                    piePiece.updateData(data, newIdx);\n\n\t                    group.add(piePiece);\n\t                    data.setItemGraphicEl(newIdx, piePiece);\n\t                })\n\t                .remove(function (idx) {\n\t                    var piePiece = oldData.getItemGraphicEl(idx);\n\t                    group.remove(piePiece);\n\t                })\n\t                .execute();\n\n\t            this._data = data;\n\t        },\n\n\t        remove: function () {\n\t            this.group.removeAll();\n\t            this._data = null;\n\t        },\n\n\t        dispose: function () {}\n\t    });\n\n\t    module.exports = Funnel;\n\n\n/***/ },\n/* 225 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var layout = __webpack_require__(21);\n\t    var number = __webpack_require__(7);\n\n\t    var parsePercent = number.parsePercent;\n\n\t    function getViewRect(seriesModel, api) {\n\t        return layout.getLayoutRect(\n\t            seriesModel.getBoxLayoutParams(), {\n\t                width: api.getWidth(),\n\t                height: api.getHeight()\n\t            }\n\t        );\n\t    }\n\n\t    function getSortedIndices(data, sort) {\n\t        var valueArr = data.mapArray('value', function (val) {\n\t            return val;\n\t        });\n\t        var indices = [];\n\t        var isAscending = sort === 'ascending';\n\t        for (var i = 0, len = data.count(); i < len; i++) {\n\t            indices[i] = i;\n\t        }\n\t        indices.sort(function (a, b) {\n\t            return isAscending ? valueArr[a] - valueArr[b] : valueArr[b] - valueArr[a];\n\t        });\n\t        return indices;\n\t    }\n\n\t    function labelLayout (data) {\n\t        data.each(function (idx) {\n\t            var itemModel = data.getItemModel(idx);\n\t            var labelModel = itemModel.getModel('label.normal');\n\t            var labelPosition = labelModel.get('position');\n\n\t            var labelLineModel = itemModel.getModel('labelLine.normal');\n\n\t            var layout = data.getItemLayout(idx);\n\t            var points = layout.points;\n\n\t            var isLabelInside = labelPosition === 'inner'\n\t                || labelPosition === 'inside' || labelPosition === 'center';\n\n\t            var textAlign;\n\t            var textX;\n\t            var textY;\n\t            var linePoints;\n\n\t            if (isLabelInside) {\n\t                textX = (points[0][0] + points[1][0] + points[2][0] + points[3][0]) / 4;\n\t                textY = (points[0][1] + points[1][1] + points[2][1] + points[3][1]) / 4;\n\t                textAlign = 'center';\n\t                linePoints = [\n\t                    [textX, textY], [textX, textY]\n\t                ];\n\t            }\n\t            else {\n\t                var x1;\n\t                var y1;\n\t                var x2;\n\t                var labelLineLen = labelLineModel.get('length');\n\t                if (labelPosition === 'left') {\n\t                    // Left side\n\t                    x1 = (points[3][0] + points[0][0]) / 2;\n\t                    y1 = (points[3][1] + points[0][1]) / 2;\n\t                    x2 = x1 - labelLineLen;\n\t                    textX = x2 - 5;\n\t                    textAlign = 'right';\n\t                }\n\t                else {\n\t                    // Right side\n\t                    x1 = (points[1][0] + points[2][0]) / 2;\n\t                    y1 = (points[1][1] + points[2][1]) / 2;\n\t                    x2 = x1 + labelLineLen;\n\t                    textX = x2 + 5;\n\t                    textAlign = 'left';\n\t                }\n\t                var y2 = y1;\n\n\t                linePoints = [[x1, y1], [x2, y2]];\n\t                textY = y2;\n\t            }\n\n\t            layout.label = {\n\t                linePoints: linePoints,\n\t                x: textX,\n\t                y: textY,\n\t                verticalAlign: 'middle',\n\t                textAlign: textAlign,\n\t                inside: isLabelInside\n\t            };\n\t        });\n\t    }\n\n\t    module.exports = function (ecModel, api, payload) {\n\t        ecModel.eachSeriesByType('funnel', function (seriesModel) {\n\t            var data = seriesModel.getData();\n\t            var sort = seriesModel.get('sort');\n\t            var viewRect = getViewRect(seriesModel, api);\n\t            var indices = getSortedIndices(data, sort);\n\n\t            var sizeExtent = [\n\t                parsePercent(seriesModel.get('minSize'), viewRect.width),\n\t                parsePercent(seriesModel.get('maxSize'), viewRect.width)\n\t            ];\n\t            var dataExtent = data.getDataExtent('value');\n\t            var min = seriesModel.get('min');\n\t            var max = seriesModel.get('max');\n\t            if (min == null) {\n\t                min = Math.min(dataExtent[0], 0);\n\t            }\n\t            if (max == null) {\n\t                max = dataExtent[1];\n\t            }\n\n\t            var funnelAlign = seriesModel.get('funnelAlign');\n\t            var gap = seriesModel.get('gap');\n\t            var itemHeight = (viewRect.height - gap * (data.count() - 1)) / data.count();\n\n\t            var y = viewRect.y;\n\n\t            var getLinePoints = function (idx, offY) {\n\t                // End point index is data.count() and we assign it 0\n\t                var val = data.get('value', idx) || 0;\n\t                var itemWidth = number.linearMap(val, [min, max], sizeExtent, true);\n\t                var x0;\n\t                switch (funnelAlign) {\n\t                    case 'left':\n\t                        x0 = viewRect.x;\n\t                        break;\n\t                    case 'center':\n\t                        x0 = viewRect.x + (viewRect.width - itemWidth) / 2;\n\t                        break;\n\t                    case 'right':\n\t                        x0 = viewRect.x + viewRect.width - itemWidth;\n\t                        break;\n\t                }\n\t                return [\n\t                    [x0, offY],\n\t                    [x0 + itemWidth, offY]\n\t                ];\n\t            };\n\n\t            if (sort === 'ascending') {\n\t                // From bottom to top\n\t                itemHeight = -itemHeight;\n\t                gap = -gap;\n\t                y += viewRect.height;\n\t                indices = indices.reverse();\n\t            }\n\n\t            for (var i = 0; i < indices.length; i++) {\n\t                var idx = indices[i];\n\t                var nextIdx = indices[i + 1];\n\t                var start = getLinePoints(idx, y);\n\t                var end = getLinePoints(nextIdx, y + itemHeight);\n\n\t                y += itemHeight + gap;\n\n\t                data.setItemLayout(idx, {\n\t                    points: start.concat(end.slice().reverse())\n\t                });\n\t            }\n\n\t            labelLayout(data);\n\t        });\n\t    };\n\n\n/***/ },\n/* 226 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var echarts = __webpack_require__(1);\n\n\t    __webpack_require__(227);\n\n\t    __webpack_require__(238);\n\t    __webpack_require__(239);\n\n\t    echarts.registerVisual(__webpack_require__(240));\n\n\n\n/***/ },\n/* 227 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    __webpack_require__(228);\n\t    __webpack_require__(231);\n\t    __webpack_require__(233);\n\n\t    var echarts = __webpack_require__(1);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var CLICK_THRESHOLD = 5; // > 4\n\n\t    // Parallel view\n\t    echarts.extendComponentView({\n\t        type: 'parallel',\n\n\t        render: function (parallelModel, ecModel, api) {\n\t            var zr = api.getZr();\n\n\t            if (!this.__onMouseDown) {\n\t                // FIXME\n\t                // click: mousemove check. otherwise confilct with drag brush.\n\t                var mousedownPoint;\n\t                zr.on('mousedown', this.__onMouseDown = function (e) {\n\t                    mousedownPoint = [e.offsetX, e.offsetY];\n\t                });\n\t                zr.on('mouseup', this.__onMouseUp = function (e) {\n\t                    var point = [e.offsetX, e.offsetY];\n\t                    var dist = Math.pow(mousedownPoint[0] - point[0], 2)\n\t                        + Math.pow(mousedownPoint[1] - point[1], 2);\n\n\t                    if (!parallelModel.get('axisExpandable') || dist > CLICK_THRESHOLD) {\n\t                        return;\n\t                    }\n\n\t                    var coordSys = parallelModel.coordinateSystem;\n\t                    var closestDim = coordSys.findClosestAxisDim(point);\n\t                    if (closestDim) {\n\t                        var axisIndex = zrUtil.indexOf(coordSys.dimensions, closestDim);\n\t                        api.dispatchAction({\n\t                            type: 'parallelAxisExpand',\n\t                            axisExpandCenter: axisIndex\n\t                        });\n\t                    }\n\t                });\n\t            }\n\t        },\n\n\t        dispose: function (ecModel, api) {\n\t            api.getZr().off(this.__onMouseDown);\n\t            api.getZr().off(this.__onMouseUp);\n\t        }\n\t    });\n\n\t    echarts.registerPreprocessor(\n\t        __webpack_require__(237)\n\t    );\n\n\n\n/***/ },\n/* 228 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Parallel coordinate system creater.\n\t */\n\n\n\t    var Parallel = __webpack_require__(229);\n\n\t    function create(ecModel, api) {\n\t        var coordSysList = [];\n\n\t        ecModel.eachComponent('parallel', function (parallelModel, idx) {\n\t            var coordSys = new Parallel(parallelModel, ecModel, api);\n\n\t            coordSys.name = 'parallel_' + idx;\n\t            coordSys.resize(parallelModel, api);\n\n\t            parallelModel.coordinateSystem = coordSys;\n\t            coordSys.model = parallelModel;\n\n\t            coordSysList.push(coordSys);\n\t        });\n\n\t        // Inject the coordinateSystems into seriesModel\n\t        ecModel.eachSeries(function (seriesModel) {\n\t            if (seriesModel.get('coordinateSystem') === 'parallel') {\n\t                var parallelModel = ecModel.queryComponents({\n\t                    mainType: 'parallel',\n\t                    index: seriesModel.get('parallelIndex'),\n\t                    id: seriesModel.get('parallelId')\n\t                })[0];\n\t                seriesModel.coordinateSystem = parallelModel.coordinateSystem;\n\t            }\n\t        });\n\n\t        return coordSysList;\n\t    }\n\n\t    __webpack_require__(26).register('parallel', {create: create});\n\n\n\n/***/ },\n/* 229 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Parallel Coordinates\n\t * <https://en.wikipedia.org/wiki/Parallel_coordinates>\n\t */\n\n\n\t    var layout = __webpack_require__(21);\n\t    var axisHelper = __webpack_require__(115);\n\t    var zrUtil = __webpack_require__(4);\n\t    var ParallelAxis = __webpack_require__(230);\n\t    var graphic = __webpack_require__(43);\n\t    var matrix = __webpack_require__(11);\n\n\t    var each = zrUtil.each;\n\n\t    var PI = Math.PI;\n\n\t    function Parallel(parallelModel, ecModel, api) {\n\n\t        /**\n\t         * key: dimension\n\t         * @type {Object.<string, module:echarts/coord/parallel/Axis>}\n\t         * @private\n\t         */\n\t        this._axesMap = {};\n\n\t        /**\n\t         * key: dimension\n\t         * value: {position: [], rotation, }\n\t         * @type {Object.<string, Object>}\n\t         * @private\n\t         */\n\t        this._axesLayout = {};\n\n\t        /**\n\t         * Always follow axis order.\n\t         * @type {Array.<string>}\n\t         * @readOnly\n\t         */\n\t        this.dimensions = parallelModel.dimensions;\n\n\t        /**\n\t         * @type {module:zrender/core/BoundingRect}\n\t         */\n\t        this._rect;\n\n\t        /**\n\t         * @type {module:echarts/coord/parallel/ParallelModel}\n\t         */\n\t        this._model = parallelModel;\n\n\t        this._init(parallelModel, ecModel, api);\n\t    }\n\n\t    Parallel.prototype = {\n\n\t        type: 'parallel',\n\n\t        constructor: Parallel,\n\n\t        /**\n\t         * Initialize cartesian coordinate systems\n\t         * @private\n\t         */\n\t        _init: function (parallelModel, ecModel, api) {\n\n\t            var dimensions = parallelModel.dimensions;\n\t            var parallelAxisIndex = parallelModel.parallelAxisIndex;\n\n\t            each(dimensions, function (dim, idx) {\n\n\t                var axisIndex = parallelAxisIndex[idx];\n\t                var axisModel = ecModel.getComponent('parallelAxis', axisIndex);\n\n\t                var axis = this._axesMap[dim] = new ParallelAxis(\n\t                    dim,\n\t                    axisHelper.createScaleByModel(axisModel),\n\t                    [0, 0],\n\t                    axisModel.get('type'),\n\t                    axisIndex\n\t                );\n\n\t                var isCategory = axis.type === 'category';\n\t                axis.onBand = isCategory && axisModel.get('boundaryGap');\n\t                axis.inverse = axisModel.get('inverse');\n\n\t                // Inject axis into axisModel\n\t                axisModel.axis = axis;\n\n\t                // Inject axisModel into axis\n\t                axis.model = axisModel;\n\t            }, this);\n\t        },\n\n\t        /**\n\t         * Update axis scale after data processed\n\t         * @param  {module:echarts/model/Global} ecModel\n\t         * @param  {module:echarts/ExtensionAPI} api\n\t         */\n\t        update: function (ecModel, api) {\n\t            this._updateAxesFromSeries(this._model, ecModel);\n\t        },\n\n\t        /**\n\t         * Update properties from series\n\t         * @private\n\t         */\n\t        _updateAxesFromSeries: function (parallelModel, ecModel) {\n\t            ecModel.eachSeries(function (seriesModel) {\n\n\t                if (!parallelModel.contains(seriesModel, ecModel)) {\n\t                    return;\n\t                }\n\n\t                var data = seriesModel.getData();\n\n\t                each(this.dimensions, function (dim) {\n\t                    var axis = this._axesMap[dim];\n\t                    axis.scale.unionExtentFromData(data, dim);\n\t                    axisHelper.niceScaleExtent(axis, axis.model);\n\t                }, this);\n\t            }, this);\n\t        },\n\n\t        /**\n\t         * Resize the parallel coordinate system.\n\t         * @param {module:echarts/coord/parallel/ParallelModel} parallelModel\n\t         * @param {module:echarts/ExtensionAPI} api\n\t         */\n\t        resize: function (parallelModel, api) {\n\t            this._rect = layout.getLayoutRect(\n\t                parallelModel.getBoxLayoutParams(),\n\t                {\n\t                    width: api.getWidth(),\n\t                    height: api.getHeight()\n\t                }\n\t            );\n\n\t            this._layoutAxes(parallelModel);\n\t        },\n\n\t        /**\n\t         * @return {module:zrender/core/BoundingRect}\n\t         */\n\t        getRect: function () {\n\t            return this._rect;\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _layoutAxes: function (parallelModel) {\n\t            var rect = this._rect;\n\t            var layout = parallelModel.get('layout');\n\t            var axes = this._axesMap;\n\t            var dimensions = this.dimensions;\n\n\t            var size = [rect.width, rect.height];\n\t            var sizeIdx = layout === 'horizontal' ? 0 : 1;\n\t            var layoutLength = size[sizeIdx];\n\t            var axisLength = size[1 - sizeIdx];\n\t            var axisExtent = [0, axisLength];\n\n\t            each(axes, function (axis) {\n\t                var idx = axis.inverse ? 1 : 0;\n\t                axis.setExtent(axisExtent[idx], axisExtent[1 - idx]);\n\t            });\n\n\t            var axisExpandable = parallelModel.get('axisExpandable');\n\t            var axisExpandWidth = parallelModel.get('axisExpandWidth');\n\t            var axisExpandCenter = parallelModel.get('axisExpandCenter');\n\t            var axisExpandCount = parallelModel.get('axisExpandCount') || 0;\n\t            var axisExpandWindow;\n\n\t            if (axisExpandCenter != null) {\n\t                // Clamp\n\t                var left = Math.max(0, Math.floor(axisExpandCenter - (axisExpandCount - 1) / 2));\n\t                var right = left + axisExpandCount - 1;\n\t                if (right >= dimensions.length) {\n\t                    right = dimensions.length - 1;\n\t                    left = Math.max(0, Math.floor(right - axisExpandCount + 1));\n\t                }\n\t                axisExpandWindow = [left, right];\n\t            }\n\n\t            var calcPos = (axisExpandable && axisExpandWindow && axisExpandWidth)\n\t                ? function (axisIndex, layoutLength, axisCount) {\n\t                    var peekIntervalCount = axisExpandWindow[1] - axisExpandWindow[0];\n\t                    var otherWidth = (\n\t                        layoutLength - axisExpandWidth * peekIntervalCount\n\t                    ) / (axisCount - 1 - peekIntervalCount);\n\n\t                    var position;\n\n\t                    if (axisIndex < axisExpandWindow[0]) {\n\t                        position = (axisIndex - 1) * otherWidth;\n\t                    }\n\t                    else if (axisIndex <= axisExpandWindow[1]) {\n\t                        position = axisExpandWindow[0] * otherWidth\n\t                            + (axisIndex - axisExpandWindow[0]) * axisExpandWidth;\n\t                    }\n\t                    else if (axisIndex === axisCount - 1) {\n\t                        position = layoutLength;\n\t                    }\n\t                    else {\n\t                        position = axisExpandWindow[0] * otherWidth\n\t                            + peekIntervalCount * axisExpandWidth\n\t                            + (axisIndex - axisExpandWindow[1]) * otherWidth;\n\t                    }\n\n\t                    return {\n\t                        position: position,\n\t                        axisNameAvailableWidth: (\n\t                            axisExpandWindow[0] < axisIndex && axisIndex < axisExpandWindow[1]\n\t                        ) ? axisExpandWidth : otherWidth\n\t                    };\n\t                }\n\t                : function (axisIndex, layoutLength, axisCount) {\n\t                    var step = layoutLength / (axisCount - 1);\n\t                    return {\n\t                        position: step * axisIndex,\n\t                        axisNameAvailableWidth: step\n\t                    };\n\t                };\n\n\t            each(dimensions, function (dim, idx) {\n\t                var posInfo = calcPos(idx, layoutLength, dimensions.length);\n\n\t                var positionTable = {\n\t                    horizontal: {\n\t                        x: posInfo.position,\n\t                        y: axisLength\n\t                    },\n\t                    vertical: {\n\t                        x: 0,\n\t                        y: posInfo.position\n\t                    }\n\t                };\n\t                var rotationTable = {\n\t                    horizontal: PI / 2,\n\t                    vertical: 0\n\t                };\n\n\t                var position = [\n\t                    positionTable[layout].x + rect.x,\n\t                    positionTable[layout].y + rect.y\n\t                ];\n\n\t                var rotation = rotationTable[layout];\n\t                var transform = matrix.create();\n\t                matrix.rotate(transform, transform, rotation);\n\t                matrix.translate(transform, transform, position);\n\n\t                // TODO\n\t                // tick等排布信息。\n\n\t                // TODO\n\t                // 根据axis order 更新 dimensions顺序。\n\n\t                this._axesLayout[dim] = {\n\t                    position: position,\n\t                    rotation: rotation,\n\t                    transform: transform,\n\t                    axisNameAvailableWidth: posInfo.axisNameAvailableWidth,\n\t                    tickDirection: 1,\n\t                    labelDirection: 1,\n\t                    axisExpandWindow: axisExpandWindow\n\t                };\n\t            }, this);\n\t        },\n\n\t        /**\n\t         * Get axis by dim.\n\t         * @param {string} dim\n\t         * @return {module:echarts/coord/parallel/ParallelAxis} [description]\n\t         */\n\t        getAxis: function (dim) {\n\t            return this._axesMap[dim];\n\t        },\n\n\t        /**\n\t         * Convert a dim value of a single item of series data to Point.\n\t         * @param {*} value\n\t         * @param {string} dim\n\t         * @return {Array}\n\t         */\n\t        dataToPoint: function (value, dim) {\n\t            return this.axisCoordToPoint(\n\t                this._axesMap[dim].dataToCoord(value),\n\t                dim\n\t            );\n\t        },\n\n\t        /**\n\t         * Travel data for one time, get activeState of each data item.\n\t         * @param {module:echarts/data/List} data\n\t         * @param {Functio} cb param: {string} activeState 'active' or 'inactive' or 'normal'\n\t         *                            {number} dataIndex\n\t         * @param {Object} context\n\t         */\n\t        eachActiveState: function (data, callback, context) {\n\t            var dimensions = this.dimensions;\n\t            var axesMap = this._axesMap;\n\t            var hasActiveSet = this.hasAxisbrushed();\n\n\t            for (var i = 0, len = data.count(); i < len; i++) {\n\t                var values = data.getValues(dimensions, i);\n\t                var activeState;\n\n\t                if (!hasActiveSet) {\n\t                    activeState = 'normal';\n\t                }\n\t                else {\n\t                    activeState = 'active';\n\t                    for (var j = 0, lenj = dimensions.length; j < lenj; j++) {\n\t                        var dimName = dimensions[j];\n\t                        var state = axesMap[dimName].model.getActiveState(values[j], j);\n\n\t                        if (state === 'inactive') {\n\t                            activeState = 'inactive';\n\t                            break;\n\t                        }\n\t                    }\n\t                }\n\n\t                callback.call(context, activeState, i);\n\t            }\n\t        },\n\n\t        /**\n\t         * Whether has any activeSet.\n\t         * @return {boolean}\n\t         */\n\t        hasAxisbrushed: function () {\n\t            var dimensions = this.dimensions;\n\t            var axesMap = this._axesMap;\n\t            var hasActiveSet = false;\n\n\t            for (var j = 0, lenj = dimensions.length; j < lenj; j++) {\n\t                if (axesMap[dimensions[j]].model.getActiveState() !== 'normal') {\n\t                    hasActiveSet = true;\n\t                }\n\t            }\n\n\t            return hasActiveSet;\n\t        },\n\n\t        /**\n\t         * Convert coords of each axis to Point.\n\t         *  Return point. For example: [10, 20]\n\t         * @param {Array.<number>} coords\n\t         * @param {string} dim\n\t         * @return {Array.<number>}\n\t         */\n\t        axisCoordToPoint: function (coord, dim) {\n\t            var axisLayout = this._axesLayout[dim];\n\t            return graphic.applyTransform([coord, 0], axisLayout.transform);\n\t        },\n\n\t        /**\n\t         * Get axis layout.\n\t         */\n\t        getAxisLayout: function (dim) {\n\t            return zrUtil.clone(this._axesLayout[dim]);\n\t        },\n\n\t        findClosestAxisDim: function (point) {\n\t            var axisDim;\n\t            var minDist = Infinity;\n\n\t            zrUtil.each(this._axesLayout, function (axisLayout, dim) {\n\t                var localPoint = graphic.applyTransform(point, axisLayout.transform, true);\n\t                var extent = this._axesMap[dim].getExtent();\n\n\t                if (localPoint[0] < extent[0] || localPoint[0] > extent[1]) {\n\t                    return;\n\t                }\n\n\t                var dist = Math.abs(localPoint[1]);\n\t                if (dist < minDist) {\n\t                    minDist = dist;\n\t                    axisDim = dim;\n\t                }\n\t            }, this);\n\n\t            return axisDim;\n\t        }\n\n\t    };\n\n\t    module.exports = Parallel;\n\n\n/***/ },\n/* 230 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var Axis = __webpack_require__(124);\n\n\t    /**\n\t     * @constructor module:echarts/coord/parallel/ParallelAxis\n\t     * @extends {module:echarts/coord/Axis}\n\t     * @param {string} dim\n\t     * @param {*} scale\n\t     * @param {Array.<number>} coordExtent\n\t     * @param {string} axisType\n\t     */\n\t    var ParallelAxis = function (dim, scale, coordExtent, axisType, axisIndex) {\n\n\t        Axis.call(this, dim, scale, coordExtent);\n\n\t        /**\n\t         * Axis type\n\t         *  - 'category'\n\t         *  - 'value'\n\t         *  - 'time'\n\t         *  - 'log'\n\t         * @type {string}\n\t         */\n\t        this.type = axisType || 'value';\n\n\t        /**\n\t         * @type {number}\n\t         * @readOnly\n\t         */\n\t        this.axisIndex = axisIndex;\n\t    };\n\n\t    ParallelAxis.prototype = {\n\n\t        constructor: ParallelAxis,\n\n\t        /**\n\t         * Axis model\n\t         * @param {module:echarts/coord/parallel/AxisModel}\n\t         */\n\t        model: null\n\n\t    };\n\n\t    zrUtil.inherits(ParallelAxis, Axis);\n\n\t    module.exports = ParallelAxis;\n\n\n/***/ },\n/* 231 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var Component = __webpack_require__(19);\n\n\t    __webpack_require__(232);\n\n\t    Component.extend({\n\n\t        type: 'parallel',\n\n\t        dependencies: ['parallelAxis'],\n\n\t        /**\n\t         * @type {module:echarts/coord/parallel/Parallel}\n\t         */\n\t        coordinateSystem: null,\n\n\t        /**\n\t         * Each item like: 'dim0', 'dim1', 'dim2', ...\n\t         * @type {Array.<string>}\n\t         * @readOnly\n\t         */\n\t        dimensions: null,\n\n\t        /**\n\t         * Coresponding to dimensions.\n\t         * @type {Array.<number>}\n\t         * @readOnly\n\t         */\n\t        parallelAxisIndex: null,\n\n\t        layoutMode: 'box',\n\n\t        defaultOption: {\n\t            zlevel: 0,\n\t            z: 0,\n\t            left: 80,\n\t            top: 60,\n\t            right: 80,\n\t            bottom: 60,\n\t            // width: {totalWidth} - left - right,\n\t            // height: {totalHeight} - top - bottom,\n\n\t            layout: 'horizontal',      // 'horizontal' or 'vertical'\n\n\t            // FIXME\n\t            // naming?\n\t            axisExpandable: false,\n\t            axisExpandCenter: null,\n\t            axisExpandCount: 0,\n\t            axisExpandWidth: 50,      // FIXME '10%' ?\n\n\t            parallelAxisDefault: null\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        init: function () {\n\t            Component.prototype.init.apply(this, arguments);\n\n\t            this.mergeOption({});\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        mergeOption: function (newOption) {\n\t            var thisOption = this.option;\n\n\t            newOption && zrUtil.merge(thisOption, newOption, true);\n\n\t            this._initDimensions();\n\t        },\n\n\t        /**\n\t         * Whether series or axis is in this coordinate system.\n\t         * @param {module:echarts/model/Series|module:echarts/coord/parallel/AxisModel} model\n\t         * @param {module:echarts/model/Global} ecModel\n\t         */\n\t        contains: function (model, ecModel) {\n\t            var parallelIndex = model.get('parallelIndex');\n\t            return parallelIndex != null\n\t                && ecModel.getComponent('parallel', parallelIndex) === this;\n\t        },\n\n\t        setAxisExpand: function (opt) {\n\t            zrUtil.each(\n\t                ['axisExpandable', 'axisExpandCenter', 'axisExpandCount', 'axisExpandWidth'],\n\t                function (name) {\n\t                    if (opt.hasOwnProperty(name)) {\n\t                        this.option[name] = opt[name];\n\t                    }\n\t                },\n\t                this\n\t            );\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _initDimensions: function () {\n\t            var dimensions = this.dimensions = [];\n\t            var parallelAxisIndex = this.parallelAxisIndex = [];\n\n\t            var axisModels = zrUtil.filter(this.dependentModels.parallelAxis, function (axisModel) {\n\t                // Can not use this.contains here, because\n\t                // initialization has not been completed yet.\n\t                return axisModel.get('parallelIndex') === this.componentIndex;\n\t            });\n\n\t            zrUtil.each(axisModels, function (axisModel) {\n\t                dimensions.push('dim' + axisModel.get('dim'));\n\t                parallelAxisIndex.push(axisModel.componentIndex);\n\t            });\n\t        }\n\n\t    });\n\n\n\n/***/ },\n/* 232 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var ComponentModel = __webpack_require__(19);\n\t    var zrUtil = __webpack_require__(4);\n\t    var makeStyleMapper = __webpack_require__(15);\n\t    var axisModelCreator = __webpack_require__(128);\n\t    var numberUtil = __webpack_require__(7);\n\n\t    var AxisModel = ComponentModel.extend({\n\n\t        type: 'baseParallelAxis',\n\n\t        /**\n\t         * @type {module:echarts/coord/parallel/Axis}\n\t         */\n\t        axis: null,\n\n\t        /**\n\t         * @type {Array.<Array.<number>}\n\t         * @readOnly\n\t         */\n\t        activeIntervals: [],\n\n\t        /**\n\t         * @return {Object}\n\t         */\n\t        getAreaSelectStyle: function () {\n\t            return makeStyleMapper(\n\t                [\n\t                    ['fill', 'color'],\n\t                    ['lineWidth', 'borderWidth'],\n\t                    ['stroke', 'borderColor'],\n\t                    ['width', 'width'],\n\t                    ['opacity', 'opacity']\n\t                ]\n\t            ).call(this.getModel('areaSelectStyle'));\n\t        },\n\n\t        /**\n\t         * The code of this feature is put on AxisModel but not ParallelAxis,\n\t         * because axisModel can be alive after echarts updating but instance of\n\t         * ParallelAxis having been disposed. this._activeInterval should be kept\n\t         * when action dispatched (i.e. legend click).\n\t         *\n\t         * @param {Array.<Array<number>>} intervals interval.length === 0\n\t         *                                          means set all active.\n\t         * @public\n\t         */\n\t        setActiveIntervals: function (intervals) {\n\t            var activeIntervals = this.activeIntervals = zrUtil.clone(intervals);\n\n\t            // Normalize\n\t            if (activeIntervals) {\n\t                for (var i = activeIntervals.length - 1; i >= 0; i--) {\n\t                    numberUtil.asc(activeIntervals[i]);\n\t                }\n\t            }\n\t        },\n\n\t        /**\n\t         * @param {number|string} [value] When attempting to detect 'no activeIntervals set',\n\t         *                         value can not be input.\n\t         * @return {string} 'normal': no activeIntervals set,\n\t         *                  'active',\n\t         *                  'inactive'.\n\t         * @public\n\t         */\n\t        getActiveState: function (value) {\n\t            var activeIntervals = this.activeIntervals;\n\n\t            if (!activeIntervals.length) {\n\t                return 'normal';\n\t            }\n\n\t            if (value == null) {\n\t                return 'inactive';\n\t            }\n\n\t            for (var i = 0, len = activeIntervals.length; i < len; i++) {\n\t                if (activeIntervals[i][0] <= value && value <= activeIntervals[i][1]) {\n\t                    return 'active';\n\t                }\n\t            }\n\t            return 'inactive';\n\t        }\n\n\t    });\n\n\t    var defaultOption = {\n\n\t        type: 'value',\n\n\t        /**\n\t         * @type {Array.<number>}\n\t         */\n\t        dim: null, // 0, 1, 2, ...\n\n\t        // parallelIndex: null,\n\n\t        areaSelectStyle: {\n\t            width: 20,\n\t            borderWidth: 1,\n\t            borderColor: 'rgba(160,197,232)',\n\t            color: 'rgba(160,197,232)',\n\t            opacity: 0.3\n\t        },\n\n\t        realtime: true, // Whether realtime update view when select.\n\n\t        z: 10\n\t    };\n\n\t    zrUtil.merge(AxisModel.prototype, __webpack_require__(130));\n\n\t    function getAxisType(axisName, option) {\n\t        return option.type || (option.data ? 'category' : 'value');\n\t    }\n\n\t    axisModelCreator('parallel', AxisModel, getAxisType, defaultOption);\n\n\t    module.exports = AxisModel;\n\n\n/***/ },\n/* 233 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    __webpack_require__(228);\n\t    __webpack_require__(234);\n\t    __webpack_require__(235);\n\n\n\n/***/ },\n/* 234 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var echarts = __webpack_require__(1);\n\n\t    /**\n\t     * @payload\n\t     * @property {string} parallelAxisId\n\t     * @property {Array.<Array.<number>>} intervals\n\t     */\n\t    var actionInfo = {\n\t        type: 'axisAreaSelect',\n\t        event: 'axisAreaSelected',\n\t        update: 'updateVisual'\n\t    };\n\t    echarts.registerAction(actionInfo, function (payload, ecModel) {\n\t        ecModel.eachComponent(\n\t            {mainType: 'parallelAxis', query: payload},\n\t            function (parallelAxisModel) {\n\t                parallelAxisModel.axis.model.setActiveIntervals(payload.intervals);\n\t            }\n\t        );\n\t    });\n\n\t    /**\n\t     * @payload\n\t     */\n\t    echarts.registerAction('parallelAxisExpand', function (payload, ecModel) {\n\t        ecModel.eachComponent(\n\t            {mainType: 'parallel', query: payload},\n\t            function (parallelModel) {\n\t                parallelModel.setAxisExpand(payload);\n\t            }\n\t        );\n\n\t    });\n\n\n/***/ },\n/* 235 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var AxisBuilder = __webpack_require__(133);\n\t    var BrushController = __webpack_require__(236);\n\t    var graphic = __webpack_require__(43);\n\n\t    var elementList = ['axisLine', 'axisLabel', 'axisTick', 'axisName'];\n\n\t    var AxisView = __webpack_require__(1).extendComponentView({\n\n\t        type: 'parallelAxis',\n\n\t        /**\n\t         * @override\n\t         */\n\t        init: function (ecModel, api) {\n\t            AxisView.superApply(this, 'init', arguments);\n\n\t            /**\n\t             * @type {module:echarts/component/helper/BrushController}\n\t             */\n\t            (this._brushController = new BrushController(api.getZr()))\n\t                .on('brush', zrUtil.bind(this._onBrush, this));\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        render: function (axisModel, ecModel, api, payload) {\n\t            if (fromAxisAreaSelect(axisModel, ecModel, payload)) {\n\t                return;\n\t            }\n\n\t            this.axisModel = axisModel;\n\t            this.api = api;\n\n\t            this.group.removeAll();\n\n\t            var oldAxisGroup = this._axisGroup;\n\t            this._axisGroup = new graphic.Group();\n\t            this.group.add(this._axisGroup);\n\n\t            if (!axisModel.get('show')) {\n\t                return;\n\t            }\n\n\t            var coordSys = ecModel.getComponent(\n\t                'parallel', axisModel.get('parallelIndex')\n\t            ).coordinateSystem;\n\n\t            var areaSelectStyle = axisModel.getAreaSelectStyle();\n\t            var areaWidth = areaSelectStyle.width;\n\n\t            var dim = axisModel.axis.dim;\n\t            var axisLayout = coordSys.getAxisLayout(dim);\n\n\t            // Fetch from axisModel by default.\n\t            var axisLabelShow;\n\t            var axisIndex = zrUtil.indexOf(coordSys.dimensions, dim);\n\n\t            var axisExpandWindow = axisLayout.axisExpandWindow;\n\t            if (axisExpandWindow\n\t                && (axisIndex <= axisExpandWindow[0] || axisIndex >= axisExpandWindow[1])\n\t            ) {\n\t                axisLabelShow = false;\n\t            }\n\n\t            var builderOpt = zrUtil.extend(\n\t                {\n\t                    axisLabelShow: axisLabelShow,\n\t                    strokeContainThreshold: areaWidth\n\t                },\n\t                axisLayout\n\t            );\n\n\t            var axisBuilder = new AxisBuilder(axisModel, builderOpt);\n\n\t            zrUtil.each(elementList, axisBuilder.add, axisBuilder);\n\n\t            this._axisGroup.add(axisBuilder.getGroup());\n\n\t            this._refreshBrushController(builderOpt, areaSelectStyle, axisModel, areaWidth);\n\n\t            graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);\n\t        },\n\n\t        _refreshBrushController: function (builderOpt, areaSelectStyle, axisModel, areaWidth) {\n\t            // After filtering, axis may change, select area needs to be update.\n\t            var axis = axisModel.axis;\n\t            var coverInfoList = zrUtil.map(axisModel.activeIntervals, function (interval) {\n\t                return {\n\t                    brushType: 'lineX',\n\t                    panelId: 'pl',\n\t                    range: [\n\t                        axis.dataToCoord(interval[0], true),\n\t                        axis.dataToCoord(interval[1], true)\n\t                    ]\n\t                };\n\t            });\n\n\t            var extent = axis.getExtent();\n\t            var extentLen = extent[1] - extent[0];\n\t            var extra = Math.min(30, Math.abs(extentLen) * 0.1); // Arbitrary value.\n\n\t            // width/height might be negative, which will be\n\t            // normalized in BoundingRect.\n\t            var rect = graphic.BoundingRect.create({\n\t                x: extent[0],\n\t                y: -areaWidth / 2,\n\t                width: extentLen,\n\t                height: areaWidth\n\t            });\n\t            rect.x -= extra;\n\t            rect.width += 2 * extra;\n\n\t            this._brushController\n\t                .mount({\n\t                    enableGlobalPan: true,\n\t                    rotation: builderOpt.rotation,\n\t                    position: builderOpt.position\n\t                })\n\t                .setPanels([{\n\t                    panelId: 'pl',\n\t                    rect: rect\n\t                }])\n\t                .enableBrush({\n\t                    brushType: 'lineX',\n\t                    brushStyle: areaSelectStyle,\n\t                    removeOnClick: true\n\t                })\n\t                .updateCovers(coverInfoList);\n\t        },\n\n\t        _onBrush: function (coverInfoList, opt) {\n\t            // Do not cache these object, because the mey be changed.\n\t            var axisModel = this.axisModel;\n\t            var axis = axisModel.axis;\n\n\t            var intervals = zrUtil.map(coverInfoList, function (coverInfo) {\n\t                return [\n\t                    axis.coordToData(coverInfo.range[0], true),\n\t                    axis.coordToData(coverInfo.range[1], true)\n\t                ];\n\t            });\n\n\t            // If realtime is true, action is not dispatched on drag end, because\n\t            // the drag end emits the same params with the last drag move event,\n\t            // and may have some delay when using touch pad.\n\t            if (!axisModel.option.realtime === opt.isEnd || opt.removeOnClick) { // jshint ignore:line\n\t                this.api.dispatchAction({\n\t                    type: 'axisAreaSelect',\n\t                    parallelAxisId: axisModel.id,\n\t                    intervals: intervals\n\t                });\n\t            }\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        dispose: function () {\n\t            this._brushController.dispose();\n\t        }\n\t    });\n\n\t    function fromAxisAreaSelect(axisModel, ecModel, payload) {\n\t        return payload\n\t            && payload.type === 'axisAreaSelect'\n\t            && ecModel.findComponents(\n\t                {mainType: 'parallelAxis', query: payload}\n\t            )[0] === axisModel;\n\t    }\n\n\t    module.exports = AxisView;\n\n\n/***/ },\n/* 236 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Box selection tool.\n\t *\n\t * @module echarts/component/helper/BrushController\n\t */\n\n\n\n\t    var Eventful = __webpack_require__(33);\n\t    var zrUtil = __webpack_require__(4);\n\t    var BoundingRect = __webpack_require__(9);\n\t    var graphic = __webpack_require__(43);\n\t    var interactionMutex = __webpack_require__(178);\n\t    var DataDiffer = __webpack_require__(99);\n\n\t    var curry = zrUtil.curry;\n\t    var each = zrUtil.each;\n\t    var map = zrUtil.map;\n\t    var mathMin = Math.min;\n\t    var mathMax = Math.max;\n\t    var mathPow = Math.pow;\n\n\t    var COVER_Z = 10000;\n\t    var UNSELECT_THRESHOLD = 6;\n\t    var MIN_RESIZE_LINE_WIDTH = 6;\n\t    var MUTEX_RESOURCE_KEY = 'globalPan';\n\n\t    var DIRECTION_MAP = {\n\t        w: [0, 0],\n\t        e: [0, 1],\n\t        n: [1, 0],\n\t        s: [1, 1]\n\t    };\n\t    var CURSOR_MAP = {\n\t        w: 'ew',\n\t        e: 'ew',\n\t        n: 'ns',\n\t        s: 'ns',\n\t        ne: 'nesw',\n\t        sw: 'nesw',\n\t        nw: 'nwse',\n\t        se: 'nwse'\n\t    };\n\t    var DEFAULT_BRUSH_OPT = {\n\t        brushStyle: {\n\t            lineWidth: 2,\n\t            stroke: 'rgba(0,0,0,0.3)',\n\t            fill: 'rgba(0,0,0,0.1)'\n\t        },\n\t        transformable: true,\n\t        brushMode: 'single',\n\t        removeOnClick: false\n\t    };\n\n\t    var baseUID = 0;\n\n\t    /**\n\t     * @alias module:echarts/component/helper/BrushController\n\t     * @constructor\n\t     * @mixin {module:zrender/mixin/Eventful}\n\t     * @event module:echarts/component/helper/BrushController#brush\n\t     *        params:\n\t     *            areas: Array.<Array>, coord relates to container group,\n\t     *                                    If no container specified, to global.\n\t     *            opt {\n\t     *                isEnd: boolean,\n\t     *                removeOnClick: boolean\n\t     *            }\n\t     *\n\t     * @param {module:zrender/zrender~ZRender} zr\n\t     */\n\t    function BrushController(zr) {\n\n\t        if (true) {\n\t            zrUtil.assert(zr);\n\t        }\n\n\t        Eventful.call(this);\n\n\t        /**\n\t         * @type {module:zrender/zrender~ZRender}\n\t         * @private\n\t         */\n\t        this._zr = zr;\n\n\t        /**\n\t         * @type {module:zrender/container/Group}\n\t         * @readOnly\n\t         */\n\t        this.group = new graphic.Group();\n\n\t        /**\n\t         * Only for drawing (after enabledBrush).\n\t         * @private\n\t         * @type {string}\n\t         */\n\t        this._brushType;\n\n\t        /**\n\t         * Only for drawing (after enabledBrush).\n\t         * @private\n\t         * @type {Object}\n\t         */\n\t        this._brushOption;\n\n\t        /**\n\t         * @private\n\t         * @type {Object}\n\t         */\n\t        this._panels;\n\n\t        /**\n\t         * @private\n\t         * @type {Array.<nubmer>}\n\t         */\n\t        this._track = [];\n\n\t        /**\n\t         * @private\n\t         * @type {boolean}\n\t         */\n\t        this._dragging;\n\n\t        /**\n\t         * @private\n\t         * @type {Array}\n\t         */\n\t        this._covers = [];\n\n\t        /**\n\t         * @private\n\t         * @type {moudule:zrender/container/Group}\n\t         */\n\t        this._creatingCover;\n\n\t        /**\n\t         * true means global panel\n\t         * @private\n\t         * @type {module:zrender/container/Group|boolean}\n\t         */\n\t        this._creatingPanel;\n\n\t        /**\n\t         * @private\n\t         * @type {boolean}\n\t         */\n\t        this._enableGlobalPan;\n\n\t        /**\n\t         * @private\n\t         * @type {boolean}\n\t         */\n\t        if (true) {\n\t            this._mounted;\n\t        }\n\n\t        /**\n\t         * @private\n\t         * @type {string}\n\t         */\n\t        this._uid = 'brushController_' + baseUID++;\n\n\t        /**\n\t         * @private\n\t         * @type {Object}\n\t         */\n\t        this._handlers = {};\n\t        each(mouseHandlers, function (handler, eventName) {\n\t            this._handlers[eventName] = zrUtil.bind(handler, this);\n\t        }, this);\n\t    }\n\n\t    BrushController.prototype = {\n\n\t        constructor: BrushController,\n\n\t        /**\n\t         * If set to null/undefined/false, select disabled.\n\t         * @param {Object} brushOption\n\t         * @param {string|boolean} brushOption.brushType 'line', 'rect', 'polygon' or false\n\t         *                          If pass false/null/undefined, disable brush.\n\t         * @param {number} [brushOption.brushMode='single'] 'single' or 'multiple'\n\t         * @param {boolean} [brushOption.transformable=true]\n\t         * @param {boolean} [brushOption.removeOnClick=false]\n\t         * @param {Object} [brushOption.brushStyle]\n\t         * @param {number} [brushOption.brushStyle.width]\n\t         * @param {number} [brushOption.brushStyle.lineWidth]\n\t         * @param {string} [brushOption.brushStyle.stroke]\n\t         * @param {string} [brushOption.brushStyle.fill]\n\t         */\n\t        enableBrush: function (brushOption) {\n\t            if (true) {\n\t                zrUtil.assert(this._mounted);\n\t            }\n\n\t            this._brushType && doDisableBrush(this);\n\t            brushOption.brushType && doEnableBrush(this, brushOption);\n\n\t            return this;\n\t        },\n\n\t        /**\n\t         * @param {Array.<Object>} panelOpts If not pass, it is global brush.\n\t         *        Each items: {panelId, rect}\n\t         */\n\t        setPanels: function (panelOpts) {\n\t            var oldPanels = this._panels || {};\n\t            var newPanels = this._panels = panelOpts && panelOpts.length && {};\n\t            var thisGroup = this.group;\n\n\t            newPanels && each(panelOpts, function (panelOpt) {\n\t                var panelId = panelOpt.panelId;\n\t                var panel = oldPanels[panelId];\n\t                if (!panel) {\n\t                    panel = new graphic.Rect({\n\t                        silent: true,\n\t                        invisible: true\n\t                    });\n\t                    thisGroup.add(panel);\n\t                }\n\n\t                var rect = panelOpt.rect;\n\t                // Using BoundingRect to normalize negative width/height.\n\t                if (!(rect instanceof BoundingRect)) {\n\t                    rect = BoundingRect.create(rect);\n\t                }\n\n\t                panel.attr('shape', rect.plain());\n\t                panel.__brushPanelId = panelId;\n\t                newPanels[panelId] = panel;\n\t                oldPanels[panelId] = null;\n\t            });\n\n\t            each(oldPanels, function (panel) {\n\t                panel && thisGroup.remove(panel);\n\t            });\n\n\t            return this;\n\t        },\n\n\t        /**\n\t         * @param {Object} [opt]\n\t         * @return {boolean} [opt.enableGlobalPan=false]\n\t         * @return {boolean} [opt.position=[0, 0]]\n\t         * @return {boolean} [opt.rotation=0]\n\t         * @return {boolean} [opt.scale=[1, 1]]\n\t         */\n\t        mount: function (opt) {\n\t            opt = opt || {};\n\n\t            if (true) {\n\t                this._mounted = true; // should be at first.\n\t            }\n\n\t            this._enableGlobalPan = opt.enableGlobalPan;\n\n\t            var thisGroup = this.group;\n\t            this._zr.add(thisGroup);\n\n\t            thisGroup.attr({\n\t                position: opt.position || [0, 0],\n\t                rotation: opt.rotation || 0,\n\t                scale: opt.scale || [1, 1]\n\t            });\n\n\t            return this;\n\t        },\n\n\t        eachCover: function (cb, context) {\n\t            each(this._covers, cb, context);\n\t        },\n\n\t        /**\n\t         * Update covers.\n\t         * @param {Array.<Object>} brushOptionList Like:\n\t         *        [\n\t         *            {id: 'xx', brushType: 'line', range: [23, 44], brushStyle, transformable},\n\t         *            {id: 'yy', brushType: 'rect', range: [[23, 44], [23, 54]]},\n\t         *            ...\n\t         *        ]\n\t         *        `brushType` is required in each cover info.\n\t         *        `id` is not mandatory.\n\t         *        `brushStyle`, `transformable` is not mandatory, use DEFAULT_BRUSH_OPT by default.\n\t         *        If brushOptionList is null/undefined, all covers removed.\n\t         */\n\t        updateCovers: function (brushOptionList) {\n\t            if (true) {\n\t                zrUtil.assert(this._mounted);\n\t            }\n\n\t            brushOptionList = zrUtil.map(brushOptionList, function (brushOption) {\n\t                return zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);\n\t            });\n\n\t            var tmpIdPrefix = '\\0-brush-index-';\n\t            var oldCovers = this._covers;\n\t            var newCovers = this._covers = [];\n\t            var controller = this;\n\t            var creatingCover = this._creatingCover;\n\n\t            (new DataDiffer(oldCovers, brushOptionList, oldGetKey, getKey))\n\t                .add(addOrUpdate)\n\t                .update(addOrUpdate)\n\t                .remove(remove)\n\t                .execute();\n\n\t            return this;\n\n\t            function getKey(brushOption, index) {\n\t                return (brushOption.id != null ? brushOption.id : tmpIdPrefix + index)\n\t                    + '-' + brushOption.brushType;\n\t            }\n\n\t            function oldGetKey(cover, index) {\n\t                return getKey(cover.__brushOption, index);\n\t            }\n\n\t            function addOrUpdate(newIndex, oldIndex) {\n\t                var newBrushOption = brushOptionList[newIndex];\n\t                // Consider setOption in event listener of brushSelect,\n\t                // where updating cover when creating should be forbiden.\n\t                if (oldIndex != null && oldCovers[oldIndex] === creatingCover) {\n\t                    newCovers[newIndex] = oldCovers[oldIndex];\n\t                }\n\t                else {\n\t                    var cover = newCovers[newIndex] = oldIndex != null\n\t                        ? (\n\t                            oldCovers[oldIndex].__brushOption = newBrushOption,\n\t                            oldCovers[oldIndex]\n\t                        )\n\t                        : endCreating(controller, createCover(controller, newBrushOption));\n\t                    updateCoverAfterCreation(controller, cover);\n\t                }\n\t            }\n\n\t            function remove(oldIndex) {\n\t                if (oldCovers[oldIndex] !== creatingCover) {\n\t                    controller.group.remove(oldCovers[oldIndex]);\n\t                }\n\t            }\n\t        },\n\n\t        unmount: function () {\n\t            this.enableBrush(false);\n\n\t            // container may 'removeAll' outside.\n\t            clearCovers(this);\n\t            this._zr.remove(this.group);\n\n\t            if (true) {\n\t                this._mounted = false; // should be at last.\n\t            }\n\n\t            return this;\n\t        },\n\n\t        dispose: function () {\n\t            this.unmount();\n\t            this.off();\n\t        }\n\t    };\n\n\t    zrUtil.mixin(BrushController, Eventful);\n\n\n\t    function doEnableBrush(controller, brushOption) {\n\t        var zr = controller._zr;\n\n\t        // Consider roam, which takes globalPan too.\n\t        if (!controller._enableGlobalPan) {\n\t            interactionMutex.take(zr, MUTEX_RESOURCE_KEY, controller._uid);\n\t        }\n\n\t        each(controller._handlers, function (handler, eventName) {\n\t            zr.on(eventName, handler);\n\t        });\n\n\t        controller._brushType = brushOption.brushType;\n\t        controller._brushOption = zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);\n\t    }\n\n\t    function doDisableBrush(controller) {\n\t        var zr = controller._zr;\n\n\t        interactionMutex.release(zr, MUTEX_RESOURCE_KEY, controller._uid);\n\n\t        each(controller._handlers, function (handler, eventName) {\n\t            zr.off(eventName, handler);\n\t        });\n\n\t        controller._brushType = controller._brushOption = null;\n\t    }\n\n\t    function createCover(controller, brushOption) {\n\t        var cover = coverRenderers[brushOption.brushType].createCover(controller, brushOption);\n\t        updateZ(cover);\n\t        cover.__brushOption = brushOption;\n\t        controller.group.add(cover);\n\t        return cover;\n\t    }\n\n\t    function endCreating(controller, creatingCover) {\n\t        var coverRenderer = getCoverRenderer(creatingCover);\n\t        if (coverRenderer.endCreating) {\n\t            coverRenderer.endCreating(controller, creatingCover);\n\t            updateZ(creatingCover);\n\t        }\n\t        return creatingCover;\n\t    }\n\n\t    function updateCoverShape(controller, cover) {\n\t        var brushOption = cover.__brushOption;\n\t        getCoverRenderer(cover).updateCoverShape(\n\t            controller, cover, brushOption.range, brushOption\n\t        );\n\t    }\n\n\t    function updateZ(group) {\n\t        group.traverse(function (el) {\n\t            el.z = COVER_Z;\n\t            el.z2 = COVER_Z; // Consider in given container.\n\t        });\n\t    }\n\n\t    function updateCoverAfterCreation(controller, cover) {\n\t        getCoverRenderer(cover).updateCommon(controller, cover);\n\t        updateCoverShape(controller, cover);\n\t    }\n\n\t    function getCoverRenderer(cover) {\n\t        return coverRenderers[cover.__brushOption.brushType];\n\t    }\n\n\t    function getPanelByPoint(controller, x, y) {\n\t        var panels = controller._panels;\n\t        if (!panels) {\n\t            return true; // Global panel\n\t        }\n\t        var panel;\n\t        each(panels, function (pn) {\n\t            pn.contain(x, y) && (panel = pn);\n\t        });\n\t        return panel;\n\t    }\n\n\t    function getPanelByCover(controller, cover) {\n\t        var panels = controller._panels;\n\t        if (!panels) {\n\t            return true; // Global panel\n\t        }\n\t        var panelId = cover.__brushOption.panelId;\n\t        // User may give cover without coord sys info,\n\t        // which is then treated as global panel.\n\t        return panelId != null ? panels[panelId] : true;\n\t    }\n\n\t    function clearCovers(controller) {\n\t        var covers = controller._covers;\n\t        var originalLength = covers.length;\n\t        each(covers, function (cover) {\n\t            controller.group.remove(cover);\n\t        }, controller);\n\t        covers.length = 0;\n\n\t        return !!originalLength;\n\t    }\n\n\t    function trigger(controller, opt) {\n\t        var areas = map(controller._covers, function (cover) {\n\t            var brushOption = cover.__brushOption;\n\t            var range = zrUtil.clone(brushOption.range);\n\n\t            return {\n\t                brushType: brushOption.brushType,\n\t                panelId: brushOption.panelId,\n\t                range: range\n\t            };\n\t        });\n\n\t        controller.trigger('brush', areas, {\n\t            isEnd: !!opt.isEnd,\n\t            removeOnClick: !!opt.removeOnClick\n\t        });\n\t    }\n\n\t    function shouldShowCover(controller) {\n\t        var track = controller._track;\n\n\t        if (!track.length) {\n\t            return false;\n\t        }\n\n\t        var p2 = track[track.length - 1];\n\t        var p1 = track[0];\n\t        var dx = p2[0] - p1[0];\n\t        var dy = p2[1] - p1[1];\n\t        var dist = mathPow(dx * dx + dy * dy, 0.5);\n\n\t        return dist > UNSELECT_THRESHOLD;\n\t    }\n\n\t    function getTrackEnds(track) {\n\t        var tail = track.length - 1;\n\t        tail < 0 && (tail = 0);\n\t        return [track[0], track[tail]];\n\t    }\n\n\t    function createBaseRectCover(doDrift, controller, brushOption, edgeNames) {\n\t        var cover = new graphic.Group();\n\n\t        cover.add(new graphic.Rect({\n\t            name: 'main',\n\t            style: makeStyle(brushOption),\n\t            silent: true,\n\t            draggable: true,\n\t            cursor: 'move',\n\t            drift: curry(doDrift, controller, cover, 'nswe'),\n\t            ondragend: curry(trigger, controller, {isEnd: true})\n\t        }));\n\n\t        each(\n\t            edgeNames,\n\t            function (name) {\n\t                cover.add(new graphic.Rect({\n\t                    name: name,\n\t                    style: {opacity: 0},\n\t                    draggable: true,\n\t                    silent: true,\n\t                    invisible: true,\n\t                    drift: curry(doDrift, controller, cover, name),\n\t                    ondragend: curry(trigger, controller, {isEnd: true})\n\t                }));\n\t            }\n\t        );\n\n\t        return cover;\n\t    }\n\n\t    function updateBaseRect(controller, cover, localRange, brushOption) {\n\t        var lineWidth = brushOption.brushStyle.lineWidth || 0;\n\t        var handleSize = mathMax(lineWidth, MIN_RESIZE_LINE_WIDTH);\n\t        var x = localRange[0][0];\n\t        var y = localRange[1][0];\n\t        var xa = x - lineWidth / 2;\n\t        var ya = y - lineWidth / 2;\n\t        var x2 = localRange[0][1];\n\t        var y2 = localRange[1][1];\n\t        var x2a = x2 - handleSize + lineWidth / 2;\n\t        var y2a = y2 - handleSize + lineWidth / 2;\n\t        var width = x2 - x;\n\t        var height = y2 - y;\n\t        var widtha = width + lineWidth;\n\t        var heighta = height + lineWidth;\n\n\t        updateRectShape(controller, cover, 'main', x, y, width, height);\n\n\t        if (brushOption.transformable) {\n\t            updateRectShape(controller, cover, 'w', xa, ya, handleSize, heighta);\n\t            updateRectShape(controller, cover, 'e', x2a, ya, handleSize, heighta);\n\t            updateRectShape(controller, cover, 'n', xa, ya, widtha, handleSize);\n\t            updateRectShape(controller, cover, 's', xa, y2a, widtha, handleSize);\n\n\t            updateRectShape(controller, cover, 'nw', xa, ya, handleSize, handleSize);\n\t            updateRectShape(controller, cover, 'ne', x2a, ya, handleSize, handleSize);\n\t            updateRectShape(controller, cover, 'sw', xa, y2a, handleSize, handleSize);\n\t            updateRectShape(controller, cover, 'se', x2a, y2a, handleSize, handleSize);\n\t        }\n\t    }\n\n\t    function updateCommon(controller, cover) {\n\t        var brushOption = cover.__brushOption;\n\t        var transformable = brushOption.transformable;\n\n\t        var mainEl = cover.childAt(0);\n\t        mainEl.useStyle(makeStyle(brushOption));\n\t        mainEl.attr({\n\t            silent: !transformable,\n\t            cursor: transformable ? 'move' : 'default'\n\t        });\n\n\t        each(\n\t            ['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw'],\n\t            function (name) {\n\t                var el = cover.childOfName(name);\n\t                var globalDir = getGlobalDirection(controller, name);\n\n\t                el && el.attr({\n\t                    silent: !transformable,\n\t                    invisible: !transformable,\n\t                    cursor: transformable ? CURSOR_MAP[globalDir] + '-resize' : null\n\t                });\n\t            }\n\t        );\n\t    }\n\n\t    function updateRectShape(controller, cover, name, x, y, w, h) {\n\t        var el = cover.childOfName(name);\n\t        el && el.setShape(pointsToRect(\n\t            clipByPanel(controller, cover, [[x, y], [x + w, y + h]])\n\t        ));\n\t    }\n\n\t    function makeStyle(brushOption) {\n\t        return zrUtil.defaults({strokeNoScale: true}, brushOption.brushStyle);\n\t    }\n\n\t    function formatRectRange(x, y, x2, y2) {\n\t        var min = [mathMin(x, x2), mathMin(y, y2)];\n\t        var max = [mathMax(x, x2), mathMax(y, y2)];\n\n\t        return [\n\t            [min[0], max[0]], // x range\n\t            [min[1], max[1]] // y range\n\t        ];\n\t    }\n\n\t    function getTransform(controller) {\n\t        return graphic.getTransform(controller.group);\n\t    }\n\n\t    function getGlobalDirection(controller, localDirection) {\n\t        if (localDirection.length > 1) {\n\t            localDirection = localDirection.split('');\n\t            var globalDir = [\n\t                getGlobalDirection(controller, localDirection[0]),\n\t                getGlobalDirection(controller, localDirection[1])\n\t            ];\n\t            (globalDir[0] === 'e' || globalDir[0] === 'w') && globalDir.reverse();\n\t            return globalDir.join('');\n\t        }\n\t        else {\n\t            var map = {w: 'left', e: 'right', n: 'top', s: 'bottom'};\n\t            var inverseMap = {left: 'w', right: 'e', top: 'n', bottom: 's'};\n\t            var globalDir = graphic.transformDirection(\n\t                map[localDirection], getTransform(controller)\n\t            );\n\t            return inverseMap[globalDir];\n\t        }\n\t    }\n\n\t    function driftRect(toRectRange, fromRectRange, controller, cover, name, dx, dy, e) {\n\t        var brushOption = cover.__brushOption;\n\t        var rectRange = toRectRange(brushOption.range);\n\t        var localDelta = toLocalDelta(controller, dx, dy);\n\n\t        each(name.split(''), function (namePart) {\n\t            var ind = DIRECTION_MAP[namePart];\n\t            rectRange[ind[0]][ind[1]] += localDelta[ind[0]];\n\t        });\n\n\t        brushOption.range = fromRectRange(formatRectRange(\n\t            rectRange[0][0], rectRange[1][0], rectRange[0][1], rectRange[1][1]\n\t        ));\n\n\t        updateCoverAfterCreation(controller, cover);\n\t        trigger(controller, {isEnd: false});\n\t    }\n\n\t    function driftPolygon(controller, cover, dx, dy, e) {\n\t        var range = cover.__brushOption.range;\n\t        var localDelta = toLocalDelta(controller, dx, dy);\n\n\t        each(range, function (point) {\n\t            point[0] += localDelta[0];\n\t            point[1] += localDelta[1];\n\t        });\n\n\t        updateCoverAfterCreation(controller, cover);\n\t        trigger(controller, {isEnd: false});\n\t    }\n\n\t    function toLocalDelta(controller, dx, dy) {\n\t        var thisGroup = controller.group;\n\t        var localD = thisGroup.transformCoordToLocal(dx, dy);\n\t        var localZero = thisGroup.transformCoordToLocal(0, 0);\n\n\t        return [localD[0] - localZero[0], localD[1] - localZero[1]];\n\t    }\n\n\t    function clipByPanel(controller, cover, data) {\n\t        var panel = getPanelByCover(controller, cover);\n\t        if (panel === true) { // Global panel\n\t            return zrUtil.clone(data);\n\t        }\n\n\t        var panelRect = panel.getBoundingRect();\n\n\t        return zrUtil.map(data, function (point) {\n\t            var x = point[0];\n\t            x = mathMax(x, panelRect.x);\n\t            x = mathMin(x, panelRect.x + panelRect.width);\n\t            var y = point[1];\n\t            y = mathMax(y, panelRect.y);\n\t            y = mathMin(y, panelRect.y + panelRect.height);\n\t            return [x, y];\n\t        });\n\t    }\n\n\t    function pointsToRect(points) {\n\t        var xmin = mathMin(points[0][0], points[1][0]);\n\t        var ymin = mathMin(points[0][1], points[1][1]);\n\t        var xmax = mathMax(points[0][0], points[1][0]);\n\t        var ymax = mathMax(points[0][1], points[1][1]);\n\n\t        return {\n\t            x: xmin,\n\t            y: ymin,\n\t            width: xmax - xmin,\n\t            height: ymax - ymin\n\t        };\n\t    }\n\n\t    function resetCursor(controller, e) {\n\t        var x = e.offsetX;\n\t        var y = e.offsetY;\n\t        var zr = controller._zr;\n\n\t        if (controller._brushType) { // If active\n\t            var panels = controller._panels;\n\t            var covers = controller._covers;\n\t            var inCover;\n\n\t            for (var i = 0; i < covers.length; i++) {\n\t                if (coverRenderers[covers[i].__brushOption.brushType].contain(covers[i], x, y)) {\n\t                    inCover = true;\n\t                    break;\n\t                }\n\t            }\n\n\t            if (!inCover) {\n\t                if (panels) { // Brush on panels\n\t                    each(panels, function (panel) {\n\t                        panel.contain(x, y) && zr.setCursorStyle('crosshair');\n\t                    });\n\t                }\n\t                else { // Global brush\n\t                    zr.setCursorStyle('crosshair');\n\t                }\n\t            }\n\t        }\n\t    }\n\n\t    function preventDefault(e) {\n\t        var rawE = e.event;\n\t        rawE.preventDefault && rawE.preventDefault();\n\t    }\n\n\t    function mainShapeContain(cover, x, y) {\n\t        return cover.childOfName('main').contain(x, y);\n\t    }\n\n\t    function updateCoverByMouse(controller, e, isEnd) {\n\t        var x = e.offsetX;\n\t        var y = e.offsetY;\n\t        var creatingCover = controller._creatingCover;\n\t        var panel = controller._creatingPanel;\n\t        var thisBrushOption = controller._brushOption;\n\t        var eventParams;\n\n\t        controller._track.push(controller.group.transformCoordToLocal(x, y));\n\n\t        if (shouldShowCover(controller) || creatingCover) {\n\n\t            if (panel && !creatingCover) {\n\t                thisBrushOption.brushMode === 'single' && clearCovers(controller);\n\t                var brushOption = zrUtil.clone(thisBrushOption);\n\t                brushOption.panelId = panel === true ? null : panel.__brushPanelId;\n\t                creatingCover = controller._creatingCover = createCover(controller, brushOption);\n\t                controller._covers.push(creatingCover);\n\t            }\n\n\t            if (creatingCover) {\n\t                var coverRenderer = coverRenderers[controller._brushType];\n\t                var coverBrushOption = creatingCover.__brushOption;\n\n\t                coverBrushOption.range = coverRenderer.getCreatingRange(\n\t                    clipByPanel(controller, creatingCover, controller._track)\n\t                );\n\n\t                if (isEnd) {\n\t                    endCreating(controller, creatingCover);\n\t                    coverRenderer.updateCommon(controller, creatingCover);\n\t                }\n\n\t                updateCoverShape(controller, creatingCover);\n\n\t                eventParams = {isEnd: isEnd};\n\t            }\n\t        }\n\t        else if (\n\t            isEnd\n\t            && thisBrushOption.brushMode === 'single'\n\t            && thisBrushOption.removeOnClick\n\t        ) {\n\t            // Help user to remove covers easily, only by a tiny drag, in 'single' mode.\n\t            // But a single click do not clear covers, because user may have casual\n\t            // clicks (for example, click on other component and do not expect covers\n\t            // disappear).\n\t            // Only some cover removed, trigger action, but not every click trigger action.\n\t            if (getPanelByPoint(controller, x, y) && clearCovers(controller)) {\n\t                eventParams = {isEnd: isEnd, removeOnClick: true};\n\t            }\n\t        }\n\n\t        return eventParams;\n\t    }\n\n\t    var mouseHandlers = {\n\n\t        mousedown: function (e) {\n\t            if (this._dragging) {\n\t                // In case some browser do not support globalOut,\n\t                // and release mose out side the browser.\n\t                handleDragEnd.call(this, e);\n\t            }\n\t            else if (!e.target || !e.target.draggable) {\n\n\t                preventDefault(e);\n\n\t                var x = e.offsetX;\n\t                var y = e.offsetY;\n\n\t                this._creatingCover = null;\n\t                var panel = this._creatingPanel = getPanelByPoint(this, x, y);\n\n\t                if (panel) {\n\t                    this._dragging = true;\n\t                    this._track = [this.group.transformCoordToLocal(x, y)];\n\t                }\n\t            }\n\t        },\n\n\t        mousemove: function (e) {\n\t            // set Cursor\n\t            resetCursor(this, e);\n\n\t            if (this._dragging) {\n\n\t                preventDefault(e);\n\n\t                var eventParams = updateCoverByMouse(this, e, false);\n\n\t                eventParams && trigger(this, eventParams);\n\t            }\n\t        },\n\n\t        mouseup: handleDragEnd //,\n\n\t        // FIXME\n\t        // in tooltip, globalout should not be triggered.\n\t        // globalout: handleDragEnd\n\t    };\n\n\t    function handleDragEnd(e) {\n\t        if (this._dragging) {\n\n\t            preventDefault(e);\n\n\t            var eventParams = updateCoverByMouse(this, e, true);\n\n\t            this._dragging = false;\n\t            this._track = [];\n\t            this._creatingCover = null;\n\n\t            // trigger event shoule be at final, after procedure will be nested.\n\t            eventParams && trigger(this, eventParams);\n\t        }\n\t    }\n\n\t    /**\n\t     * key: brushType\n\t     * @type {Object}\n\t     */\n\t    var coverRenderers = {\n\n\t        lineX: getLineRenderer(0),\n\n\t        lineY: getLineRenderer(1),\n\n\t        rect: {\n\t            createCover: function (controller, brushOption) {\n\t                return createBaseRectCover(\n\t                    curry(\n\t                        driftRect,\n\t                        function (range) {\n\t                            return range;\n\t                        },\n\t                        function (range) {\n\t                            return range;\n\t                        }\n\t                    ),\n\t                    controller,\n\t                    brushOption,\n\t                    ['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw']\n\t                );\n\t            },\n\t            getCreatingRange: function (localTrack) {\n\t                var ends = getTrackEnds(localTrack);\n\t                return formatRectRange(ends[1][0], ends[1][1], ends[0][0], ends[0][1]);\n\t            },\n\t            updateCoverShape: function (controller, cover, localRange, brushOption) {\n\t                updateBaseRect(controller, cover, localRange, brushOption);\n\t            },\n\t            updateCommon: updateCommon,\n\t            contain: mainShapeContain\n\t        },\n\n\t        polygon: {\n\t            createCover: function (controller, brushOption) {\n\t                var cover = new graphic.Group();\n\n\t                // Do not use graphic.Polygon because graphic.Polyline do not close the\n\t                // border of the shape when drawing, which is a better experience for user.\n\t                cover.add(new graphic.Polyline({\n\t                    name: 'main',\n\t                    style: makeStyle(brushOption),\n\t                    silent: true\n\t                }));\n\n\t                return cover;\n\t            },\n\t            getCreatingRange: function (localTrack) {\n\t                return localTrack;\n\t            },\n\t            endCreating: function (controller, cover) {\n\t                cover.remove(cover.childAt(0));\n\t                // Use graphic.Polygon close the shape.\n\t                cover.add(new graphic.Polygon({\n\t                    name: 'main',\n\t                    draggable: true,\n\t                    drift: curry(driftPolygon, controller, cover),\n\t                    ondragend: curry(trigger, controller, {isEnd: true})\n\t                }));\n\t            },\n\t            updateCoverShape: function (controller, cover, localRange, brushOption) {\n\t                cover.childAt(0).setShape({\n\t                    points: clipByPanel(controller, cover, localRange)\n\t                });\n\t            },\n\t            updateCommon: updateCommon,\n\t            contain: mainShapeContain\n\t        }\n\t    };\n\n\t    function getLineRenderer(xyIndex) {\n\t        return {\n\t            createCover: function (controller, brushOption) {\n\t                return createBaseRectCover(\n\t                    curry(\n\t                        driftRect,\n\t                        function (range) {\n\t                            var rectRange = [range, [0, 100]];\n\t                            xyIndex && rectRange.reverse();\n\t                            return rectRange;\n\t                        },\n\t                        function (rectRange) {\n\t                            return rectRange[xyIndex];\n\t                        }\n\t                    ),\n\t                    controller,\n\t                    brushOption,\n\t                    [['w', 'e'], ['n', 's']][xyIndex]\n\t                );\n\t            },\n\t            getCreatingRange: function (localTrack) {\n\t                var ends = getTrackEnds(localTrack);\n\t                var min = mathMin(ends[0][xyIndex], ends[1][xyIndex]);\n\t                var max = mathMax(ends[0][xyIndex], ends[1][xyIndex]);\n\n\t                return [min, max];\n\t            },\n\t            updateCoverShape: function (controller, cover, localRange, brushOption) {\n\t                var brushWidth = brushOption.brushStyle.width;\n\t                var otherExtent;\n\t                // If brushWidth not specified, fit the panel.\n\t                if (brushWidth == null) {\n\t                    var panel = getPanelByCover(controller, cover);\n\t                    var base = 0;\n\t                    if (panel !== true) {\n\t                        var rect = panel.getBoundingRect();\n\t                        brushWidth = xyIndex ? rect.width : rect.height;\n\t                        base = xyIndex ? rect.x : rect.y;\n\t                    }\n\t                    // FIXME\n\t                    // do not support global panel yet.\n\t                    otherExtent = [base, base + (brushWidth || 0)];\n\t                }\n\t                else {\n\t                    otherExtent = [-brushWidth / 2, brushWidth / 2];\n\t                }\n\t                var rectRange = [localRange, otherExtent];\n\t                xyIndex && rectRange.reverse();\n\n\t                updateBaseRect(controller, cover, rectRange, brushOption);\n\t            },\n\t            updateCommon: updateCommon,\n\t            contain: mainShapeContain\n\t        };\n\t    }\n\n\t    module.exports = BrushController;\n\n\n/***/ },\n/* 237 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var modelUtil = __webpack_require__(5);\n\n\t    module.exports = function (option) {\n\t        createParallelIfNeeded(option);\n\t        mergeAxisOptionFromParallel(option);\n\t    };\n\n\t    /**\n\t     * Create a parallel coordinate if not exists.\n\t     * @inner\n\t     */\n\t    function createParallelIfNeeded(option) {\n\t        if (option.parallel) {\n\t            return;\n\t        }\n\n\t        var hasParallelSeries = false;\n\n\t        zrUtil.each(option.series, function (seriesOpt) {\n\t            if (seriesOpt && seriesOpt.type === 'parallel') {\n\t                hasParallelSeries = true;\n\t            }\n\t        });\n\n\t        if (hasParallelSeries) {\n\t            option.parallel = [{}];\n\t        }\n\t    }\n\n\t    /**\n\t     * Merge aixs definition from parallel option (if exists) to axis option.\n\t     * @inner\n\t     */\n\t    function mergeAxisOptionFromParallel(option) {\n\t        var axes = modelUtil.normalizeToArray(option.parallelAxis);\n\n\t        zrUtil.each(axes, function (axisOption) {\n\t            if (!zrUtil.isObject(axisOption)) {\n\t                return;\n\t            }\n\n\t            var parallelIndex = axisOption.parallelIndex || 0;\n\t            var parallelOption = modelUtil.normalizeToArray(option.parallel)[parallelIndex];\n\n\t            if (parallelOption && parallelOption.parallelAxisDefault) {\n\t                zrUtil.merge(axisOption, parallelOption.parallelAxisDefault, false);\n\t            }\n\t        });\n\t    }\n\n\n\n/***/ },\n/* 238 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var List = __webpack_require__(98);\n\t    var zrUtil = __webpack_require__(4);\n\t    var SeriesModel = __webpack_require__(28);\n\t    var completeDimensions = __webpack_require__(103);\n\n\t    module.exports = SeriesModel.extend({\n\n\t        type: 'series.parallel',\n\n\t        dependencies: ['parallel'],\n\n\t        getInitialData: function (option, ecModel) {\n\t            var parallelModel = ecModel.getComponent(\n\t                'parallel', this.get('parallelIndex')\n\t            );\n\t            var parallelAxisIndices = parallelModel.parallelAxisIndex;\n\n\t            var rawData = option.data;\n\t            var modelDims = parallelModel.dimensions;\n\n\t            var dataDims = generateDataDims(modelDims, rawData);\n\n\t            var dataDimsInfo = zrUtil.map(dataDims, function (dim, dimIndex) {\n\n\t                var modelDimsIndex = zrUtil.indexOf(modelDims, dim);\n\t                var axisModel = modelDimsIndex >= 0 && ecModel.getComponent(\n\t                    'parallelAxis', parallelAxisIndices[modelDimsIndex]\n\t                );\n\n\t                if (axisModel && axisModel.get('type') === 'category') {\n\t                    translateCategoryValue(axisModel, dim, rawData);\n\t                    return {name: dim, type: 'ordinal'};\n\t                }\n\t                else if (modelDimsIndex < 0) {\n\t                    return completeDimensions.guessOrdinal(rawData, dimIndex)\n\t                        ? {name: dim, type: 'ordinal'}\n\t                        : dim;\n\t                }\n\t                else {\n\t                    return dim;\n\t                }\n\t            });\n\n\t            var list = new List(dataDimsInfo, this);\n\t            list.initData(rawData);\n\n\t            // Anication is forbiden in progressive data mode.\n\t            if (this.option.progressive) {\n\t                this.option.animation = false;\n\t            }\n\n\t            return list;\n\t        },\n\n\t        /**\n\t         * User can get data raw indices on 'axisAreaSelected' event received.\n\t         *\n\t         * @public\n\t         * @param {string} activeState 'active' or 'inactive' or 'normal'\n\t         * @return {Array.<number>} Raw indices\n\t         */\n\t        getRawIndicesByActiveState: function (activeState) {\n\t            var coordSys = this.coordinateSystem;\n\t            var data = this.getData();\n\t            var indices = [];\n\n\t            coordSys.eachActiveState(data, function (theActiveState, dataIndex) {\n\t                if (activeState === theActiveState) {\n\t                    indices.push(data.getRawIndex(dataIndex));\n\t                }\n\t            });\n\n\t            return indices;\n\t        },\n\n\t        defaultOption: {\n\t            zlevel: 0,                  // 一级层叠\n\t            z: 2,                       // 二级层叠\n\n\t            coordinateSystem: 'parallel',\n\t            parallelIndex: 0,\n\n\t            label: {\n\t                normal: {\n\t                    show: false\n\t                },\n\t                emphasis: {\n\t                    show: false\n\t                }\n\t            },\n\n\t            inactiveOpacity: 0.05,\n\t            activeOpacity: 1,\n\n\t            lineStyle: {\n\t                normal: {\n\t                    width: 1,\n\t                    opacity: 0.45,\n\t                    type: 'solid'\n\t                }\n\t            },\n\t            progressive: false, // 100\n\t            smooth: false,\n\n\t            animationEasing: 'linear'\n\t        }\n\t    });\n\n\t    function translateCategoryValue(axisModel, dim, rawData) {\n\t        var axisData = axisModel.get('data');\n\t        var numberDim = convertDimNameToNumber(dim);\n\n\t        if (axisData && axisData.length) {\n\t            zrUtil.each(rawData, function (dataItem) {\n\t                if (!dataItem) {\n\t                    return;\n\t                }\n\t                // FIXME\n\t                // time consuming, should use hash?\n\t                var index = zrUtil.indexOf(axisData, dataItem[numberDim]);\n\t                dataItem[numberDim] = index >= 0 ? index : NaN;\n\t            });\n\t        }\n\t        // FIXME\n\t        // 如果没有设置axis data, 应自动算出，或者提示。\n\t    }\n\n\t    function convertDimNameToNumber(dimName) {\n\t        return +dimName.replace('dim', '');\n\t    }\n\n\t    function generateDataDims(modelDims, rawData) {\n\t        // parallelModel.dimension should not be regarded as data\n\t        // dimensions. Consider dimensions = ['dim4', 'dim2', 'dim6'];\n\n\t        // We detect max dim by parallelModel.dimensions and fist\n\t        // item in rawData arbitrarily.\n\t        var maxDimNum = 0;\n\t        zrUtil.each(modelDims, function (dimName) {\n\t            var numberDim = convertDimNameToNumber(dimName);\n\t            numberDim > maxDimNum && (maxDimNum = numberDim);\n\t        });\n\n\t        var firstItem = rawData[0];\n\t        if (firstItem && firstItem.length - 1 > maxDimNum) {\n\t            maxDimNum = firstItem.length - 1;\n\t        }\n\n\t        var dataDims = [];\n\t        for (var i = 0; i <= maxDimNum; i++) {\n\t            dataDims.push('dim' + i);\n\t        }\n\n\t        return dataDims;\n\t    }\n\n\n/***/ },\n/* 239 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var graphic = __webpack_require__(43);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var SMOOTH = 0.3;\n\n\t    var ParallelView = __webpack_require__(42).extend({\n\n\t        type: 'parallel',\n\n\t        init: function () {\n\n\t            /**\n\t             * @type {module:zrender/container/Group}\n\t             * @private\n\t             */\n\t            this._dataGroup = new graphic.Group();\n\n\t            this.group.add(this._dataGroup);\n\n\t            /**\n\t             * @type {module:echarts/data/List}\n\t             */\n\t            this._data;\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        render: function (seriesModel, ecModel, api, payload) {\n\t            this._renderForNormal(seriesModel);\n\t            // this[\n\t            //     seriesModel.option.progressive\n\t            //         ? '_renderForProgressive'\n\t            //         : '_renderForNormal'\n\t            // ](seriesModel);\n\t        },\n\n\t        dispose: function () {},\n\n\t        /**\n\t         * @private\n\t         */\n\t        _renderForNormal: function (seriesModel) {\n\t            var dataGroup = this._dataGroup;\n\t            var data = seriesModel.getData();\n\t            var oldData = this._data;\n\t            var coordSys = seriesModel.coordinateSystem;\n\t            var dimensions = coordSys.dimensions;\n\t            var option = seriesModel.option;\n\t            var smooth = option.smooth ? SMOOTH : null;\n\n\t            // Consider switch between progressive and not.\n\t            // oldData && oldData.__plProgressive && dataGroup.removeAll();\n\n\t            data.diff(oldData)\n\t                .add(add)\n\t                .update(update)\n\t                .remove(remove)\n\t                .execute();\n\n\t            // Update style\n\t            updateElCommon(data, smooth);\n\n\t            // First create\n\t            if (!this._data) {\n\t                var clipPath = createGridClipShape(\n\t                    coordSys, seriesModel, function () {\n\t                        // Callback will be invoked immediately if there is no animation\n\t                        setTimeout(function () {\n\t                            dataGroup.removeClipPath();\n\t                        });\n\t                    }\n\t                );\n\t                dataGroup.setClipPath(clipPath);\n\t            }\n\n\t            this._data = data;\n\n\t            function add(newDataIndex) {\n\t                addEl(data, dataGroup, newDataIndex, dimensions, coordSys, null, smooth);\n\t            }\n\n\t            function update(newDataIndex, oldDataIndex) {\n\t                var line = oldData.getItemGraphicEl(oldDataIndex);\n\t                var points = createLinePoints(data, newDataIndex, dimensions, coordSys);\n\t                data.setItemGraphicEl(newDataIndex, line);\n\t                graphic.updateProps(line, {shape: {points: points}}, seriesModel, newDataIndex);\n\t            }\n\n\t            function remove(oldDataIndex) {\n\t                var line = oldData.getItemGraphicEl(oldDataIndex);\n\t                dataGroup.remove(line);\n\t            }\n\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        // _renderForProgressive: function (seriesModel) {\n\t        //     var dataGroup = this._dataGroup;\n\t        //     var data = seriesModel.getData();\n\t        //     var oldData = this._data;\n\t        //     var coordSys = seriesModel.coordinateSystem;\n\t        //     var dimensions = coordSys.dimensions;\n\t        //     var option = seriesModel.option;\n\t        //     var progressive = option.progressive;\n\t        //     var smooth = option.smooth ? SMOOTH : null;\n\n\t        //     // In progressive animation is disabled, so use simple data diff,\n\t        //     // which effects performance less.\n\t        //     // (Typically performance for data with length 7000+ like:\n\t        //     // simpleDiff: 60ms, addEl: 184ms,\n\t        //     // in RMBP 2.4GHz intel i7, OSX 10.9 chrome 50.0.2661.102 (64-bit))\n\t        //     if (simpleDiff(oldData, data, dimensions)) {\n\t        //         dataGroup.removeAll();\n\t        //         data.each(function (dataIndex) {\n\t        //             addEl(data, dataGroup, dataIndex, dimensions, coordSys);\n\t        //         });\n\t        //     }\n\n\t        //     updateElCommon(data, progressive, smooth);\n\n\t        //     // Consider switch between progressive and not.\n\t        //     data.__plProgressive = true;\n\t        //     this._data = data;\n\t        // },\n\n\t        /**\n\t         * @override\n\t         */\n\t        remove: function () {\n\t            this._dataGroup && this._dataGroup.removeAll();\n\t            this._data = null;\n\t        }\n\t    });\n\n\t    function createGridClipShape(coordSys, seriesModel, cb) {\n\t        var parallelModel = coordSys.model;\n\t        var rect = coordSys.getRect();\n\t        var rectEl = new graphic.Rect({\n\t            shape: {\n\t                x: rect.x,\n\t                y: rect.y,\n\t                width: rect.width,\n\t                height: rect.height\n\t            }\n\t        });\n\n\t        var dim = parallelModel.get('layout') === 'horizontal' ? 'width' : 'height';\n\t        rectEl.setShape(dim, 0);\n\t        graphic.initProps(rectEl, {\n\t            shape: {\n\t                width: rect.width,\n\t                height: rect.height\n\t            }\n\t        }, seriesModel, cb);\n\t        return rectEl;\n\t    }\n\n\t    function createLinePoints(data, dataIndex, dimensions, coordSys) {\n\t        var points = [];\n\t        for (var i = 0; i < dimensions.length; i++) {\n\t            var dimName = dimensions[i];\n\t            var value = data.get(dimName, dataIndex);\n\t            if (!isEmptyValue(value, coordSys.getAxis(dimName).type)) {\n\t                points.push(coordSys.dataToPoint(value, dimName));\n\t            }\n\t        }\n\t        return points;\n\t    }\n\n\t    function addEl(data, dataGroup, dataIndex, dimensions, coordSys) {\n\t        var points = createLinePoints(data, dataIndex, dimensions, coordSys);\n\t        var line = new graphic.Polyline({\n\t            shape: {points: points},\n\t            silent: true,\n\t            z2: 10\n\t        });\n\t        dataGroup.add(line);\n\t        data.setItemGraphicEl(dataIndex, line);\n\t    }\n\n\t    function updateElCommon(data, smooth) {\n\t        var seriesStyleModel = data.hostModel.getModel('lineStyle.normal');\n\t        var lineStyle = seriesStyleModel.getLineStyle();\n\t        data.eachItemGraphicEl(function (line, dataIndex) {\n\t            if (data.hasItemOption) {\n\t                var itemModel = data.getItemModel(dataIndex);\n\t                var lineStyleModel = itemModel.getModel('lineStyle.normal', seriesStyleModel);\n\t                lineStyle = lineStyleModel.getLineStyle();\n\t            }\n\n\t            line.useStyle(zrUtil.extend(\n\t                lineStyle,\n\t                {\n\t                    fill: null,\n\t                    stroke: data.getItemVisual(dataIndex, 'color'),\n\t                    opacity: data.getItemVisual(dataIndex, 'opacity')\n\t                }\n\t            ));\n\t            line.shape.smooth = smooth;\n\t        });\n\t    }\n\n\t    // function simpleDiff(oldData, newData, dimensions) {\n\t    //     var oldLen;\n\t    //     if (!oldData\n\t    //         || !oldData.__plProgressive\n\t    //         || (oldLen = oldData.count()) !== newData.count()\n\t    //     ) {\n\t    //         return true;\n\t    //     }\n\n\t    //     var dimLen = dimensions.length;\n\t    //     for (var i = 0; i < oldLen; i++) {\n\t    //         for (var j = 0; j < dimLen; j++) {\n\t    //             if (oldData.get(dimensions[j], i) !== newData.get(dimensions[j], i)) {\n\t    //                 return true;\n\t    //             }\n\t    //         }\n\t    //     }\n\n\t    //     return false;\n\t    // }\n\n\t    // FIXME\n\t    // 公用方法?\n\t    function isEmptyValue(val, axisType) {\n\t        return axisType === 'category'\n\t            ? val == null\n\t            : (val == null || isNaN(val)); // axisType === 'value'\n\t    }\n\n\t    module.exports = ParallelView;\n\n\n/***/ },\n/* 240 */\n/***/ function(module, exports) {\n\n\t\n\n\t    module.exports = function (ecModel) {\n\n\t        ecModel.eachSeriesByType('parallel', function (seriesModel) {\n\n\t            var itemStyleModel = seriesModel.getModel('itemStyle.normal');\n\t            var lineStyleModel = seriesModel.getModel('lineStyle.normal');\n\t            var globalColors = ecModel.get('color');\n\n\t            var color = lineStyleModel.get('color')\n\t                || itemStyleModel.get('color')\n\t                || globalColors[seriesModel.seriesIndex % globalColors.length];\n\t            var inactiveOpacity = seriesModel.get('inactiveOpacity');\n\t            var activeOpacity = seriesModel.get('activeOpacity');\n\t            var lineStyle = seriesModel.getModel('lineStyle.normal').getLineStyle();\n\n\t            var coordSys = seriesModel.coordinateSystem;\n\t            var data = seriesModel.getData();\n\n\t            var opacityMap = {\n\t                normal: lineStyle.opacity,\n\t                active: activeOpacity,\n\t                inactive: inactiveOpacity\n\t            };\n\n\t            coordSys.eachActiveState(data, function (activeState, dataIndex) {\n\t                data.setItemVisual(dataIndex, 'opacity', opacityMap[activeState]);\n\t            });\n\n\t            data.setVisual('color', color);\n\t        });\n\t    };\n\n\n/***/ },\n/* 241 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var echarts = __webpack_require__(1);\n\n\t    __webpack_require__(242);\n\t    __webpack_require__(243);\n\t    echarts.registerLayout(__webpack_require__(244));\n\t    echarts.registerVisual(__webpack_require__(246));\n\n\n/***/ },\n/* 242 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Get initial data and define sankey view's series model\n\t * @author Deqing Li(annong035@gmail.com)\n\t */\n\n\n\t    var SeriesModel = __webpack_require__(28);\n\t    var createGraphFromNodeEdge = __webpack_require__(199);\n\t    var encodeHTML = __webpack_require__(6).encodeHTML;\n\n\t    var SankeySeries = SeriesModel.extend({\n\n\t        type: 'series.sankey',\n\n\t        layoutInfo: null,\n\n\t        /**\n\t         * Init a graph data structure from data in option series\n\t         *\n\t         * @param  {Object} option  the object used to config echarts view\n\t         * @return {module:echarts/data/List} storage initial data\n\t         */\n\t        getInitialData: function (option) {\n\t            var links = option.edges || option.links;\n\t            var nodes = option.data || option.nodes;\n\t            if (nodes && links) {\n\t                var graph = createGraphFromNodeEdge(nodes, links, this, true);\n\t                return graph.data;\n\t            }\n\t        },\n\n\t        /**\n\t         * Return the graphic data structure\n\t         *\n\t         * @return {module:echarts/data/Graph} graphic data structure\n\t         */\n\t        getGraph: function () {\n\t            return this.getData().graph;\n\t        },\n\n\t        /**\n\t         * Get edge data of graphic data structure\n\t         *\n\t         * @return {module:echarts/data/List} data structure of list\n\t         */\n\t        getEdgeData: function () {\n\t            return this.getGraph().edgeData;\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        formatTooltip: function (dataIndex, multipleSeries, dataType) {\n\t            // dataType === 'node' or empty do not show tooltip by default\n\t            if (dataType === 'edge') {\n\t                var params = this.getDataParams(dataIndex, dataType);\n\t                var rawDataOpt = params.data;\n\t                var html = rawDataOpt.source + ' -- ' + rawDataOpt.target;\n\t                if (params.value) {\n\t                    html += ' : ' + params.value;\n\t                }\n\t                return encodeHTML(html);\n\t            }\n\n\t            return SankeySeries.superCall(this, 'formatTooltip', dataIndex, multipleSeries);\n\t        },\n\n\t        defaultOption: {\n\t            zlevel: 0,\n\t            z: 2,\n\n\t            coordinateSystem: 'view',\n\n\t            layout: null,\n\n\t            // the position of the whole view\n\t            left: '5%',\n\t            top: '5%',\n\t            right: '20%',\n\t            bottom: '5%',\n\n\t            // the dx of the node\n\t            nodeWidth: 20,\n\n\t            // the vertical distance between two nodes\n\t            nodeGap: 8,\n\n\t            // the number of iterations to change the position of the node\n\t            layoutIterations: 32,\n\n\t            label: {\n\t                normal: {\n\t                    show: true,\n\t                    position: 'right',\n\t                    textStyle: {\n\t                        color: '#000',\n\t                        fontSize: 12\n\t                    }\n\t                },\n\t                emphasis: {\n\t                    show: true\n\t                }\n\t            },\n\n\t            itemStyle: {\n\t                normal: {\n\t                    borderWidth: 1,\n\t                    borderColor: '#333'\n\t                }\n\t            },\n\n\t            lineStyle: {\n\t                normal: {\n\t                    color: '#314656',\n\t                    opacity: 0.2,\n\t                    curveness: 0.5\n\t                },\n\t                emphasis: {\n\t                    opacity: 0.6\n\t                }\n\t            },\n\n\t            animationEasing: 'linear',\n\n\t            animationDuration: 1000\n\t        }\n\n\t    });\n\n\t    module.exports = SankeySeries;\n\n\n\n/***/ },\n/* 243 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file  The file used to draw sankey view\n\t * @author  Deqing Li(annong035@gmail.com)\n\t */\n\n\n\t    var graphic = __webpack_require__(43);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var SankeyShape = graphic.extendShape({\n\t        shape: {\n\t            x1: 0, y1: 0,\n\t            x2: 0, y2: 0,\n\t            cpx1: 0, cpy1: 0,\n\t            cpx2: 0, cpy2: 0,\n\n\t            extent: 0\n\t        },\n\n\t        buildPath: function (ctx, shape) {\n\t            var halfExtent = shape.extent / 2;\n\t            ctx.moveTo(shape.x1, shape.y1 - halfExtent);\n\t            ctx.bezierCurveTo(\n\t                shape.cpx1, shape.cpy1 - halfExtent,\n\t                shape.cpx2, shape.cpy2 - halfExtent,\n\t                shape.x2, shape.y2 - halfExtent\n\t            );\n\t            ctx.lineTo(shape.x2, shape.y2 + halfExtent);\n\t            ctx.bezierCurveTo(\n\t                shape.cpx2, shape.cpy2 + halfExtent,\n\t                shape.cpx1, shape.cpy1 + halfExtent,\n\t                shape.x1, shape.y1 + halfExtent\n\t            );\n\t            ctx.closePath();\n\t        }\n\t    });\n\n\t    module.exports = __webpack_require__(1).extendChartView({\n\n\t        type: 'sankey',\n\n\t        /**\n\t         * @private\n\t         * @type {module:echarts/chart/sankey/SankeySeries}\n\t         */\n\t        _model: null,\n\n\t        render: function (seriesModel, ecModel, api) {\n\t            var graph = seriesModel.getGraph();\n\t            var group = this.group;\n\t            var layoutInfo = seriesModel.layoutInfo;\n\t            var nodeData = seriesModel.getData();\n\t            var edgeData = seriesModel.getData('edge');\n\n\t            this._model = seriesModel;\n\n\t            group.removeAll();\n\n\t            group.position = [layoutInfo.x, layoutInfo.y];\n\n\t            // generate a bezire Curve for each edge\n\t            graph.eachEdge(function (edge) {\n\t                var curve = new SankeyShape();\n\n\t                curve.dataIndex = edge.dataIndex;\n\t                curve.seriesIndex = seriesModel.seriesIndex;\n\t                curve.dataType = 'edge';\n\n\t                var lineStyleModel = edge.getModel('lineStyle.normal');\n\t                var curvature = lineStyleModel.get('curveness');\n\t                var n1Layout = edge.node1.getLayout();\n\t                var n2Layout = edge.node2.getLayout();\n\t                var edgeLayout = edge.getLayout();\n\n\t                curve.shape.extent = Math.max(1, edgeLayout.dy);\n\n\t                var x1 = n1Layout.x + n1Layout.dx;\n\t                var y1 = n1Layout.y + edgeLayout.sy + edgeLayout.dy / 2;\n\t                var x2 = n2Layout.x;\n\t                var y2 = n2Layout.y + edgeLayout.ty + edgeLayout.dy / 2;\n\t                var cpx1 = x1 * (1 - curvature) + x2 * curvature;\n\t                var cpy1 = y1;\n\t                var cpx2 = x1 * curvature + x2 * (1 - curvature);\n\t                var cpy2 = y2;\n\n\t                curve.setShape({\n\t                    x1: x1,\n\t                    y1: y1,\n\t                    x2: x2,\n\t                    y2: y2,\n\t                    cpx1: cpx1,\n\t                    cpy1: cpy1,\n\t                    cpx2: cpx2,\n\t                    cpy2: cpy2\n\t                });\n\n\t                curve.setStyle(lineStyleModel.getItemStyle());\n\t                // Special color, use source node color or target node color\n\t                switch (curve.style.fill) {\n\t                    case 'source':\n\t                        curve.style.fill = edge.node1.getVisual('color');\n\t                        break;\n\t                    case 'target':\n\t                        curve.style.fill = edge.node2.getVisual('color');\n\t                        break;\n\t                }\n\n\t                graphic.setHoverStyle(curve, edge.getModel('lineStyle.emphasis').getItemStyle());\n\n\t                group.add(curve);\n\n\t                edgeData.setItemGraphicEl(edge.dataIndex, curve);\n\t            });\n\n\t            // generate a rect  for each node\n\t            graph.eachNode(function (node) {\n\t                var layout = node.getLayout();\n\t                var itemModel = node.getModel();\n\t                var labelModel = itemModel.getModel('label.normal');\n\t                var textStyleModel = labelModel.getModel('textStyle');\n\t                var labelHoverModel = itemModel.getModel('label.emphasis');\n\t                var textStyleHoverModel = labelHoverModel.getModel('textStyle');\n\n\t                var rect = new graphic.Rect({\n\t                    shape: {\n\t                        x: layout.x,\n\t                        y: layout.y,\n\t                        width: node.getLayout().dx,\n\t                        height: node.getLayout().dy\n\t                    },\n\t                    style: {\n\t                        // Get formatted label in label.normal option\n\t                        //  Use node id if it is not specified\n\t                        text: labelModel.get('show')\n\t                            ? seriesModel.getFormattedLabel(node.dataIndex, 'normal') || node.id\n\t                            // Use empty string to hide the label\n\t                            : '',\n\t                        textFont: textStyleModel.getFont(),\n\t                        textFill: textStyleModel.getTextColor(),\n\t                        textPosition: labelModel.get('position')\n\t                    }\n\t                });\n\n\t                rect.setStyle(zrUtil.defaults(\n\t                    {\n\t                        fill: node.getVisual('color')\n\t                    },\n\t                    itemModel.getModel('itemStyle.normal').getItemStyle()\n\t                ));\n\n\t                graphic.setHoverStyle(rect, zrUtil.extend(\n\t                    node.getModel('itemStyle.emphasis'),\n\t                    {\n\t                        text: labelHoverModel.get('show')\n\t                            ? seriesModel.getFormattedLabel(node.dataIndex, 'emphasis') || node.id\n\t                            : '',\n\t                        textFont: textStyleHoverModel.getFont(),\n\t                        textFill: textStyleHoverModel.getTextColor(),\n\t                        textPosition: labelHoverModel.get('position')\n\t                    }\n\t                ));\n\n\t                group.add(rect);\n\n\t                nodeData.setItemGraphicEl(node.dataIndex, rect);\n\n\t                rect.dataType = 'node';\n\t            });\n\n\t            if (!this._data && seriesModel.get('animation')) {\n\t                group.setClipPath(createGridClipShape(group.getBoundingRect(), seriesModel, function () {\n\t                    group.removeClipPath();\n\t                }));\n\t            }\n\n\t            this._data = seriesModel.getData();\n\t        },\n\n\t        dispose: function () {}\n\t    });\n\n\t    // add animation to the view\n\t    function createGridClipShape(rect, seriesModel, cb) {\n\t        var rectEl = new graphic.Rect({\n\t            shape: {\n\t                x: rect.x - 10,\n\t                y: rect.y - 10,\n\t                width: 0,\n\t                height: rect.height + 20\n\t            }\n\t        });\n\t        graphic.initProps(rectEl, {\n\t            shape: {\n\t                width: rect.width + 20,\n\t                height: rect.height + 20\n\t            }\n\t        }, seriesModel, cb);\n\n\t        return rectEl;\n\t    }\n\n\n\n/***/ },\n/* 244 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file The layout algorithm of sankey view\n\t * @author  Deqing Li(annong035@gmail.com)\n\t */\n\n\n\t    var layout = __webpack_require__(21);\n\t    var nest = __webpack_require__(245);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    module.exports = function (ecModel, api, payload) {\n\n\t        ecModel.eachSeriesByType('sankey', function (seriesModel) {\n\n\t            var nodeWidth = seriesModel.get('nodeWidth');\n\t            var nodeGap = seriesModel.get('nodeGap');\n\n\t            var layoutInfo = getViewRect(seriesModel, api);\n\n\t            seriesModel.layoutInfo = layoutInfo;\n\n\t            var width = layoutInfo.width;\n\t            var height = layoutInfo.height;\n\n\t            var graph = seriesModel.getGraph();\n\n\t            var nodes = graph.nodes;\n\t            var edges = graph.edges;\n\n\t            computeNodeValues(nodes);\n\n\t            var filteredNodes = nodes.filter(function (node) {\n\t                return node.getLayout().value === 0;\n\t            });\n\n\t            var iterations = filteredNodes.length !== 0\n\t                ? 0 : seriesModel.get('layoutIterations');\n\n\t            layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations);\n\t        });\n\t    };\n\n\t    /**\n\t     * Get the layout position of the whole view\n\t     *\n\t     * @param {module:echarts/model/Series} seriesModel  the model object of sankey series\n\t     * @param {module:echarts/ExtensionAPI} api  provide the API list that the developer can call\n\t     * @return {module:zrender/core/BoundingRect}  size of rect to draw the sankey view\n\t     */\n\t    function getViewRect(seriesModel, api) {\n\t        return layout.getLayoutRect(\n\t            seriesModel.getBoxLayoutParams(), {\n\t                width: api.getWidth(),\n\t                height: api.getHeight()\n\t            }\n\t        );\n\t    }\n\n\t    function layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations) {\n\t        computeNodeBreadths(nodes, nodeWidth, width);\n\t        computeNodeDepths(nodes, edges, height, nodeGap, iterations);\n\t        computeEdgeDepths(nodes);\n\t    }\n\n\t    /**\n\t     * Compute the value of each node by summing the associated edge's value\n\t     *\n\t     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n\t     */\n\t    function computeNodeValues(nodes) {\n\t        zrUtil.each(nodes, function (node) {\n\t            var value1 = sum(node.outEdges, getEdgeValue);\n\t            var value2 = sum(node.inEdges, getEdgeValue);\n\t            var value = Math.max(value1, value2);\n\t            node.setLayout({value: value}, true);\n\t        });\n\t    }\n\n\t    /**\n\t     * Compute the x-position for each node\n\t     *\n\t     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n\t     * @param  {number} nodeWidth  the dx of the node\n\t     * @param  {number} width  the whole width of the area to draw the view\n\t     */\n\t    function computeNodeBreadths(nodes, nodeWidth, width) {\n\t        var remainNodes = nodes;\n\t        var nextNode = null;\n\t        var x = 0;\n\t        var kx = 0;\n\n\t        while (remainNodes.length) {\n\t            nextNode = [];\n\t            for (var i = 0, len = remainNodes.length; i < len; i++) {\n\t                var node = remainNodes[i];\n\t                node.setLayout({x: x}, true);\n\t                node.setLayout({dx: nodeWidth}, true);\n\t                for (var j = 0, lenj = node.outEdges.length; j < lenj; j++) {\n\t                    nextNode.push(node.outEdges[j].node2);\n\t                }\n\t            }\n\t            remainNodes = nextNode;\n\t            ++x;\n\t        }\n\n\t        moveSinksRight(nodes, x);\n\t        kx = (width - nodeWidth) / (x - 1);\n\n\t        scaleNodeBreadths(nodes, kx);\n\t    }\n\n\t    /**\n\t     * All the node without outEgdes are assigned maximum x-position and\n\t     *     be aligned in the last column.\n\t     *\n\t     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n\t     * @param {number} x  value (x-1) use to assign to node without outEdges\n\t     *     as x-position\n\t     */\n\t    function moveSinksRight(nodes, x) {\n\t        zrUtil.each(nodes, function (node) {\n\t            if (!node.outEdges.length) {\n\t                node.setLayout({x: x - 1}, true);\n\t            }\n\t        });\n\t    }\n\n\t    /**\n\t     * Scale node x-position to the width\n\t     *\n\t     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n\t     * @param {number} kx   multiple used to scale nodes\n\t     */\n\t    function scaleNodeBreadths(nodes, kx) {\n\t        zrUtil.each(nodes, function (node) {\n\t            var nodeX = node.getLayout().x * kx;\n\t            node.setLayout({x: nodeX}, true);\n\t        });\n\t    }\n\n\t    /**\n\t     * Using Gauss-Seidel iterations method to compute the node depth(y-position)\n\t     *\n\t     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n\t     * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view\n\t     * @param {number} height  the whole height of the area to draw the view\n\t     * @param {numbber} nodeGap  the vertical distance between two nodes\n\t     *     in the same column.\n\t     * @param {number} iterations  the number of iterations for the algorithm\n\t     */\n\t    function computeNodeDepths(nodes, edges, height, nodeGap, iterations) {\n\t        var nodesByBreadth = nest()\n\t            .key(function (d) {\n\t                return d.getLayout().x;\n\t            })\n\t            .sortKeys(ascending)\n\t            .entries(nodes)\n\t            .map(function (d) {\n\t                return d.values;\n\t            });\n\n\t        initializeNodeDepth(nodes, nodesByBreadth, edges, height, nodeGap);\n\t        resolveCollisions(nodesByBreadth, nodeGap, height);\n\n\t        for (var alpha = 1; iterations > 0; iterations--) {\n\t            // 0.99 is a experience parameter, ensure that each iterations of\n\t            // changes as small as possible.\n\t            alpha *= 0.99;\n\t            relaxRightToLeft(nodesByBreadth, alpha);\n\t            resolveCollisions(nodesByBreadth, nodeGap, height);\n\t            relaxLeftToRight(nodesByBreadth, alpha);\n\t            resolveCollisions(nodesByBreadth, nodeGap, height);\n\t        }\n\t    }\n\n\t    /**\n\t     * Compute the original y-position for each node\n\t     *\n\t     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n\t     * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n\t     *     group by the array of all sankey nodes based on the nodes x-position.\n\t     * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view\n\t     * @param {number} height  the whole height of the area to draw the view\n\t     * @param {number} nodeGap  the vertical distance between two nodes\n\t     */\n\t    function initializeNodeDepth(nodes, nodesByBreadth, edges, height, nodeGap) {\n\t        var kyArray = [];\n\t        zrUtil.each(nodesByBreadth, function (nodes) {\n\t            var n = nodes.length;\n\t            var sum = 0;\n\t            zrUtil.each(nodes, function (node) {\n\t                sum += node.getLayout().value;\n\t            });\n\t            var ky = (height - (n - 1) * nodeGap) / sum;\n\t            kyArray.push(ky);\n\t        });\n\n\t        kyArray.sort(function (a, b) {\n\t            return a - b;\n\t        });\n\t        var ky0 = kyArray[0];\n\n\t        zrUtil.each(nodesByBreadth, function (nodes) {\n\t            zrUtil.each(nodes, function (node, i) {\n\t                node.setLayout({y: i}, true);\n\t                var nodeDy = node.getLayout().value * ky0;\n\t                node.setLayout({dy: nodeDy}, true);\n\t            });\n\t        });\n\n\t        zrUtil.each(edges, function (edge) {\n\t            var edgeDy = +edge.getValue() * ky0;\n\t            edge.setLayout({dy: edgeDy}, true);\n\t        });\n\t    }\n\n\t    /**\n\t     * Resolve the collision of initialized depth (y-position)\n\t     *\n\t     * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n\t     *     group by the array of all sankey nodes based on the nodes x-position.\n\t     * @param {number} nodeGap  the vertical distance between two nodes\n\t     * @param {number} height  the whole height of the area to draw the view\n\t     */\n\t    function resolveCollisions(nodesByBreadth, nodeGap, height) {\n\t        zrUtil.each(nodesByBreadth, function (nodes) {\n\t            var node;\n\t            var dy;\n\t            var y0 = 0;\n\t            var n = nodes.length;\n\t            var i;\n\n\t            nodes.sort(ascendingDepth);\n\n\t            for (i = 0; i < n; i++) {\n\t                node = nodes[i];\n\t                dy = y0 - node.getLayout().y;\n\t                if (dy > 0) {\n\t                    var nodeY = node.getLayout().y + dy;\n\t                    node.setLayout({y: nodeY}, true);\n\t                }\n\t                y0 = node.getLayout().y + node.getLayout().dy + nodeGap;\n\t            }\n\n\t            // if the bottommost node goes outside the bounds, push it back up\n\t            dy = y0 - nodeGap - height;\n\t            if (dy > 0) {\n\t                var nodeY = node.getLayout().y - dy;\n\t                node.setLayout({y: nodeY}, true);\n\t                y0 = node.getLayout().y;\n\t                for (i = n - 2; i >= 0; --i) {\n\t                    node = nodes[i];\n\t                    dy = node.getLayout().y + node.getLayout().dy + nodeGap - y0;\n\t                    if (dy > 0) {\n\t                        nodeY = node.getLayout().y - dy;\n\t                        node.setLayout({y: nodeY}, true);\n\t                    }\n\t                    y0 = node.getLayout().y;\n\t                }\n\t            }\n\t        });\n\t    }\n\n\t    /**\n\t     * Change the y-position of the nodes, except most the right side nodes\n\t     *\n\t     * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n\t     *     group by the array of all sankey nodes based on the node x-position.\n\t     * @param {number} alpha  parameter used to adjust the nodes y-position\n\t     */\n\t    function relaxRightToLeft(nodesByBreadth, alpha) {\n\t        zrUtil.each(nodesByBreadth.slice().reverse(), function (nodes) {\n\t            zrUtil.each(nodes, function (node) {\n\t                if (node.outEdges.length) {\n\t                    var y = sum(node.outEdges, weightedTarget) / sum(node.outEdges, getEdgeValue);\n\t                    var nodeY = node.getLayout().y + (y - center(node)) * alpha;\n\t                    node.setLayout({y: nodeY}, true);\n\t                }\n\t            });\n\t        });\n\t    }\n\n\t    function weightedTarget(edge) {\n\t        return center(edge.node2) * edge.getValue();\n\t    }\n\n\t    /**\n\t     * Change the y-position of the nodes, except most the left side nodes\n\t     *\n\t     * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth\n\t     *     group by the array of all sankey nodes based on the node x-position.\n\t     * @param {number} alpha  parameter used to adjust the nodes y-position\n\t     */\n\t    function relaxLeftToRight(nodesByBreadth, alpha) {\n\t        zrUtil.each(nodesByBreadth, function (nodes) {\n\t            zrUtil.each(nodes, function (node) {\n\t                if (node.inEdges.length) {\n\t                    var y = sum(node.inEdges, weightedSource) / sum(node.inEdges, getEdgeValue);\n\t                    var nodeY = node.getLayout().y + (y - center(node)) * alpha;\n\t                    node.setLayout({y: nodeY}, true);\n\t                }\n\t            });\n\t        });\n\t    }\n\n\t    function weightedSource(edge) {\n\t        return center(edge.node1) * edge.getValue();\n\t    }\n\n\t    /**\n\t     * Compute the depth(y-position) of each edge\n\t     *\n\t     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view\n\t     */\n\t    function computeEdgeDepths(nodes) {\n\t        zrUtil.each(nodes, function (node) {\n\t            node.outEdges.sort(ascendingTargetDepth);\n\t            node.inEdges.sort(ascendingSourceDepth);\n\t        });\n\t        zrUtil.each(nodes, function (node) {\n\t            var sy = 0;\n\t            var ty = 0;\n\t            zrUtil.each(node.outEdges, function (edge) {\n\t                edge.setLayout({sy: sy}, true);\n\t                sy += edge.getLayout().dy;\n\t            });\n\t            zrUtil.each(node.inEdges, function (edge) {\n\t                edge.setLayout({ty: ty}, true);\n\t                ty += edge.getLayout().dy;\n\t            });\n\t        });\n\t    }\n\n\t    function ascendingTargetDepth(a, b) {\n\t        return a.node2.getLayout().y - b.node2.getLayout().y;\n\t    }\n\n\t    function ascendingSourceDepth(a, b) {\n\t        return a.node1.getLayout().y - b.node1.getLayout().y;\n\t    }\n\n\t    function sum(array, f) {\n\t        var sum = 0;\n\t        var len = array.length;\n\t        var i = -1;\n\t        while (++i < len) {\n\t            var value = +f.call(array, array[i], i);\n\t            if (!isNaN(value)) {\n\t                sum += value;\n\t            }\n\t        }\n\t        return sum;\n\t    }\n\n\t    function center(node) {\n\t        return node.getLayout().y + node.getLayout().dy / 2;\n\t    }\n\n\t    function ascendingDepth(a, b) {\n\t        return a.getLayout().y - b.getLayout().y;\n\t    }\n\n\t    function ascending(a, b) {\n\t        return a < b ? -1 : a > b ? 1 : a === b ? 0 : NaN;\n\t    }\n\n\t    function getEdgeValue(edge) {\n\t        return edge.getValue();\n\t    }\n\n\n\n/***/ },\n/* 245 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    /**\n\t     * nest helper used to group by the array.\n\t     * can specified the keys and sort the keys.\n\t     */\n\t    function nest() {\n\n\t        var keysFunction = [];\n\t        var sortKeysFunction = [];\n\n\t        /**\n\t         * map an Array into the mapObject.\n\t         * @param {Array} array\n\t         * @param {number} depth\n\t         */\n\t        function map(array, depth) {\n\t            if (depth >= keysFunction.length) {\n\t                return array;\n\t            }\n\t            var i = -1;\n\t            var n = array.length;\n\t            var keyFunction = keysFunction[depth++];\n\t            var mapObject = {};\n\t            var valuesByKey = {};\n\n\t            while (++i < n) {\n\t                var keyValue = keyFunction(array[i]);\n\t                var values = valuesByKey[keyValue];\n\n\t                if (values) {\n\t                    values.push(array[i]);\n\t                }\n\t                else {\n\t                    valuesByKey[keyValue] = [array[i]];\n\t                }\n\t            }\n\n\t            zrUtil.each(valuesByKey, function (value, key) {\n\t                mapObject[key] = map(value, depth);\n\t            });\n\n\t            return mapObject;\n\t        }\n\n\t        /**\n\t         * transform the Map Object to multidimensional Array\n\t         * @param {Object} map\n\t         * @param {number} depth\n\t         */\n\t        function entriesMap(mapObject, depth) {\n\t            if (depth >= keysFunction.length) {\n\t                return mapObject;\n\t            }\n\t            var array = [];\n\t            var sortKeyFunction = sortKeysFunction[depth++];\n\n\t            zrUtil.each(mapObject, function (value, key) {\n\t                array.push({\n\t                    key: key, values: entriesMap(value, depth)\n\t                });\n\t            });\n\n\t            if (sortKeyFunction) {\n\t                return array.sort(function (a, b) {\n\t                    return sortKeyFunction(a.key, b.key);\n\t                });\n\t            }\n\t            else {\n\t                return array;\n\t            }\n\t        }\n\n\t        return {\n\t            /**\n\t             * specified the key to groupby the arrays.\n\t             * users can specified one more keys.\n\t             * @param {Function} d\n\t             */\n\t            key: function (d) {\n\t                keysFunction.push(d);\n\t                return this;\n\t            },\n\n\t            /**\n\t             * specified the comparator to sort the keys\n\t             * @param {Function} order\n\t             */\n\t            sortKeys: function (order) {\n\t                sortKeysFunction[keysFunction.length - 1] = order;\n\t                return this;\n\t            },\n\n\t            /**\n\t             * the array to be grouped by.\n\t             * @param {Array} array\n\t             */\n\t            entries: function (array) {\n\t                return entriesMap(map(array, 0), 0);\n\t            }\n\t        };\n\t    }\n\t    module.exports = nest;\n\n\n/***/ },\n/* 246 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Visual encoding for sankey view\n\t * @author  Deqing Li(annong035@gmail.com)\n\t */\n\n\n\t    var VisualMapping = __webpack_require__(195);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    module.exports = function (ecModel, payload) {\n\t        ecModel.eachSeriesByType('sankey', function (seriesModel) {\n\t            var graph = seriesModel.getGraph();\n\t            var nodes = graph.nodes;\n\n\t            nodes.sort(function (a, b) {\n\t                return a.getLayout().value - b.getLayout().value;\n\t            });\n\n\t            var minValue = nodes[0].getLayout().value;\n\t            var maxValue = nodes[nodes.length - 1].getLayout().value;\n\n\t            zrUtil.each(nodes, function (node) {\n\t                var mapping = new VisualMapping({\n\t                    type: 'color',\n\t                    mappingMethod: 'linear',\n\t                    dataExtent: [minValue, maxValue],\n\t                    visual: seriesModel.get('color')\n\t                });\n\n\t                var mapValueToColor = mapping.mapValueToVisual(node.getLayout().value);\n\t                node.setVisual('color', mapValueToColor);\n\t                // If set itemStyle.normal.color\n\t                var itemModel = node.getModel();\n\t                var customColor = itemModel.get('itemStyle.normal.color');\n\t                if (customColor != null) {\n\t                    node.setVisual('color', customColor);\n\t                }\n\t            });\n\n\t        });\n\t    };\n\n\n\n/***/ },\n/* 247 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var echarts = __webpack_require__(1);\n\n\t    __webpack_require__(248);\n\t    __webpack_require__(251);\n\n\t    echarts.registerVisual(__webpack_require__(252));\n\t    echarts.registerLayout(__webpack_require__(253));\n\n\n\n/***/ },\n/* 248 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var SeriesModel = __webpack_require__(28);\n\t    var whiskerBoxCommon = __webpack_require__(249);\n\n\t    var BoxplotSeries = SeriesModel.extend({\n\n\t        type: 'series.boxplot',\n\n\t        dependencies: ['xAxis', 'yAxis', 'grid'],\n\n\t        // TODO\n\t        // box width represents group size, so dimension should have 'size'.\n\n\t        /**\n\t         * @see <https://en.wikipedia.org/wiki/Box_plot>\n\t         * The meanings of 'min' and 'max' depend on user,\n\t         * and echarts do not need to know it.\n\t         * @readOnly\n\t         */\n\t        valueDimensions: ['min', 'Q1', 'median', 'Q3', 'max'],\n\n\t        /**\n\t         * @type {Array.<string>}\n\t         * @readOnly\n\t         */\n\t        dimensions: null,\n\n\t        /**\n\t         * @override\n\t         */\n\t        defaultOption: {\n\t            zlevel: 0,                  // 一级层叠\n\t            z: 2,                       // 二级层叠\n\t            coordinateSystem: 'cartesian2d',\n\t            legendHoverLink: true,\n\n\t            hoverAnimation: true,\n\n\t            // xAxisIndex: 0,\n\t            // yAxisIndex: 0,\n\n\t            layout: null,               // 'horizontal' or 'vertical'\n\t            boxWidth: [7, 50],       // [min, max] can be percent of band width.\n\n\t            itemStyle: {\n\t                normal: {\n\t                    color: '#fff',\n\t                    borderWidth: 1\n\t                },\n\t                emphasis: {\n\t                    borderWidth: 2,\n\t                    shadowBlur: 5,\n\t                    shadowOffsetX: 2,\n\t                    shadowOffsetY: 2,\n\t                    shadowColor: 'rgba(0,0,0,0.4)'\n\t                }\n\t            },\n\n\t            animationEasing: 'elasticOut',\n\t            animationDuration: 800\n\t        }\n\t    });\n\n\t    zrUtil.mixin(BoxplotSeries, whiskerBoxCommon.seriesModelMixin, true);\n\n\t    module.exports = BoxplotSeries;\n\n\n\n/***/ },\n/* 249 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var List = __webpack_require__(98);\n\t    var completeDimensions = __webpack_require__(103);\n\t    var WhiskerBoxDraw = __webpack_require__(250);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    function getItemValue(item) {\n\t        return item.value == null ? item : item.value;\n\t    }\n\n\t    var seriesModelMixin = {\n\n\t        /**\n\t         * @private\n\t         * @type {string}\n\t         */\n\t        _baseAxisDim: null,\n\n\t        /**\n\t         * @override\n\t         */\n\t        getInitialData: function (option, ecModel) {\n\t            // When both types of xAxis and yAxis are 'value', layout is\n\t            // needed to be specified by user. Otherwise, layout can be\n\t            // judged by which axis is category.\n\n\t            var categories;\n\n\t            var xAxisModel = ecModel.getComponent('xAxis', this.get('xAxisIndex'));\n\t            var yAxisModel = ecModel.getComponent('yAxis', this.get('yAxisIndex'));\n\t            var xAxisType = xAxisModel.get('type');\n\t            var yAxisType = yAxisModel.get('type');\n\t            var addOrdinal;\n\n\t            // FIXME\n\t            // 考虑时间轴\n\n\t            if (xAxisType === 'category') {\n\t                option.layout = 'horizontal';\n\t                categories = xAxisModel.getCategories();\n\t                addOrdinal = true;\n\t            }\n\t            else if (yAxisType  === 'category') {\n\t                option.layout = 'vertical';\n\t                categories = yAxisModel.getCategories();\n\t                addOrdinal = true;\n\t            }\n\t            else {\n\t                option.layout = option.layout || 'horizontal';\n\t            }\n\n\t            this._baseAxisDim = option.layout === 'horizontal' ? 'x' : 'y';\n\n\t            var data = option.data;\n\t            var dimensions = this.dimensions = ['base'].concat(this.valueDimensions);\n\t            completeDimensions(dimensions, data);\n\n\t            var list = new List(dimensions, this);\n\t            list.initData(data, categories ? categories.slice() : null, function (dataItem, dimName, idx, dimIdx) {\n\t                var value = getItemValue(dataItem);\n\t                return addOrdinal ? (dimName === 'base' ? idx : value[dimIdx - 1]) : value[dimIdx];\n\t            });\n\n\t            return list;\n\t        },\n\n\t        /**\n\t         * Used by Gird.\n\t         * @param {string} axisDim 'x' or 'y'\n\t         * @return {Array.<string>} dimensions on the axis.\n\t         */\n\t        coordDimToDataDim: function (axisDim) {\n\t            var dims = this.valueDimensions.slice();\n\t            var baseDim = ['base'];\n\t            var map = {\n\t                horizontal: {x: baseDim, y: dims},\n\t                vertical: {x: dims, y: baseDim}\n\t            };\n\t            return map[this.get('layout')][axisDim];\n\t        },\n\n\t        /**\n\t         * @override\n\t         * @param {string|number} dataDim\n\t         * @return {string} coord dimension\n\t         */\n\t        dataDimToCoordDim: function (dataDim) {\n\t            var dim;\n\n\t            zrUtil.each(['x', 'y'], function (coordDim, index) {\n\t                var dataDims = this.coordDimToDataDim(coordDim);\n\t                if (zrUtil.indexOf(dataDims, dataDim) >= 0) {\n\t                    dim = coordDim;\n\t                }\n\t            }, this);\n\n\t            return dim;\n\t        },\n\n\t        /**\n\t         * If horizontal, base axis is x, otherwise y.\n\t         * @override\n\t         */\n\t        getBaseAxis: function () {\n\t            var dim = this._baseAxisDim;\n\t            return this.ecModel.getComponent(dim + 'Axis', this.get(dim + 'AxisIndex')).axis;\n\t        }\n\t    };\n\n\t    var viewMixin = {\n\n\t        init: function () {\n\t            /**\n\t             * Old data.\n\t             * @private\n\t             * @type {module:echarts/chart/helper/WhiskerBoxDraw}\n\t             */\n\t            var whiskerBoxDraw = this._whiskerBoxDraw = new WhiskerBoxDraw(\n\t                this.getStyleUpdater()\n\t            );\n\t            this.group.add(whiskerBoxDraw.group);\n\t        },\n\n\t        render: function (seriesModel, ecModel, api) {\n\t            this._whiskerBoxDraw.updateData(seriesModel.getData());\n\t        },\n\n\t        remove: function (ecModel) {\n\t            this._whiskerBoxDraw.remove();\n\t        }\n\t    };\n\n\t    module.exports = {\n\t        seriesModelMixin: seriesModelMixin,\n\t        viewMixin: viewMixin\n\t    };\n\n\n/***/ },\n/* 250 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @module echarts/chart/helper/Symbol\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var graphic = __webpack_require__(43);\n\t    var Path = __webpack_require__(45);\n\n\t    var WhiskerPath = Path.extend({\n\n\t        type: 'whiskerInBox',\n\n\t        shape: {},\n\n\t        buildPath: function (ctx, shape) {\n\t            for (var i in shape) {\n\t                if (shape.hasOwnProperty(i) && i.indexOf('ends') === 0) {\n\t                    var pts = shape[i];\n\t                    ctx.moveTo(pts[0][0], pts[0][1]);\n\t                    ctx.lineTo(pts[1][0], pts[1][1]);\n\t                }\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * @constructor\n\t     * @alias {module:echarts/chart/helper/WhiskerBox}\n\t     * @param {module:echarts/data/List} data\n\t     * @param {number} idx\n\t     * @param {Function} styleUpdater\n\t     * @param {boolean} isInit\n\t     * @extends {module:zrender/graphic/Group}\n\t     */\n\t    function WhiskerBox(data, idx, styleUpdater, isInit) {\n\t        graphic.Group.call(this);\n\n\t        /**\n\t         * @type {number}\n\t         * @readOnly\n\t         */\n\t        this.bodyIndex;\n\n\t        /**\n\t         * @type {number}\n\t         * @readOnly\n\t         */\n\t        this.whiskerIndex;\n\n\t        /**\n\t         * @type {Function}\n\t         */\n\t        this.styleUpdater = styleUpdater;\n\n\t        this._createContent(data, idx, isInit);\n\n\t        this.updateData(data, idx, isInit);\n\n\t        /**\n\t         * Last series model.\n\t         * @type {module:echarts/model/Series}\n\t         */\n\t        this._seriesModel;\n\t    }\n\n\t    var whiskerBoxProto = WhiskerBox.prototype;\n\n\t    whiskerBoxProto._createContent = function (data, idx, isInit) {\n\t        var itemLayout = data.getItemLayout(idx);\n\t        var constDim = itemLayout.chartLayout === 'horizontal' ? 1 : 0;\n\t        var count = 0;\n\n\t        // Whisker element.\n\t        this.add(new graphic.Polygon({\n\t            shape: {\n\t                points: isInit\n\t                    ? transInit(itemLayout.bodyEnds, constDim, itemLayout)\n\t                    : itemLayout.bodyEnds\n\t            },\n\t            style: {strokeNoScale: true},\n\t            z2: 100\n\t        }));\n\t        this.bodyIndex = count++;\n\n\t        // Box element.\n\t        var whiskerEnds = zrUtil.map(itemLayout.whiskerEnds, function (ends) {\n\t            return isInit ? transInit(ends, constDim, itemLayout) : ends;\n\t        });\n\t        this.add(new WhiskerPath({\n\t            shape: makeWhiskerEndsShape(whiskerEnds),\n\t            style: {strokeNoScale: true},\n\t            z2: 100\n\t        }));\n\t        this.whiskerIndex = count++;\n\t    };\n\n\t    function transInit(points, dim, itemLayout) {\n\t        return zrUtil.map(points, function (point) {\n\t            point = point.slice();\n\t            point[dim] = itemLayout.initBaseline;\n\t            return point;\n\t        });\n\t    }\n\n\t    function makeWhiskerEndsShape(whiskerEnds) {\n\t        // zr animation only support 2-dim array.\n\t        var shape = {};\n\t        zrUtil.each(whiskerEnds, function (ends, i) {\n\t            shape['ends' + i] = ends;\n\t        });\n\t        return shape;\n\t    }\n\n\t    /**\n\t     * Update symbol properties\n\t     * @param  {module:echarts/data/List} data\n\t     * @param  {number} idx\n\t     */\n\t    whiskerBoxProto.updateData = function (data, idx, isInit) {\n\t        var seriesModel = this._seriesModel = data.hostModel;\n\t        var itemLayout = data.getItemLayout(idx);\n\t        var updateMethod = graphic[isInit ? 'initProps' : 'updateProps'];\n\t        // this.childAt(this.bodyIndex).stopAnimation(true);\n\t        // this.childAt(this.whiskerIndex).stopAnimation(true);\n\t        updateMethod(\n\t            this.childAt(this.bodyIndex),\n\t            {shape: {points: itemLayout.bodyEnds}},\n\t            seriesModel, idx\n\t        );\n\t        updateMethod(\n\t            this.childAt(this.whiskerIndex),\n\t            {shape: makeWhiskerEndsShape(itemLayout.whiskerEnds)},\n\t            seriesModel, idx\n\t        );\n\n\t        this.styleUpdater.call(null, this, data, idx);\n\t    };\n\n\t    zrUtil.inherits(WhiskerBox, graphic.Group);\n\n\n\t    /**\n\t     * @constructor\n\t     * @alias module:echarts/chart/helper/WhiskerBoxDraw\n\t     */\n\t    function WhiskerBoxDraw(styleUpdater) {\n\t        this.group = new graphic.Group();\n\t        this.styleUpdater = styleUpdater;\n\t    }\n\n\t    var whiskerBoxDrawProto = WhiskerBoxDraw.prototype;\n\n\t    /**\n\t     * Update symbols draw by new data\n\t     * @param {module:echarts/data/List} data\n\t     */\n\t    whiskerBoxDrawProto.updateData = function (data) {\n\t        var group = this.group;\n\t        var oldData = this._data;\n\t        var styleUpdater = this.styleUpdater;\n\n\t        data.diff(oldData)\n\t            .add(function (newIdx) {\n\t                if (data.hasValue(newIdx)) {\n\t                    var symbolEl = new WhiskerBox(data, newIdx, styleUpdater, true);\n\t                    data.setItemGraphicEl(newIdx, symbolEl);\n\t                    group.add(symbolEl);\n\t                }\n\t            })\n\t            .update(function (newIdx, oldIdx) {\n\t                var symbolEl = oldData.getItemGraphicEl(oldIdx);\n\n\t                // Empty data\n\t                if (!data.hasValue(newIdx)) {\n\t                    group.remove(symbolEl);\n\t                    return;\n\t                }\n\n\t                if (!symbolEl) {\n\t                    symbolEl = new WhiskerBox(data, newIdx, styleUpdater);\n\t                }\n\t                else {\n\t                    symbolEl.updateData(data, newIdx);\n\t                }\n\n\t                // Add back\n\t                group.add(symbolEl);\n\n\t                data.setItemGraphicEl(newIdx, symbolEl);\n\t            })\n\t            .remove(function (oldIdx) {\n\t                var el = oldData.getItemGraphicEl(oldIdx);\n\t                el && group.remove(el);\n\t            })\n\t            .execute();\n\n\t        this._data = data;\n\t    };\n\n\t    /**\n\t     * Remove symbols.\n\t     * @param {module:echarts/data/List} data\n\t     */\n\t    whiskerBoxDrawProto.remove = function () {\n\t        var group = this.group;\n\t        var data = this._data;\n\t        this._data = null;\n\t        data && data.eachItemGraphicEl(function (el) {\n\t            el && group.remove(el);\n\t        });\n\t    };\n\n\t    module.exports = WhiskerBoxDraw;\n\n\n/***/ },\n/* 251 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var ChartView = __webpack_require__(42);\n\t    var graphic = __webpack_require__(43);\n\t    var whiskerBoxCommon = __webpack_require__(249);\n\n\t    var BoxplotView = ChartView.extend({\n\n\t        type: 'boxplot',\n\n\t        getStyleUpdater: function () {\n\t            return updateStyle;\n\t        },\n\n\t        dispose: zrUtil.noop\n\t    });\n\n\t    zrUtil.mixin(BoxplotView, whiskerBoxCommon.viewMixin, true);\n\n\t    // Update common properties\n\t    var normalStyleAccessPath = ['itemStyle', 'normal'];\n\t    var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];\n\n\t    function updateStyle(itemGroup, data, idx) {\n\t        var itemModel = data.getItemModel(idx);\n\t        var normalItemStyleModel = itemModel.getModel(normalStyleAccessPath);\n\t        var borderColor = data.getItemVisual(idx, 'color');\n\n\t        // Exclude borderColor.\n\t        var itemStyle = normalItemStyleModel.getItemStyle(['borderColor']);\n\n\t        var whiskerEl = itemGroup.childAt(itemGroup.whiskerIndex);\n\t        whiskerEl.style.set(itemStyle);\n\t        whiskerEl.style.stroke = borderColor;\n\t        whiskerEl.dirty();\n\n\t        var bodyEl = itemGroup.childAt(itemGroup.bodyIndex);\n\t        bodyEl.style.set(itemStyle);\n\t        bodyEl.style.stroke = borderColor;\n\t        bodyEl.dirty();\n\n\t        var hoverStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();\n\t        graphic.setHoverStyle(itemGroup, hoverStyle);\n\t    }\n\n\t    module.exports = BoxplotView;\n\n\n\n/***/ },\n/* 252 */\n/***/ function(module, exports) {\n\n\t\n\n\t    var borderColorQuery = ['itemStyle', 'normal', 'borderColor'];\n\n\t    module.exports = function (ecModel, api) {\n\n\t        var globalColors = ecModel.get('color');\n\n\t        ecModel.eachRawSeriesByType('boxplot', function (seriesModel) {\n\n\t            var defaulColor = globalColors[seriesModel.seriesIndex % globalColors.length];\n\t            var data = seriesModel.getData();\n\n\t            data.setVisual({\n\t                legendSymbol: 'roundRect',\n\t                // Use name 'color' but not 'borderColor' for legend usage and\n\t                // visual coding from other component like dataRange.\n\t                color: seriesModel.get(borderColorQuery) || defaulColor\n\t            });\n\n\t            // Only visible series has each data be visual encoded\n\t            if (!ecModel.isSeriesFiltered(seriesModel)) {\n\t                data.each(function (idx) {\n\t                    var itemModel = data.getItemModel(idx);\n\t                    data.setItemVisual(\n\t                        idx,\n\t                        {color: itemModel.get(borderColorQuery, true)}\n\t                    );\n\t                });\n\t            }\n\t        });\n\n\t    };\n\n\n/***/ },\n/* 253 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var numberUtil = __webpack_require__(7);\n\t    var parsePercent = numberUtil.parsePercent;\n\t    var each = zrUtil.each;\n\n\t    module.exports = function (ecModel) {\n\n\t        var groupResult = groupSeriesByAxis(ecModel);\n\n\t        each(groupResult, function (groupItem) {\n\t            var seriesModels = groupItem.seriesModels;\n\n\t            if (!seriesModels.length) {\n\t                return;\n\t            }\n\n\t            calculateBase(groupItem);\n\n\t            each(seriesModels, function (seriesModel, idx) {\n\t                layoutSingleSeries(\n\t                    seriesModel,\n\t                    groupItem.boxOffsetList[idx],\n\t                    groupItem.boxWidthList[idx]\n\t                );\n\t            });\n\t        });\n\t    };\n\n\t    /**\n\t     * Group series by axis.\n\t     */\n\t    function groupSeriesByAxis(ecModel) {\n\t        var result = [];\n\t        var axisList = [];\n\n\t        ecModel.eachSeriesByType('boxplot', function (seriesModel) {\n\t            var baseAxis = seriesModel.getBaseAxis();\n\t            var idx = zrUtil.indexOf(axisList, baseAxis);\n\n\t            if (idx < 0) {\n\t                idx = axisList.length;\n\t                axisList[idx] = baseAxis;\n\t                result[idx] = {axis: baseAxis, seriesModels: []};\n\t            }\n\n\t            result[idx].seriesModels.push(seriesModel);\n\t        });\n\n\t        return result;\n\t    }\n\n\t    /**\n\t     * Calculate offset and box width for each series.\n\t     */\n\t    function calculateBase(groupItem) {\n\t        var extent;\n\t        var baseAxis = groupItem.axis;\n\t        var seriesModels = groupItem.seriesModels;\n\t        var seriesCount = seriesModels.length;\n\n\t        var boxWidthList = groupItem.boxWidthList = [];\n\t        var boxOffsetList = groupItem.boxOffsetList = [];\n\t        var boundList = [];\n\n\t        var bandWidth;\n\t        if (baseAxis.type === 'category') {\n\t            bandWidth = baseAxis.getBandWidth();\n\t        }\n\t        else {\n\t            var maxDataCount = 0;\n\t            each(seriesModels, function (seriesModel) {\n\t                maxDataCount = Math.max(maxDataCount, seriesModel.getData().count());\n\t            });\n\t            extent = baseAxis.getExtent(),\n\t            Math.abs(extent[1] - extent[0]) / maxDataCount;\n\t        }\n\n\t        each(seriesModels, function (seriesModel) {\n\t            var boxWidthBound = seriesModel.get('boxWidth');\n\t            if (!zrUtil.isArray(boxWidthBound)) {\n\t                boxWidthBound = [boxWidthBound, boxWidthBound];\n\t            }\n\t            boundList.push([\n\t                parsePercent(boxWidthBound[0], bandWidth) || 0,\n\t                parsePercent(boxWidthBound[1], bandWidth) || 0\n\t            ]);\n\t        });\n\n\t        var availableWidth = bandWidth * 0.8 - 2;\n\t        var boxGap = availableWidth / seriesCount * 0.3;\n\t        var boxWidth = (availableWidth - boxGap * (seriesCount - 1)) / seriesCount;\n\t        var base = boxWidth / 2 - availableWidth / 2;\n\n\t        each(seriesModels, function (seriesModel, idx) {\n\t            boxOffsetList.push(base);\n\t            base += boxGap + boxWidth;\n\n\t            boxWidthList.push(\n\t                Math.min(Math.max(boxWidth, boundList[idx][0]), boundList[idx][1])\n\t            );\n\t        });\n\t    }\n\n\t    /**\n\t     * Calculate points location for each series.\n\t     */\n\t    function layoutSingleSeries(seriesModel, offset, boxWidth) {\n\t        var coordSys = seriesModel.coordinateSystem;\n\t        var data = seriesModel.getData();\n\t        var dimensions = seriesModel.dimensions;\n\t        var chartLayout = seriesModel.get('layout');\n\t        var halfWidth = boxWidth / 2;\n\n\t        data.each(dimensions, function () {\n\t            var args = arguments;\n\t            var dimLen = dimensions.length;\n\t            var axisDimVal = args[0];\n\t            var idx = args[dimLen];\n\t            var variableDim = chartLayout === 'horizontal' ? 0 : 1;\n\t            var constDim = 1 - variableDim;\n\n\t            var median = getPoint(args[3]);\n\t            var end1 = getPoint(args[1]);\n\t            var end5 = getPoint(args[5]);\n\t            var whiskerEnds = [\n\t                [end1, getPoint(args[2])],\n\t                [end5, getPoint(args[4])]\n\t            ];\n\t            layEndLine(end1);\n\t            layEndLine(end5);\n\t            layEndLine(median);\n\n\t            var bodyEnds = [];\n\t            addBodyEnd(whiskerEnds[0][1], 0);\n\t            addBodyEnd(whiskerEnds[1][1], 1);\n\n\t            data.setItemLayout(idx, {\n\t                chartLayout: chartLayout,\n\t                initBaseline: median[constDim],\n\t                median: median,\n\t                bodyEnds: bodyEnds,\n\t                whiskerEnds: whiskerEnds\n\t            });\n\n\t            function getPoint(val) {\n\t                var p = [];\n\t                p[variableDim] = axisDimVal;\n\t                p[constDim] = val;\n\t                var point;\n\t                if (isNaN(axisDimVal) || isNaN(val)) {\n\t                    point = [NaN, NaN];\n\t                }\n\t                else {\n\t                    point = coordSys.dataToPoint(p);\n\t                    point[variableDim] += offset;\n\t                }\n\t                return point;\n\t            }\n\n\t            function addBodyEnd(point, start) {\n\t                var point1 = point.slice();\n\t                var point2 = point.slice();\n\t                point1[variableDim] += halfWidth;\n\t                point2[variableDim] -= halfWidth;\n\t                start\n\t                    ? bodyEnds.push(point1, point2)\n\t                    : bodyEnds.push(point2, point1);\n\t            }\n\n\t            function layEndLine(endCenter) {\n\t                var line = [endCenter.slice(), endCenter.slice()];\n\t                line[0][variableDim] -= halfWidth;\n\t                line[1][variableDim] += halfWidth;\n\t                whiskerEnds.push(line);\n\t            }\n\t        });\n\t    }\n\n\n\n/***/ },\n/* 254 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var echarts = __webpack_require__(1);\n\n\t    __webpack_require__(255);\n\t    __webpack_require__(256);\n\n\t    echarts.registerPreprocessor(\n\t        __webpack_require__(257)\n\t    );\n\n\t    echarts.registerVisual(__webpack_require__(258));\n\t    echarts.registerLayout(__webpack_require__(259));\n\n\n\n/***/ },\n/* 255 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var SeriesModel = __webpack_require__(28);\n\t    var whiskerBoxCommon = __webpack_require__(249);\n\t    var formatUtil = __webpack_require__(6);\n\t    var encodeHTML = formatUtil.encodeHTML;\n\t    var addCommas = formatUtil.addCommas;\n\n\t    var CandlestickSeries = SeriesModel.extend({\n\n\t        type: 'series.candlestick',\n\n\t        dependencies: ['xAxis', 'yAxis', 'grid'],\n\n\t        /**\n\t         * @readOnly\n\t         */\n\t        valueDimensions: ['open', 'close', 'lowest', 'highest'],\n\n\t        /**\n\t         * @type {Array.<string>}\n\t         * @readOnly\n\t         */\n\t        dimensions: null,\n\n\t        /**\n\t         * @override\n\t         */\n\t        defaultOption: {\n\t            zlevel: 0,                  // 一级层叠\n\t            z: 2,                       // 二级层叠\n\t            coordinateSystem: 'cartesian2d',\n\t            legendHoverLink: true,\n\n\t            hoverAnimation: true,\n\n\t            // xAxisIndex: 0,\n\t            // yAxisIndex: 0,\n\n\t            layout: null, // 'horizontal' or 'vertical'\n\n\t            itemStyle: {\n\t                normal: {\n\t                    color: '#c23531', // 阳线 positive\n\t                    color0: '#314656', // 阴线 negative     '#c23531', '#314656'\n\t                    borderWidth: 1,\n\t                    // FIXME\n\t                    // ec2中使用的是lineStyle.color 和 lineStyle.color0\n\t                    borderColor: '#c23531',\n\t                    borderColor0: '#314656'\n\t                },\n\t                emphasis: {\n\t                    borderWidth: 2\n\t                }\n\t            },\n\n\t            barMaxWidth: null,\n\t            barMinWidth: null,\n\t            barWidth: null,\n\n\t            animationUpdate: false,\n\t            animationEasing: 'linear',\n\t            animationDuration: 300\n\t        },\n\n\t        /**\n\t         * Get dimension for shadow in dataZoom\n\t         * @return {string} dimension name\n\t         */\n\t        getShadowDim: function () {\n\t            return 'open';\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        formatTooltip: function (dataIndex, mutipleSeries) {\n\t            // It rearly use mutiple candlestick series in one cartesian,\n\t            // so only consider one series in this default tooltip.\n\t            var valueHTML = zrUtil.map(this.valueDimensions, function (dim) {\n\t                return encodeHTML(dim + ': ' + addCommas(this.getData().get(dim, dataIndex)));\n\t            }, this).join('<br />');\n\n\t            var html = [];\n\t            this.name != null && html.push(encodeHTML(this.name));\n\t            valueHTML != null && html.push(valueHTML);\n\n\t            return html.join('<br />');\n\t        },\n\n\t        brushSelector: function (itemLayout, selectors) {\n\t            return selectors.rect(itemLayout.brushRect);\n\t        }\n\n\t    });\n\n\t    zrUtil.mixin(CandlestickSeries, whiskerBoxCommon.seriesModelMixin, true);\n\n\t    module.exports = CandlestickSeries;\n\n\n\n/***/ },\n/* 256 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var ChartView = __webpack_require__(42);\n\t    var graphic = __webpack_require__(43);\n\t    var whiskerBoxCommon = __webpack_require__(249);\n\n\t    var CandlestickView = ChartView.extend({\n\n\t        type: 'candlestick',\n\n\t        getStyleUpdater: function () {\n\t            return updateStyle;\n\t        },\n\n\t        dispose: zrUtil.noop\n\t    });\n\n\t    zrUtil.mixin(CandlestickView, whiskerBoxCommon.viewMixin, true);\n\n\t    // Update common properties\n\t    var normalStyleAccessPath = ['itemStyle', 'normal'];\n\t    var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];\n\n\t    function updateStyle(itemGroup, data, idx) {\n\t        var itemModel = data.getItemModel(idx);\n\t        var normalItemStyleModel = itemModel.getModel(normalStyleAccessPath);\n\t        var color = data.getItemVisual(idx, 'color');\n\t        var borderColor = data.getItemVisual(idx, 'borderColor') || color;\n\n\t        // Color must be excluded.\n\t        // Because symbol provide setColor individually to set fill and stroke\n\t        var itemStyle = normalItemStyleModel.getItemStyle(\n\t            ['color', 'color0', 'borderColor', 'borderColor0']\n\t        );\n\n\t        var whiskerEl = itemGroup.childAt(itemGroup.whiskerIndex);\n\t        whiskerEl.useStyle(itemStyle);\n\t        whiskerEl.style.stroke = borderColor;\n\n\t        var bodyEl = itemGroup.childAt(itemGroup.bodyIndex);\n\t        bodyEl.useStyle(itemStyle);\n\t        bodyEl.style.fill = color;\n\t        bodyEl.style.stroke = borderColor;\n\n\t        var hoverStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();\n\t        graphic.setHoverStyle(itemGroup, hoverStyle);\n\t    }\n\n\n\t    module.exports = CandlestickView;\n\n\n\n/***/ },\n/* 257 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    module.exports = function (option) {\n\t        if (!option || !zrUtil.isArray(option.series)) {\n\t            return;\n\t        }\n\n\t        // Translate 'k' to 'candlestick'.\n\t        zrUtil.each(option.series, function (seriesItem) {\n\t            if (zrUtil.isObject(seriesItem) && seriesItem.type === 'k') {\n\t                seriesItem.type = 'candlestick';\n\t            }\n\t        });\n\t    };\n\n\n\n/***/ },\n/* 258 */\n/***/ function(module, exports) {\n\n\t\n\n\t    var positiveBorderColorQuery = ['itemStyle', 'normal', 'borderColor'];\n\t    var negativeBorderColorQuery = ['itemStyle', 'normal', 'borderColor0'];\n\t    var positiveColorQuery = ['itemStyle', 'normal', 'color'];\n\t    var negativeColorQuery = ['itemStyle', 'normal', 'color0'];\n\n\t    module.exports = function (ecModel, api) {\n\n\t        ecModel.eachRawSeriesByType('candlestick', function (seriesModel) {\n\n\t            var data = seriesModel.getData();\n\n\t            data.setVisual({\n\t                legendSymbol: 'roundRect'\n\t            });\n\n\t            // Only visible series has each data be visual encoded\n\t            if (!ecModel.isSeriesFiltered(seriesModel)) {\n\t                data.each(function (idx) {\n\t                    var itemModel = data.getItemModel(idx);\n\t                    var sign = data.getItemLayout(idx).sign;\n\n\t                    data.setItemVisual(\n\t                        idx,\n\t                        {\n\t                            color: itemModel.get(\n\t                                sign > 0 ? positiveColorQuery : negativeColorQuery\n\t                            ),\n\t                            borderColor: itemModel.get(\n\t                                sign > 0 ? positiveBorderColorQuery : negativeBorderColorQuery\n\t                            )\n\t                        }\n\t                    );\n\t                });\n\t            }\n\t        });\n\n\t    };\n\n\n/***/ },\n/* 259 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var retrieve = __webpack_require__(4).retrieve;\n\t    var parsePercent = __webpack_require__(7).parsePercent;\n\n\t    module.exports = function (ecModel) {\n\n\t        ecModel.eachSeriesByType('candlestick', function (seriesModel) {\n\n\t            var coordSys = seriesModel.coordinateSystem;\n\t            var data = seriesModel.getData();\n\t            var dimensions = seriesModel.dimensions;\n\t            var chartLayout = seriesModel.get('layout');\n\n\t            var candleWidth = calculateCandleWidth(seriesModel, data);\n\n\t            data.each(dimensions, function () {\n\t                var args = arguments;\n\t                var dimLen = dimensions.length;\n\t                var axisDimVal = args[0];\n\t                var idx = args[dimLen];\n\t                var variableDim = chartLayout === 'horizontal' ? 0 : 1;\n\t                var constDim = 1 - variableDim;\n\n\t                var openVal = args[1];\n\t                var closeVal = args[2];\n\t                var lowestVal = args[3];\n\t                var highestVal = args[4];\n\n\t                var ocLow = Math.min(openVal, closeVal);\n\t                var ocHigh = Math.max(openVal, closeVal);\n\n\t                var ocLowPoint = getPoint(ocLow);\n\t                var ocHighPoint = getPoint(ocHigh);\n\t                var lowestPoint = getPoint(lowestVal);\n\t                var highestPoint = getPoint(highestVal);\n\n\t                var whiskerEnds = [\n\t                    [highestPoint, ocHighPoint],\n\t                    [lowestPoint, ocLowPoint]\n\t                ];\n\n\t                var bodyEnds = [];\n\t                addBodyEnd(ocHighPoint, 0);\n\t                addBodyEnd(ocLowPoint, 1);\n\n\t                data.setItemLayout(idx, {\n\t                    chartLayout: chartLayout,\n\t                    sign: openVal > closeVal ? -1 : openVal < closeVal ? 1 : 0,\n\t                    initBaseline: openVal > closeVal\n\t                        ? ocHighPoint[constDim] : ocLowPoint[constDim], // open point.\n\t                    bodyEnds: bodyEnds,\n\t                    whiskerEnds: whiskerEnds,\n\t                    brushRect: makeBrushRect()\n\t                });\n\n\t                function getPoint(val) {\n\t                    var p = [];\n\t                    p[variableDim] = axisDimVal;\n\t                    p[constDim] = val;\n\t                    return (isNaN(axisDimVal) || isNaN(val))\n\t                        ? [NaN, NaN]\n\t                        : coordSys.dataToPoint(p);\n\t                }\n\n\t                function addBodyEnd(point, start) {\n\t                    var point1 = point.slice();\n\t                    var point2 = point.slice();\n\t                    point1[variableDim] += candleWidth / 2;\n\t                    point2[variableDim] -= candleWidth / 2;\n\t                    start\n\t                        ? bodyEnds.push(point1, point2)\n\t                        : bodyEnds.push(point2, point1);\n\t                }\n\n\t                function makeBrushRect() {\n\t                    var pmin = getPoint(Math.min(openVal, closeVal, lowestVal, highestVal));\n\t                    var pmax = getPoint(Math.max(openVal, closeVal, lowestVal, highestVal));\n\n\t                    pmin[variableDim] -= candleWidth / 2;\n\t                    pmax[variableDim] -= candleWidth / 2;\n\n\t                    return {\n\t                        x: pmin[0],\n\t                        y: pmin[1],\n\t                        width: constDim ? candleWidth : pmax[0] - pmin[0],\n\t                        height: constDim ? pmax[1] - pmin[1] : candleWidth\n\t                    };\n\t                }\n\n\t            }, true);\n\t        });\n\t    };\n\n\t    function calculateCandleWidth(seriesModel, data) {\n\t        var baseAxis = seriesModel.getBaseAxis();\n\t        var extent;\n\n\t        var bandWidth = baseAxis.type === 'category'\n\t            ? baseAxis.getBandWidth()\n\t            : (\n\t                extent = baseAxis.getExtent(),\n\t                Math.abs(extent[1] - extent[0]) / data.count()\n\t            );\n\n\t        var barMaxWidth = parsePercent(\n\t            retrieve(seriesModel.get('barMaxWidth'), bandWidth),\n\t            bandWidth\n\t        );\n\t        var barMinWidth = parsePercent(\n\t            retrieve(seriesModel.get('barMinWidth'), 1),\n\t            bandWidth\n\t        );\n\t        var barWidth = seriesModel.get('barWidth');\n\t        return barWidth != null\n\t            ? parsePercent(barWidth, bandWidth)\n\t            // Put max outer to ensure bar visible in spite of overlap.\n\t            : Math.max(Math.min(bandWidth / 2, barMaxWidth), barMinWidth);\n\t    }\n\n\n\n/***/ },\n/* 260 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var echarts = __webpack_require__(1);\n\n\t    __webpack_require__(261);\n\t    __webpack_require__(262);\n\n\t    echarts.registerVisual(zrUtil.curry(\n\t        __webpack_require__(110), 'effectScatter', 'circle', null\n\t    ));\n\t    echarts.registerLayout(zrUtil.curry(\n\t        __webpack_require__(111), 'effectScatter'\n\t    ));\n\n\n/***/ },\n/* 261 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var createListFromArray = __webpack_require__(102);\n\t    var SeriesModel = __webpack_require__(28);\n\n\t    module.exports = SeriesModel.extend({\n\n\t        type: 'series.effectScatter',\n\n\t        dependencies: ['grid', 'polar'],\n\n\t        getInitialData: function (option, ecModel) {\n\t            var list = createListFromArray(option.data, this, ecModel);\n\t            return list;\n\t        },\n\n\t        brushSelector: 'point',\n\n\t        defaultOption: {\n\t            coordinateSystem: 'cartesian2d',\n\t            zlevel: 0,\n\t            z: 2,\n\t            legendHoverLink: true,\n\n\t            effectType: 'ripple',\n\n\t            progressive: 0,\n\n\t            // When to show the effect, option: 'render'|'emphasis'\n\t            showEffectOn: 'render',\n\n\t            // Ripple effect config\n\t            rippleEffect: {\n\t                period: 4,\n\t                // Scale of ripple\n\t                scale: 2.5,\n\t                // Brush type can be fill or stroke\n\t                brushType: 'fill'\n\t            },\n\n\t            // Cartesian coordinate system\n\t            // xAxisIndex: 0,\n\t            // yAxisIndex: 0,\n\n\t            // Polar coordinate system\n\t            // polarIndex: 0,\n\n\t            // Geo coordinate system\n\t            // geoIndex: 0,\n\n\t            // symbol: null,        // 图形类型\n\t            symbolSize: 10          // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2\n\t            // symbolRotate: null,  // 图形旋转控制\n\n\t            // large: false,\n\t            // Available when large is true\n\t            // largeThreshold: 2000,\n\n\t            // itemStyle: {\n\t            //     normal: {\n\t            //         opacity: 1\n\t            //     }\n\t            // }\n\t        }\n\n\t    });\n\n\n/***/ },\n/* 262 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var SymbolDraw = __webpack_require__(105);\n\t    var EffectSymbol = __webpack_require__(263);\n\n\t    __webpack_require__(1).extendChartView({\n\n\t        type: 'effectScatter',\n\n\t        init: function () {\n\t            this._symbolDraw = new SymbolDraw(EffectSymbol);\n\t        },\n\n\t        render: function (seriesModel, ecModel, api) {\n\t            var data = seriesModel.getData();\n\t            var effectSymbolDraw = this._symbolDraw;\n\t            effectSymbolDraw.updateData(data);\n\t            this.group.add(effectSymbolDraw.group);\n\t        },\n\n\t        updateLayout: function () {\n\t            this._symbolDraw.updateLayout();\n\t        },\n\n\t        remove: function (ecModel, api) {\n\t            this._symbolDraw && this._symbolDraw.remove(api);\n\t        },\n\n\t        dispose: function () {}\n\t    });\n\n\n/***/ },\n/* 263 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Symbol with ripple effect\n\t * @module echarts/chart/helper/EffectSymbol\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var symbolUtil = __webpack_require__(107);\n\t    var graphic = __webpack_require__(43);\n\t    var numberUtil = __webpack_require__(7);\n\t    var Symbol = __webpack_require__(106);\n\t    var Group = graphic.Group;\n\n\t    var EFFECT_RIPPLE_NUMBER = 3;\n\n\t    function normalizeSymbolSize(symbolSize) {\n\t        if (!zrUtil.isArray(symbolSize)) {\n\t            symbolSize = [+symbolSize, +symbolSize];\n\t        }\n\t        return symbolSize;\n\t    }\n\n\t    function updateRipplePath(rippleGroup, effectCfg) {\n\t        rippleGroup.eachChild(function (ripplePath) {\n\t            ripplePath.attr({\n\t                z: effectCfg.z,\n\t                zlevel: effectCfg.zlevel,\n\t                style: {\n\t                    stroke: effectCfg.brushType === 'stroke' ? effectCfg.color : null,\n\t                    fill: effectCfg.brushType === 'fill' ? effectCfg.color : null\n\t                }\n\t            });\n\t        });\n\t    }\n\t    /**\n\t     * @constructor\n\t     * @param {module:echarts/data/List} data\n\t     * @param {number} idx\n\t     * @extends {module:zrender/graphic/Group}\n\t     */\n\t    function EffectSymbol(data, idx) {\n\t        Group.call(this);\n\n\t        var symbol = new Symbol(data, idx);\n\t        var rippleGroup = new Group();\n\t        this.add(symbol);\n\t        this.add(rippleGroup);\n\n\t        rippleGroup.beforeUpdate = function () {\n\t            this.attr(symbol.getScale());\n\t        };\n\t        this.updateData(data, idx);\n\t    }\n\n\t    var effectSymbolProto = EffectSymbol.prototype;\n\n\t    effectSymbolProto.stopEffectAnimation = function () {\n\t        this.childAt(1).removeAll();\n\t    };\n\n\t    effectSymbolProto.startEffectAnimation = function (effectCfg) {\n\t        var symbolType = effectCfg.symbolType;\n\t        var color = effectCfg.color;\n\t        var rippleGroup = this.childAt(1);\n\n\t        for (var i = 0; i < EFFECT_RIPPLE_NUMBER; i++) {\n\t            // var ripplePath = symbolUtil.createSymbol(\n\t            //     symbolType, -0.5, -0.5, 1, 1, color\n\t            // );\n\t            // If width/height are set too small (e.g., set to 1) on ios10\n\t            // and macOS Sierra, a circle stroke become a rect, no matter what\n\t            // the scale is set. So we set width/height as 2. See #4136.\n\t            var ripplePath = symbolUtil.createSymbol(\n\t                symbolType, -1, -1, 2, 2, color\n\t            );\n\t            ripplePath.attr({\n\t                style: {\n\t                    strokeNoScale: true\n\t                },\n\t                z2: 99,\n\t                silent: true,\n\t                scale: [0.5, 0.5]\n\t            });\n\n\t            var delay = -i / EFFECT_RIPPLE_NUMBER * effectCfg.period + effectCfg.effectOffset;\n\t            // TODO Configurable effectCfg.period\n\t            ripplePath.animate('', true)\n\t                .when(effectCfg.period, {\n\t                    scale: [effectCfg.rippleScale / 2, effectCfg.rippleScale / 2]\n\t                })\n\t                .delay(delay)\n\t                .start();\n\t            ripplePath.animateStyle(true)\n\t                .when(effectCfg.period, {\n\t                    opacity: 0\n\t                })\n\t                .delay(delay)\n\t                .start();\n\n\t            rippleGroup.add(ripplePath);\n\t        }\n\n\t        updateRipplePath(rippleGroup, effectCfg);\n\t    };\n\n\t    /**\n\t     * Update effect symbol\n\t     */\n\t    effectSymbolProto.updateEffectAnimation = function (effectCfg) {\n\t        var oldEffectCfg = this._effectCfg;\n\t        var rippleGroup = this.childAt(1);\n\n\t        // Must reinitialize effect if following configuration changed\n\t        var DIFFICULT_PROPS = ['symbolType', 'period', 'rippleScale'];\n\t        for (var i = 0; i < DIFFICULT_PROPS; i++) {\n\t            var propName = DIFFICULT_PROPS[i];\n\t            if (oldEffectCfg[propName] !== effectCfg[propName]) {\n\t                this.stopEffectAnimation();\n\t                this.startEffectAnimation(effectCfg);\n\t                return;\n\t            }\n\t        }\n\n\t        updateRipplePath(rippleGroup, effectCfg);\n\t    };\n\n\t    /**\n\t     * Highlight symbol\n\t     */\n\t    effectSymbolProto.highlight = function () {\n\t        this.trigger('emphasis');\n\t    };\n\n\t    /**\n\t     * Downplay symbol\n\t     */\n\t    effectSymbolProto.downplay = function () {\n\t        this.trigger('normal');\n\t    };\n\n\t    /**\n\t     * Update symbol properties\n\t     * @param  {module:echarts/data/List} data\n\t     * @param  {number} idx\n\t     */\n\t    effectSymbolProto.updateData = function (data, idx) {\n\t        var seriesModel = data.hostModel;\n\n\t        this.childAt(0).updateData(data, idx);\n\n\t        var rippleGroup = this.childAt(1);\n\t        var itemModel = data.getItemModel(idx);\n\t        var symbolType = data.getItemVisual(idx, 'symbol');\n\t        var symbolSize = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));\n\t        var color = data.getItemVisual(idx, 'color');\n\n\t        rippleGroup.attr('scale', symbolSize);\n\n\t        rippleGroup.traverse(function (ripplePath) {\n\t            ripplePath.attr({\n\t                fill: color\n\t            });\n\t        });\n\n\t        var symbolOffset = itemModel.getShallow('symbolOffset');\n\t        if (symbolOffset) {\n\t            var pos = rippleGroup.position;\n\t            pos[0] = numberUtil.parsePercent(symbolOffset[0], symbolSize[0]);\n\t            pos[1] = numberUtil.parsePercent(symbolOffset[1], symbolSize[1]);\n\t        }\n\t        rippleGroup.rotation = (itemModel.getShallow('symbolRotate') || 0) * Math.PI / 180 || 0;\n\n\t        var effectCfg = {};\n\n\t        effectCfg.showEffectOn = seriesModel.get('showEffectOn');\n\t        effectCfg.rippleScale = itemModel.get('rippleEffect.scale');\n\t        effectCfg.brushType = itemModel.get('rippleEffect.brushType');\n\t        effectCfg.period = itemModel.get('rippleEffect.period') * 1000;\n\t        effectCfg.effectOffset = idx / data.count();\n\t        effectCfg.z = itemModel.getShallow('z') || 0;\n\t        effectCfg.zlevel = itemModel.getShallow('zlevel') || 0;\n\t        effectCfg.symbolType = symbolType;\n\t        effectCfg.color = color;\n\n\t        this.off('mouseover').off('mouseout').off('emphasis').off('normal');\n\n\t        if (effectCfg.showEffectOn === 'render') {\n\t            this._effectCfg\n\t                ? this.updateEffectAnimation(effectCfg)\n\t                : this.startEffectAnimation(effectCfg);\n\n\t            this._effectCfg = effectCfg;\n\t        }\n\t        else {\n\t            // Not keep old effect config\n\t            this._effectCfg = null;\n\n\t            this.stopEffectAnimation();\n\t            var symbol = this.childAt(0);\n\t            var onEmphasis = function () {\n\t                symbol.trigger('emphasis');\n\t                if (effectCfg.showEffectOn !== 'render') {\n\t                    this.startEffectAnimation(effectCfg);\n\t                }\n\t            };\n\t            var onNormal = function () {\n\t                symbol.trigger('normal');\n\t                if (effectCfg.showEffectOn !== 'render') {\n\t                    this.stopEffectAnimation();\n\t                }\n\t            };\n\t            this.on('mouseover', onEmphasis, this)\n\t                .on('mouseout', onNormal, this)\n\t                .on('emphasis', onEmphasis, this)\n\t                .on('normal', onNormal, this);\n\t        }\n\n\t        this._effectCfg = effectCfg;\n\t    };\n\n\t    effectSymbolProto.fadeOut = function (cb) {\n\t        this.off('mouseover').off('mouseout').off('emphasis').off('normal');\n\t        cb && cb();\n\t    };\n\n\t    zrUtil.inherits(EffectSymbol, Group);\n\n\t    module.exports = EffectSymbol;\n\n\n/***/ },\n/* 264 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    __webpack_require__(265);\n\t    __webpack_require__(266);\n\n\t    var echarts = __webpack_require__(1);\n\t    echarts.registerLayout(\n\t        __webpack_require__(271)\n\t    );\n\t    echarts.registerVisual(\n\t        __webpack_require__(272)\n\t    );\n\n\n/***/ },\n/* 265 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var SeriesModel = __webpack_require__(28);\n\t    var List = __webpack_require__(98);\n\t    var zrUtil = __webpack_require__(4);\n\t    var formatUtil = __webpack_require__(6);\n\t    var CoordinateSystem = __webpack_require__(26);\n\n\t    // Convert [ [{coord: []}, {coord: []}] ]\n\t    // to [ { coords: [[]] } ]\n\t    function preprocessOption (seriesOpt) {\n\t        var data = seriesOpt.data;\n\t        if (data && data[0] && data[0][0] && data[0][0].coord) {\n\t            if (true) {\n\t                console.warn('Lines data configuration has been changed to'\n\t                    + ' { coords:[[1,2],[2,3]] }');\n\t            }\n\t            seriesOpt.data = zrUtil.map(data, function (itemOpt) {\n\t                var coords = [\n\t                    itemOpt[0].coord, itemOpt[1].coord\n\t                ];\n\t                var target = {\n\t                    coords: coords\n\t                };\n\t                if (itemOpt[0].name) {\n\t                    target.fromName = itemOpt[0].name;\n\t                }\n\t                if (itemOpt[1].name) {\n\t                    target.toName = itemOpt[1].name;\n\t                }\n\t                return zrUtil.mergeAll([target, itemOpt[0], itemOpt[1]]);\n\t            });\n\t        }\n\t    }\n\n\t    var LinesSeries = SeriesModel.extend({\n\n\t        type: 'series.lines',\n\n\t        dependencies: ['grid', 'polar'],\n\n\t        visualColorAccessPath: 'lineStyle.normal.color',\n\n\t        init: function (option) {\n\t            // Not using preprocessor because mergeOption may not have series.type\n\t            preprocessOption(option);\n\n\t            LinesSeries.superApply(this, 'init', arguments);\n\t        },\n\n\t        mergeOption: function (option) {\n\t            preprocessOption(option);\n\n\t            LinesSeries.superApply(this, 'mergeOption', arguments);\n\t        },\n\n\t        getInitialData: function (option, ecModel) {\n\t            if (true) {\n\t                var CoordSys = CoordinateSystem.get(option.coordinateSystem);\n\t                if (!CoordSys) {\n\t                    throw new Error('Unkown coordinate system ' + option.coordinateSystem);\n\t                }\n\t            }\n\n\t            var lineData = new List(['value'], this);\n\t            lineData.hasItemOption = false;\n\t            lineData.initData(option.data, [], function (dataItem, dimName, dataIndex, dimIndex) {\n\t                // dataItem is simply coords\n\t                if (dataItem instanceof Array) {\n\t                    return NaN;\n\t                }\n\t                else {\n\t                    lineData.hasItemOption = true;\n\t                    var value = dataItem.value;\n\t                    if (value != null) {\n\t                        return value instanceof Array ? value[dimIndex] : value;\n\t                    }\n\t                }\n\t            });\n\n\t            return lineData;\n\t        },\n\n\t        formatTooltip: function (dataIndex) {\n\t            var data = this.getData();\n\t            var itemModel = data.getItemModel(dataIndex);\n\t            var name = itemModel.get('name');\n\t            if (name) {\n\t                return name;\n\t            }\n\t            var fromName = itemModel.get('fromName');\n\t            var toName = itemModel.get('toName');\n\t            var html = [];\n\t            fromName != null && html.push(fromName);\n\t            toName != null && html.push(toName);\n\n\t            return formatUtil.encodeHTML(html.join(' > '));\n\t        },\n\n\t        defaultOption: {\n\t            coordinateSystem: 'geo',\n\t            zlevel: 0,\n\t            z: 2,\n\t            legendHoverLink: true,\n\n\t            hoverAnimation: true,\n\t            // Cartesian coordinate system\n\t            xAxisIndex: 0,\n\t            yAxisIndex: 0,\n\n\t            symbol: ['none', 'none'],\n\t            symbolSize: [10, 10],\n\t            // Geo coordinate system\n\t            geoIndex: 0,\n\n\t            effect: {\n\t                show: false,\n\t                period: 4,\n\t                // Animation delay. support callback\n\t                // delay: 0,\n\t                // If move with constant speed px/sec\n\t                // period will be ignored if this property is > 0,\n\t                constantSpeed: 0,\n\t                symbol: 'circle',\n\t                symbolSize: 3,\n\t                loop: true,\n\t                // Length of trail, 0 - 1\n\t                trailLength: 0.2\n\t                // Same with lineStyle.normal.color\n\t                // color\n\t            },\n\n\t            large: false,\n\t            // Available when large is true\n\t            largeThreshold: 2000,\n\n\t            // If lines are polyline\n\t            // polyline not support curveness, label, animation\n\t            polyline: false,\n\n\t            label: {\n\t                normal: {\n\t                    show: false,\n\t                    position: 'end'\n\t                    // distance: 5,\n\t                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调\n\t                }\n\t            },\n\n\t            lineStyle: {\n\t                normal: {\n\t                    opacity: 0.5\n\t                }\n\t            }\n\t        }\n\t    });\n\n\n/***/ },\n/* 266 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var LineDraw = __webpack_require__(202);\n\t    var EffectLine = __webpack_require__(267);\n\t    var Line = __webpack_require__(203);\n\t    var Polyline = __webpack_require__(268);\n\t    var EffectPolyline = __webpack_require__(269);\n\t    var LargeLineDraw = __webpack_require__(270);\n\n\t    __webpack_require__(1).extendChartView({\n\n\t        type: 'lines',\n\n\t        init: function () {},\n\n\t        render: function (seriesModel, ecModel, api) {\n\t            var data = seriesModel.getData();\n\t            var lineDraw = this._lineDraw;\n\n\t            var hasEffect = seriesModel.get('effect.show');\n\t            var isPolyline = seriesModel.get('polyline');\n\t            var isLarge = seriesModel.get('large') && data.count() >= seriesModel.get('largeThreshold');\n\n\t            if (true) {\n\t                if (hasEffect && isLarge) {\n\t                    console.warn('Large lines not support effect');\n\t                }\n\t            }\n\t            if (hasEffect !== this._hasEffet || isPolyline !== this._isPolyline || isLarge !== this._isLarge) {\n\t                if (lineDraw) {\n\t                    lineDraw.remove();\n\t                }\n\t                lineDraw = this._lineDraw = isLarge\n\t                    ? new LargeLineDraw()\n\t                    : new LineDraw(\n\t                        isPolyline\n\t                            ? (hasEffect ? EffectPolyline : Polyline)\n\t                            : (hasEffect ? EffectLine : Line)\n\t                    );\n\t                this._hasEffet = hasEffect;\n\t                this._isPolyline = isPolyline;\n\t                this._isLarge = isLarge;\n\t            }\n\n\t            var zlevel = seriesModel.get('zlevel');\n\t            var trailLength = seriesModel.get('effect.trailLength');\n\n\t            var zr = api.getZr();\n\t            // Avoid the drag cause ghost shadow\n\t            // FIXME Better way ?\n\t            zr.painter.getLayer(zlevel).clear(true);\n\t            // Config layer with motion blur\n\t            if (this._lastZlevel != null) {\n\t                zr.configLayer(this._lastZlevel, {\n\t                    motionBlur: false\n\t                });\n\t            }\n\t            if (hasEffect && trailLength) {\n\t                if (true) {\n\t                    var notInIndividual = false;\n\t                    ecModel.eachSeries(function (otherSeriesModel) {\n\t                        if (otherSeriesModel !== seriesModel && otherSeriesModel.get('zlevel') === zlevel) {\n\t                            notInIndividual = true;\n\t                        }\n\t                    });\n\t                    notInIndividual && console.warn('Lines with trail effect should have an individual zlevel');\n\t                }\n\n\t                zr.configLayer(zlevel, {\n\t                    motionBlur: true,\n\t                    lastFrameAlpha: Math.max(Math.min(trailLength / 10 + 0.9, 1), 0)\n\t                });\n\t            }\n\n\t            this.group.add(lineDraw.group);\n\n\t            lineDraw.updateData(data);\n\n\t            this._lastZlevel = zlevel;\n\t        },\n\n\t        updateLayout: function (seriesModel, ecModel, api) {\n\t            this._lineDraw.updateLayout(seriesModel);\n\t            // Not use motion when dragging or zooming\n\t            var zr = api.getZr();\n\t            zr.painter.getLayer(this._lastZlevel).clear(true);\n\t        },\n\n\t        remove: function (ecModel, api) {\n\t            this._lineDraw && this._lineDraw.remove(api, true);\n\t        },\n\n\t        dispose: function () {}\n\t    });\n\n\n/***/ },\n/* 267 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Provide effect for line\n\t * @module echarts/chart/helper/EffectLine\n\t */\n\n\n\t    var graphic = __webpack_require__(43);\n\t    var Line = __webpack_require__(203);\n\t    var zrUtil = __webpack_require__(4);\n\t    var symbolUtil = __webpack_require__(107);\n\t    var vec2 = __webpack_require__(10);\n\n\t    var curveUtil = __webpack_require__(50);\n\n\t    /**\n\t     * @constructor\n\t     * @extends {module:zrender/graphic/Group}\n\t     * @alias {module:echarts/chart/helper/Line}\n\t     */\n\t    function EffectLine(lineData, idx, seriesScope) {\n\t        graphic.Group.call(this);\n\n\t        this.add(this.createLine(lineData, idx, seriesScope));\n\n\t        this._updateEffectSymbol(lineData, idx);\n\t    }\n\n\t    var effectLineProto = EffectLine.prototype;\n\n\t    effectLineProto.createLine = function (lineData, idx, seriesScope) {\n\t        return new Line(lineData, idx, seriesScope);\n\t    };\n\n\t    effectLineProto._updateEffectSymbol = function (lineData, idx) {\n\t        var itemModel = lineData.getItemModel(idx);\n\t        var effectModel = itemModel.getModel('effect');\n\t        var size = effectModel.get('symbolSize');\n\t        var symbolType = effectModel.get('symbol');\n\t        if (!zrUtil.isArray(size)) {\n\t            size = [size, size];\n\t        }\n\t        var color = effectModel.get('color') || lineData.getItemVisual(idx, 'color');\n\t        var symbol = this.childAt(1);\n\n\t        if (this._symbolType !== symbolType) {\n\t            // Remove previous\n\t            this.remove(symbol);\n\n\t            symbol = symbolUtil.createSymbol(\n\t                symbolType, -0.5, -0.5, 1, 1, color\n\t            );\n\t            symbol.z2 = 100;\n\t            symbol.culling = true;\n\n\t            this.add(symbol);\n\t        }\n\n\t        // Symbol may be removed if loop is false\n\t        if (!symbol) {\n\t            return;\n\t        }\n\n\t        // Shadow color is same with color in default\n\t        symbol.setStyle('shadowColor', color);\n\t        symbol.setStyle(effectModel.getItemStyle(['color']));\n\n\t        symbol.attr('scale', size);\n\n\t        symbol.setColor(color);\n\t        symbol.attr('scale', size);\n\n\t        this._symbolType = symbolType;\n\n\t        this._updateEffectAnimation(lineData, effectModel, idx);\n\t    };\n\n\t    effectLineProto._updateEffectAnimation = function (lineData, effectModel, idx) {\n\n\t        var symbol = this.childAt(1);\n\t        if (!symbol) {\n\t            return;\n\t        }\n\n\t        var self = this;\n\n\t        var points = lineData.getItemLayout(idx);\n\n\t        var period = effectModel.get('period') * 1000;\n\t        var loop = effectModel.get('loop');\n\t        var constantSpeed = effectModel.get('constantSpeed');\n\t        var delayExpr = zrUtil.retrieve(effectModel.get('delay'), function (idx) {\n\t            return idx / lineData.count() * period / 3;\n\t        });\n\t        var isDelayFunc = typeof delayExpr === 'function';\n\n\t        // Ignore when updating\n\t        symbol.ignore = true;\n\n\t        this.updateAnimationPoints(symbol, points);\n\n\t        if (constantSpeed > 0) {\n\t            period = this.getLineLength(symbol) / constantSpeed * 1000;\n\t        }\n\n\t        if (period !== this._period || loop !== this._loop) {\n\n\t            symbol.stopAnimation();\n\n\t            var delay = delayExpr;\n\t            if (isDelayFunc) {\n\t                delay = delayExpr(idx);\n\t            }\n\t            if (symbol.__t > 0) {\n\t                delay = -period * symbol.__t;\n\t            }\n\t            symbol.__t = 0;\n\t            var animator = symbol.animate('', loop)\n\t                .when(period, {\n\t                    __t: 1\n\t                })\n\t                .delay(delay)\n\t                .during(function () {\n\t                    self.updateSymbolPosition(symbol);\n\t                });\n\t            if (!loop) {\n\t                animator.done(function () {\n\t                    self.remove(symbol);\n\t                });\n\t            }\n\t            animator.start();\n\t        }\n\n\t        this._period = period;\n\t        this._loop = loop;\n\t    };\n\n\t    effectLineProto.getLineLength = function (symbol) {\n\t        // Not so accurate\n\t        return (vec2.dist(symbol.__p1, symbol.__cp1)\n\t            + vec2.dist(symbol.__cp1, symbol.__p2));\n\t    };\n\n\t    effectLineProto.updateAnimationPoints = function (symbol, points) {\n\t        symbol.__p1 = points[0];\n\t        symbol.__p2 = points[1];\n\t        symbol.__cp1 = points[2] || [\n\t            (points[0][0] + points[1][0]) / 2,\n\t            (points[0][1] + points[1][1]) / 2\n\t        ];\n\t    };\n\n\t    effectLineProto.updateData = function (lineData, idx, seriesScope) {\n\t        this.childAt(0).updateData(lineData, idx, seriesScope);\n\t        this._updateEffectSymbol(lineData, idx);\n\t    };\n\n\t    effectLineProto.updateSymbolPosition = function (symbol) {\n\t        var p1 = symbol.__p1;\n\t        var p2 = symbol.__p2;\n\t        var cp1 = symbol.__cp1;\n\t        var t = symbol.__t;\n\t        var pos = symbol.position;\n\t        var quadraticAt = curveUtil.quadraticAt;\n\t        var quadraticDerivativeAt = curveUtil.quadraticDerivativeAt;\n\t        pos[0] = quadraticAt(p1[0], cp1[0], p2[0], t);\n\t        pos[1] = quadraticAt(p1[1], cp1[1], p2[1], t);\n\n\t        // Tangent\n\t        var tx = quadraticDerivativeAt(p1[0], cp1[0], p2[0], t);\n\t        var ty = quadraticDerivativeAt(p1[1], cp1[1], p2[1], t);\n\n\t        symbol.rotation = -Math.atan2(ty, tx) - Math.PI / 2;\n\n\t        symbol.ignore = false;\n\t    };\n\n\n\t    effectLineProto.updateLayout = function (lineData, idx) {\n\t        this.childAt(0).updateLayout(lineData, idx);\n\n\t        var effectModel = lineData.getItemModel(idx).getModel('effect');\n\t        this._updateEffectAnimation(lineData, effectModel, idx);\n\t    };\n\n\t    zrUtil.inherits(EffectLine, graphic.Group);\n\n\t    module.exports = EffectLine;\n\n\n/***/ },\n/* 268 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @module echarts/chart/helper/Line\n\t */\n\n\n\t    var graphic = __webpack_require__(43);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    /**\n\t     * @constructor\n\t     * @extends {module:zrender/graphic/Group}\n\t     * @alias {module:echarts/chart/helper/Polyline}\n\t     */\n\t    function Polyline(lineData, idx, seriesScope) {\n\t        graphic.Group.call(this);\n\n\t        this._createPolyline(lineData, idx, seriesScope);\n\t    }\n\n\t    var polylineProto = Polyline.prototype;\n\n\t    polylineProto._createPolyline = function (lineData, idx, seriesScope) {\n\t        // var seriesModel = lineData.hostModel;\n\t        var points = lineData.getItemLayout(idx);\n\n\t        var line = new graphic.Polyline({\n\t            shape: {\n\t                points: points\n\t            }\n\t        });\n\n\t        this.add(line);\n\n\t        this._updateCommonStl(lineData, idx, seriesScope);\n\t    };\n\n\t    polylineProto.updateData = function (lineData, idx, seriesScope) {\n\t        var seriesModel = lineData.hostModel;\n\n\t        var line = this.childAt(0);\n\t        var target = {\n\t            shape: {\n\t                points: lineData.getItemLayout(idx)\n\t            }\n\t        };\n\t        graphic.updateProps(line, target, seriesModel, idx);\n\n\t        this._updateCommonStl(lineData, idx, seriesScope);\n\t    };\n\n\t    polylineProto._updateCommonStl = function (lineData, idx, seriesScope) {\n\t        var line = this.childAt(0);\n\t        var itemModel = lineData.getItemModel(idx);\n\n\t        var visualColor = lineData.getItemVisual(idx, 'color');\n\n\t        var lineStyle = seriesScope && seriesScope.lineStyle;\n\t        var hoverLineStyle = seriesScope && seriesScope.hoverLineStyle;\n\n\t        if (!seriesScope || lineData.hasItemOption) {\n\t            lineStyle = itemModel.getModel('lineStyle.normal').getLineStyle();\n\t            hoverLineStyle = itemModel.getModel('lineStyle.emphasis').getLineStyle();\n\t        }\n\t        line.useStyle(zrUtil.defaults(\n\t            {\n\t                strokeNoScale: true,\n\t                fill: 'none',\n\t                stroke: visualColor\n\t            },\n\t            lineStyle\n\t        ));\n\t        line.hoverStyle = hoverLineStyle;\n\n\t        graphic.setHoverStyle(this);\n\t    };\n\n\t    polylineProto.updateLayout = function (lineData, idx) {\n\t        var polyline = this.childAt(0);\n\t        polyline.setShape('points', lineData.getItemLayout(idx));\n\t    };\n\n\t    zrUtil.inherits(Polyline, graphic.Group);\n\n\t    module.exports = Polyline;\n\n\n/***/ },\n/* 269 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Provide effect for line\n\t * @module echarts/chart/helper/EffectLine\n\t */\n\n\n\t    var Polyline = __webpack_require__(268);\n\t    var zrUtil = __webpack_require__(4);\n\t    var EffectLine = __webpack_require__(267);\n\t    var vec2 = __webpack_require__(10);\n\n\t    /**\n\t     * @constructor\n\t     * @extends {module:echarts/chart/helper/EffectLine}\n\t     * @alias {module:echarts/chart/helper/Polyline}\n\t     */\n\t    function EffectPolyline(lineData, idx, seriesScope) {\n\t        EffectLine.call(this, lineData, idx, seriesScope);\n\t        this._lastFrame = 0;\n\t        this._lastFramePercent = 0;\n\t    }\n\n\t    var effectPolylineProto = EffectPolyline.prototype;\n\n\t    // Overwrite\n\t    effectPolylineProto.createLine = function (lineData, idx, seriesScope) {\n\t        return new Polyline(lineData, idx, seriesScope);\n\t    };\n\n\t    // Overwrite\n\t    effectPolylineProto.updateAnimationPoints = function (symbol, points) {\n\t        this._points = points;\n\t        var accLenArr = [0];\n\t        var len = 0;\n\t        for (var i = 1; i < points.length; i++) {\n\t            var p1 = points[i - 1];\n\t            var p2 = points[i];\n\t            len += vec2.dist(p1, p2);\n\t            accLenArr.push(len);\n\t        }\n\t        if (len === 0) {\n\t            return;\n\t        }\n\n\t        for (var i = 0; i < accLenArr.length; i++) {\n\t            accLenArr[i] /= len;\n\t        }\n\t        this._offsets = accLenArr;\n\t        this._length = len;\n\t    };\n\n\t    // Overwrite\n\t    effectPolylineProto.getLineLength = function (symbol) {\n\t        return this._length;\n\t    };\n\n\t    // Overwrite\n\t    effectPolylineProto.updateSymbolPosition = function (symbol) {\n\t        var t = symbol.__t;\n\t        var points = this._points;\n\t        var offsets = this._offsets;\n\t        var len = points.length;\n\n\t        if (!offsets) {\n\t            // Has length 0\n\t            return;\n\t        }\n\n\t        var lastFrame = this._lastFrame;\n\t        var frame;\n\n\t        if (t < this._lastFramePercent) {\n\t            // Start from the next frame\n\t            // PENDING start from lastFrame ?\n\t            var start = Math.min(lastFrame + 1, len - 1);\n\t            for (frame = start; frame >= 0; frame--) {\n\t                if (offsets[frame] <= t) {\n\t                    break;\n\t                }\n\t            }\n\t            // PENDING really need to do this ?\n\t            frame = Math.min(frame, len - 2);\n\t        }\n\t        else {\n\t            for (var frame = lastFrame; frame < len; frame++) {\n\t                if (offsets[frame] > t) {\n\t                    break;\n\t                }\n\t            }\n\t            frame = Math.min(frame - 1, len - 2);\n\t        }\n\n\t        vec2.lerp(\n\t            symbol.position, points[frame], points[frame + 1],\n\t            (t - offsets[frame]) / (offsets[frame + 1] - offsets[frame])\n\t        );\n\n\t        var tx = points[frame + 1][0] - points[frame][0];\n\t        var ty = points[frame + 1][1] - points[frame][1];\n\t        symbol.rotation = -Math.atan2(ty, tx) - Math.PI / 2;\n\n\t        this._lastFrame = frame;\n\t        this._lastFramePercent = t;\n\n\t        symbol.ignore = false;\n\t    };\n\n\t    zrUtil.inherits(EffectPolyline, EffectLine);\n\n\t    module.exports = EffectPolyline;\n\n\n/***/ },\n/* 270 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// TODO Batch by color\n\n\n\n\t    var graphic = __webpack_require__(43);\n\n\t    var quadraticContain = __webpack_require__(55);\n\t    var lineContain = __webpack_require__(53);\n\n\t    var LargeLineShape = graphic.extendShape({\n\t        shape: {\n\t            polyline: false,\n\n\t            segs: []\n\t        },\n\n\t        buildPath: function (path, shape) {\n\t            var segs = shape.segs;\n\t            var isPolyline = shape.polyline;\n\n\t            for (var i = 0; i < segs.length; i++) {\n\t                var seg = segs[i];\n\t                if (isPolyline) {\n\t                    path.moveTo(seg[0][0], seg[0][1]);\n\t                    for (var j = 1; j < seg.length; j++) {\n\t                        path.lineTo(seg[j][0], seg[j][1]);\n\t                    }\n\t                }\n\t                else {\n\t                    path.moveTo(seg[0][0], seg[0][1]);\n\t                    if (seg.length > 2) {\n\t                        path.quadraticCurveTo(seg[2][0], seg[2][1], seg[1][0], seg[1][1]);\n\t                    }\n\t                    else {\n\t                        path.lineTo(seg[1][0], seg[1][1]);\n\t                    }\n\t                }\n\t            }\n\t        },\n\n\t        findDataIndex: function (x, y) {\n\t            var shape = this.shape;\n\t            var segs = shape.segs;\n\t            var isPolyline = shape.polyline;\n\t            var lineWidth = Math.max(this.style.lineWidth, 1);\n\n\t            // Not consider transform\n\t            for (var i = 0; i < segs.length; i++) {\n\t                var seg = segs[i];\n\t                if (isPolyline) {\n\t                    for (var j = 1; j < seg.length; j++) {\n\t                        if (lineContain.containStroke(\n\t                            seg[j - 1][0], seg[j - 1][1], seg[j][0], seg[j][1], lineWidth, x, y\n\t                        )) {\n\t                            return i;\n\t                        }\n\t                    }\n\t                }\n\t                else {\n\t                    if (seg.length > 2) {\n\t                        if (quadraticContain.containStroke(\n\t                            seg[0][0], seg[0][1], seg[2][0], seg[2][1], seg[1][0], seg[1][1], lineWidth, x, y\n\t                        )) {\n\t                            return i;\n\t                        }\n\t                    }\n\t                    else {\n\t                        if (lineContain.containStroke(\n\t                            seg[0][0], seg[0][1], seg[1][0], seg[1][1], lineWidth, x, y\n\t                        )) {\n\t                            return i;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\n\t            return -1;\n\t        }\n\t    });\n\n\t    function LargeLineDraw() {\n\t        this.group = new graphic.Group();\n\n\t        this._lineEl = new LargeLineShape();\n\t    }\n\n\t    var largeLineProto = LargeLineDraw.prototype;\n\n\t    /**\n\t     * Update symbols draw by new data\n\t     * @param {module:echarts/data/List} data\n\t     */\n\t    largeLineProto.updateData = function (data) {\n\t        this.group.removeAll();\n\n\t        var lineEl = this._lineEl;\n\n\t        var seriesModel = data.hostModel;\n\n\t        lineEl.setShape({\n\t            segs: data.mapArray(data.getItemLayout),\n\t            polyline: seriesModel.get('polyline')\n\t        });\n\n\t        lineEl.useStyle(\n\t            seriesModel.getModel('lineStyle.normal').getLineStyle()\n\t        );\n\n\t        var visualColor = data.getVisual('color');\n\t        if (visualColor) {\n\t            lineEl.setStyle('stroke', visualColor);\n\t        }\n\t        lineEl.setStyle('fill');\n\n\t        // Enable tooltip\n\t        // PENDING May have performance issue when path is extremely large\n\t        lineEl.seriesIndex = seriesModel.seriesIndex;\n\t        lineEl.on('mousemove', function (e) {\n\t            lineEl.dataIndex = null;\n\t            var dataIndex = lineEl.findDataIndex(e.offsetX, e.offsetY);\n\t            if (dataIndex > 0) {\n\t                // Provide dataIndex for tooltip\n\t                lineEl.dataIndex = dataIndex;\n\t            }\n\t        });\n\n\t        // Add back\n\t        this.group.add(lineEl);\n\t    };\n\n\t    largeLineProto.updateLayout = function (seriesModel) {\n\t        var data = seriesModel.getData();\n\t        this._lineEl.setShape({\n\t            segs: data.mapArray(data.getItemLayout)\n\t        });\n\t    };\n\n\t    largeLineProto.remove = function () {\n\t        this.group.removeAll();\n\t    };\n\n\t    module.exports = LargeLineDraw;\n\n\n/***/ },\n/* 271 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    module.exports = function (ecModel) {\n\t        ecModel.eachSeriesByType('lines', function (seriesModel) {\n\t            var coordSys = seriesModel.coordinateSystem;\n\t            var lineData = seriesModel.getData();\n\n\t            // FIXME Use data dimensions ?\n\t            lineData.each(function (idx) {\n\t                var itemModel = lineData.getItemModel(idx);\n\t                // TODO Support pure array\n\t                var coords = (itemModel.option instanceof Array) ?\n\t                    itemModel.option : itemModel.get('coords');\n\n\t                if (true) {\n\t                    if (!(coords instanceof Array && coords.length > 0 && coords[0] instanceof Array)) {\n\t                        throw new Error('Invalid coords ' + JSON.stringify(coords) + '. Lines must have 2d coords array in data item.');\n\t                    }\n\t                }\n\t                var pts = [];\n\n\t                if (seriesModel.get('polyline')) {\n\t                    for (var i = 0; i < coords.length; i++) {\n\t                        pts.push(coordSys.dataToPoint(coords[i]));\n\t                    }\n\t                }\n\t                else {\n\t                    pts[0] = coordSys.dataToPoint(coords[0]);\n\t                    pts[1] = coordSys.dataToPoint(coords[1]);\n\n\t                    var curveness = itemModel.get('lineStyle.normal.curveness');\n\t                    if (+curveness) {\n\t                        pts[2] = [\n\t                            (pts[0][0] + pts[1][0]) / 2 - (pts[0][1] - pts[1][1]) * curveness,\n\t                            (pts[0][1] + pts[1][1]) / 2 - (pts[1][0] - pts[0][0]) * curveness\n\t                        ];\n\t                    }\n\t                }\n\t                lineData.setItemLayout(idx, pts);\n\t            });\n\t        });\n\t    };\n\n\n/***/ },\n/* 272 */\n/***/ function(module, exports) {\n\n\t\n\n\t    function normalize(a) {\n\t        if (!(a instanceof Array)) {\n\t            a = [a, a];\n\t        }\n\t        return a;\n\t    }\n\t    module.exports = function (ecModel) {\n\t        ecModel.eachSeriesByType('lines', function (seriesModel) {\n\t            var data = seriesModel.getData();\n\t            var symbolType = normalize(seriesModel.get('symbol'));\n\t            var symbolSize = normalize(seriesModel.get('symbolSize'));\n\n\t            var opacityQuery = 'lineStyle.normal.opacity'.split('.');\n\n\t            data.setVisual('fromSymbol', symbolType && symbolType[0]);\n\t            data.setVisual('toSymbol', symbolType && symbolType[1]);\n\t            data.setVisual('fromSymbolSize', symbolSize && symbolSize[0]);\n\t            data.setVisual('toSymbolSize', symbolSize && symbolSize[1]);\n\t            data.setVisual('opacity', seriesModel.get(opacityQuery));\n\n\t            data.each(function (idx) {\n\t                var itemModel = data.getItemModel(idx);\n\t                var symbolType = normalize(itemModel.getShallow('symbol', true));\n\t                var symbolSize = normalize(itemModel.getShallow('symbolSize', true));\n\t                var opacity = itemModel.get(opacityQuery);\n\n\t                symbolType[0] && data.setItemVisual(idx, 'fromSymbol', symbolType[0]);\n\t                symbolType[1] && data.setItemVisual(idx, 'toSymbol', symbolType[1]);\n\t                symbolSize[0] && data.setItemVisual(idx, 'fromSymbolSize', symbolSize[0]);\n\t                symbolSize[1] && data.setItemVisual(idx, 'toSymbolSize', symbolSize[1]);\n\n\t                data.setItemVisual(idx, 'opacity', opacity);\n\t            });\n\t        });\n\t    };\n\n\n/***/ },\n/* 273 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    __webpack_require__(274);\n\t    __webpack_require__(275);\n\n\n/***/ },\n/* 274 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var SeriesModel = __webpack_require__(28);\n\t    var createListFromArray = __webpack_require__(102);\n\n\t    module.exports = SeriesModel.extend({\n\t        type: 'series.heatmap',\n\n\t        getInitialData: function (option, ecModel) {\n\t            return createListFromArray(option.data, this, ecModel);\n\t        },\n\n\t        defaultOption: {\n\n\t            // Cartesian2D or geo\n\t            coordinateSystem: 'cartesian2d',\n\n\t            zlevel: 0,\n\n\t            z: 2,\n\n\t            // Cartesian coordinate system\n\t            // xAxisIndex: 0,\n\t            // yAxisIndex: 0,\n\n\t            // Geo coordinate system\n\t            geoIndex: 0,\n\n\t            blurSize: 30,\n\n\t            pointSize: 20,\n\n\t            maxOpacity: 1,\n\n\t            minOpacity: 0\n\t        }\n\t    });\n\n\n/***/ },\n/* 275 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var graphic = __webpack_require__(43);\n\t    var HeatmapLayer = __webpack_require__(276);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    function getIsInPiecewiseRange(dataExtent, pieceList, selected) {\n\t        var dataSpan = dataExtent[1] - dataExtent[0];\n\t        pieceList = zrUtil.map(pieceList, function (piece) {\n\t            return {\n\t                interval: [\n\t                    (piece.interval[0] - dataExtent[0]) / dataSpan,\n\t                    (piece.interval[1] - dataExtent[0]) / dataSpan\n\t                ]\n\t            };\n\t        });\n\t        var len = pieceList.length;\n\t        var lastIndex = 0;\n\t        return function (val) {\n\t            // Try to find in the location of the last found\n\t            for (var i = lastIndex; i < len; i++) {\n\t                var interval = pieceList[i].interval;\n\t                if (interval[0] <= val && val <= interval[1]) {\n\t                    lastIndex = i;\n\t                    break;\n\t                }\n\t            }\n\t            if (i === len) { // Not found, back interation\n\t                for (var i = lastIndex - 1; i >= 0; i--) {\n\t                    var interval = pieceList[i].interval;\n\t                    if (interval[0] <= val && val <= interval[1]) {\n\t                        lastIndex = i;\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            return i >= 0 && i < len && selected[i];\n\t        };\n\t    }\n\n\t    function getIsInContinuousRange(dataExtent, range) {\n\t        var dataSpan = dataExtent[1] - dataExtent[0];\n\t        range = [\n\t            (range[0] - dataExtent[0]) / dataSpan,\n\t            (range[1] - dataExtent[0]) / dataSpan\n\t        ];\n\t        return function (val) {\n\t            return val >= range[0] && val <= range[1];\n\t        };\n\t    }\n\n\t    function isGeoCoordSys(coordSys) {\n\t        var dimensions = coordSys.dimensions;\n\t        // Not use coorSys.type === 'geo' because coordSys maybe extended\n\t        return dimensions[0] === 'lng' && dimensions[1] === 'lat';\n\t    }\n\n\t    module.exports = __webpack_require__(1).extendChartView({\n\n\t        type: 'heatmap',\n\n\t        render: function (seriesModel, ecModel, api) {\n\t            var visualMapOfThisSeries;\n\t            ecModel.eachComponent('visualMap', function (visualMap) {\n\t                visualMap.eachTargetSeries(function (targetSeries) {\n\t                    if (targetSeries === seriesModel) {\n\t                        visualMapOfThisSeries = visualMap;\n\t                    }\n\t                });\n\t            });\n\n\t            if (true) {\n\t                if (!visualMapOfThisSeries) {\n\t                    throw new Error('Heatmap must use with visualMap');\n\t                }\n\t            }\n\n\t            this.group.removeAll();\n\t            var coordSys = seriesModel.coordinateSystem;\n\t            if (coordSys.type === 'cartesian2d') {\n\t                this._renderOnCartesian(coordSys, seriesModel, api);\n\t            }\n\t            else if (isGeoCoordSys(coordSys)) {\n\t                this._renderOnGeo(\n\t                    coordSys, seriesModel, visualMapOfThisSeries, api\n\t                );\n\t            }\n\t        },\n\n\t        dispose: function () {},\n\n\t        _renderOnCartesian: function (cartesian, seriesModel, api) {\n\t            var xAxis = cartesian.getAxis('x');\n\t            var yAxis = cartesian.getAxis('y');\n\t            var group = this.group;\n\n\t            if (true) {\n\t                if (!(xAxis.type === 'category' && yAxis.type === 'category')) {\n\t                    throw new Error('Heatmap on cartesian must have two category axes');\n\t                }\n\t                if (!(xAxis.onBand && yAxis.onBand)) {\n\t                    throw new Error('Heatmap on cartesian must have two axes with boundaryGap true');\n\t                }\n\t            }\n\n\t            var width = xAxis.getBandWidth();\n\t            var height = yAxis.getBandWidth();\n\n\t            var data = seriesModel.getData();\n\n\t            var itemStyleQuery = 'itemStyle.normal';\n\t            var hoverItemStyleQuery = 'itemStyle.emphasis';\n\t            var labelQuery = 'label.normal';\n\t            var hoverLabelQuery = 'label.emphasis';\n\t            var style = seriesModel.getModel(itemStyleQuery).getItemStyle(['color']);\n\t            var hoverStl = seriesModel.getModel(hoverItemStyleQuery).getItemStyle();\n\t            var labelModel = seriesModel.getModel('label.normal');\n\t            var hoverLabelModel = seriesModel.getModel('label.emphasis');\n\n\t            data.each(['x', 'y', 'z'], function (x, y, z, idx) {\n\t                var itemModel = data.getItemModel(idx);\n\t                var point = cartesian.dataToPoint([x, y]);\n\t                // Ignore empty data\n\t                if (isNaN(z)) {\n\t                    return;\n\t                }\n\t                var rect = new graphic.Rect({\n\t                    shape: {\n\t                        x: point[0] - width / 2,\n\t                        y: point[1] - height / 2,\n\t                        width: width,\n\t                        height: height\n\t                    },\n\t                    style: {\n\t                        fill: data.getItemVisual(idx, 'color'),\n\t                        opacity: data.getItemVisual(idx, 'opacity')\n\t                    }\n\t                });\n\t                // Optimization for large datset\n\t                if (data.hasItemOption) {\n\t                    style = itemModel.getModel(itemStyleQuery).getItemStyle(['color']);\n\t                    hoverStl = itemModel.getModel(hoverItemStyleQuery).getItemStyle();\n\t                    labelModel = itemModel.getModel(labelQuery);\n\t                    hoverLabelModel = itemModel.getModel(hoverLabelQuery);\n\t                }\n\n\t                var rawValue = seriesModel.getRawValue(idx);\n\t                var defaultText = '-';\n\t                if (rawValue && rawValue[2] != null) {\n\t                    defaultText = rawValue[2];\n\t                }\n\t                if (labelModel.getShallow('show')) {\n\t                    graphic.setText(style, labelModel);\n\t                    style.text = seriesModel.getFormattedLabel(idx, 'normal') || defaultText;\n\t                }\n\t                if (hoverLabelModel.getShallow('show')) {\n\t                    graphic.setText(hoverStl, hoverLabelModel);\n\t                    hoverStl.text = seriesModel.getFormattedLabel(idx, 'emphasis') || defaultText;\n\t                }\n\n\t                rect.setStyle(style);\n\n\t                graphic.setHoverStyle(rect, data.hasItemOption ? hoverStl : zrUtil.extend({}, hoverStl));\n\n\t                group.add(rect);\n\t                data.setItemGraphicEl(idx, rect);\n\t            });\n\t        },\n\n\t        _renderOnGeo: function (geo, seriesModel, visualMapModel, api) {\n\t            var inRangeVisuals = visualMapModel.targetVisuals.inRange;\n\t            var outOfRangeVisuals = visualMapModel.targetVisuals.outOfRange;\n\t            // if (!visualMapping) {\n\t            //     throw new Error('Data range must have color visuals');\n\t            // }\n\n\t            var data = seriesModel.getData();\n\t            var hmLayer = this._hmLayer || (this._hmLayer || new HeatmapLayer());\n\t            hmLayer.blurSize = seriesModel.get('blurSize');\n\t            hmLayer.pointSize = seriesModel.get('pointSize');\n\t            hmLayer.minOpacity = seriesModel.get('minOpacity');\n\t            hmLayer.maxOpacity = seriesModel.get('maxOpacity');\n\n\t            var rect = geo.getViewRect().clone();\n\t            var roamTransform = geo.getRoamTransform().transform;\n\t            rect.applyTransform(roamTransform);\n\n\t            // Clamp on viewport\n\t            var x = Math.max(rect.x, 0);\n\t            var y = Math.max(rect.y, 0);\n\t            var x2 = Math.min(rect.width + rect.x, api.getWidth());\n\t            var y2 = Math.min(rect.height + rect.y, api.getHeight());\n\t            var width = x2 - x;\n\t            var height = y2 - y;\n\n\t            var points = data.mapArray(['lng', 'lat', 'value'], function (lng, lat, value) {\n\t                var pt = geo.dataToPoint([lng, lat]);\n\t                pt[0] -= x;\n\t                pt[1] -= y;\n\t                pt.push(value);\n\t                return pt;\n\t            });\n\n\t            var dataExtent = visualMapModel.getExtent();\n\t            var isInRange = visualMapModel.type === 'visualMap.continuous'\n\t                ? getIsInContinuousRange(dataExtent, visualMapModel.option.range)\n\t                : getIsInPiecewiseRange(\n\t                    dataExtent, visualMapModel.getPieceList(), visualMapModel.option.selected\n\t                );\n\n\t            hmLayer.update(\n\t                points, width, height,\n\t                inRangeVisuals.color.getNormalizer(),\n\t                {\n\t                    inRange: inRangeVisuals.color.getColorMapper(),\n\t                    outOfRange: outOfRangeVisuals.color.getColorMapper()\n\t                },\n\t                isInRange\n\t            );\n\t            var img = new graphic.Image({\n\t                style: {\n\t                    width: width,\n\t                    height: height,\n\t                    x: x,\n\t                    y: y,\n\t                    image: hmLayer.canvas\n\t                },\n\t                silent: true\n\t            });\n\t            this.group.add(img);\n\t        }\n\t    });\n\n\n/***/ },\n/* 276 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file defines echarts Heatmap Chart\n\t * @author Ovilia (me@zhangwenli.com)\n\t * Inspired by https://github.com/mourner/simpleheat\n\t *\n\t * @module\n\t */\n\n\n\t    var GRADIENT_LEVELS = 256;\n\t    var zrUtil = __webpack_require__(4);\n\n\t    /**\n\t     * Heatmap Chart\n\t     *\n\t     * @class\n\t     */\n\t    function Heatmap() {\n\t        var canvas = zrUtil.createCanvas();\n\t        this.canvas = canvas;\n\n\t        this.blurSize = 30;\n\t        this.pointSize = 20;\n\n\t        this.maxOpacity = 1;\n\t        this.minOpacity = 0;\n\n\t        this._gradientPixels = {};\n\t    }\n\n\t    Heatmap.prototype = {\n\t        /**\n\t         * Renders Heatmap and returns the rendered canvas\n\t         * @param {Array} data array of data, each has x, y, value\n\t         * @param {number} width canvas width\n\t         * @param {number} height canvas height\n\t         */\n\t        update: function(data, width, height, normalize, colorFunc, isInRange) {\n\t            var brush = this._getBrush();\n\t            var gradientInRange = this._getGradient(data, colorFunc, 'inRange');\n\t            var gradientOutOfRange = this._getGradient(data, colorFunc, 'outOfRange');\n\t            var r = this.pointSize + this.blurSize;\n\n\t            var canvas = this.canvas;\n\t            var ctx = canvas.getContext('2d');\n\t            var len = data.length;\n\t            canvas.width = width;\n\t            canvas.height = height;\n\t            for (var i = 0; i < len; ++i) {\n\t                var p = data[i];\n\t                var x = p[0];\n\t                var y = p[1];\n\t                var value = p[2];\n\n\t                // calculate alpha using value\n\t                var alpha = normalize(value);\n\n\t                // draw with the circle brush with alpha\n\t                ctx.globalAlpha = alpha;\n\t                ctx.drawImage(brush, x - r, y - r);\n\t            }\n\n\t            // colorize the canvas using alpha value and set with gradient\n\t            var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\t            var pixels = imageData.data;\n\t            var offset = 0;\n\t            var pixelLen = pixels.length;\n\t            var minOpacity = this.minOpacity;\n\t            var maxOpacity = this.maxOpacity;\n\t            var diffOpacity = maxOpacity - minOpacity;\n\n\t            while(offset < pixelLen) {\n\t                var alpha = pixels[offset + 3] / 256;\n\t                var gradientOffset = Math.floor(alpha * (GRADIENT_LEVELS - 1)) * 4;\n\t                // Simple optimize to ignore the empty data\n\t                if (alpha > 0) {\n\t                    var gradient = isInRange(alpha) ? gradientInRange : gradientOutOfRange;\n\t                    // Any alpha > 0 will be mapped to [minOpacity, maxOpacity]\n\t                    alpha > 0 && (alpha = alpha * diffOpacity + minOpacity);\n\t                    pixels[offset++] = gradient[gradientOffset];\n\t                    pixels[offset++] = gradient[gradientOffset + 1];\n\t                    pixels[offset++] = gradient[gradientOffset + 2];\n\t                    pixels[offset++] = gradient[gradientOffset + 3] * alpha * 256;\n\t                }\n\t                else {\n\t                    offset += 4;\n\t                }\n\t            }\n\t            ctx.putImageData(imageData, 0, 0);\n\n\t            return canvas;\n\t        },\n\n\t        /**\n\t         * get canvas of a black circle brush used for canvas to draw later\n\t         * @private\n\t         * @returns {Object} circle brush canvas\n\t         */\n\t        _getBrush: function() {\n\t            var brushCanvas = this._brushCanvas || (this._brushCanvas = zrUtil.createCanvas());\n\t            // set brush size\n\t            var r = this.pointSize + this.blurSize;\n\t            var d = r * 2;\n\t            brushCanvas.width = d;\n\t            brushCanvas.height = d;\n\n\t            var ctx = brushCanvas.getContext('2d');\n\t            ctx.clearRect(0, 0, d, d);\n\n\t            // in order to render shadow without the distinct circle,\n\t            // draw the distinct circle in an invisible place,\n\t            // and use shadowOffset to draw shadow in the center of the canvas\n\t            ctx.shadowOffsetX = d;\n\t            ctx.shadowBlur = this.blurSize;\n\t            // draw the shadow in black, and use alpha and shadow blur to generate\n\t            // color in color map\n\t            ctx.shadowColor = '#000';\n\n\t            // draw circle in the left to the canvas\n\t            ctx.beginPath();\n\t            ctx.arc(-r, r, this.pointSize, 0, Math.PI * 2, true);\n\t            ctx.closePath();\n\t            ctx.fill();\n\t            return brushCanvas;\n\t        },\n\n\t        /**\n\t         * get gradient color map\n\t         * @private\n\t         */\n\t        _getGradient: function (data, colorFunc, state) {\n\t            var gradientPixels = this._gradientPixels;\n\t            var pixelsSingleState = gradientPixels[state] || (gradientPixels[state] = new Uint8ClampedArray(256 * 4));\n\t            var color = [];\n\t            var off = 0;\n\t            for (var i = 0; i < 256; i++) {\n\t                colorFunc[state](i / 255, true, color);\n\t                pixelsSingleState[off++] = color[0];\n\t                pixelsSingleState[off++] = color[1];\n\t                pixelsSingleState[off++] = color[2];\n\t                pixelsSingleState[off++] = color[3];\n\t            }\n\t            return pixelsSingleState;\n\t        }\n\t    };\n\n\t    module.exports = Heatmap;\n\n\n\n/***/ },\n/* 277 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    __webpack_require__(114);\n\n\t    __webpack_require__(278);\n\t    __webpack_require__(279);\n\n\t    var barLayoutGrid = __webpack_require__(140);\n\t    var echarts = __webpack_require__(1);\n\n\t    echarts.registerLayout(zrUtil.curry(barLayoutGrid, 'pictorialBar'));\n\n\t    echarts.registerVisual(zrUtil.curry(\n\t        __webpack_require__(110), 'pictorialBar', 'roundRect', null\n\t    ));\n\n\t    // In case developer forget to include grid component\n\t    __webpack_require__(113);\n\n\n/***/ },\n/* 278 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var PictorialBarSeries = __webpack_require__(136).extend({\n\n\t        type: 'series.pictorialBar',\n\n\t        dependencies: ['grid'],\n\n\t        defaultOption: {\n\t            symbol: 'circle',     // Customized bar shape\n\t            symbolSize: null,     // Can be ['100%', '100%'], null means auto.\n\t            symbolRotate: null,\n\n\t            symbolPosition: null, // 'start' or 'end' or 'center', null means auto.\n\t            symbolOffset: null,\n\t            symbolMargin: null,   // start margin and end margin. Can be a number or a percent string.\n\t                                  // Auto margin by defualt.\n\t            symbolRepeat: false,  // false/null/undefined, means no repeat.\n\t                                  // Can be true, means auto calculate repeat times and cut by data.\n\t                                  // Can be a number, specifies repeat times, and do not cut by data.\n\t                                  // Can be 'fixed', means auto calculate repeat times but do not cut by data.\n\t            symbolRepeatDirection: 'end', // 'end' means from 'start' to 'end'.\n\n\t            symbolClip: false,\n\t            symbolBoundingData: null,\n\t            symbolPatternSize: 400, // 400 * 400 px\n\n\t            barGap: '-100%',      // In most case, overlap is needed.\n\n\t            // z can be set in data item, which is z2 actually.\n\n\t            // Disable progressive\n\t            progressive: 0,\n\t            hoverAnimation: false // Open only when needed.\n\t        },\n\n\t        getInitialData: function (option) {\n\t            // Disable stack.\n\t            option.stack = null;\n\t            return PictorialBarSeries.superApply(this, 'getInitialData', arguments);\n\t        }\n\t    });\n\n\t    module.exports = PictorialBarSeries;\n\n\n/***/ },\n/* 279 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var graphic = __webpack_require__(43);\n\t    var symbolUtil = __webpack_require__(107);\n\t    var numberUtil = __webpack_require__(7);\n\t    var helper = __webpack_require__(138);\n\n\t    var parsePercent = numberUtil.parsePercent;\n\n\t    var BAR_BORDER_WIDTH_QUERY = ['itemStyle', 'normal', 'borderWidth'];\n\n\t    // index: +isHorizontal\n\t    var LAYOUT_ATTRS = [\n\t        {xy: 'x', wh: 'width', index: 0, posDesc: ['left', 'right']},\n\t        {xy: 'y', wh: 'height', index: 1, posDesc: ['top', 'bottom']}\n\t    ];\n\n\t    var pathForLineWidth = new graphic.Circle();\n\n\t    var BarView = __webpack_require__(1).extendChartView({\n\n\t        type: 'pictorialBar',\n\n\t        render: function (seriesModel, ecModel, api) {\n\t            var group = this.group;\n\t            var data = seriesModel.getData();\n\t            var oldData = this._data;\n\n\t            var cartesian = seriesModel.coordinateSystem;\n\t            var baseAxis = cartesian.getBaseAxis();\n\t            var isHorizontal = !!baseAxis.isHorizontal();\n\t            var coordSysRect = cartesian.grid.getRect();\n\n\t            var opt = {\n\t                ecSize: {width: api.getWidth(), height: api.getHeight()},\n\t                seriesModel: seriesModel,\n\t                coordSys: cartesian,\n\t                coordSysExtent: [\n\t                    [coordSysRect.x, coordSysRect.x + coordSysRect.width],\n\t                    [coordSysRect.y, coordSysRect.y + coordSysRect.height]\n\t                ],\n\t                isHorizontal: isHorizontal,\n\t                valueDim: LAYOUT_ATTRS[+isHorizontal],\n\t                categoryDim: LAYOUT_ATTRS[1 - isHorizontal]\n\t            };\n\n\t            data.diff(oldData)\n\t                .add(function (dataIndex) {\n\t                    if (!data.hasValue(dataIndex)) {\n\t                        return;\n\t                    }\n\n\t                    var itemModel = getItemModel(data, dataIndex);\n\t                    var symbolMeta = getSymbolMeta(data, dataIndex, itemModel, opt);\n\n\t                    var bar = createBar(data, opt, symbolMeta);\n\n\t                    data.setItemGraphicEl(dataIndex, bar);\n\t                    group.add(bar);\n\n\t                    updateCommon(bar, opt, symbolMeta);\n\t                })\n\t                .update(function (newIndex, oldIndex) {\n\t                    var bar = oldData.getItemGraphicEl(oldIndex);\n\n\t                    if (!data.hasValue(newIndex)) {\n\t                        group.remove(bar);\n\t                        return;\n\t                    }\n\n\t                    var itemModel = getItemModel(data, newIndex);\n\t                    var symbolMeta = getSymbolMeta(data, newIndex, itemModel, opt);\n\n\t                    var pictorialShapeStr = getShapeStr(data, symbolMeta);\n\t                    if (bar && pictorialShapeStr !== bar.__pictorialShapeStr) {\n\t                        group.remove(bar);\n\t                        data.setItemGraphicEl(newIndex, null);\n\t                        bar = null;\n\t                    }\n\n\t                    if (bar) {\n\t                        updateBar(bar, opt, symbolMeta);\n\t                    }\n\t                    else {\n\t                        bar = createBar(data, opt, symbolMeta, true);\n\t                    }\n\n\t                    data.setItemGraphicEl(newIndex, bar);\n\t                    bar.__pictorialSymbolMeta = symbolMeta;\n\t                    // Add back\n\t                    group.add(bar);\n\n\t                    updateCommon(bar, opt, symbolMeta);\n\t                })\n\t                .remove(function (dataIndex) {\n\t                    var bar = oldData.getItemGraphicEl(dataIndex);\n\t                    bar && removeBar(oldData, dataIndex, bar.__pictorialSymbolMeta.animationModel, bar);\n\t                })\n\t                .execute();\n\n\t            this._data = data;\n\n\t            return this.group;\n\t        },\n\n\t        dispose: zrUtil.noop,\n\n\t        remove: function (ecModel, api) {\n\t            var group = this.group;\n\t            var data = this._data;\n\t            if (ecModel.get('animation')) {\n\t                if (data) {\n\t                    data.eachItemGraphicEl(function (bar) {\n\t                        removeBar(data, bar.dataIndex, ecModel, bar);\n\t                    });\n\t                }\n\t            }\n\t            else {\n\t                group.removeAll();\n\t            }\n\t        }\n\t    });\n\n\n\t    // Set or calculate default value about symbol, and calculate layout info.\n\t    function getSymbolMeta(data, dataIndex, itemModel, opt) {\n\t        var layout = data.getItemLayout(dataIndex);\n\t        var symbolRepeat = itemModel.get('symbolRepeat');\n\t        var symbolClip = itemModel.get('symbolClip');\n\t        var symbolPosition = itemModel.get('symbolPosition') || 'start';\n\t        var symbolRotate = itemModel.get('symbolRotate');\n\t        var rotation = (symbolRotate || 0) * Math.PI / 180 || 0;\n\t        var symbolPatternSize = itemModel.get('symbolPatternSize') || 2;\n\t        var isAnimationEnabled = itemModel.isAnimationEnabled();\n\n\t        var symbolMeta = {\n\t            dataIndex: dataIndex,\n\t            layout: layout,\n\t            itemModel: itemModel,\n\t            symbolType: data.getItemVisual(dataIndex, 'symbol') || 'circle',\n\t            color: data.getItemVisual(dataIndex, 'color'),\n\t            symbolClip: symbolClip,\n\t            symbolRepeat: symbolRepeat,\n\t            symbolRepeatDirection: itemModel.get('symbolRepeatDirection'),\n\t            symbolPatternSize: symbolPatternSize,\n\t            rotation: rotation,\n\t            animationModel: isAnimationEnabled ? itemModel : null,\n\t            hoverAnimation: isAnimationEnabled && itemModel.get('hoverAnimation'),\n\t            z2: itemModel.getShallow('z', true) || 0\n\t        };\n\n\t        prepareBarLength(itemModel, symbolRepeat, layout, opt, symbolMeta);\n\n\t        prepareSymbolSize(\n\t            data, dataIndex, layout, symbolRepeat, symbolClip, symbolMeta.boundingLength,\n\t            symbolMeta.pxSign, symbolPatternSize, opt, symbolMeta\n\t        );\n\n\t        prepareLineWidth(itemModel, symbolMeta.symbolScale, rotation, opt, symbolMeta);\n\n\t        var symbolSize = symbolMeta.symbolSize;\n\t        var symbolOffset = itemModel.get('symbolOffset');\n\t        if (zrUtil.isArray(symbolOffset)) {\n\t            symbolOffset = [\n\t                parsePercent(symbolOffset[0], symbolSize[0]),\n\t                parsePercent(symbolOffset[1], symbolSize[1])\n\t            ];\n\t        }\n\n\t        prepareLayoutInfo(\n\t            itemModel, symbolSize, layout, symbolRepeat, symbolClip, symbolOffset,\n\t            symbolPosition, symbolMeta.valueLineWidth, symbolMeta.boundingLength, symbolMeta.repeatCutLength,\n\t            opt, symbolMeta\n\t        );\n\n\t        return symbolMeta;\n\t    }\n\n\t    // bar length can be negative.\n\t    function prepareBarLength(itemModel, symbolRepeat, layout, opt, output) {\n\t        var valueDim = opt.valueDim;\n\t        var symbolBoundingData = itemModel.get('symbolBoundingData');\n\t        var valueAxis = opt.coordSys.getOtherAxis(opt.coordSys.getBaseAxis());\n\t        var zeroPx = valueAxis.toGlobalCoord(valueAxis.dataToCoord(0));\n\n\t        var boundingLength = output.boundingLength = symbolBoundingData != null\n\t            ? valueAxis.toGlobalCoord(valueAxis.dataToCoord(valueAxis.scale.parse(symbolBoundingData))) - zeroPx\n\t            : symbolRepeat\n\t            ? opt.coordSysExtent[valueDim.index][1 - +(layout[valueDim.wh] <= 0)] - zeroPx\n\t            : layout[valueDim.wh];\n\n\t        if (symbolRepeat) {\n\t            output.repeatCutLength = layout[valueDim.wh];\n\t        }\n\n\t        output.pxSign = boundingLength > 0 ? 1 : boundingLength < 0 ? -1 : 0;\n\t    }\n\n\t    // Support ['100%', '100%']\n\t    function prepareSymbolSize(\n\t        data, dataIndex, layout, symbolRepeat, symbolClip, boundingLength,\n\t        pxSign, symbolPatternSize, opt, output\n\t    ) {\n\t        var valueDim = opt.valueDim;\n\t        var categoryDim = opt.categoryDim;\n\t        var categorySize = Math.abs(layout[categoryDim.wh]);\n\n\t        var symbolSize = data.getItemVisual(dataIndex, 'symbolSize');\n\t        if (zrUtil.isArray(symbolSize)) {\n\t            symbolSize = symbolSize.slice();\n\t        }\n\t        else {\n\t            if (symbolSize == null) {\n\t                symbolSize = '100%';\n\t            }\n\t            symbolSize = [symbolSize, symbolSize];\n\t        }\n\n\t        // Note: percentage symbolSize (like '100%') do not consider lineWidth, because it is\n\t        // to complicated to calculate real percent value if considering scaled lineWidth.\n\t        // So the actual size will bigger than layout size if lineWidth is bigger than zero,\n\t        // which can be tolerated in pictorial chart.\n\n\t        symbolSize[categoryDim.index] = parsePercent(\n\t            symbolSize[categoryDim.index],\n\t            categorySize\n\t        );\n\t        symbolSize[valueDim.index] = parsePercent(\n\t            symbolSize[valueDim.index],\n\t            symbolRepeat ? categorySize : Math.abs(boundingLength)\n\t        );\n\n\t        output.symbolSize = symbolSize;\n\n\t        // If x or y is less than zero, show reversed shape.\n\t        var symbolScale = output.symbolScale = [\n\t            symbolSize[0] / symbolPatternSize,\n\t            symbolSize[1] / symbolPatternSize\n\t        ];\n\t        // Follow convention, 'right' and 'top' is the normal scale.\n\t        symbolScale[valueDim.index] *= (opt.isHorizontal ? -1 : 1) * pxSign;\n\t    }\n\n\t    function prepareLineWidth(itemModel, symbolScale, rotation, opt, output) {\n\t        // In symbols are drawn with scale, so do not need to care about the case that width\n\t        // or height are too small. But symbol use strokeNoScale, where acture lineWidth should\n\t        // be calculated.\n\t        var valueLineWidth = itemModel.get(BAR_BORDER_WIDTH_QUERY) || 0;\n\n\t        if (valueLineWidth) {\n\t            pathForLineWidth.attr({\n\t                scale: symbolScale.slice(),\n\t                rotation: rotation\n\t            });\n\t            pathForLineWidth.updateTransform();\n\t            valueLineWidth /= pathForLineWidth.getLineScale();\n\t            valueLineWidth *= symbolScale[opt.valueDim.index];\n\t        }\n\n\t        output.valueLineWidth = valueLineWidth;\n\t    }\n\n\t    function prepareLayoutInfo(\n\t        itemModel, symbolSize, layout, symbolRepeat, symbolClip, symbolOffset,\n\t        symbolPosition, valueLineWidth, boundingLength, repeatCutLength, opt, output\n\t    ) {\n\t        var categoryDim = opt.categoryDim;\n\t        var valueDim = opt.valueDim;\n\t        var pxSign = output.pxSign;\n\n\t        var unitLength = Math.max(symbolSize[valueDim.index] + valueLineWidth, 0);\n\t        var pathLen = unitLength;\n\n\t        // Note: rotation will not effect the layout of symbols, because user may\n\t        // want symbols to rotate on its center, which should not be translated\n\t        // when rotating.\n\n\t        if (symbolRepeat) {\n\t            var absBoundingLength = Math.abs(boundingLength);\n\n\t            var symbolMargin = zrUtil.retrieve(itemModel.get('symbolMargin'), '15%') + '';\n\t            var hasEndGap = false;\n\t            if (symbolMargin.lastIndexOf('!') === symbolMargin.length - 1) {\n\t                hasEndGap = true;\n\t                symbolMargin = symbolMargin.slice(0, symbolMargin.length - 1);\n\t            }\n\t            symbolMargin = parsePercent(symbolMargin, symbolSize[valueDim.index]);\n\n\t            var uLenWithMargin = Math.max(unitLength + symbolMargin * 2, 0);\n\n\t            // When symbol margin is less than 0, margin at both ends will be subtracted\n\t            // to ensure that all of the symbols will not be overflow the given area.\n\t            var endFix = hasEndGap ? 0 : symbolMargin * 2;\n\n\t            // Both final repeatTimes and final symbolMargin area calculated based on\n\t            // boundingLength.\n\t            var repeatSpecified = numberUtil.isNumeric(symbolRepeat);\n\t            var repeatTimes = repeatSpecified\n\t                ? symbolRepeat\n\t                : toIntTimes((absBoundingLength + endFix) / uLenWithMargin);\n\n\t            // Adjust calculate margin, to ensure each symbol is displayed\n\t            // entirely in the given layout area.\n\t            var mDiff = absBoundingLength - repeatTimes * unitLength;\n\t            symbolMargin = mDiff / 2 / (hasEndGap ? repeatTimes : repeatTimes - 1);\n\t            uLenWithMargin = unitLength + symbolMargin * 2;\n\t            endFix = hasEndGap ? 0 : symbolMargin * 2;\n\n\t            // Update repeatTimes when not all symbol will be shown.\n\t            if (!repeatSpecified && symbolRepeat !== 'fixed') {\n\t                repeatTimes = repeatCutLength\n\t                    ? toIntTimes((Math.abs(repeatCutLength) + endFix) / uLenWithMargin)\n\t                    : 0;\n\t            }\n\n\t            pathLen = repeatTimes * uLenWithMargin - endFix;\n\t            output.repeatTimes = repeatTimes;\n\t            output.symbolMargin = symbolMargin;\n\t        }\n\n\t        var sizeFix = pxSign * (pathLen / 2);\n\t        var pathPosition = output.pathPosition = [];\n\t        pathPosition[categoryDim.index] = layout[categoryDim.wh] / 2;\n\t        pathPosition[valueDim.index] = symbolPosition === 'start'\n\t            ? sizeFix\n\t            : symbolPosition === 'end'\n\t            ? boundingLength - sizeFix\n\t            : boundingLength / 2; // 'center'\n\t        if (symbolOffset) {\n\t            pathPosition[0] += symbolOffset[0];\n\t            pathPosition[1] += symbolOffset[1];\n\t        }\n\n\t        var bundlePosition = output.bundlePosition = [];\n\t        bundlePosition[categoryDim.index] = layout[categoryDim.xy];\n\t        bundlePosition[valueDim.index] = layout[valueDim.xy];\n\n\t        var barRectShape = output.barRectShape = zrUtil.extend({}, layout);\n\t        barRectShape[valueDim.wh] = pxSign * Math.max(\n\t            Math.abs(layout[valueDim.wh]), Math.abs(pathPosition[valueDim.index] + sizeFix)\n\t        );\n\t        barRectShape[categoryDim.wh] = layout[categoryDim.wh];\n\n\t        var clipShape = output.clipShape = {};\n\t        // Consider that symbol may be overflow layout rect.\n\t        clipShape[categoryDim.xy] = -layout[categoryDim.xy];\n\t        clipShape[categoryDim.wh] = opt.ecSize[categoryDim.wh];\n\t        clipShape[valueDim.xy] = 0;\n\t        clipShape[valueDim.wh] = layout[valueDim.wh];\n\t    }\n\n\t    function createPath(symbolMeta) {\n\t        var symbolPatternSize = symbolMeta.symbolPatternSize;\n\t        var path = symbolUtil.createSymbol(\n\t            // Consider texture img, make a big size.\n\t            symbolMeta.symbolType,\n\t            -symbolPatternSize / 2,\n\t            -symbolPatternSize / 2,\n\t            symbolPatternSize,\n\t            symbolPatternSize,\n\t            symbolMeta.color\n\t        );\n\t        path.attr({\n\t            culling: true\n\t        });\n\t        path.type !== 'image' && path.setStyle({\n\t            strokeNoScale: true\n\t        });\n\n\t        return path;\n\t    }\n\n\t    function createOrUpdateRepeatSymbols(bar, opt, symbolMeta, isUpdate) {\n\t        var bundle = bar.__pictorialBundle;\n\t        var symbolSize = symbolMeta.symbolSize;\n\t        var valueLineWidth = symbolMeta.valueLineWidth;\n\t        var pathPosition = symbolMeta.pathPosition;\n\t        var valueDim = opt.valueDim;\n\t        var repeatTimes = symbolMeta.repeatTimes || 0;\n\n\t        var index = 0;\n\t        var unit = symbolSize[opt.valueDim.index] + valueLineWidth + symbolMeta.symbolMargin * 2;\n\n\t        eachPath(bar, function (path) {\n\t            path.__pictorialAnimationIndex = index;\n\t            path.__pictorialRepeatTimes = repeatTimes;\n\t            if (index < repeatTimes) {\n\t                updateAttr(path, null, makeTarget(index), symbolMeta, isUpdate);\n\t            }\n\t            else {\n\t                updateAttr(path, null, {scale: [0, 0]}, symbolMeta, isUpdate, function () {\n\t                    bundle.remove(path);\n\t                });\n\t            }\n\n\t            updateHoverAnimation(path, symbolMeta);\n\n\t            index++;\n\t        });\n\n\t        for (; index < repeatTimes; index++) {\n\t            var path = createPath(symbolMeta);\n\t            path.__pictorialAnimationIndex = index;\n\t            path.__pictorialRepeatTimes = repeatTimes;\n\t            bundle.add(path);\n\n\t            var target = makeTarget(index, true);\n\n\t            updateAttr(\n\t                path,\n\t                {\n\t                    position: target.position,\n\t                    scale: [0, 0]\n\t                },\n\t                {\n\t                    scale: target.scale,\n\t                    rotation: target.rotation\n\t                },\n\t                symbolMeta,\n\t                isUpdate\n\t            );\n\n\t            // FIXME\n\t            // If all emphasis/normal through action.\n\t            path\n\t                .on('mouseover', onMouseOver)\n\t                .on('mouseout', onMouseOut);\n\n\t            updateHoverAnimation(path, symbolMeta);\n\t        }\n\n\t        function makeTarget(index) {\n\t            var position = pathPosition.slice();\n\t            // (start && pxSign > 0) || (end && pxSign < 0): i = repeatTimes - index\n\t            // Otherwise: i = index;\n\t            var pxSign = symbolMeta.pxSign;\n\t            var i = index;\n\t            if (symbolMeta.symbolRepeatDirection === 'start' ? pxSign > 0 : pxSign < 0) {\n\t                i = repeatTimes - 1 - index;\n\t            }\n\t            position[valueDim.index] = unit * (i - repeatTimes / 2 + 0.5) + pathPosition[valueDim.index];\n\n\t            return {\n\t                position: position,\n\t                scale: symbolMeta.symbolScale.slice(),\n\t                rotation: symbolMeta.rotation\n\t            };\n\t        }\n\n\t        function onMouseOver() {\n\t            eachPath(bar, function (path) {\n\t                path.trigger('emphasis');\n\t            });\n\t        }\n\n\t        function onMouseOut() {\n\t            eachPath(bar, function (path) {\n\t                path.trigger('normal');\n\t            });\n\t        }\n\t    }\n\n\t    function createOrUpdateSingleSymbol(bar, opt, symbolMeta, isUpdate) {\n\t        var bundle = bar.__pictorialBundle;\n\t        var mainPath = bar.__pictorialMainPath;\n\n\t        if (!mainPath) {\n\t            mainPath = bar.__pictorialMainPath = createPath(symbolMeta);\n\t            bundle.add(mainPath);\n\n\t            updateAttr(\n\t                mainPath,\n\t                {\n\t                    position: symbolMeta.pathPosition.slice(),\n\t                    scale: [0, 0],\n\t                    rotation: symbolMeta.rotation\n\t                },\n\t                {\n\t                    scale: symbolMeta.symbolScale.slice()\n\t                },\n\t                symbolMeta,\n\t                isUpdate\n\t            );\n\n\t            mainPath\n\t                .on('mouseover', onMouseOver)\n\t                .on('mouseout', onMouseOut);\n\t        }\n\t        else {\n\t            updateAttr(\n\t                mainPath,\n\t                null,\n\t                {\n\t                    position: symbolMeta.pathPosition.slice(),\n\t                    scale: symbolMeta.symbolScale.slice(),\n\t                    rotation: symbolMeta.rotation\n\t                },\n\t                symbolMeta,\n\t                isUpdate\n\t            );\n\t        }\n\n\t        updateHoverAnimation(mainPath, symbolMeta);\n\n\t        function onMouseOver() {\n\t            this.trigger('emphasis');\n\t        }\n\n\t        function onMouseOut() {\n\t            this.trigger('normal');\n\t        }\n\t    }\n\n\t    // bar rect is used for label.\n\t    function createOrUpdateBarRect(bar, symbolMeta, isUpdate) {\n\t        var rectShape = zrUtil.extend({}, symbolMeta.barRectShape);\n\n\t        var barRect = bar.__pictorialBarRect;\n\t        if (!barRect) {\n\t            barRect = bar.__pictorialBarRect = new graphic.Rect({\n\t                z2: 2,\n\t                shape: rectShape,\n\t                silent: true,\n\t                style: {\n\t                    stroke: 'transparent',\n\t                    fill: 'transparent',\n\t                    lineWidth: 0\n\t                }\n\t            });\n\n\t            bar.add(barRect);\n\t        }\n\t        else {\n\t            updateAttr(barRect, null, {shape: rectShape}, symbolMeta, isUpdate);\n\t        }\n\t    }\n\n\t    function createOrUpdateClip(bar, opt, symbolMeta, isUpdate) {\n\t        // If not clip, symbol will be remove and rebuilt.\n\t        if (symbolMeta.symbolClip) {\n\t            var clipPath = bar.__pictorialClipPath;\n\t            var clipShape = zrUtil.extend({}, symbolMeta.clipShape);\n\t            var valueDim = opt.valueDim;\n\t            var animationModel = symbolMeta.animationModel;\n\t            var dataIndex = symbolMeta.dataIndex;\n\n\t            if (clipPath) {\n\t                graphic.updateProps(\n\t                    clipPath, {shape: clipShape}, animationModel, dataIndex\n\t                );\n\t            }\n\t            else {\n\t                clipShape[valueDim.wh] = 0;\n\t                clipPath = new graphic.Rect({shape: clipShape});\n\t                bar.__pictorialBundle.setClipPath(clipPath);\n\t                bar.__pictorialClipPath = clipPath;\n\n\t                var target = {};\n\t                target[valueDim.wh] = symbolMeta.clipShape[valueDim.wh];\n\n\t                graphic[isUpdate ? 'updateProps' : 'initProps'](\n\t                    clipPath, {shape: target}, animationModel, dataIndex\n\t                );\n\t            }\n\t        }\n\t    }\n\n\t    function getItemModel(data, dataIndex) {\n\t        var itemModel = data.getItemModel(dataIndex);\n\t        itemModel.getAnimationDelayParams = getAnimationDelayParams;\n\t        itemModel.isAnimationEnabled = isAnimationEnabled;\n\t        return itemModel;\n\t    }\n\n\t    function getAnimationDelayParams(path) {\n\t        // The order is the same as the z-order, see `symbolRepeatDiretion`.\n\t        return {\n\t            index: path.__pictorialAnimationIndex,\n\t            count: path.__pictorialRepeatTimes\n\t        };\n\t    }\n\n\t    function isAnimationEnabled() {\n\t        // `animation` prop can be set on itemModel in pictorial bar chart.\n\t        return this.parentModel.isAnimationEnabled() && !!this.getShallow('animation');\n\t    }\n\n\t    function updateHoverAnimation(path, symbolMeta) {\n\t        path.off('emphasis').off('normal');\n\n\t        var scale = symbolMeta.symbolScale.slice();\n\n\t        symbolMeta.hoverAnimation && path\n\t            .on('emphasis', function() {\n\t                this.animateTo({\n\t                    scale: [scale[0] * 1.1, scale[1] * 1.1]\n\t                }, 400, 'elasticOut');\n\t            })\n\t            .on('normal', function() {\n\t                this.animateTo({\n\t                    scale: scale.slice()\n\t                }, 400, 'elasticOut');\n\t            });\n\t    }\n\n\t    function createBar(data, opt, symbolMeta, isUpdate) {\n\t        // bar is the main element for each data.\n\t        var bar = new graphic.Group();\n\t        // bundle is used for location and clip.\n\t        var bundle = new graphic.Group();\n\t        bar.add(bundle);\n\t        bar.__pictorialBundle = bundle;\n\t        bundle.attr('position', symbolMeta.bundlePosition.slice());\n\n\t        if (symbolMeta.symbolRepeat) {\n\t            createOrUpdateRepeatSymbols(bar, opt, symbolMeta);\n\t        }\n\t        else {\n\t            createOrUpdateSingleSymbol(bar, opt, symbolMeta);\n\t        }\n\n\t        createOrUpdateBarRect(bar, symbolMeta, isUpdate);\n\n\t        createOrUpdateClip(bar, opt, symbolMeta, isUpdate);\n\n\t        bar.__pictorialShapeStr = getShapeStr(data, symbolMeta);\n\t        bar.__pictorialSymbolMeta = symbolMeta;\n\n\t        return bar;\n\t    }\n\n\t    function updateBar(bar, opt, symbolMeta) {\n\t        var animationModel = symbolMeta.animationModel;\n\t        var dataIndex = symbolMeta.dataIndex;\n\t        var bundle = bar.__pictorialBundle;\n\n\t        graphic.updateProps(\n\t            bundle, {position: symbolMeta.bundlePosition.slice()}, animationModel, dataIndex\n\t        );\n\n\t        if (symbolMeta.symbolRepeat) {\n\t            createOrUpdateRepeatSymbols(bar, opt, symbolMeta, true);\n\t        }\n\t        else {\n\t            createOrUpdateSingleSymbol(bar, opt, symbolMeta, true);\n\t        }\n\n\t        createOrUpdateBarRect(bar, symbolMeta, true);\n\n\t        createOrUpdateClip(bar, opt, symbolMeta, true);\n\t    }\n\n\t    function removeBar(data, dataIndex, animationModel, bar) {\n\t        // Not show text when animating\n\t        var labelRect = bar.__pictorialBarRect;\n\t        labelRect && (labelRect.style.text = '');\n\n\t        var pathes = [];\n\t        eachPath(bar, function (path) {\n\t            pathes.push(path);\n\t        });\n\t        bar.__pictorialMainPath && pathes.push(bar.__pictorialMainPath);\n\n\t        // I do not find proper remove animation for clip yet.\n\t        bar.__pictorialClipPath && (animationModel = null);\n\n\t        zrUtil.each(pathes, function (path) {\n\t            graphic.updateProps(\n\t                path, {scale: [0, 0]}, animationModel, dataIndex,\n\t                function () {\n\t                    bar.parent && bar.parent.remove(bar);\n\t                }\n\t            );\n\t        });\n\n\t        data.setItemGraphicEl(dataIndex, null);\n\t    }\n\n\t    function getShapeStr(data, symbolMeta) {\n\t        return [\n\t            data.getItemVisual(symbolMeta.dataIndex, 'symbol') || 'none',\n\t            !!symbolMeta.symbolRepeat,\n\t            !!symbolMeta.symbolClip\n\t        ].join(':');\n\t    }\n\n\t    function eachPath(bar, cb, context) {\n\t        // Do not use Group#eachChild, because it do not support remove.\n\t        zrUtil.each(bar.__pictorialBundle.children(), function (el) {\n\t            el !== bar.__pictorialBarRect && cb.call(context, el);\n\t        });\n\t    }\n\n\t    function updateAttr(el, immediateAttrs, animationAttrs, symbolMeta, isUpdate, cb) {\n\t        immediateAttrs && el.attr(immediateAttrs);\n\t        // when symbolCip used, only clip path has init animation, otherwise it would be weird effect.\n\t        if (symbolMeta.symbolClip && !isUpdate) {\n\t            animationAttrs && el.attr(animationAttrs);\n\t        }\n\t        else {\n\t            animationAttrs && graphic[isUpdate ? 'updateProps' : 'initProps'](\n\t                el, animationAttrs, symbolMeta.animationModel, symbolMeta.dataIndex, cb\n\t            );\n\t        }\n\t    }\n\n\t    function updateCommon(bar, opt, symbolMeta) {\n\t        var color = symbolMeta.color;\n\t        var dataIndex = symbolMeta.dataIndex;\n\t        var itemModel = symbolMeta.itemModel;\n\t        // Color must be excluded.\n\t        // Because symbol provide setColor individually to set fill and stroke\n\t        var normalStyle = itemModel.getModel('itemStyle.normal').getItemStyle(['color']);\n\t        var hoverStyle = itemModel.getModel('itemStyle.emphasis').getItemStyle();\n\n\t        eachPath(bar, function (path) {\n\t            // PENDING setColor should be before setStyle!!!\n\t            path.setColor(color);\n\t            path.setStyle(zrUtil.defaults(\n\t                {\n\t                    fill: color,\n\t                    opacity: symbolMeta.opacity\n\t                },\n\t                normalStyle\n\t            ));\n\t            graphic.setHoverStyle(path, hoverStyle);\n\n\t            path.z2 = symbolMeta.z2;\n\t        });\n\n\t        var barRectHoverStyle = {};\n\t        var barPositionOutside = opt.valueDim.posDesc[+(symbolMeta.boundingLength > 0)];\n\t        var barRect = bar.__pictorialBarRect;\n\n\t        helper.setLabel(\n\t            barRect.style, barRectHoverStyle, itemModel,\n\t            color, opt.seriesModel, dataIndex, barPositionOutside\n\t        );\n\n\t        graphic.setHoverStyle(barRect, barRectHoverStyle);\n\t    }\n\n\t    function toIntTimes(times) {\n\t        var roundedTimes = Math.round(times);\n\t        // Escapse accurate error\n\t        return Math.abs(times - roundedTimes) < 1e-4\n\t            ? roundedTimes\n\t            : Math.ceil(times);\n\t    }\n\n\t    module.exports = BarView;\n\n\n/***/ },\n/* 280 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var echarts = __webpack_require__(1);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    __webpack_require__(281);\n\n\t    __webpack_require__(287);\n\n\t    __webpack_require__(288);\n\n\t    echarts.registerLayout(__webpack_require__(290));\n\n\t    echarts.registerVisual(__webpack_require__(291));\n\n\t    echarts.registerProcessor(\n\t        zrUtil.curry(__webpack_require__(149), 'themeRiver')\n\t    );\n\n\n/***/ },\n/* 281 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    __webpack_require__(282);\n\t    __webpack_require__(285);\n\t    __webpack_require__(286);\n\n\t    var echarts = __webpack_require__(1);\n\n\t    echarts.extendComponentView({\n\t        type: 'single'\n\t    });\n\n\n\n/***/ },\n/* 282 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Single coordinate system creator.\n\t */\n\n\n\t    var Single = __webpack_require__(283);\n\n\t    /**\n\t     * Create single coordinate system and inject it into seriesModel.\n\t     *\n\t     * @param {module:echarts/model/Global} ecModel\n\t     * @param {module:echarts/ExtensionAPI} api\n\t     * @return {Array.<module:echarts/coord/single/Single>}\n\t     */\n\t    function create(ecModel, api) {\n\t        var singles = [];\n\n\t        ecModel.eachComponent('singleAxis', function(axisModel, idx) {\n\n\t            var single = new Single(axisModel, ecModel, api);\n\t            single.name = 'single_' + idx;\n\t            single.resize(axisModel, api);\n\t            axisModel.coordinateSystem = single;\n\t            singles.push(single);\n\n\t        });\n\n\t        ecModel.eachSeries(function (seriesModel) {\n\t            if (seriesModel.get('coordinateSystem') === 'singleAxis') {\n\t                var singleAxisModel = ecModel.queryComponents({\n\t                    mainType: 'singleAxis',\n\t                    index: seriesModel.get('singleAxisIndex'),\n\t                    id: seriesModel.get('singleAxisId')\n\t                })[0];\n\t                seriesModel.coordinateSystem = singleAxisModel && singleAxisModel.coordinateSystem;\n\t            }\n\t        });\n\n\t        return singles;\n\t    }\n\n\t    __webpack_require__(26).register('single', {\n\t        create: create,\n\t        dimensions: Single.prototype.dimensions\n\t    });\n\n\n/***/ },\n/* 283 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Single coordinates system.\n\t */\n\n\n\t    var SingleAxis = __webpack_require__(284);\n\t    var axisHelper = __webpack_require__(115);\n\t    var layout = __webpack_require__(21);\n\n\t    /**\n\t     * Create a single coordinates system.\n\t     *\n\t     * @param {module:echarts/coord/single/AxisModel} axisModel\n\t     * @param {module:echarts/model/Global} ecModel\n\t     * @param {module:echarts/ExtensionAPI} api\n\t     */\n\t    function Single(axisModel, ecModel, api) {\n\n\t        /**\n\t         * @type {string}\n\t         * @readOnly\n\t         */\n\t        this.dimension = 'single';\n\n\t        /**\n\t         * Add it just for draw tooltip.\n\t         *\n\t         * @type {Array.<string>}\n\t         * @readOnly\n\t         */\n\t        this.dimensions = ['single'];\n\n\t        /**\n\t         * @private\n\t         * @type {module:echarts/coord/single/SingleAxis}.\n\t         */\n\t        this._axis = null;\n\n\t        /**\n\t         * @private\n\t         * @type {module:zrender/core/BoundingRect}\n\t         */\n\t        this._rect;\n\n\t        this._init(axisModel, ecModel, api);\n\n\t        /**\n\t         * @type {module:echarts/coord/single/AxisModel}\n\t         */\n\t        this._model = axisModel;\n\t    }\n\n\t    Single.prototype = {\n\n\t        type: 'singleAxis',\n\n\t        constructor: Single,\n\n\t        /**\n\t         * Initialize single coordinate system.\n\t         *\n\t         * @param  {module:echarts/coord/single/AxisModel} axisModel\n\t         * @param  {module:echarts/model/Global} ecModel\n\t         * @param  {module:echarts/ExtensionAPI} api\n\t         * @private\n\t         */\n\t        _init: function (axisModel, ecModel, api) {\n\n\t            var dim = this.dimension;\n\n\t            var axis = new SingleAxis(\n\t                dim,\n\t                axisHelper.createScaleByModel(axisModel),\n\t                [0, 0],\n\t                axisModel.get('type'),\n\t                axisModel.get('position')\n\t            );\n\n\t            var isCategory = axis.type === 'category';\n\t            axis.onBand = isCategory && axisModel.get('boundaryGap');\n\t            axis.inverse = axisModel.get('inverse');\n\t            axis.orient = axisModel.get('orient');\n\n\t            axisModel.axis = axis;\n\t            axis.model = axisModel;\n\t            this._axis = axis;\n\t        },\n\n\t        /**\n\t         * Update axis scale after data processed\n\t         * @param  {module:echarts/model/Global} ecModel\n\t         * @param  {module:echarts/ExtensionAPI} api\n\t         */\n\t        update: function (ecModel, api) {\n\t            ecModel.eachSeries(function (seriesModel) {\n\t                if (seriesModel.coordinateSystem === this) {\n\t                    var data = seriesModel.getData();\n\t                    var dim = this.dimension;\n\t                    this._axis.scale.unionExtentFromData(\n\t                        data, seriesModel.coordDimToDataDim(dim)\n\t                    );\n\t                    axisHelper.niceScaleExtent(this._axis, this._axis.model);\n\t                }\n\t            }, this);\n\t        },\n\n\t        /**\n\t         * Resize the single coordinate system.\n\t         *\n\t         * @param  {module:echarts/coord/single/AxisModel} axisModel\n\t         * @param  {module:echarts/ExtensionAPI} api\n\t         */\n\t        resize: function (axisModel, api) {\n\t            this._rect = layout.getLayoutRect(\n\t                {\n\t                    left: axisModel.get('left'),\n\t                    top: axisModel.get('top'),\n\t                    right: axisModel.get('right'),\n\t                    bottom: axisModel.get('bottom'),\n\t                    width: axisModel.get('width'),\n\t                    height: axisModel.get('height')\n\t                },\n\t                {\n\t                    width: api.getWidth(),\n\t                    height: api.getHeight()\n\t                }\n\t            );\n\n\t            this._adjustAxis();\n\t        },\n\n\t        /**\n\t         * @return {module:zrender/core/BoundingRect}\n\t         */\n\t        getRect: function () {\n\t            return this._rect;\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _adjustAxis: function () {\n\n\t            var rect = this._rect;\n\t            var axis = this._axis;\n\n\t            var isHorizontal = axis.isHorizontal();\n\t            var extent = isHorizontal ? [0, rect.width] : [0, rect.height];\n\t            var idx =  axis.reverse ? 1 : 0;\n\n\t            axis.setExtent(extent[idx], extent[1 - idx]);\n\n\t            this._updateAxisTransform(axis, isHorizontal ? rect.x : rect.y);\n\n\t        },\n\n\t        /**\n\t         * @param  {module:echarts/coord/single/SingleAxis} axis\n\t         * @param  {number} coordBase\n\t         */\n\t        _updateAxisTransform: function (axis, coordBase) {\n\n\t            var axisExtent = axis.getExtent();\n\t            var extentSum = axisExtent[0] + axisExtent[1];\n\t            var isHorizontal = axis.isHorizontal();\n\n\t            axis.toGlobalCoord = isHorizontal ?\n\t                function (coord) {\n\t                    return coord + coordBase;\n\t                } :\n\t                function (coord) {\n\t                    return extentSum - coord + coordBase;\n\t                };\n\n\t            axis.toLocalCoord = isHorizontal ?\n\t                function (coord) {\n\t                    return coord - coordBase;\n\t                } :\n\t                function (coord) {\n\t                    return extentSum - coord + coordBase;\n\t                };\n\t        },\n\n\t        /**\n\t         * Get axis.\n\t         *\n\t         * @return {module:echarts/coord/single/SingleAxis}\n\t         */\n\t        getAxis: function () {\n\t            return this._axis;\n\t        },\n\n\t        /**\n\t         * Get axis, add it just for draw tooltip.\n\t         *\n\t         * @return {[type]} [description]\n\t         */\n\t        getBaseAxis: function () {\n\t            return this._axis;\n\t        },\n\n\t        /**\n\t         * If contain point.\n\t         *\n\t         * @param  {Array.<number>} point\n\t         * @return {boolean}\n\t         */\n\t        containPoint: function (point) {\n\t            var rect = this.getRect();\n\t            var axis = this.getAxis();\n\t            var orient = axis.orient;\n\t            if (orient === 'horizontal') {\n\t                return axis.contain(axis.toLocalCoord(point[0]))\n\t                && (point[1] >= rect.y && point[1] <= (rect.y + rect.height));\n\t            }\n\t            else {\n\t                return axis.contain(axis.toLocalCoord(point[1]))\n\t                && (point[0] >= rect.y && point[0] <= (rect.y + rect.height));\n\t            }\n\t        },\n\n\t        /**\n\t         * @param {Array.<number>} point\n\t         * @return {Array.<number>}\n\t         */\n\t        pointToData: function (point) {\n\t            var axis = this.getAxis();\n\t            return [axis.coordToData(axis.toLocalCoord(\n\t                point[axis.orient === 'horizontal' ? 0 : 1]\n\t            ))];\n\t        },\n\n\t        /**\n\t         * Convert the series data to concrete point.\n\t         *\n\t         * @param  {number|Array.<number>} val\n\t         * @return {Array.<number>}\n\t         */\n\t        dataToPoint: function (val) {\n\t            var axis = this.getAxis();\n\t            var rect = this.getRect();\n\t            var pt = [];\n\t            var idx = axis.orient === 'horizontal' ? 0 : 1;\n\t            pt[idx] = axis.toGlobalCoord(axis.dataToCoord(+val));\n\t            pt[1 - idx] = idx === 0 ? (rect.y + rect.height / 2) : (rect.x + rect.width / 2);\n\t            return pt;\n\t        }\n\t    };\n\n\t    module.exports = Single;\n\n\n\n/***/ },\n/* 284 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var Axis = __webpack_require__(124);\n\t    var axisHelper = __webpack_require__(115);\n\n\t    /**\n\t     * @constructor  module:echarts/coord/single/SingleAxis\n\t     * @extends {module:echarts/coord/Axis}\n\t     * @param {string} dim\n\t     * @param {*} scale\n\t     * @param {Array.<number>} coordExtent\n\t     * @param {string} axisType\n\t     * @param {string} position\n\t     */\n\t    var SingleAxis = function (dim, scale, coordExtent, axisType, position) {\n\n\t        Axis.call(this, dim, scale, coordExtent);\n\n\t        /**\n\t         * Axis type\n\t         * - 'category'\n\t         * - 'value'\n\t         * - 'time'\n\t         * - 'log'\n\t         * @type {string}\n\t         */\n\t        this.type = axisType || 'value';\n\n\t        /**\n\t         * Axis position\n\t         *  - 'top'\n\t         *  - 'bottom'\n\t         *  - 'left'\n\t         *  - 'right'\n\t         *  @type {string}\n\t         */\n\t        this.position = position || 'bottom';\n\n\t        /**\n\t         * Axis orient\n\t         *  - 'horizontal'\n\t         *  - 'vertical'\n\t         * @type {[type]}\n\t         */\n\t        this.orient = null;\n\n\t        /**\n\t         * @type {number}\n\t         */\n\t        this._labelInterval = null;\n\n\t    };\n\n\t    SingleAxis.prototype = {\n\n\t        constructor: SingleAxis,\n\n\t        /**\n\t         * Axis model\n\t         * @type {module:echarts/coord/single/AxisModel}\n\t         */\n\t        model: null,\n\n\t        /**\n\t         * Judge the orient of the axis.\n\t         * @return {boolean}\n\t         */\n\t        isHorizontal: function () {\n\t            var position = this.position;\n\t            return position === 'top' || position === 'bottom';\n\n\t        },\n\n\t        /**\n\t         * Get interval of the axis label.\n\t         * @return {number}\n\t         */\n\t        getLabelInterval: function () {\n\t            var labelInterval = this._labelInterval;\n\t            if (!labelInterval) {\n\t                var axisModel = this.model;\n\t                var labelModel = axisModel.getModel('axisLabel');\n\t                var interval = labelModel.get('interval');\n\t                if (!(this.type === 'category' && interval === 'auto')) {\n\n\t                    labelInterval = this._labelInterval = interval === 'auto' ? 0 : interval;\n\t                    return labelInterval;\n\t                }\n\t                labelInterval = this._labelInterval =\n\t                    axisHelper.getAxisLabelInterval(\n\t                        zrUtil.map(this.scale.getTicks(), this.dataToCoord, this),\n\t                        axisModel.getFormattedLabels(),\n\t                        labelModel.getModel('textStyle').getFont(),\n\t                        this.isHorizontal()\n\t                    );\n\t            }\n\t            return labelInterval;\n\t        },\n\n\t        /**\n\t         * Convert the local coord(processed by dataToCoord())\n\t         * to global coord(concrete pixel coord).\n\t         * designated by module:echarts/coord/single/Single.\n\t         * @type {Function}\n\t         */\n\t        toGlobalCoord: null,\n\n\t        /**\n\t         * Convert the global coord to local coord.\n\t         * designated by module:echarts/coord/single/Single.\n\t         * @type {Function}\n\t         */\n\t        toLocalCoord: null\n\n\t    };\n\n\t    zrUtil.inherits(SingleAxis, Axis);\n\n\t    module.exports = SingleAxis;\n\n\n/***/ },\n/* 285 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var AxisBuilder = __webpack_require__(133);\n\t    var zrUtil =  __webpack_require__(4);\n\t    var graphic = __webpack_require__(43);\n\t    var getInterval = AxisBuilder.getInterval;\n\t    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;\n\n\t    var axisBuilderAttrs = [\n\t        'axisLine', 'axisLabel', 'axisTick', 'axisName'\n\t    ];\n\n\t    var selfBuilderAttr = 'splitLine';\n\n\t    var AxisView = __webpack_require__(1).extendComponentView({\n\n\t        type: 'singleAxis',\n\n\t        render: function (axisModel, ecModel) {\n\n\t            var group = this.group;\n\n\t            group.removeAll();\n\n\t            var layout =  axisLayout(axisModel);\n\n\t            var axisBuilder = new AxisBuilder(axisModel, layout);\n\n\t            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n\n\t            group.add(axisBuilder.getGroup());\n\n\t            if (axisModel.get(selfBuilderAttr + '.show')) {\n\t                this['_' + selfBuilderAttr](axisModel, layout.labelInterval);\n\t            }\n\t        },\n\n\t        _splitLine: function(axisModel, labelInterval) {\n\t            var axis = axisModel.axis;\n\n\t            if (axis.isBlank()) {\n\t                return;\n\t            }\n\n\t            var splitLineModel = axisModel.getModel('splitLine');\n\t            var lineStyleModel = splitLineModel.getModel('lineStyle');\n\t            var lineWidth = lineStyleModel.get('width');\n\t            var lineColors = lineStyleModel.get('color');\n\t            var lineInterval = getInterval(splitLineModel, labelInterval);\n\n\t            lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n\n\t            var gridRect = axisModel.coordinateSystem.getRect();\n\t            var isHorizontal = axis.isHorizontal();\n\n\t            var splitLines = [];\n\t            var lineCount = 0;\n\n\t            var ticksCoords = axis.getTicksCoords();\n\n\t            var p1 = [];\n\t            var p2 = [];\n\n\t            for (var i = 0; i < ticksCoords.length; ++i) {\n\t                if (ifIgnoreOnTick(axis, i, lineInterval)) {\n\t                    continue;\n\t                }\n\t                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);\n\t                if (isHorizontal) {\n\t                    p1[0] = tickCoord;\n\t                    p1[1] = gridRect.y;\n\t                    p2[0] = tickCoord;\n\t                    p2[1] = gridRect.y + gridRect.height;\n\t                }\n\t                else {\n\t                    p1[0] = gridRect.x;\n\t                    p1[1] = tickCoord;\n\t                    p2[0] = gridRect.x + gridRect.width;\n\t                    p2[1] = tickCoord;\n\t                }\n\t                var colorIndex = (lineCount++) % lineColors.length;\n\t                splitLines[colorIndex] = splitLines[colorIndex] || [];\n\t                splitLines[colorIndex].push(new graphic.Line(\n\t                    graphic.subPixelOptimizeLine({\n\t                        shape: {\n\t                            x1: p1[0],\n\t                            y1: p1[1],\n\t                            x2: p2[0],\n\t                            y2: p2[1]\n\t                        },\n\t                        style: {\n\t                            lineWidth: lineWidth\n\t                        },\n\t                        silent: true\n\t                    })));\n\t            }\n\n\t            for (var i = 0; i < splitLines.length; ++i) {\n\t                this.group.add(graphic.mergePath(splitLines[i], {\n\t                    style: {\n\t                        stroke: lineColors[i % lineColors.length],\n\t                        lineDash: lineStyleModel.getLineDash(lineWidth),\n\t                        lineWidth: lineWidth\n\t                    },\n\t                    silent: true\n\t                }));\n\t            }\n\t        }\n\t    });\n\n\t    function axisLayout(axisModel) {\n\n\t        var single = axisModel.coordinateSystem;\n\t        var axis = axisModel.axis;\n\t        var layout = {};\n\n\t        var axisPosition = axis.position;\n\t        var orient = axis.orient;\n\n\t        var rect = single.getRect();\n\t        var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];\n\n\t        var positionMap = {\n\t            horizontal: {top: rectBound[2], bottom: rectBound[3]},\n\t            vertical: {left: rectBound[0], right: rectBound[1]}\n\t        };\n\n\t        layout.position = [\n\t            orient === 'vertical'\n\t                ? positionMap.vertical[axisPosition]\n\t                : rectBound[0],\n\t            orient === 'horizontal'\n\t                ? positionMap.horizontal[axisPosition]\n\t                : rectBound[3]\n\t        ];\n\n\t        var r = {horizontal: 0, vertical: 1};\n\t        layout.rotation = Math.PI / 2 * r[orient];\n\n\t        var directionMap = {top: -1, bottom: 1, right: 1, left: -1};\n\n\t        layout.labelDirection = layout.tickDirection\n\t            = layout.nameDirection\n\t            = directionMap[axisPosition];\n\n\t        if (axisModel.getModel('axisTick').get('inside')) {\n\t            layout.tickDirection = -layout.tickDirection;\n\t        }\n\n\t        if (axisModel.getModel('axisLabel').get('inside')) {\n\t            layout.labelDirection = -layout.labelDirection;\n\t        }\n\n\t        var labelRotation = axisModel.getModel('axisLabel').get('rotate');\n\t        layout.labelRotation = axisPosition === 'top' ? -labelRotation : labelRotation;\n\n\t        layout.labelInterval = axis.getLabelInterval();\n\n\t        layout.z2 = 1;\n\n\t        return layout;\n\t    }\n\n\t    module.exports = AxisView;\n\n\n\n/***/ },\n/* 286 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var ComponentModel = __webpack_require__(19);\n\t    var axisModelCreator = __webpack_require__(128);\n\t    var zrUtil =  __webpack_require__(4);\n\n\t    var AxisModel = ComponentModel.extend({\n\n\t        type: 'singleAxis',\n\n\t        layoutMode: 'box',\n\n\t        /**\n\t         * @type {module:echarts/coord/single/SingleAxis}\n\t         */\n\t        axis: null,\n\n\t        /**\n\t         * @type {module:echarts/coord/single/Single}\n\t         */\n\t        coordinateSystem: null,\n\n\t        /**\n\t         * @override\n\t         */\n\t        getCoordSysModel: function () {\n\t            return this;\n\t        }\n\n\t    });\n\n\t    var defaultOption = {\n\n\t        left: '5%',\n\t        top: '5%',\n\t        right: '5%',\n\t        bottom: '5%',\n\n\t        type: 'value',\n\n\t        position: 'bottom',\n\n\t        orient: 'horizontal',\n\n\t        axisLine: {\n\t            show: true,\n\t            lineStyle: {\n\t                width: 2,\n\t                type: 'solid'\n\t            }\n\t        },\n\n\t        axisTick: {\n\t            show: true,\n\t            length: 6,\n\t            lineStyle: {\n\t                width: 2\n\t            }\n\t        },\n\n\t        axisLabel: {\n\t            show: true,\n\t            interval: 'auto'\n\t        },\n\n\t        splitLine: {\n\t            show: true,\n\t            lineStyle: {\n\t                type: 'dashed',\n\t                opacity: 0.2\n\t            }\n\t        }\n\t    };\n\n\t    function getAxisType(axisName, option) {\n\t        return option.type || (option.data ? 'category' : 'value');\n\t    }\n\n\t    zrUtil.merge(AxisModel.prototype, __webpack_require__(130));\n\n\t    axisModelCreator('single', AxisModel, getAxisType, defaultOption);\n\n\t    module.exports = AxisModel;\n\n\n/***/ },\n/* 287 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * @file  Define the themeRiver view's series model\n\t * @author Deqing Li(annong035@gmail.com)\n\t */\n\n\n\t    var completeDimensions = __webpack_require__(103);\n\t    var SeriesModel = __webpack_require__(28);\n\t    var List = __webpack_require__(98);\n\t    var zrUtil = __webpack_require__(4);\n\t    var formatUtil = __webpack_require__(6);\n\t    var encodeHTML = formatUtil.encodeHTML;\n\t    var nest = __webpack_require__(245);\n\n\t    var DATA_NAME_INDEX = 2;\n\n\t    var ThemeRiverSeries = SeriesModel.extend({\n\n\t        type: 'series.themeRiver',\n\n\t        dependencies: ['singleAxis'],\n\n\t        /**\n\t         * @readOnly\n\t         * @type {Object}\n\t         */\n\t        nameMap: null,\n\n\t        /**\n\t         * @override\n\t         */\n\t        init: function (option) {\n\t            ThemeRiverSeries.superApply(this, 'init', arguments);\n\n\t            // Put this function here is for the sake of consistency of code\n\t            // Enable legend selection for each data item\n\t            // Use a function instead of direct access because data reference may changed\n\t            this.legendDataProvider = function () {\n\t                return this.getRawData();\n\t            };\n\t        },\n\n\t        /**\n\t         * If there is no value of a certain point in the time for some event,set it value to 0.\n\t         *\n\t         * @param {Array} data  initial data in the option\n\t         * @return {Array}\n\t         */\n\t        fixData: function (data) {\n\t            var rawDataLength = data.length;\n\n\t            // grouped data by name\n\t            var dataByName = nest()\n\t                .key(function (dataItem) {\n\t                    return dataItem[2];\n\t                })\n\t                .entries(data);\n\n\t            // data group in each layer\n\t            var layData = zrUtil.map(dataByName, function (d) {\n\t                return {\n\t                    name: d.key,\n\t                    dataList: d.values\n\t                };\n\t            });\n\n\t            var layerNum = layData.length;\n\t            var largestLayer = -1;\n\t            var index = -1;\n\t            for (var i = 0; i < layerNum; ++i) {\n\t                var len = layData[i].dataList.length;\n\t                if (len > largestLayer) {\n\t                    largestLayer = len;\n\t                    index = i;\n\t                }\n\t            }\n\n\t            for (var k = 0; k < layerNum; ++k) {\n\t                if (k === index) {\n\t                    continue;\n\t                }\n\t                var name = layData[k].name;\n\t                for (var j = 0; j < largestLayer; ++j) {\n\t                    var timeValue = layData[index].dataList[j][0];\n\t                    var length = layData[k].dataList.length;\n\t                    var keyIndex = -1;\n\t                    for (var l = 0; l < length; ++l) {\n\t                        var value = layData[k].dataList[l][0];\n\t                        if (value === timeValue) {\n\t                            keyIndex = l;\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (keyIndex === -1) {\n\t                        data[rawDataLength] = [];\n\t                        data[rawDataLength][0] = timeValue;\n\t                        data[rawDataLength][1] = 0;\n\t                        data[rawDataLength][2] = name;\n\t                        rawDataLength++;\n\n\t                    }\n\t                }\n\t            }\n\t            return data;\n\t        },\n\n\t        /**\n\t         * @override\n\t         * @param  {Object} option  the initial option that user gived\n\t         * @param  {module:echarts/model/Model} ecModel  the model object for themeRiver option\n\t         * @return {module:echarts/data/List}\n\t         */\n\t        getInitialData: function (option, ecModel) {\n\n\t            var dimensions = [];\n\n\t            var singleAxisModel = ecModel.queryComponents({\n\t                mainType: 'singleAxis',\n\t                index: this.get('singleAxisIndex'),\n\t                id: this.get('singleAxisId')\n\t            })[0];\n\n\t            var axisType = singleAxisModel.get('type');\n\n\t            dimensions = [\n\t                {\n\t                    name: 'time',\n\t                    // FIXME common?\n\t                    type: axisType === 'category'\n\t                        ? 'ordinal'\n\t                        : axisType === 'time'\n\t                        ? 'time'\n\t                        : 'float'\n\t                },\n\t                {\n\t                    name: 'value',\n\t                    type: 'float'\n\t                },\n\t                {\n\t                    name: 'name',\n\t                    type: 'ordinal'\n\t                }\n\t            ];\n\n\t            // filter the data item with the value of label is undefined\n\t            var filterData = zrUtil.filter(option.data, function (dataItem) {\n\t                return dataItem[2] !== undefined;\n\t            });\n\n\t            var data = this.fixData(filterData || []);\n\t            var nameList = [];\n\t            var nameMap = this.nameMap = {};\n\t            var count = 0;\n\n\t            for (var i = 0; i < data.length; ++i) {\n\t                nameList.push(data[i][DATA_NAME_INDEX]);\n\t                if (!nameMap[data[i][DATA_NAME_INDEX]]) {\n\t                    nameMap[data[i][DATA_NAME_INDEX]] = count++;\n\t                }\n\t            }\n\n\t            completeDimensions(dimensions, data);\n\n\t            var list = new List(dimensions, this);\n\n\t            list.initData(data, nameList);\n\n\t            return list;\n\t        },\n\n\t        /**\n\t         * Used by single coordinate\n\t         *\n\t         * @param {string} axisDim  the dimension for single coordinate\n\t         * @return {Array.<string> } specified dimensions on the axis.\n\t         */\n\t        coordDimToDataDim: function (axisDim) {\n\t            return ['time'];\n\t        },\n\n\t        /**\n\t         * The raw data is divided into multiple layers and each layer\n\t         *     has same name.\n\t         *\n\t         * @return {Array.<Array.<number>>}\n\t         */\n\t        getLayerSeries: function () {\n\t            var data = this.getData();\n\t            var lenCount = data.count();\n\t            var indexArr = [];\n\n\t            for (var i = 0; i < lenCount; ++i) {\n\t                indexArr[i] = i;\n\t            }\n\t            // data group by name\n\t            var dataByName = nest()\n\t                .key(function (index) {\n\t                    return data.get('name', index);\n\t                })\n\t                .entries(indexArr);\n\n\t            var layerSeries = zrUtil.map(dataByName, function (d) {\n\t                return {\n\t                    name: d.key,\n\t                    indices: d.values\n\t                };\n\t            });\n\n\t            for (var j = 0; j < layerSeries.length; ++j) {\n\t                layerSeries[j].indices.sort(comparer);\n\t            }\n\n\t            function comparer(index1, index2) {\n\t                return data.get('time', index1) - data.get('time', index2);\n\t            }\n\n\t            return layerSeries;\n\t        },\n\n\t        /**\n\t         * Get data indices for show tooltip content\n\t         *\n\t         * @param {Array.<string>|string} dim  single coordinate dimension\n\t         * @param {Array.<number>} value  coordinate value\n\t         * @param {module:echarts/coord/single/SingleAxis} baseAxis  single Axis used\n\t         *     the themeRiver.\n\t         * @return {Array.<number>}\n\t         */\n\t        getAxisTooltipDataIndex: function (dim, value, baseAxis) {\n\t            if (!zrUtil.isArray(dim)) {\n\t                dim = dim ? [dim] : [];\n\t            }\n\n\t            var data = this.getData();\n\n\t            if (baseAxis.orient === 'horizontal') {\n\t                value = value[0];\n\t            }\n\t            else {\n\t                value = value[1];\n\t            }\n\n\t            var layerSeries = this.getLayerSeries();\n\t            var indices = [];\n\t            var layerNum = layerSeries.length;\n\n\t            for (var i = 0; i < layerNum; ++i) {\n\t                var minDist = Number.MAX_VALUE;\n\t                var nearestIdx = -1;\n\t                var pointNum = layerSeries[i].indices.length;\n\t                for (var j = 0; j < pointNum; ++j) {\n\t                    var dist = Math.abs(data.get(dim[0], layerSeries[i].indices[j]) - value);\n\t                    if (dist <= minDist) {\n\t                        minDist = dist;\n\t                        nearestIdx = layerSeries[i].indices[j];\n\t                    }\n\t                }\n\t                indices.push(nearestIdx);\n\t            }\n\t            return indices;\n\t        },\n\n\t        /**\n\t         * @override\n\t         * @param {Array.<number>} dataIndexs  index of data\n\t         */\n\t        formatTooltip: function (dataIndexs) {\n\t            var data = this.getData();\n\t            var len = dataIndexs.length;\n\t            var time = data.get('time', dataIndexs[0]);\n\t            var single = this.coordinateSystem;\n\t            var axis = single.getAxis();\n\n\t            if (axis.scale.type === 'time') {\n\t                time = formatUtil.formatTime('yyyy-MM-dd', time);\n\t            }\n\n\t            var html = encodeHTML(time) + '<br />';\n\t            for (var i = 0; i < len; ++i) {\n\t                var htmlName = data.get('name', dataIndexs[i]);\n\t                var htmlValue = data.get('value', dataIndexs[i]);\n\t                if (isNaN(htmlValue) || htmlValue == null) {\n\t                    htmlValue = '-';\n\t                }\n\t                html += encodeHTML(htmlName + ' : ' + htmlValue) + '<br />';\n\t            }\n\t            return html;\n\t        },\n\n\t        defaultOption: {\n\t            zlevel: 0,\n\t            z: 2,\n\n\t            coordinateSystem: 'singleAxis',\n\n\t            // gap in axis's orthogonal orientation\n\t            boundaryGap: ['10%', '10%'],\n\n\t            // legendHoverLink: true,\n\n\t            singleAxisIndex: 0,\n\n\t            animationEasing: 'linear',\n\n\t            label: {\n\t                normal: {\n\t                    margin: 4,\n\t                    textAlign: 'right',\n\t                    show: true,\n\t                    position: 'left',\n\t                    textStyle: {\n\t                        color: '#000',\n\t                        fontSize: 11\n\t                    }\n\t                },\n\t                emphasis: {\n\t                    show: true\n\t                }\n\t            }\n\t        }\n\t    });\n\n\t    module.exports = ThemeRiverSeries;\n\n\n\n/***/ },\n/* 288 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process) {/**\n\t * @file  The file used to draw themeRiver view\n\t * @author  Deqing Li(annong035@gmail.com)\n\t */\n\n\n\t    var poly = __webpack_require__(109);\n\t    var graphic = __webpack_require__(43);\n\t    var zrUtil = __webpack_require__(4);\n\t    var DataDiffer = __webpack_require__(99);\n\n\t    module.exports = __webpack_require__(1).extendChartView({\n\n\t        type: 'themeRiver',\n\n\t        init: function () {\n\t            this._layers = [];\n\t        },\n\n\t        render: function (seriesModel, ecModel, api) {\n\t            var data = seriesModel.getData();\n\t            var rawData = seriesModel.getRawData();\n\n\t            if (!data.count()) {\n\t                return;\n\t            }\n\n\t            var group = this.group;\n\n\t            var layerSeries = seriesModel.getLayerSeries();\n\n\t            var layoutInfo = data.getLayout('layoutInfo');\n\t            var rect = layoutInfo.rect;\n\t            var boundaryGap = layoutInfo.boundaryGap;\n\n\t            group.attr('position', [0, rect.y + boundaryGap[0]]);\n\n\t            function keyGetter(item) {\n\t                return item.name;\n\t            }\n\t            var dataDiffer = new DataDiffer(\n\t                this._layersSeries || [], layerSeries,\n\t                keyGetter, keyGetter\n\t            );\n\n\t            var newLayersGroups = {};\n\n\t            dataDiffer.add(zrUtil.bind(zrUtil.curry(process, 'add'), this))\n\t                .update(zrUtil.bind(zrUtil.curry(process, 'update'), this))\n\t                .remove(zrUtil.bind(zrUtil.curry(process, 'remove'), this))\n\t                .execute();\n\n\t            function process(status, idx, oldIdx) {\n\t                var oldLayersGroups = this._layers;\n\t                if (status === 'remove') {\n\t                    group.remove(oldLayersGroups[idx]);\n\t                    return;\n\t                }\n\t                var points0 = [];\n\t                var points1 = [];\n\t                var color;\n\t                var indices = layerSeries[idx].indices;\n\t                for (var j = 0; j < indices.length; j++) {\n\t                    var layout = data.getItemLayout(indices[j]);\n\t                    var x = layout.x;\n\t                    var y0 = layout.y0;\n\t                    var y = layout.y;\n\n\t                    points0.push([x, y0]);\n\t                    points1.push([x, y0 + y]);\n\n\t                    color = rawData.getItemVisual(indices[j], 'color');\n\t                }\n\n\t                var polygon;\n\t                var text;\n\t                var textLayout = data.getItemLayout(indices[0]);\n\t                var itemModel = data.getItemModel(indices[j - 1]);\n\t                var labelModel = itemModel.getModel('label.normal');\n\t                var margin = labelModel.get('margin');\n\t                if (status === 'add') {\n\t                    var layerGroup = newLayersGroups[idx] = new graphic.Group();\n\t                    polygon = new poly.Polygon({\n\t                        shape: {\n\t                            points: points0,\n\t                            stackedOnPoints: points1,\n\t                            smooth: 0.4,\n\t                            stackedOnSmooth: 0.4,\n\t                            smoothConstraint: false\n\t                        },\n\t                        z2: 0\n\t                    });\n\t                    text = new graphic.Text({\n\t                        style: {\n\t                            x: textLayout.x - margin,\n\t                            y: textLayout.y0 + textLayout.y / 2\n\t                        }\n\t                    });\n\t                    layerGroup.add(polygon);\n\t                    layerGroup.add(text);\n\t                    group.add(layerGroup);\n\n\t                    polygon.setClipPath(createGridClipShape(polygon.getBoundingRect(), seriesModel, function () {\n\t                        polygon.removeClipPath();\n\t                    }));\n\t                }\n\t                else {\n\t                    var layerGroup = oldLayersGroups[oldIdx];\n\t                    polygon = layerGroup.childAt(0);\n\t                    text = layerGroup.childAt(1);\n\t                    group.add(layerGroup);\n\n\t                    newLayersGroups[idx] = layerGroup;\n\n\t                    graphic.updateProps(polygon, {\n\t                        shape: {\n\t                            points: points0,\n\t                            stackedOnPoints: points1\n\t                        }\n\t                    }, seriesModel);\n\n\t                    graphic.updateProps(text, {\n\t                        style: {\n\t                            x: textLayout.x - margin,\n\t                            y: textLayout.y0 + textLayout.y / 2\n\t                        }\n\t                    }, seriesModel);\n\t                }\n\n\t                var hoverItemStyleModel = itemModel.getModel('itemStyle.emphasis');\n\t                var itemStyleModel = itemModel.getModel('itemStyle.normal');\n\t                var textStyleModel = labelModel.getModel('textStyle');\n\n\t                text.setStyle({\n\t                    text: labelModel.get('show')\n\t                        ? seriesModel.getFormattedLabel(indices[j - 1], 'normal')\n\t                            || data.getName(indices[j - 1])\n\t                        : '',\n\t                    textFont: textStyleModel.getFont(),\n\t                    textAlign: labelModel.get('textAlign'),\n\t                    textVerticalAlign: 'middle'\n\t                });\n\n\t                polygon.setStyle(zrUtil.extend({\n\t                    fill: color\n\t                }, itemStyleModel.getItemStyle(['color'])));\n\n\t                graphic.setHoverStyle(polygon, hoverItemStyleModel.getItemStyle());\n\t            }\n\n\t            this._layersSeries = layerSeries;\n\t            this._layers = newLayersGroups;\n\t        },\n\n\t        dispose: function () {}\n\t    });\n\n\t    // add animation to the view\n\t    function createGridClipShape(rect, seriesModel, cb) {\n\t        var rectEl = new graphic.Rect({\n\t            shape: {\n\t                x: rect.x - 10,\n\t                y: rect.y - 10,\n\t                width: 0,\n\t                height: rect.height + 20\n\t            }\n\t        });\n\t        graphic.initProps(rectEl, {\n\t            shape: {\n\t                width: rect.width + 20,\n\t                height: rect.height + 20\n\t            }\n\t        }, seriesModel, cb);\n\n\t        return rectEl;\n\t    }\n\n\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(289)))\n\n/***/ },\n/* 289 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\tvar process = module.exports = {};\n\n\t// cached from whatever global is present so that test runners that stub it\n\t// don't break things.  But we need to wrap it in a try catch in case it is\n\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\n\t// function because try/catches deoptimize in certain engines.\n\n\tvar cachedSetTimeout;\n\tvar cachedClearTimeout;\n\n\tfunction defaultSetTimout() {\n\t    throw new Error('setTimeout has not been defined');\n\t}\n\tfunction defaultClearTimeout () {\n\t    throw new Error('clearTimeout has not been defined');\n\t}\n\t(function () {\n\t    try {\n\t        if (typeof setTimeout === 'function') {\n\t            cachedSetTimeout = setTimeout;\n\t        } else {\n\t            cachedSetTimeout = defaultSetTimout;\n\t        }\n\t    } catch (e) {\n\t        cachedSetTimeout = defaultSetTimout;\n\t    }\n\t    try {\n\t        if (typeof clearTimeout === 'function') {\n\t            cachedClearTimeout = clearTimeout;\n\t        } else {\n\t            cachedClearTimeout = defaultClearTimeout;\n\t        }\n\t    } catch (e) {\n\t        cachedClearTimeout = defaultClearTimeout;\n\t    }\n\t} ())\n\tfunction runTimeout(fun) {\n\t    if (cachedSetTimeout === setTimeout) {\n\t        //normal enviroments in sane situations\n\t        return setTimeout(fun, 0);\n\t    }\n\t    // if setTimeout wasn't available but was latter defined\n\t    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n\t        cachedSetTimeout = setTimeout;\n\t        return setTimeout(fun, 0);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedSetTimeout(fun, 0);\n\t    } catch(e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n\t            return cachedSetTimeout.call(null, fun, 0);\n\t        } catch(e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n\t            return cachedSetTimeout.call(this, fun, 0);\n\t        }\n\t    }\n\n\n\t}\n\tfunction runClearTimeout(marker) {\n\t    if (cachedClearTimeout === clearTimeout) {\n\t        //normal enviroments in sane situations\n\t        return clearTimeout(marker);\n\t    }\n\t    // if clearTimeout wasn't available but was latter defined\n\t    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n\t        cachedClearTimeout = clearTimeout;\n\t        return clearTimeout(marker);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedClearTimeout(marker);\n\t    } catch (e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n\t            return cachedClearTimeout.call(null, marker);\n\t        } catch (e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n\t            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n\t            return cachedClearTimeout.call(this, marker);\n\t        }\n\t    }\n\n\n\n\t}\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\n\tfunction cleanUpNextTick() {\n\t    if (!draining || !currentQueue) {\n\t        return;\n\t    }\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = runTimeout(cleanUpNextTick);\n\t    draining = true;\n\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    runClearTimeout(timeout);\n\t}\n\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        runTimeout(drainQueue);\n\t    }\n\t};\n\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\n\tfunction noop() {}\n\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 290 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file  Using layout algorithm transform the raw data to layout information.\n\t * @author Deqing Li(annong035@gmail.com)\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var numberUtil =  __webpack_require__(7);\n\n\n\t    module.exports = function (ecModel, api) {\n\n\t        ecModel.eachSeriesByType('themeRiver', function (seriesModel) {\n\n\t            var data = seriesModel.getData();\n\n\t            var single = seriesModel.coordinateSystem;\n\n\t            var layoutInfo = {};\n\n\t            // use the axis boundingRect for view\n\t            var rect = single.getRect();\n\n\t            layoutInfo.rect = rect;\n\n\t            var boundaryGap = seriesModel.get('boundaryGap');\n\n\t            var axis = single.getAxis();\n\n\t            layoutInfo.boundaryGap = boundaryGap;\n\n\t            if (axis.orient === 'horizontal') {\n\t                boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], rect.height);\n\t                boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], rect.height);\n\t                var height = rect.height - boundaryGap[0] - boundaryGap[1];\n\t                themeRiverLayout(data, seriesModel, height);\n\t            }\n\t            else {\n\t                boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], rect.width);\n\t                boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], rect.width);\n\t                var width = rect.width - boundaryGap[0] - boundaryGap[1];\n\t                themeRiverLayout(data, seriesModel, width);\n\t            }\n\n\t            data.setLayout('layoutInfo', layoutInfo);\n\t        });\n\t    };\n\n\t    /**\n\t     * The layout information about themeriver\n\t     *\n\t     * @param {module:echarts/data/List} data  data in the series\n\t     * @param {module:echarts/model/Series} seriesModel  the model object of themeRiver series\n\t     * @param {number} height  value used to compute every series height\n\t     */\n\t    function themeRiverLayout(data, seriesModel, height) {\n\t        if (!data.count()) {\n\t            return;\n\t        }\n\t        var coordSys = seriesModel.coordinateSystem;\n\t        // the data in each layer are organized into a series.\n\t        var layerSeries = seriesModel.getLayerSeries();\n\n\t        // the points in each layer.\n\t        var layerPoints = zrUtil.map(layerSeries, function (singleLayer) {\n\t            return zrUtil.map(singleLayer.indices, function (idx) {\n\t                var pt = coordSys.dataToPoint(data.get('time', idx));\n\t                pt[1] = data.get('value', idx);\n\t                return pt;\n\t            });\n\t        });\n\n\t        var base = computeBaseline(layerPoints);\n\t        var baseLine = base.y0;\n\t        var ky = height / base.max;\n\n\t        // set layout information for each item.\n\t        var n = layerSeries.length;\n\t        var m = layerSeries[0].indices.length;\n\t        var baseY0;\n\t        for (var j = 0; j < m; ++j) {\n\t            baseY0 = baseLine[j] * ky;\n\t            data.setItemLayout(layerSeries[0].indices[j], {\n\t                layerIndex: 0,\n\t                x: layerPoints[0][j][0],\n\t                y0: baseY0,\n\t                y: layerPoints[0][j][1] * ky\n\t            });\n\t            for (var i = 1; i < n; ++i) {\n\t                baseY0 += layerPoints[i - 1][j][1] * ky;\n\t                data.setItemLayout(layerSeries[i].indices[j], {\n\t                    layerIndex: i,\n\t                    x: layerPoints[i][j][0],\n\t                    y0: baseY0,\n\t                    y: layerPoints[i][j][1] * ky\n\t                });\n\t            }\n\t        }\n\t    }\n\n\t    /**\n\t     * Compute the baseLine of the rawdata\n\t     * Inspired by Lee Byron's paper Stacked Graphs - Geometry & Aesthetics\n\t     *\n\t     * @param  {Array.<Array>} data  the points in each layer\n\t     * @return {Array}\n\t     */\n\t    function computeBaseline(data) {\n\t        var layerNum = data.length;\n\t        var pointNum = data[0].length;\n\t        var sums = [];\n\t        var y0 = [];\n\t        var max = 0;\n\t        var temp;\n\t        var base = {};\n\n\t        for (var i = 0; i < pointNum; ++i) {\n\t            for (var j = 0, temp = 0; j < layerNum; ++j) {\n\t                temp += data[j][i][1];\n\t            }\n\t            if (temp > max) {\n\t                max = temp;\n\t            }\n\t            sums.push(temp);\n\t        }\n\n\t        for (var k = 0; k < pointNum; ++k) {\n\t            y0[k] = (max - sums[k]) / 2;\n\t        }\n\t        max = 0;\n\n\t        for (var l = 0; l < pointNum; ++l) {\n\t            var sum = sums[l] + y0[l];\n\t            if (sum > max) {\n\t                max = sum;\n\t            }\n\t        }\n\t        base.y0 = y0;\n\t        base.max = max;\n\n\t        return base;\n\t    }\n\n\n\n/***/ },\n/* 291 */\n/***/ function(module, exports) {\n\n\t/**\n\t * @file Visual encoding for themeRiver view\n\t * @author  Deqing Li(annong035@gmail.com)\n\t */\n\n\n\t    module.exports = function (ecModel) {\n\t        ecModel.eachSeriesByType('themeRiver', function (seriesModel) {\n\t            var data = seriesModel.getData();\n\t            var rawData = seriesModel.getRawData();\n\t            var colorList = seriesModel.get('color');\n\n\t            data.each(function (index) {\n\t                var name = data.getName(index);\n\t                var color = colorList[(seriesModel.nameMap[name] - 1) % colorList.length];\n\t                rawData.setItemVisual(index, 'color', color);\n\t            });\n\t        });\n\t    };\n\n\n\n/***/ },\n/* 292 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var echarts = __webpack_require__(1);\n\t    var zrUtil = __webpack_require__(4);\n\t    var modelUtil = __webpack_require__(5);\n\t    var graphicUtil = __webpack_require__(43);\n\t    var layoutUtil = __webpack_require__(21);\n\n\t    // -------------\n\t    // Preprocessor\n\t    // -------------\n\n\t    echarts.registerPreprocessor(function (option) {\n\t        var graphicOption = option && option.graphic;\n\n\t        // Convert\n\t        // {graphic: [{left: 10, type: 'circle'}, ...]}\n\t        // or\n\t        // {graphic: {left: 10, type: 'circle'}}\n\t        // to\n\t        // {graphic: [{elements: [{left: 10, type: 'circle'}, ...]}]}\n\t        if (zrUtil.isArray(graphicOption)) {\n\t            if (!graphicOption[0] || !graphicOption[0].elements) {\n\t                option.graphic = [{elements: graphicOption}];\n\t            }\n\t            else {\n\t                // Only one graphic instance can be instantiated. (We dont\n\t                // want that too many views are created in echarts._viewMap)\n\t                option.graphic = [option.graphic[0]];\n\t            }\n\t        }\n\t        else if (graphicOption && !graphicOption.elements) {\n\t            option.graphic = [{elements: [graphicOption]}];\n\t        }\n\t    });\n\n\t    // ------\n\t    // Model\n\t    // ------\n\n\t    var GraphicModel = echarts.extendComponentModel({\n\n\t        type: 'graphic',\n\n\t        defaultOption: {\n\n\t            // Extra properties for each elements:\n\t            //\n\t            // left/right/top/bottom: (like 12, '22%', 'center', default undefined)\n\t            //      If left/rigth is set, shape.x/shape.cx/position will not be used.\n\t            //      If top/bottom is set, shape.y/shape.cy/position will not be used.\n\t            //      This mechanism is useful when you want to position a group/element\n\t            //      against the right side or the center of this container.\n\t            //\n\t            // width/height: (can only be pixel value, default 0)\n\t            //      Only be used to specify contianer(group) size, if needed. And\n\t            //      can not be percentage value (like '33%'). See the reason in the\n\t            //      layout algorithm below.\n\t            //\n\t            // bounding: (enum: 'all' (default) | 'raw')\n\t            //      Specify how to calculate boundingRect when locating.\n\t            //      'all': Get uioned and transformed boundingRect\n\t            //          from both itself and its descendants.\n\t            //          This mode simplies confining a group of elements in the bounding\n\t            //          of their ancester container (e.g., using 'right: 0').\n\t            //      'raw': Only use the boundingRect of itself and before transformed.\n\t            //          This mode is similar to css behavior, which is useful when you\n\t            //          want an element to be able to overflow its container. (Consider\n\t            //          a rotated circle needs to be located in a corner.)\n\n\t            // Note: elements is always behind its ancestors in this elements array.\n\t            elements: [],\n\t            parentId: null\n\t        },\n\n\t        /**\n\t         * Save el options for the sake of the performance (only update modified graphics).\n\t         * The order is the same as those in option. (ancesters -> descendants)\n\t         *\n\t         * @private\n\t         * @type {Array.<Object>}\n\t         */\n\t        _elOptionsToUpdate: null,\n\n\t        /**\n\t         * @override\n\t         */\n\t        mergeOption: function (option) {\n\t            // Prevent default merge to elements\n\t            var elements = this.option.elements;\n\t            this.option.elements = null;\n\n\t            GraphicModel.superApply(this, 'mergeOption', arguments);\n\n\t            this.option.elements = elements;\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        optionUpdated: function (newOption, isInit) {\n\t            var thisOption = this.option;\n\t            var newList = (isInit ? thisOption : newOption).elements;\n\t            var existList = thisOption.elements = isInit ? [] : thisOption.elements;\n\n\t            var flattenedList = [];\n\t            this._flatten(newList, flattenedList);\n\n\t            var mappingResult = modelUtil.mappingToExists(existList, flattenedList);\n\t            modelUtil.makeIdAndName(mappingResult);\n\n\t            // Clear elOptionsToUpdate\n\t            var elOptionsToUpdate = this._elOptionsToUpdate = [];\n\n\t            zrUtil.each(mappingResult, function (resultItem, index) {\n\t                var existElOption = resultItem.exist;\n\t                var newElOption = resultItem.option;\n\n\t                if (true) {\n\t                    zrUtil.assert(\n\t                        zrUtil.isObject(newElOption) || existElOption,\n\t                        'Empty graphic option definition'\n\t                    );\n\t                }\n\n\t                if (!newElOption) {\n\t                    return;\n\t                }\n\n\t                // Set id and parent id after id assigned.\n\t                newElOption.id = resultItem.keyInfo.id;\n\t                var newElParentId = newElOption.parentId;\n\t                var newElParentOption = newElOption.parentOption;\n\t                var existElParentId = existElOption && existElOption.parentId;\n\t                !newElOption.type && existElOption && (newElOption.type = existElOption.type);\n\t                newElOption.parentId = newElParentId // parent id specified\n\t                    ? newElParentId\n\t                    : newElParentOption\n\t                    ? newElParentOption.id\n\t                    : existElParentId // parent not specified\n\t                    ? existElParentId\n\t                    : null;\n\t                newElOption.parentOption = null; // Clear\n\t                elOptionsToUpdate.push(newElOption);\n\n\t                // Update existing options, for `getOption` feature.\n\t                var newElOptCopy = zrUtil.extend({}, newElOption);\n\t                var $action = newElOption.$action;\n\t                if (!$action || $action === 'merge') {\n\t                    if (existElOption) {\n\n\t                        if (true) {\n\t                            var newType = newElOption.type;\n\t                            zrUtil.assert(\n\t                                !newType || existElOption.type === newType,\n\t                                'Please set $action: \"replace\" to change `type`'\n\t                            );\n\t                        }\n\n\t                        // We can ensure that newElOptCopy and existElOption are not\n\t                        // the same object, so `merge` will not change newElOptCopy.\n\t                        zrUtil.merge(existElOption, newElOptCopy, true);\n\t                        // Rigid body, use ignoreSize.\n\t                        layoutUtil.mergeLayoutParam(existElOption, newElOptCopy, {ignoreSize: true});\n\t                        // Will be used in render.\n\t                        layoutUtil.copyLayoutParams(newElOption, existElOption);\n\t                    }\n\t                    else {\n\t                        existList[index] = newElOptCopy;\n\t                    }\n\t                }\n\t                else if ($action === 'replace') {\n\t                    existList[index] = newElOptCopy;\n\t                }\n\t                else if ($action === 'remove') {\n\t                    // null will be cleaned later.\n\t                    existElOption && (existList[index] = null);\n\t                }\n\n\t                if (existList[index]) {\n\t                    existList[index].hv = newElOption.hv = [\n\t                        // Rigid body, dont care `width`.\n\t                        isSetLoc(newElOption, ['left', 'right']),\n\t                        // Rigid body, dont care `height`.\n\t                        isSetLoc(newElOption, ['top', 'bottom'])\n\t                    ];\n\t                    // Give default group size. Otherwise layout error may occur.\n\t                    if (existList[index].type === 'group') {\n\t                        existList[index].width == null && (existList[index].width = newElOption.width = 0);\n\t                        existList[index].height == null && (existList[index].height = newElOption.height = 0);\n\t                    }\n\t                }\n\n\t            }, this);\n\n\t            // Clean\n\t            for (var i = existList.length - 1; i >= 0; i--) {\n\t                if (existList[i] == null) {\n\t                    existList.splice(i, 1);\n\t                }\n\t                else {\n\t                    // $action should be volatile, otherwise option gotten from\n\t                    // `getOption` will contain unexpected $action.\n\t                    delete existList[i].$action;\n\t                }\n\t            }\n\t        },\n\n\t        /**\n\t         * Convert\n\t         * [{\n\t         *  type: 'group',\n\t         *  id: 'xx',\n\t         *  children: [{type: 'circle'}, {type: 'polygon'}]\n\t         * }]\n\t         * to\n\t         * [\n\t         *  {type: 'group', id: 'xx'},\n\t         *  {type: 'circle', parentId: 'xx'},\n\t         *  {type: 'polygon', parentId: 'xx'}\n\t         * ]\n\t         *\n\t         * @private\n\t         * @param {Array.<Object>} optionList option list\n\t         * @param {Array.<Object>} result result of flatten\n\t         * @param {Object} parentOption parent option\n\t         */\n\t        _flatten: function (optionList, result, parentOption) {\n\t            zrUtil.each(optionList, function (option) {\n\t                if (option) {\n\t                    if (parentOption) {\n\t                        option.parentOption = parentOption;\n\t                    }\n\n\t                    result.push(option);\n\n\t                    var children = option.children;\n\t                    if (option.type === 'group' && children) {\n\t                        this._flatten(children, result, option);\n\t                    }\n\t                    // Deleting for JSON output, and for not affecting group creation.\n\t                    delete option.children;\n\t                }\n\t            }, this);\n\t        },\n\n\t        // FIXME\n\t        // Pass to view using payload? setOption has a payload?\n\t        useElOptionsToUpdate: function () {\n\t            var els = this._elOptionsToUpdate;\n\t            // Clear to avoid render duplicately when zooming.\n\t            this._elOptionsToUpdate = null;\n\t            return els;\n\t        }\n\t    });\n\n\t    // -----\n\t    // View\n\t    // -----\n\n\t    echarts.extendComponentView({\n\n\t        type: 'graphic',\n\n\t        /**\n\t         * @override\n\t         */\n\t        init: function (ecModel, api) {\n\n\t            /**\n\t             * @private\n\t             * @type {Object}\n\t             */\n\t            this._elMap = {};\n\n\t            /**\n\t             * @private\n\t             * @type {module:echarts/graphic/GraphicModel}\n\t             */\n\t            this._lastGraphicModel;\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        render: function (graphicModel, ecModel, api) {\n\n\t            // Having leveraged between use cases and algorithm complexity, a very\n\t            // simple layout mechanism is used:\n\t            // The size(width/height) can be determined by itself or its parent (not\n\t            // implemented yet), but can not by its children. (Top-down travel)\n\t            // The location(x/y) can be determined by the bounding rect of itself\n\t            // (can including its descendants or not) and the size of its parent.\n\t            // (Bottom-up travel)\n\n\t            // When `chart.clear()` or `chart.setOption({...}, true)` with the same id,\n\t            // view will be reused.\n\t            if (graphicModel !== this._lastGraphicModel) {\n\t                this._clear();\n\t            }\n\t            this._lastGraphicModel = graphicModel;\n\n\t            this._updateElements(graphicModel, api);\n\t            this._relocate(graphicModel, api);\n\t        },\n\n\t        /**\n\t         * Update graphic elements.\n\t         *\n\t         * @private\n\t         * @param {Object} graphicModel graphic model\n\t         * @param {module:echarts/ExtensionAPI} api extension API\n\t         */\n\t        _updateElements: function (graphicModel, api) {\n\t            var elOptionsToUpdate = graphicModel.useElOptionsToUpdate();\n\n\t            if (!elOptionsToUpdate) {\n\t                return;\n\t            }\n\n\t            var elMap = this._elMap;\n\t            var rootGroup = this.group;\n\n\t            // Top-down tranverse to assign graphic settings to each elements.\n\t            zrUtil.each(elOptionsToUpdate, function (elOption) {\n\t                var $action = elOption.$action;\n\t                var id = elOption.id;\n\t                var existEl = elMap[id];\n\t                var parentId = elOption.parentId;\n\t                var targetElParent = parentId != null ? elMap[parentId] : rootGroup;\n\n\t                // In top/bottom mode, textVertical should not be used. And textBaseline\n\t                // should not be 'alphabetic', which cause inaccurately locating.\n\t                if (elOption.hv && elOption.hv[1] && elOption.type === 'text') {\n\t                    elOption.style = zrUtil.defaults({textBaseline: 'middle'}, elOption.style);\n\t                    elOption.style.textVerticalAlign = null;\n\t                }\n\n\t                // Remove unnecessary props to avoid potential problems.\n\t                var elOptionCleaned = getCleanedElOption(elOption);\n\n\t                // For simple, do not support parent change, otherwise reorder is needed.\n\t                if (true) {\n\t                    existEl && zrUtil.assert(\n\t                        targetElParent === existEl.parent,\n\t                        'Changing parent is not supported.'\n\t                    );\n\t                }\n\n\t                if (!$action || $action === 'merge') {\n\t                    existEl\n\t                        ? existEl.attr(elOptionCleaned)\n\t                        : createEl(id, targetElParent, elOptionCleaned, elMap);\n\t                }\n\t                else if ($action === 'replace') {\n\t                    removeEl(existEl, elMap);\n\t                    createEl(id, targetElParent, elOptionCleaned, elMap);\n\t                }\n\t                else if ($action === 'remove') {\n\t                    removeEl(existEl, elMap);\n\t                }\n\n\t                if (elMap[id]) {\n\t                    elMap[id].__ecGraphicWidth = elOption.width;\n\t                    elMap[id].__ecGraphicHeight = elOption.height;\n\t                }\n\t            });\n\t        },\n\n\t        /**\n\t         * Locate graphic elements.\n\t         *\n\t         * @private\n\t         * @param {Object} graphicModel graphic model\n\t         * @param {module:echarts/ExtensionAPI} api extension API\n\t         */\n\t        _relocate: function (graphicModel, api) {\n\t            var elOptions = graphicModel.option.elements;\n\t            var rootGroup = this.group;\n\t            var elMap = this._elMap;\n\n\t            // Bottom-up tranvese all elements (consider ec resize) to locate elements.\n\t            for (var i = elOptions.length - 1; i >= 0; i--) {\n\t                var elOption = elOptions[i];\n\t                var el = elMap[elOption.id];\n\n\t                if (!el) {\n\t                    continue;\n\t                }\n\n\t                var parentEl = el.parent;\n\t                var containerInfo = parentEl === rootGroup\n\t                    ? {\n\t                        width: api.getWidth(),\n\t                        height: api.getHeight()\n\t                    }\n\t                    : { // Like 'position:absolut' in css, default 0.\n\t                        width: parentEl.__ecGraphicWidth || 0,\n\t                        height: parentEl.__ecGraphicHeight || 0\n\t                    };\n\n\t                layoutUtil.positionElement(\n\t                    el, elOption, containerInfo, null,\n\t                    {hv: elOption.hv, boundingMode: elOption.bounding}\n\t                );\n\t            }\n\t        },\n\n\t        /**\n\t         * Clear all elements.\n\t         *\n\t         * @private\n\t         */\n\t        _clear: function () {\n\t            var elMap = this._elMap;\n\t            zrUtil.each(elMap, function (el) {\n\t                removeEl(el, elMap);\n\t            });\n\t            this._elMap = {};\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        dispose: function () {\n\t            this._clear();\n\t        }\n\t    });\n\n\t    function createEl(id, targetElParent, elOption, elMap) {\n\t        var graphicType = elOption.type;\n\n\t        if (true) {\n\t            zrUtil.assert(graphicType, 'graphic type MUST be set');\n\t        }\n\n\t        var Clz = graphicUtil[graphicType.charAt(0).toUpperCase() + graphicType.slice(1)];\n\n\t        if (true) {\n\t            zrUtil.assert(Clz, 'graphic type can not be found');\n\t        }\n\n\t        var el = new Clz(elOption);\n\t        targetElParent.add(el);\n\t        elMap[id] = el;\n\t        el.__ecGraphicId = id;\n\t    }\n\n\t    function removeEl(existEl, elMap) {\n\t        var existElParent = existEl && existEl.parent;\n\t        if (existElParent) {\n\t            existEl.type === 'group' && existEl.traverse(function (el) {\n\t                removeEl(el, elMap);\n\t            });\n\t            delete elMap[existEl.__ecGraphicId];\n\t            existElParent.remove(existEl);\n\t        }\n\t    }\n\n\t    // Remove unnecessary props to avoid potential problems.\n\t    function getCleanedElOption(elOption) {\n\t        elOption = zrUtil.extend({}, elOption);\n\t        zrUtil.each(\n\t            ['id', 'parentId', '$action', 'hv', 'bounding'].concat(layoutUtil.LOCATION_PARAMS),\n\t            function (name) {\n\t                delete elOption[name];\n\t            }\n\t        );\n\t        return elOption;\n\t    }\n\n\t    function isSetLoc(obj, props) {\n\t        var isSet;\n\t        zrUtil.each(props, function (prop) {\n\t            obj[prop] != null && obj[prop] !== 'auto' && (isSet = true);\n\t        });\n\t        return isSet;\n\t    }\n\n\n\n/***/ },\n/* 293 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Legend component entry file8\n\t */\n\n\n\t    __webpack_require__(294);\n\t    __webpack_require__(295);\n\t    __webpack_require__(296);\n\n\t    var echarts = __webpack_require__(1);\n\t    // Series Filter\n\t    echarts.registerProcessor(__webpack_require__(298));\n\n\n/***/ },\n/* 294 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var Model = __webpack_require__(12);\n\n\t    var LegendModel = __webpack_require__(1).extendComponentModel({\n\n\t        type: 'legend',\n\n\t        dependencies: ['series'],\n\n\t        layoutMode: {\n\t            type: 'box',\n\t            ignoreSize: true\n\t        },\n\n\t        init: function (option, parentModel, ecModel) {\n\t            this.mergeDefaultAndTheme(option, ecModel);\n\n\t            option.selected = option.selected || {};\n\t        },\n\n\t        mergeOption: function (option) {\n\t            LegendModel.superCall(this, 'mergeOption', option);\n\t        },\n\n\t        optionUpdated: function () {\n\t            this._updateData(this.ecModel);\n\n\t            var legendData = this._data;\n\n\t            // If selectedMode is single, try to select one\n\t            if (legendData[0] && this.get('selectedMode') === 'single') {\n\t                var hasSelected = false;\n\t                // If has any selected in option.selected\n\t                for (var i = 0; i < legendData.length; i++) {\n\t                    var name = legendData[i].get('name');\n\t                    if (this.isSelected(name)) {\n\t                        // Force to unselect others\n\t                        this.select(name);\n\t                        hasSelected = true;\n\t                        break;\n\t                    }\n\t                }\n\t                // Try select the first if selectedMode is single\n\t                !hasSelected && this.select(legendData[0].get('name'));\n\t            }\n\t        },\n\n\t        _updateData: function (ecModel) {\n\t            var legendData = zrUtil.map(this.get('data') || [], function (dataItem) {\n\t                // Can be string or number\n\t                if (typeof dataItem === 'string' || typeof dataItem === 'number') {\n\t                    dataItem = {\n\t                        name: dataItem\n\t                    };\n\t                }\n\t                return new Model(dataItem, this, this.ecModel);\n\t            }, this);\n\t            this._data = legendData;\n\n\t            var availableNames = zrUtil.map(ecModel.getSeries(), function (series) {\n\t                return series.name;\n\t            });\n\t            ecModel.eachSeries(function (seriesModel) {\n\t                if (seriesModel.legendDataProvider) {\n\t                    var data = seriesModel.legendDataProvider();\n\t                    availableNames = availableNames.concat(data.mapArray(data.getName));\n\t                }\n\t            });\n\t            /**\n\t             * @type {Array.<string>}\n\t             * @private\n\t             */\n\t            this._availableNames = availableNames;\n\t        },\n\n\t        /**\n\t         * @return {Array.<module:echarts/model/Model>}\n\t         */\n\t        getData: function () {\n\t            return this._data;\n\t        },\n\n\t        /**\n\t         * @param {string} name\n\t         */\n\t        select: function (name) {\n\t            var selected = this.option.selected;\n\t            var selectedMode = this.get('selectedMode');\n\t            if (selectedMode === 'single') {\n\t                var data = this._data;\n\t                zrUtil.each(data, function (dataItem) {\n\t                    selected[dataItem.get('name')] = false;\n\t                });\n\t            }\n\t            selected[name] = true;\n\t        },\n\n\t        /**\n\t         * @param {string} name\n\t         */\n\t        unSelect: function (name) {\n\t            if (this.get('selectedMode') !== 'single') {\n\t                this.option.selected[name] = false;\n\t            }\n\t        },\n\n\t        /**\n\t         * @param {string} name\n\t         */\n\t        toggleSelected: function (name) {\n\t            var selected = this.option.selected;\n\t            // Default is true\n\t            if (!selected.hasOwnProperty(name)) {\n\t                selected[name] = true;\n\t            }\n\t            this[selected[name] ? 'unSelect' : 'select'](name);\n\t        },\n\n\t        /**\n\t         * @param {string} name\n\t         */\n\t        isSelected: function (name) {\n\t            var selected = this.option.selected;\n\t            return !(selected.hasOwnProperty(name) && !selected[name])\n\t                && zrUtil.indexOf(this._availableNames, name) >= 0;\n\t        },\n\n\t        defaultOption: {\n\t            // 一级层叠\n\t            zlevel: 0,\n\t            // 二级层叠\n\t            z: 4,\n\t            show: true,\n\n\t            // 布局方式，默认为水平布局，可选为：\n\t            // 'horizontal' | 'vertical'\n\t            orient: 'horizontal',\n\n\t            left: 'center',\n\t            // right: 'center',\n\n\t            top: 'top',\n\t            // bottom: 'top',\n\n\t            // 水平对齐\n\t            // 'auto' | 'left' | 'right'\n\t            // 默认为 'auto', 根据 x 的位置判断是左对齐还是右对齐\n\t            align: 'auto',\n\n\t            backgroundColor: 'rgba(0,0,0,0)',\n\t            // 图例边框颜色\n\t            borderColor: '#ccc',\n\t            // 图例边框线宽，单位px，默认为0（无边框）\n\t            borderWidth: 0,\n\t            // 图例内边距，单位px，默认各方向内边距为5，\n\t            // 接受数组分别设定上右下左边距，同css\n\t            padding: 5,\n\t            // 各个item之间的间隔，单位px，默认为10，\n\t            // 横向布局时为水平间隔，纵向布局时为纵向间隔\n\t            itemGap: 10,\n\t            // 图例图形宽度\n\t            itemWidth: 25,\n\t            // 图例图形高度\n\t            itemHeight: 14,\n\n\t            // 图例关闭时候的颜色\n\t            inactiveColor: '#ccc',\n\n\t            textStyle: {\n\t                // 图例文字颜色\n\t                color: '#333'\n\t            },\n\t            // formatter: '',\n\t            // 选择模式，默认开启图例开关\n\t            selectedMode: true,\n\t            // 配置默认选中状态，可配合LEGEND.SELECTED事件做动态数据载入\n\t            // selected: null,\n\t            // 图例内容（详见legend.data，数组中每一项代表一个item\n\t            // data: [],\n\n\t            // Tooltip 相关配置\n\t            tooltip: {\n\t                show: false\n\t            }\n\t        }\n\t    });\n\n\t    module.exports = LegendModel;\n\n\n/***/ },\n/* 295 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Legend action\n\t */\n\n\n\t    var echarts = __webpack_require__(1);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    function legendSelectActionHandler(methodName, payload, ecModel) {\n\t        var selectedMap = {};\n\t        var isToggleSelect = methodName === 'toggleSelected';\n\t        var isSelected;\n\t        // Update all legend components\n\t        ecModel.eachComponent('legend', function (legendModel) {\n\t            if (isToggleSelect && isSelected != null) {\n\t                // Force other legend has same selected status\n\t                // Or the first is toggled to true and other are toggled to false\n\t                // In the case one legend has some item unSelected in option. And if other legend\n\t                // doesn't has the item, they will assume it is selected.\n\t                legendModel[isSelected ? 'select' : 'unSelect'](payload.name);\n\t            }\n\t            else {\n\t                legendModel[methodName](payload.name);\n\t                isSelected = legendModel.isSelected(payload.name);\n\t            }\n\t            var legendData = legendModel.getData();\n\t            zrUtil.each(legendData, function (model) {\n\t                var name = model.get('name');\n\t                // Wrap element\n\t                if (name === '\\n' || name === '') {\n\t                    return;\n\t                }\n\t                var isItemSelected = legendModel.isSelected(name);\n\t                if (name in selectedMap) {\n\t                    // Unselected if any legend is unselected\n\t                    selectedMap[name] = selectedMap[name] && isItemSelected;\n\t                }\n\t                else {\n\t                    selectedMap[name] = isItemSelected;\n\t                }\n\t            });\n\t        });\n\t        // Return the event explicitly\n\t        return {\n\t            name: payload.name,\n\t            selected: selectedMap\n\t        };\n\t    }\n\t    /**\n\t     * @event legendToggleSelect\n\t     * @type {Object}\n\t     * @property {string} type 'legendToggleSelect'\n\t     * @property {string} [from]\n\t     * @property {string} name Series name or data item name\n\t     */\n\t    echarts.registerAction(\n\t        'legendToggleSelect', 'legendselectchanged',\n\t        zrUtil.curry(legendSelectActionHandler, 'toggleSelected')\n\t    );\n\n\t    /**\n\t     * @event legendSelect\n\t     * @type {Object}\n\t     * @property {string} type 'legendSelect'\n\t     * @property {string} name Series name or data item name\n\t     */\n\t    echarts.registerAction(\n\t        'legendSelect', 'legendselected',\n\t        zrUtil.curry(legendSelectActionHandler, 'select')\n\t    );\n\n\t    /**\n\t     * @event legendUnSelect\n\t     * @type {Object}\n\t     * @property {string} type 'legendUnSelect'\n\t     * @property {string} name Series name or data item name\n\t     */\n\t    echarts.registerAction(\n\t        'legendUnSelect', 'legendunselected',\n\t        zrUtil.curry(legendSelectActionHandler, 'unSelect')\n\t    );\n\n\n/***/ },\n/* 296 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var symbolCreator = __webpack_require__(107);\n\t    var graphic = __webpack_require__(43);\n\t    var listComponentHelper = __webpack_require__(297);\n\n\t    var curry = zrUtil.curry;\n\n\t    function dispatchSelectAction(name, api) {\n\t        api.dispatchAction({\n\t            type: 'legendToggleSelect',\n\t            name: name\n\t        });\n\t    }\n\n\t    function dispatchHighlightAction(seriesModel, dataName, api) {\n\t        // If element hover will move to a hoverLayer.\n\t        var el = api.getZr().storage.getDisplayList()[0];\n\t        if (!(el && el.useHoverLayer)) {\n\t            seriesModel.get('legendHoverLink') && api.dispatchAction({\n\t                type: 'highlight',\n\t                seriesName: seriesModel.name,\n\t                name: dataName\n\t            });\n\t        }\n\t    }\n\n\t    function dispatchDownplayAction(seriesModel, dataName, api) {\n\t        // If element hover will move to a hoverLayer.\n\t        var el = api.getZr().storage.getDisplayList()[0];\n\t        if (!(el && el.useHoverLayer)) {\n\t            seriesModel.get('legendHoverLink') && api.dispatchAction({\n\t                type: 'downplay',\n\t                seriesName: seriesModel.name,\n\t                name: dataName\n\t            });\n\t        }\n\t    }\n\n\t    module.exports = __webpack_require__(1).extendComponentView({\n\n\t        type: 'legend',\n\n\t        init: function () {\n\t            this._symbolTypeStore = {};\n\t        },\n\n\t        render: function (legendModel, ecModel, api) {\n\t            var group = this.group;\n\t            group.removeAll();\n\n\t            if (!legendModel.get('show')) {\n\t                return;\n\t            }\n\n\t            var selectMode = legendModel.get('selectedMode');\n\t            var itemAlign = legendModel.get('align');\n\n\t            if (itemAlign === 'auto') {\n\t                itemAlign = (legendModel.get('left') === 'right'\n\t                    && legendModel.get('orient') === 'vertical')\n\t                    ? 'right' : 'left';\n\t            }\n\n\t            var legendDrawedMap = {};\n\n\t            zrUtil.each(legendModel.getData(), function (itemModel) {\n\t                var name = itemModel.get('name');\n\n\t                // Use empty string or \\n as a newline string\n\t                if (name === '' || name === '\\n') {\n\t                    group.add(new graphic.Group({\n\t                        newline: true\n\t                    }));\n\t                    return;\n\t                }\n\n\t                var seriesModel = ecModel.getSeriesByName(name)[0];\n\n\t                if (legendDrawedMap[name]) {\n\t                    // Have been drawed\n\t                    return;\n\t                }\n\n\t                // Series legend\n\t                if (seriesModel) {\n\t                    var data = seriesModel.getData();\n\t                    var color = data.getVisual('color');\n\n\t                    // If color is a callback function\n\t                    if (typeof color === 'function') {\n\t                        // Use the first data\n\t                        color = color(seriesModel.getDataParams(0));\n\t                    }\n\n\t                    // Using rect symbol defaultly\n\t                    var legendSymbolType = data.getVisual('legendSymbol') || 'roundRect';\n\t                    var symbolType = data.getVisual('symbol');\n\n\t                    var itemGroup = this._createItem(\n\t                        name, itemModel, legendModel,\n\t                        legendSymbolType, symbolType,\n\t                        itemAlign, color,\n\t                        selectMode\n\t                    );\n\n\t                    itemGroup.on('click', curry(dispatchSelectAction, name, api))\n\t                        .on('mouseover', curry(dispatchHighlightAction, seriesModel, null, api))\n\t                        .on('mouseout', curry(dispatchDownplayAction, seriesModel, null, api));\n\n\t                    legendDrawedMap[name] = true;\n\t                }\n\t                else {\n\t                    // Data legend of pie, funnel\n\t                    ecModel.eachRawSeries(function (seriesModel) {\n\t                        // In case multiple series has same data name\n\t                        if (legendDrawedMap[name]) {\n\t                            return;\n\t                        }\n\t                        if (seriesModel.legendDataProvider) {\n\t                            var data = seriesModel.legendDataProvider();\n\t                            var idx = data.indexOfName(name);\n\t                            if (idx < 0) {\n\t                                return;\n\t                            }\n\n\t                            var color = data.getItemVisual(idx, 'color');\n\n\t                            var legendSymbolType = 'roundRect';\n\n\t                            var itemGroup = this._createItem(\n\t                                name, itemModel, legendModel,\n\t                                legendSymbolType, null,\n\t                                itemAlign, color,\n\t                                selectMode\n\t                            );\n\n\t                            itemGroup.on('click', curry(dispatchSelectAction, name, api))\n\t                                // FIXME Should not specify the series name\n\t                                .on('mouseover', curry(dispatchHighlightAction, seriesModel, name, api))\n\t                                .on('mouseout', curry(dispatchDownplayAction, seriesModel, name, api));\n\n\t                            legendDrawedMap[name] = true;\n\t                        }\n\t                    }, this);\n\t                }\n\n\t                if (true) {\n\t                    if (!legendDrawedMap[name]) {\n\t                        console.warn(name + ' series not exists. Legend data should be same with series name or data name.');\n\t                    }\n\t                }\n\t            }, this);\n\n\t            listComponentHelper.layout(group, legendModel, api);\n\t            // Render background after group is layout\n\t            // FIXME\n\t            listComponentHelper.addBackground(group, legendModel);\n\t        },\n\n\t        _createItem: function (\n\t            name, itemModel, legendModel,\n\t            legendSymbolType, symbolType,\n\t            itemAlign, color, selectMode\n\t        ) {\n\t            var itemWidth = legendModel.get('itemWidth');\n\t            var itemHeight = legendModel.get('itemHeight');\n\t            var inactiveColor = legendModel.get('inactiveColor');\n\n\t            var isSelected = legendModel.isSelected(name);\n\t            var itemGroup = new graphic.Group();\n\n\t            var textStyleModel = itemModel.getModel('textStyle');\n\n\t            var itemIcon = itemModel.get('icon');\n\n\t            var tooltipModel = itemModel.getModel('tooltip');\n\t            var legendGlobalTooltipModel = tooltipModel.parentModel;\n\n\t            // Use user given icon first\n\t            legendSymbolType = itemIcon || legendSymbolType;\n\t            itemGroup.add(symbolCreator.createSymbol(\n\t                legendSymbolType, 0, 0, itemWidth, itemHeight, isSelected ? color : inactiveColor\n\t            ));\n\n\t            // Compose symbols\n\t            // PENDING\n\t            if (!itemIcon && symbolType\n\t                // At least show one symbol, can't be all none\n\t                && ((symbolType !== legendSymbolType) || symbolType == 'none')\n\t            ) {\n\t                var size = itemHeight * 0.8;\n\t                if (symbolType === 'none') {\n\t                    symbolType = 'circle';\n\t                }\n\t                // Put symbol in the center\n\t                itemGroup.add(symbolCreator.createSymbol(\n\t                    symbolType, (itemWidth - size) / 2, (itemHeight - size) / 2, size, size,\n\t                    isSelected ? color : inactiveColor\n\t                ));\n\t            }\n\n\t            // Text\n\t            var textX = itemAlign === 'left' ? itemWidth + 5 : -5;\n\t            var textAlign = itemAlign;\n\n\t            var formatter = legendModel.get('formatter');\n\t            var content = name;\n\t            if (typeof formatter === 'string' && formatter) {\n\t                content = formatter.replace('{name}', name != null ? name : '');\n\t            }\n\t            else if (typeof formatter === 'function') {\n\t                content = formatter(name);\n\t            }\n\n\t            var text = new graphic.Text({\n\t                style: {\n\t                    text: content,\n\t                    x: textX,\n\t                    y: itemHeight / 2,\n\t                    fill: isSelected ? textStyleModel.getTextColor() : inactiveColor,\n\t                    textFont: textStyleModel.getFont(),\n\t                    textAlign: textAlign,\n\t                    textVerticalAlign: 'middle'\n\t                }\n\t            });\n\t            itemGroup.add(text);\n\n\t            // Add a invisible rect to increase the area of mouse hover\n\t            var hitRect = new graphic.Rect({\n\t                shape: itemGroup.getBoundingRect(),\n\t                invisible: true,\n\t                tooltip: tooltipModel.get('show') ? zrUtil.extend({\n\t                    content: name,\n\t                    // Defaul formatter\n\t                    formatter: legendGlobalTooltipModel.get('formatter', true) || function () {\n\t                        return name;\n\t                    },\n\t                    formatterParams: {\n\t                        componentType: 'legend',\n\t                        legendIndex: legendModel.componentIndex,\n\t                        name: name,\n\t                        $vars: ['name']\n\t                    }\n\t                }, tooltipModel.option) : null\n\t            });\n\t            itemGroup.add(hitRect);\n\n\t            itemGroup.eachChild(function (child) {\n\t                child.silent = true;\n\t            });\n\n\t            hitRect.silent = !selectMode;\n\n\n\n\t            this.group.add(itemGroup);\n\n\t            graphic.setHoverStyle(itemGroup);\n\n\t            return itemGroup;\n\t        }\n\t    });\n\n\n/***/ },\n/* 297 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t    // List layout\n\t    var layout = __webpack_require__(21);\n\t    var formatUtil = __webpack_require__(6);\n\t    var graphic = __webpack_require__(43);\n\n\t    function positionGroup(group, model, api) {\n\t        layout.positionElement(\n\t            group, model.getBoxLayoutParams(),\n\t            {\n\t                width: api.getWidth(),\n\t                height: api.getHeight()\n\t            },\n\t            model.get('padding')\n\t        );\n\t    }\n\n\t    module.exports = {\n\t        /**\n\t         * Layout list like component.\n\t         * It will box layout each items in group of component and then position the whole group in the viewport\n\t         * @param {module:zrender/group/Group} group\n\t         * @param {module:echarts/model/Component} componentModel\n\t         * @param {module:echarts/ExtensionAPI}\n\t         */\n\t        layout: function (group, componentModel, api) {\n\t            var rect = layout.getLayoutRect(componentModel.getBoxLayoutParams(), {\n\t                width: api.getWidth(),\n\t                height: api.getHeight()\n\t            }, componentModel.get('padding'));\n\t            layout.box(\n\t                componentModel.get('orient'),\n\t                group,\n\t                componentModel.get('itemGap'),\n\t                rect.width,\n\t                rect.height\n\t            );\n\n\t            positionGroup(group, componentModel, api);\n\t        },\n\n\t        addBackground: function (group, componentModel) {\n\t            var padding = formatUtil.normalizeCssArray(\n\t                componentModel.get('padding')\n\t            );\n\t            var boundingRect = group.getBoundingRect();\n\t            var style = componentModel.getItemStyle(['color', 'opacity']);\n\t            style.fill = componentModel.get('backgroundColor');\n\t            var rect = new graphic.Rect({\n\t                shape: {\n\t                    x: boundingRect.x - padding[3],\n\t                    y: boundingRect.y - padding[0],\n\t                    width: boundingRect.width + padding[1] + padding[3],\n\t                    height: boundingRect.height + padding[0] + padding[2]\n\t                },\n\t                style: style,\n\t                silent: true,\n\t                z2: -1\n\t            });\n\t            graphic.subPixelOptimizeRect(rect);\n\n\t            group.add(rect);\n\t        }\n\t    };\n\n\n/***/ },\n/* 298 */\n/***/ function(module, exports) {\n\n\t\n\t   module.exports = function (ecModel) {\n\t        var legendModels = ecModel.findComponents({\n\t            mainType: 'legend'\n\t        });\n\t        if (legendModels && legendModels.length) {\n\t            ecModel.filterSeries(function (series) {\n\t                // If in any legend component the status is not selected.\n\t                // Because in legend series is assumed selected when it is not in the legend data.\n\t                for (var i = 0; i < legendModels.length; i++) {\n\t                    if (!legendModels[i].isSelected(series.name)) {\n\t                        return false;\n\t                    }\n\t                }\n\t                return true;\n\t            });\n\t        }\n\t    };\n\n\n/***/ },\n/* 299 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// FIXME Better way to pack data in graphic element\n\n\n\t    __webpack_require__(300);\n\n\t    __webpack_require__(301);\n\n\t    // Show tip action\n\t    /**\n\t     * @action\n\t     * @property {string} type\n\t     * @property {number} seriesIndex\n\t     * @property {number} dataIndex\n\t     * @property {number} [x]\n\t     * @property {number} [y]\n\t     */\n\t    __webpack_require__(1).registerAction(\n\t        {\n\t            type: 'showTip',\n\t            event: 'showTip',\n\t            update: 'tooltip:manuallyShowTip'\n\t        },\n\t        // noop\n\t        function () {}\n\t    );\n\t    // Hide tip action\n\t    __webpack_require__(1).registerAction(\n\t        {\n\t            type: 'hideTip',\n\t            event: 'hideTip',\n\t            update: 'tooltip:manuallyHideTip'\n\t        },\n\t        // noop\n\t        function () {}\n\t    );\n\n\n/***/ },\n/* 300 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    __webpack_require__(1).extendComponentModel({\n\n\t        type: 'tooltip',\n\n\t        defaultOption: {\n\t            zlevel: 0,\n\n\t            z: 8,\n\n\t            show: true,\n\n\t            // tooltip主体内容\n\t            showContent: true,\n\n\t            // 触发类型，默认数据触发，见下图，可选为：'item' ¦ 'axis'\n\t            trigger: 'item',\n\n\t            // 触发条件，支持 'click' | 'mousemove' | 'none'\n\t            triggerOn: 'mousemove',\n\n\t            // 是否永远显示 content\n\t            alwaysShowContent: false,\n\n\t            // 位置 {Array} | {Function}\n\t            // position: null\n\n\t            // 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。\n\t            confine: false,\n\n\t            // 内容格式器：{string}（Template） ¦ {Function}\n\t            // formatter: null\n\n\t            showDelay: 0,\n\n\t            // 隐藏延迟，单位ms\n\t            hideDelay: 100,\n\n\t            // 动画变换时间，单位s\n\t            transitionDuration: 0.4,\n\n\t            enterable: false,\n\n\t            // 提示背景颜色，默认为透明度为0.7的黑色\n\t            backgroundColor: 'rgba(50,50,50,0.7)',\n\n\t            // 提示边框颜色\n\t            borderColor: '#333',\n\n\t            // 提示边框圆角，单位px，默认为4\n\t            borderRadius: 4,\n\n\t            // 提示边框线宽，单位px，默认为0（无边框）\n\t            borderWidth: 0,\n\n\t            // 提示内边距，单位px，默认各方向内边距为5，\n\t            // 接受数组分别设定上右下左边距，同css\n\t            padding: 5,\n\n\t            // Extra css text\n\t            extraCssText: '',\n\n\t            // 坐标轴指示器，坐标轴触发有效\n\t            axisPointer: {\n\t                // 默认为直线\n\t                // 可选为：'line' | 'shadow' | 'cross'\n\t                type: 'line',\n\n\t                // type 为 line 的时候有效，指定 tooltip line 所在的轴，可选\n\t                // 可选 'x' | 'y' | 'angle' | 'radius' | 'auto'\n\t                // 默认 'auto'，会选择类型为 cateogry 的轴，对于双数值轴，笛卡尔坐标系会默认选择 x 轴\n\t                // 极坐标系会默认选择 angle 轴\n\t                axis: 'auto',\n\n\t                animation: true,\n\t                animationDurationUpdate: 200,\n\t                animationEasingUpdate: 'exponentialOut',\n\n\t                // 直线指示器样式设置\n\t                lineStyle: {\n\t                    color: '#555',\n\t                    width: 1,\n\t                    type: 'solid'\n\t                },\n\n\t                crossStyle: {\n\t                    color: '#555',\n\t                    width: 1,\n\t                    type: 'dashed',\n\n\t                    // TODO formatter\n\t                    textStyle: {}\n\t                },\n\n\t                // 阴影指示器样式设置\n\t                shadowStyle: {\n\t                    color: 'rgba(150,150,150,0.3)'\n\t                }\n\t            },\n\t            textStyle: {\n\t                color: '#fff',\n\t                fontSize: 14\n\t            }\n\t        }\n\t    });\n\n\n/***/ },\n/* 301 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var TooltipContent = __webpack_require__(302);\n\t    var graphic = __webpack_require__(43);\n\t    var zrUtil = __webpack_require__(4);\n\t    var formatUtil = __webpack_require__(6);\n\t    var numberUtil = __webpack_require__(7);\n\t    var modelUtil = __webpack_require__(5);\n\t    var parsePercent = numberUtil.parsePercent;\n\t    var env = __webpack_require__(2);\n\t    var Model = __webpack_require__(12);\n\n\t    function dataEqual(a, b) {\n\t        if (!a || !b) {\n\t            return false;\n\t        }\n\t        var round = numberUtil.round;\n\t        return round(a[0]) === round(b[0])\n\t            && round(a[1]) === round(b[1]);\n\t    }\n\t    /**\n\t     * @inner\n\t     */\n\t    function makeLineShape(x1, y1, x2, y2) {\n\t        return {\n\t            x1: x1,\n\t            y1: y1,\n\t            x2: x2,\n\t            y2: y2\n\t        };\n\t    }\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function makeRectShape(x, y, width, height) {\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            width: width,\n\t            height: height\n\t        };\n\t    }\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function makeSectorShape(cx, cy, r0, r, startAngle, endAngle) {\n\t        return {\n\t            cx: cx,\n\t            cy: cy,\n\t            r0: r0,\n\t            r: r,\n\t            startAngle: startAngle,\n\t            endAngle: endAngle,\n\t            clockwise: true\n\t        };\n\t    }\n\n\t    function refixTooltipPosition(x, y, el, viewWidth, viewHeight) {\n\t        var width = el.clientWidth;\n\t        var height = el.clientHeight;\n\t        var gap = 20;\n\n\t        if (x + width + gap > viewWidth) {\n\t            x -= width + gap;\n\t        }\n\t        else {\n\t            x += gap;\n\t        }\n\t        if (y + height + gap > viewHeight) {\n\t            y -= height + gap;\n\t        }\n\t        else {\n\t            y += gap;\n\t        }\n\t        return [x, y];\n\t    }\n\n\t    function confineTooltipPosition(x, y, el, viewWidth, viewHeight) {\n\t        var width = el.clientWidth;\n\t        var height = el.clientHeight;\n\n\t        x = Math.min(x + width, viewWidth) - width;\n\t        y = Math.min(y + height, viewHeight) - height;\n\t        x = Math.max(x, 0);\n\t        y = Math.max(y, 0);\n\n\t        return [x, y];\n\t    }\n\n\t    function calcTooltipPosition(position, rect, dom) {\n\t        var domWidth = dom.clientWidth;\n\t        var domHeight = dom.clientHeight;\n\t        var gap = 5;\n\t        var x = 0;\n\t        var y = 0;\n\t        var rectWidth = rect.width;\n\t        var rectHeight = rect.height;\n\t        switch (position) {\n\t            case 'inside':\n\t                x = rect.x + rectWidth / 2 - domWidth / 2;\n\t                y = rect.y + rectHeight / 2 - domHeight / 2;\n\t                break;\n\t            case 'top':\n\t                x = rect.x + rectWidth / 2 - domWidth / 2;\n\t                y = rect.y - domHeight - gap;\n\t                break;\n\t            case 'bottom':\n\t                x = rect.x + rectWidth / 2 - domWidth / 2;\n\t                y = rect.y + rectHeight + gap;\n\t                break;\n\t            case 'left':\n\t                x = rect.x - domWidth - gap;\n\t                y = rect.y + rectHeight / 2 - domHeight / 2;\n\t                break;\n\t            case 'right':\n\t                x = rect.x + rectWidth + gap;\n\t                y = rect.y + rectHeight / 2 - domHeight / 2;\n\t        }\n\t        return [x, y];\n\t    }\n\n\t    /**\n\t     * @param  {string|Function|Array.<number>} positionExpr\n\t     * @param  {number} x Mouse x\n\t     * @param  {number} y Mouse y\n\t     * @param  {boolean} confine Whether confine tooltip content in view rect.\n\t     * @param  {module:echarts/component/tooltip/TooltipContent} content\n\t     * @param  {Object|<Array.<Object>} params\n\t     * @param  {module:zrender/Element} el target element\n\t     * @param  {module:echarts/ExtensionAPI} api\n\t     * @return {Array.<number>}\n\t     */\n\t    function updatePosition(positionExpr, x, y, confine, content, params, el, api) {\n\t        var viewWidth = api.getWidth();\n\t        var viewHeight = api.getHeight();\n\n\t        var rect = el && el.getBoundingRect().clone();\n\t        el && rect.applyTransform(el.transform);\n\t        if (typeof positionExpr === 'function') {\n\t            // Callback of position can be an array or a string specify the position\n\t            positionExpr = positionExpr([x, y], params, content.el, rect);\n\t        }\n\n\t        if (zrUtil.isArray(positionExpr)) {\n\t            x = parsePercent(positionExpr[0], viewWidth);\n\t            y = parsePercent(positionExpr[1], viewHeight);\n\t        }\n\t        // Specify tooltip position by string 'top' 'bottom' 'left' 'right' around graphic element\n\t        else if (typeof positionExpr === 'string' && el) {\n\t            var pos = calcTooltipPosition(\n\t                positionExpr, rect, content.el\n\t            );\n\t            x = pos[0];\n\t            y = pos[1];\n\t        }\n\t        else {\n\t            var pos = refixTooltipPosition(\n\t                x, y, content.el, viewWidth, viewHeight\n\t            );\n\t            x = pos[0];\n\t            y = pos[1];\n\t        }\n\n\t        if (confine) {\n\t            var pos = confineTooltipPosition(\n\t                x, y, content.el, viewWidth, viewHeight\n\t            );\n\t            x = pos[0];\n\t            y = pos[1];\n\t        }\n\n\t        content.moveTo(x, y);\n\t    }\n\n\t    function ifSeriesSupportAxisTrigger(seriesModel) {\n\t        var coordSys = seriesModel.coordinateSystem;\n\t        var trigger = seriesModel.get('tooltip.trigger', true);\n\t        // Ignore series use item tooltip trigger and series coordinate system is not cartesian or\n\t        return !(!coordSys\n\t            || (coordSys.type !== 'cartesian2d' && coordSys.type !== 'polar' && coordSys.type !== 'singleAxis')\n\t            || trigger === 'item');\n\t    }\n\n\t    __webpack_require__(1).extendComponentView({\n\n\t        type: 'tooltip',\n\n\t        _axisPointers: {},\n\n\t        init: function (ecModel, api) {\n\t            if (env.node) {\n\t                return;\n\t            }\n\t            var tooltipContent = new TooltipContent(api.getDom(), api);\n\t            this._tooltipContent = tooltipContent;\n\t        },\n\n\t        render: function (tooltipModel, ecModel, api) {\n\t            if (env.node) {\n\t                return;\n\t            }\n\n\t            // Reset\n\t            this.group.removeAll();\n\n\t            /**\n\t             * @type {Object}\n\t             * @private\n\t             */\n\t            this._axisPointers = {};\n\n\t            /**\n\t             * @private\n\t             * @type {module:echarts/component/tooltip/TooltipModel}\n\t             */\n\t            this._tooltipModel = tooltipModel;\n\n\t            /**\n\t             * @private\n\t             * @type {module:echarts/model/Global}\n\t             */\n\t            this._ecModel = ecModel;\n\n\t            /**\n\t             * @private\n\t             * @type {module:echarts/ExtensionAPI}\n\t             */\n\t            this._api = api;\n\n\t            /**\n\t             * @type {Object}\n\t             * @private\n\t             */\n\t            this._lastHover = {\n\t                // data\n\t                // payloadBatch\n\t            };\n\n\t            var tooltipContent = this._tooltipContent;\n\t            tooltipContent.update();\n\t            tooltipContent.enterable = tooltipModel.get('enterable');\n\t            this._alwaysShowContent = tooltipModel.get('alwaysShowContent');\n\n\t            /**\n\t             * @type {Object.<string, Array>}\n\t             */\n\t            this._seriesGroupByAxis = this._prepareAxisTriggerData(\n\t                tooltipModel, ecModel\n\t            );\n\n\t            var crossText = this._crossText;\n\t            if (crossText) {\n\t                this.group.add(crossText);\n\t            }\n\n\t            var triggerOn = tooltipModel.get('triggerOn');\n\n\t            // Try to keep the tooltip show when refreshing\n\t            if (this._lastX != null\n\t                && this._lastY != null\n\t                // When user is willing to control tooltip totally using API,\n\t                // self.manuallyShowTip({x, y}) might cause tooltip hide,\n\t                // which is not expected.\n\t                && triggerOn !== 'none'\n\t            ) {\n\t                var self = this;\n\t                clearTimeout(this._refreshUpdateTimeout);\n\t                this._refreshUpdateTimeout = setTimeout(function () {\n\t                    // Show tip next tick after other charts are rendered\n\t                    // In case highlight action has wrong result\n\t                    // FIXME\n\t                    self.manuallyShowTip(tooltipModel, ecModel, api, {\n\t                        x: self._lastX,\n\t                        y: self._lastY\n\t                    });\n\t                });\n\t            }\n\n\t            var zr = this._api.getZr();\n\t            zr.off('click', this._tryShow);\n\t            zr.off('mousemove', this._mousemove);\n\t            zr.off('mouseout', this._hide);\n\t            zr.off('globalout', this._hide);\n\n\t            if (triggerOn === 'click') {\n\t                zr.on('click', this._tryShow, this);\n\t            }\n\t            else if (triggerOn === 'mousemove') {\n\t                zr.on('mousemove', this._mousemove, this);\n\t                zr.on('mouseout', this._hide, this);\n\t                zr.on('globalout', this._hide, this);\n\t            }\n\t            // else triggerOn is 'none', which enable user\n\t            // to control tooltip totally using API.\n\t        },\n\n\t        _mousemove: function (e) {\n\t            var showDelay = this._tooltipModel.get('showDelay');\n\t            var self = this;\n\t            clearTimeout(this._showTimeout);\n\t            if (showDelay > 0) {\n\t                this._showTimeout = setTimeout(function () {\n\t                    self._tryShow(e);\n\t                }, showDelay);\n\t            }\n\t            else {\n\t                this._tryShow(e);\n\t            }\n\t        },\n\n\t        /**\n\t         * Show tip manually by\n\t         * dispatchAction({\n\t         *     type: 'showTip',\n\t         *     x: 10,\n\t         *     y: 10\n\t         * });\n\t         * Or\n\t         * dispatchAction({\n\t         *      type: 'showTip',\n\t         *      seriesIndex: 0,\n\t         *      dataIndex or dataIndexInside or name\n\t         * });\n\t         *\n\t         *  TODO Batch\n\t         */\n\t        manuallyShowTip: function (tooltipModel, ecModel, api, payload) {\n\t            // From self\n\t            if (payload.from === this.uid) {\n\t                return;\n\t            }\n\n\t            var ecModel = this._ecModel;\n\t            var seriesIndex = payload.seriesIndex;\n\t            var seriesModel = ecModel.getSeriesByIndex(seriesIndex);\n\t            var api = this._api;\n\n\t            var isTriggerAxis = this._tooltipModel.get('trigger') === 'axis';\n\t            function seriesHaveDataOnIndex(_series) {\n\t                var data = _series.getData();\n\t                var dataIndex = modelUtil.queryDataIndex(data, payload);\n\t                // Have single dataIndex\n\t                if (dataIndex != null && !zrUtil.isArray(dataIndex)\n\t                    && data.hasValue(dataIndex)\n\t                ) {\n\t                    return true;\n\t                }\n\t            }\n\n\t            if (payload.x == null || payload.y == null) {\n\t                if (isTriggerAxis) {\n\t                    // Find another series.\n\t                    if (seriesModel && !seriesHaveDataOnIndex(seriesModel)) {\n\t                        seriesModel = null;\n\t                    }\n\t                    if (!seriesModel) {\n\t                        // Find the first series can use axis trigger And data is not null\n\t                        ecModel.eachSeries(function (_series) {\n\t                            if (ifSeriesSupportAxisTrigger(_series) && !seriesModel) {\n\t                                if (seriesHaveDataOnIndex(_series)) {\n\t                                    seriesModel = _series;\n\t                                }\n\t                            }\n\t                        });\n\t                    }\n\t                }\n\t                else {\n\t                    // Use the first series by default.\n\t                    seriesModel = seriesModel || ecModel.getSeriesByIndex(0);\n\t                }\n\t                if (seriesModel) {\n\t                    var data = seriesModel.getData();\n\t                    var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n\t                    if (dataIndex == null || zrUtil.isArray(dataIndex)) {\n\t                        return;\n\t                    }\n\n\t                    var el = data.getItemGraphicEl(dataIndex);\n\t                    var cx;\n\t                    var cy;\n\t                    // Try to get the point in coordinate system\n\t                    var coordSys = seriesModel.coordinateSystem;\n\t                    if (seriesModel.getTooltipPosition) {\n\t                        var point = seriesModel.getTooltipPosition(dataIndex) || [];\n\t                        cx = point[0];\n\t                        cy = point[1];\n\t                    }\n\t                    else if (coordSys && coordSys.dataToPoint) {\n\t                        var point = coordSys.dataToPoint(\n\t                            data.getValues(\n\t                                zrUtil.map(coordSys.dimensions, function (dim) {\n\t                                    return seriesModel.coordDimToDataDim(dim)[0];\n\t                                }), dataIndex, true\n\t                            )\n\t                        );\n\t                        cx = point && point[0];\n\t                        cy = point && point[1];\n\t                    }\n\t                    else if (el) {\n\t                        // Use graphic bounding rect\n\t                        var rect = el.getBoundingRect().clone();\n\t                        rect.applyTransform(el.transform);\n\t                        cx = rect.x + rect.width / 2;\n\t                        cy = rect.y + rect.height / 2;\n\t                    }\n\n\t                    if (cx != null && cy != null) {\n\t                        this._tryShow({\n\t                            offsetX: cx,\n\t                            offsetY: cy,\n\t                            position: payload.position,\n\t                            target: el,\n\t                            event: {}\n\t                        });\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                var el = api.getZr().handler.findHover(payload.x, payload.y);\n\t                this._tryShow({\n\t                    offsetX: payload.x,\n\t                    offsetY: payload.y,\n\t                    position: payload.position,\n\t                    target: el,\n\t                    event: {}\n\t                });\n\t            }\n\t        },\n\n\t        manuallyHideTip: function (tooltipModel, ecModel, api, payload) {\n\t            if (payload.from === this.uid) {\n\t                return;\n\t            }\n\n\t            this._hide();\n\t        },\n\n\t        _prepareAxisTriggerData: function (tooltipModel, ecModel) {\n\t            // Prepare data for axis trigger\n\t            var seriesGroupByAxis = {};\n\t            ecModel.eachSeries(function (seriesModel) {\n\t                if (ifSeriesSupportAxisTrigger(seriesModel)) {\n\t                    var coordSys = seriesModel.coordinateSystem;\n\t                    var baseAxis;\n\t                    var key;\n\n\t                    // Only cartesian2d, polar and single support axis trigger\n\t                    if (coordSys.type === 'cartesian2d') {\n\t                        // FIXME `axisPointer.axis` is not baseAxis\n\t                        baseAxis = coordSys.getBaseAxis();\n\t                        key = baseAxis.dim + baseAxis.index;\n\t                    }\n\t                    else if (coordSys.type === 'singleAxis') {\n\t                        baseAxis = coordSys.getAxis();\n\t                        key = baseAxis.dim + baseAxis.type;\n\t                    }\n\t                    else {\n\t                        baseAxis = coordSys.getBaseAxis();\n\t                        key = baseAxis.dim + coordSys.name;\n\t                    }\n\n\t                    seriesGroupByAxis[key] = seriesGroupByAxis[key] || {\n\t                        coordSys: [],\n\t                        series: []\n\t                    };\n\t                    seriesGroupByAxis[key].coordSys.push(coordSys);\n\t                    seriesGroupByAxis[key].series.push(seriesModel);\n\t                }\n\t            }, this);\n\n\t            return seriesGroupByAxis;\n\t        },\n\n\t        /**\n\t         * mousemove handler\n\t         * @param {Object} e\n\t         * @private\n\t         */\n\t        _tryShow: function (e) {\n\t            var el = e.target;\n\t            var tooltipModel = this._tooltipModel;\n\t            var globalTrigger = tooltipModel.get('trigger');\n\t            var ecModel = this._ecModel;\n\t            var api = this._api;\n\n\t            if (!tooltipModel) {\n\t                return;\n\t            }\n\n\t            // Save mouse x, mouse y. So we can try to keep showing the tip if chart is refreshed\n\t            this._lastX = e.offsetX;\n\t            this._lastY = e.offsetY;\n\n\t            // Always show item tooltip if mouse is on the element with dataIndex\n\t            if (el && el.dataIndex != null) {\n\t                // Use dataModel in element if possible\n\t                // Used when mouseover on a element like markPoint or edge\n\t                // In which case, the data is not main data in series.\n\t                var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);\n\t                var dataIndex = el.dataIndex;\n\t                var data = dataModel.getData();\n\t                var itemModel = data.getItemModel(dataIndex);\n\t                // Series or single data may use item trigger when global is axis trigger\n\t                if ((itemModel.get('tooltip.trigger') || globalTrigger) === 'axis') {\n\t                    this._showAxisTooltip(tooltipModel, ecModel, e);\n\t                }\n\t                else {\n\t                    // Reset ticket\n\t                    this._ticket = '';\n\t                    // If either single data or series use item trigger\n\t                    this._hideAxisPointer();\n\t                    // Reset last hover and dispatch downplay action\n\t                    this._resetLastHover();\n\n\t                    this._showItemTooltipContent(dataModel, dataIndex, el.dataType, e);\n\t                }\n\n\t                api.dispatchAction({\n\t                    type: 'showTip',\n\t                    from: this.uid,\n\t                    dataIndexInside: dataIndex,\n\t                    dataIndex: data.getRawIndex(dataIndex), // expose to user.\n\t                    seriesIndex: el.seriesIndex\n\t                });\n\t            }\n\t            // Tooltip provided directly. Like legend\n\t            else if (el && el.tooltip) {\n\t                var tooltipOpt = el.tooltip;\n\t                if (typeof tooltipOpt === 'string') {\n\t                    var content = tooltipOpt;\n\t                    tooltipOpt = {\n\t                        content: content,\n\t                        // Fixed formatter\n\t                        formatter: content\n\t                    };\n\t                }\n\t                var subTooltipModel = new Model(tooltipOpt, tooltipModel);\n\t                var defaultHtml = subTooltipModel.get('content');\n\t                var asyncTicket = Math.random();\n\t                this._showTooltipContent(\n\t                    // TODO params\n\t                    subTooltipModel, defaultHtml, subTooltipModel.get('formatterParams') || {},\n\t                    asyncTicket, e.offsetX, e.offsetY, e.position, el, api\n\t                );\n\t            }\n\t            else {\n\t                if (globalTrigger === 'item') {\n\t                    this._hide();\n\t                }\n\t                else {\n\t                    // Try show axis tooltip\n\t                    this._showAxisTooltip(tooltipModel, ecModel, e);\n\t                }\n\n\t                // Action of cross pointer\n\t                // other pointer types will trigger action in _dispatchAndShowSeriesTooltipContent method\n\t                if (tooltipModel.get('axisPointer.type') === 'cross') {\n\t                    api.dispatchAction({\n\t                        type: 'showTip',\n\t                        from: this.uid,\n\t                        x: e.offsetX,\n\t                        y: e.offsetY\n\t                    });\n\t                }\n\t            }\n\t        },\n\n\t        /**\n\t         * Show tooltip on axis\n\t         * @param {module:echarts/component/tooltip/TooltipModel} tooltipModel\n\t         * @param {module:echarts/model/Global} ecModel\n\t         * @param {Object} e\n\t         * @private\n\t         */\n\t        _showAxisTooltip: function (tooltipModel, ecModel, e) {\n\t            var axisPointerModel = tooltipModel.getModel('axisPointer');\n\t            var axisPointerType = axisPointerModel.get('type');\n\n\t            if (axisPointerType === 'cross') {\n\t                var el = e.target;\n\t                if (el && el.dataIndex != null) {\n\t                    var seriesModel = ecModel.getSeriesByIndex(el.seriesIndex);\n\t                    var dataIndex = el.dataIndex;\n\t                    this._showItemTooltipContent(seriesModel, dataIndex, el.dataType, e);\n\t                }\n\t            }\n\n\t            this._showAxisPointer();\n\t            var allNotShow = true;\n\t            zrUtil.each(this._seriesGroupByAxis, function (seriesCoordSysSameAxis) {\n\t                // Try show the axis pointer\n\t                var allCoordSys = seriesCoordSysSameAxis.coordSys;\n\t                var coordSys = allCoordSys[0];\n\n\t                // If mouse position is not in the grid or polar\n\t                var point = [e.offsetX, e.offsetY];\n\n\t                if (!coordSys.containPoint(point)) {\n\t                    // Hide axis pointer\n\t                    this._hideAxisPointer(coordSys.name);\n\t                    return;\n\t                }\n\n\t                allNotShow = false;\n\t                // Make sure point is discrete on cateogry axis\n\t                var dimensions = coordSys.dimensions;\n\t                var value = coordSys.pointToData(point, true);\n\t                point = coordSys.dataToPoint(value);\n\n\t                var baseAxis = coordSys.getBaseAxis();\n\t                var axisType = axisPointerModel.get('axis');\n\t                if (axisType === 'auto') {\n\t                    axisType = baseAxis.dim;\n\t                }\n\n\t                if (baseAxis.isBlank() || zrUtil.eqNaN(point[0]) || zrUtil.eqNaN(point[1])) {\n\t                    this._hideAxisPointer(coordSys.name);\n\t                    return;\n\t                }\n\n\t                var contentNotChange = false;\n\t                var lastHover = this._lastHover;\n\t                if (axisPointerType === 'cross') {\n\t                    // If hover data not changed\n\t                    // Possible when two axes are all category\n\t                    if (dataEqual(lastHover.data, value)) {\n\t                        contentNotChange = true;\n\t                    }\n\t                    lastHover.data = value;\n\t                }\n\t                else {\n\t                    var valIndex = zrUtil.indexOf(dimensions, axisType);\n\n\t                    // If hover data not changed on the axis dimension\n\t                    if (lastHover.data === value[valIndex]) {\n\t                        contentNotChange = true;\n\t                    }\n\t                    lastHover.data = value[valIndex];\n\t                }\n\n\t                var enableAnimation = tooltipModel.get('animation');\n\n\t                if (coordSys.type === 'cartesian2d' && !contentNotChange) {\n\t                    this._showCartesianPointer(\n\t                        axisPointerModel, coordSys, axisType, point, enableAnimation\n\t                    );\n\t                }\n\t                else if (coordSys.type === 'polar' && !contentNotChange) {\n\t                    this._showPolarPointer(\n\t                        axisPointerModel, coordSys, axisType, point, enableAnimation\n\t                    );\n\t                }\n\t                else if (coordSys.type === 'singleAxis' && !contentNotChange) {\n\t                    this._showSinglePointer(\n\t                        axisPointerModel, coordSys, axisType, point, enableAnimation\n\t                    );\n\t                }\n\n\t                if (axisPointerType !== 'cross') {\n\t                    this._dispatchAndShowSeriesTooltipContent(\n\t                        coordSys, seriesCoordSysSameAxis.series, point, value, contentNotChange, e.position\n\t                    );\n\t                }\n\t            }, this);\n\n\t            if (!this._tooltipModel.get('show')) {\n\t                this._hideAxisPointer();\n\t            }\n\n\t            if (allNotShow) {\n\t                this._hide();\n\t            }\n\t        },\n\n\t        /**\n\t         * Show tooltip on axis of cartesian coordinate\n\t         * @param {module:echarts/model/Model} axisPointerModel\n\t         * @param {module:echarts/coord/cartesian/Cartesian2D} cartesians\n\t         * @param {string} axisType\n\t         * @param {Array.<number>} point\n\t         * @private\n\t         */\n\t        _showCartesianPointer: function (axisPointerModel, cartesian, axisType, point, enableAnimation) {\n\t            var self = this;\n\n\t            var axisPointerType = axisPointerModel.get('type');\n\t            var baseAxis = cartesian.getBaseAxis();\n\t            var moveAnimation = enableAnimation\n\t                && axisPointerType !== 'cross'\n\t                && baseAxis.type === 'category'\n\t                && baseAxis.getBandWidth() > 20;\n\n\t            if (axisPointerType === 'cross') {\n\t                moveGridLine('x', point, cartesian.getAxis('y').getGlobalExtent());\n\t                moveGridLine('y', point, cartesian.getAxis('x').getGlobalExtent());\n\n\t                this._updateCrossText(cartesian, point, axisPointerModel);\n\t            }\n\t            else {\n\t                var otherAxis = cartesian.getAxis(axisType === 'x' ? 'y' : 'x');\n\t                var otherExtent = otherAxis.getGlobalExtent();\n\n\t                if (cartesian.type === 'cartesian2d') {\n\t                    (axisPointerType === 'line' ? moveGridLine : moveGridShadow)(\n\t                        axisType, point, otherExtent\n\t                    );\n\t                }\n\t            }\n\n\t            /**\n\t             * @inner\n\t             */\n\t            function moveGridLine(axisType, point, otherExtent) {\n\t                var targetShape = axisType === 'x'\n\t                    ? makeLineShape(point[0], otherExtent[0], point[0], otherExtent[1])\n\t                    : makeLineShape(otherExtent[0], point[1], otherExtent[1], point[1]);\n\n\t                var pointerEl = self._getPointerElement(\n\t                    cartesian, axisPointerModel, axisType, targetShape\n\t                );\n\t                graphic.subPixelOptimizeLine({\n\t                    shape: targetShape,\n\t                    style: pointerEl.style\n\t                });\n\n\t                moveAnimation\n\t                    ? graphic.updateProps(pointerEl, {\n\t                        shape: targetShape\n\t                    }, axisPointerModel)\n\t                    :  pointerEl.attr({\n\t                        shape: targetShape\n\t                    });\n\t            }\n\n\t            /**\n\t             * @inner\n\t             */\n\t            function moveGridShadow(axisType, point, otherExtent) {\n\t                var axis = cartesian.getAxis(axisType);\n\t                var bandWidth = axis.getBandWidth();\n\t                var span = otherExtent[1] - otherExtent[0];\n\t                var targetShape = axisType === 'x'\n\t                    ? makeRectShape(point[0] - bandWidth / 2, otherExtent[0], bandWidth, span)\n\t                    : makeRectShape(otherExtent[0], point[1] - bandWidth / 2, span, bandWidth);\n\n\t                var pointerEl = self._getPointerElement(\n\t                    cartesian, axisPointerModel, axisType, targetShape\n\t                );\n\t                moveAnimation\n\t                    ? graphic.updateProps(pointerEl, {\n\t                        shape: targetShape\n\t                    }, axisPointerModel)\n\t                    :  pointerEl.attr({\n\t                        shape: targetShape\n\t                    });\n\t            }\n\t        },\n\n\t        _showSinglePointer: function (axisPointerModel, single, axisType, point, enableAnimation) {\n\t            var self = this;\n\t            var axisPointerType = axisPointerModel.get('type');\n\t            var moveAnimation =\n\t                enableAnimation\n\t                && axisPointerType !== 'cross'\n\t                && single.getBaseAxis().type === 'category';\n\t            var rect = single.getRect();\n\t            var otherExtent = [rect.y, rect.y + rect.height];\n\n\t            moveSingleLine(axisType, point, otherExtent);\n\n\t            /**\n\t             * @inner\n\t             */\n\t            function moveSingleLine(axisType, point, otherExtent) {\n\t                var axis = single.getAxis();\n\t                var orient = axis.orient;\n\n\t                var targetShape = orient === 'horizontal'\n\t                    ? makeLineShape(point[0], otherExtent[0], point[0], otherExtent[1])\n\t                    : makeLineShape(otherExtent[0], point[1], otherExtent[1], point[1]);\n\n\t                var pointerEl = self._getPointerElement(\n\t                    single, axisPointerModel, axisType, targetShape\n\t                );\n\t                moveAnimation\n\t                    ? graphic.updateProps(pointerEl, {\n\t                        shape: targetShape\n\t                    }, axisPointerModel)\n\t                    :  pointerEl.attr({\n\t                        shape: targetShape\n\t                    });\n\t            }\n\n\t        },\n\n\t        /**\n\t         * Show tooltip on axis of polar coordinate\n\t         * @param {module:echarts/model/Model} axisPointerModel\n\t         * @param {Array.<module:echarts/coord/polar/Polar>} polar\n\t         * @param {string} axisType\n\t         * @param {Array.<number>} point\n\t         */\n\t        _showPolarPointer: function (axisPointerModel, polar, axisType, point, enableAnimation) {\n\t            var self = this;\n\n\t            var axisPointerType = axisPointerModel.get('type');\n\n\t            var angleAxis = polar.getAngleAxis();\n\t            var radiusAxis = polar.getRadiusAxis();\n\n\t            var moveAnimation = enableAnimation\n\t                && axisPointerType !== 'cross'\n\t                && polar.getBaseAxis().type === 'category';\n\n\t            if (axisPointerType === 'cross') {\n\t                movePolarLine('angle', point, radiusAxis.getExtent());\n\t                movePolarLine('radius', point, angleAxis.getExtent());\n\n\t                this._updateCrossText(polar, point, axisPointerModel);\n\t            }\n\t            else {\n\t                var otherAxis = polar.getAxis(axisType === 'radius' ? 'angle' : 'radius');\n\t                var otherExtent = otherAxis.getExtent();\n\n\t                (axisPointerType === 'line' ? movePolarLine : movePolarShadow)(\n\t                    axisType, point, otherExtent\n\t                );\n\t            }\n\t            /**\n\t             * @inner\n\t             */\n\t            function movePolarLine(axisType, point, otherExtent) {\n\t                var mouseCoord = polar.pointToCoord(point);\n\n\t                var targetShape;\n\n\t                if (axisType === 'angle') {\n\t                    var p1 = polar.coordToPoint([otherExtent[0], mouseCoord[1]]);\n\t                    var p2 = polar.coordToPoint([otherExtent[1], mouseCoord[1]]);\n\t                    targetShape = makeLineShape(p1[0], p1[1], p2[0], p2[1]);\n\t                }\n\t                else {\n\t                    targetShape = {\n\t                        cx: polar.cx,\n\t                        cy: polar.cy,\n\t                        r: mouseCoord[0]\n\t                    };\n\t                }\n\n\t                var pointerEl = self._getPointerElement(\n\t                    polar, axisPointerModel, axisType, targetShape\n\t                );\n\n\t                moveAnimation\n\t                    ? graphic.updateProps(pointerEl, {\n\t                        shape: targetShape\n\t                    }, axisPointerModel)\n\t                    :  pointerEl.attr({\n\t                        shape: targetShape\n\t                    });\n\t            }\n\n\t            /**\n\t             * @inner\n\t             */\n\t            function movePolarShadow(axisType, point, otherExtent) {\n\t                var axis = polar.getAxis(axisType);\n\t                var bandWidth = axis.getBandWidth();\n\n\t                var mouseCoord = polar.pointToCoord(point);\n\n\t                var targetShape;\n\n\t                var radian = Math.PI / 180;\n\n\t                if (axisType === 'angle') {\n\t                    targetShape = makeSectorShape(\n\t                        polar.cx, polar.cy,\n\t                        otherExtent[0], otherExtent[1],\n\t                        // In ECharts y is negative if angle is positive\n\t                        (-mouseCoord[1] - bandWidth / 2) * radian,\n\t                        (-mouseCoord[1] + bandWidth / 2) * radian\n\t                    );\n\t                }\n\t                else {\n\t                    targetShape = makeSectorShape(\n\t                        polar.cx, polar.cy,\n\t                        mouseCoord[0] - bandWidth / 2,\n\t                        mouseCoord[0] + bandWidth / 2,\n\t                        0, Math.PI * 2\n\t                    );\n\t                }\n\n\t                var pointerEl = self._getPointerElement(\n\t                    polar, axisPointerModel, axisType, targetShape\n\t                );\n\t                moveAnimation\n\t                    ? graphic.updateProps(pointerEl, {\n\t                        shape: targetShape\n\t                    }, axisPointerModel)\n\t                    :  pointerEl.attr({\n\t                        shape: targetShape\n\t                    });\n\t            }\n\t        },\n\n\t        _updateCrossText: function (coordSys, point, axisPointerModel) {\n\t            var crossStyleModel = axisPointerModel.getModel('crossStyle');\n\t            var textStyleModel = crossStyleModel.getModel('textStyle');\n\n\t            var tooltipModel = this._tooltipModel;\n\n\t            var text = this._crossText;\n\t            if (!text) {\n\t                text = this._crossText = new graphic.Text({\n\t                    style: {\n\t                        textAlign: 'left',\n\t                        textVerticalAlign: 'bottom'\n\t                    }\n\t                });\n\t                this.group.add(text);\n\t            }\n\n\t            var value = coordSys.pointToData(point);\n\n\t            var dims = coordSys.dimensions;\n\t            value = zrUtil.map(value, function (val, idx) {\n\t                var axis = coordSys.getAxis(dims[idx]);\n\t                if (axis.type === 'category' || axis.type === 'time') {\n\t                    val = axis.scale.getLabel(val);\n\t                }\n\t                else {\n\t                    val = formatUtil.addCommas(\n\t                        val.toFixed(axis.getPixelPrecision())\n\t                    );\n\t                }\n\t                return val;\n\t            });\n\n\t            text.setStyle({\n\t                fill: textStyleModel.getTextColor() || crossStyleModel.get('color'),\n\t                textFont: textStyleModel.getFont(),\n\t                text: value.join(', '),\n\t                x: point[0] + 5,\n\t                y: point[1] - 5\n\t            });\n\t            text.z = tooltipModel.get('z');\n\t            text.zlevel = tooltipModel.get('zlevel');\n\t        },\n\n\t        _getPointerElement: function (coordSys, pointerModel, axisType, initShape) {\n\t            var tooltipModel = this._tooltipModel;\n\t            var z = tooltipModel.get('z');\n\t            var zlevel = tooltipModel.get('zlevel');\n\t            var axisPointers = this._axisPointers;\n\t            var coordSysName = coordSys.name;\n\t            axisPointers[coordSysName] = axisPointers[coordSysName] || {};\n\t            if (axisPointers[coordSysName][axisType]) {\n\t                return axisPointers[coordSysName][axisType];\n\t            }\n\n\t            // Create if not exists\n\t            var pointerType = pointerModel.get('type');\n\t            var styleModel = pointerModel.getModel(pointerType + 'Style');\n\t            var isShadow = pointerType === 'shadow';\n\t            var style = styleModel[isShadow ? 'getAreaStyle' : 'getLineStyle']();\n\n\t            var elementType = coordSys.type === 'polar'\n\t                ? (isShadow ? 'Sector' : (axisType === 'radius' ? 'Circle' : 'Line'))\n\t                : (isShadow ? 'Rect' : 'Line');\n\n\t            isShadow ? (style.stroke = null) : (style.fill = null);\n\n\t            var el = axisPointers[coordSysName][axisType] = new graphic[elementType]({\n\t                style: style,\n\t                z: z,\n\t                zlevel: zlevel,\n\t                silent: true,\n\t                shape: initShape\n\t            });\n\n\t            this.group.add(el);\n\t            return el;\n\t        },\n\n\t        /**\n\t         * Dispatch actions and show tooltip on series\n\t         * @param {Array.<module:echarts/model/Series>} seriesList\n\t         * @param {Array.<number>} point\n\t         * @param {Array.<number>} value\n\t         * @param {boolean} contentNotChange\n\t         * @param {Array.<number>|string|Function} [positionExpr]\n\t         */\n\t        _dispatchAndShowSeriesTooltipContent: function (\n\t            coordSys, seriesList, point, value, contentNotChange, positionExpr\n\t        ) {\n\n\t            var rootTooltipModel = this._tooltipModel;\n\n\t            var baseAxis = coordSys.getBaseAxis();\n\t            var baseDimIndex = ({x: 1, radius: 1, single: 1})[baseAxis.dim] ? 0 : 1;\n\n\t            if (!seriesList.length) {\n\t                return;\n\t            }\n\n\t            var payloadBatch = zrUtil.map(seriesList, function (series) {\n\t                return {\n\t                    seriesIndex: series.seriesIndex,\n\t                    dataIndexInside: series.getAxisTooltipDataIndex\n\t                        ? series.getAxisTooltipDataIndex(series.coordDimToDataDim(baseAxis.dim), value, baseAxis)\n\t                        : series.getData().indexOfNearest(\n\t                            series.coordDimToDataDim(baseAxis.dim)[0],\n\t                            value[baseDimIndex],\n\t                            // Add a threshold to avoid find the wrong dataIndex when data length is not same\n\t                            false, baseAxis.type === 'category' ? 0.5 : null\n\t                        )\n\t                };\n\t            });\n\t            var sampleSeriesIndex;\n\t            zrUtil.each(payloadBatch, function (payload, idx) {\n\t                if (seriesList[idx].getData().hasValue(payload.dataIndexInside)) {\n\t                    sampleSeriesIndex = idx;\n\t                }\n\t            });\n\t            // Fallback to 0.\n\t            sampleSeriesIndex = sampleSeriesIndex || 0;\n\n\t            var lastHover = this._lastHover;\n\t            var api = this._api;\n\t            // Dispatch downplay action\n\t            if (lastHover.payloadBatch && !contentNotChange) {\n\t                api.dispatchAction({\n\t                    type: 'downplay',\n\t                    batch: lastHover.payloadBatch\n\t                });\n\t            }\n\t            // Dispatch highlight action\n\t            if (!contentNotChange) {\n\t                api.dispatchAction({\n\t                    type: 'highlight',\n\t                    batch: payloadBatch\n\t                });\n\t                lastHover.payloadBatch = payloadBatch;\n\t            }\n\t            // Dispatch showTip action\n\t            var dataIndex = payloadBatch[sampleSeriesIndex].dataIndexInside;\n\t            api.dispatchAction({\n\t                type: 'showTip',\n\t                dataIndexInside: dataIndex,\n\t                // expose to user.\n\t                dataIndex: seriesList[sampleSeriesIndex].getData().getRawIndex(dataIndex),\n\t                seriesIndex: payloadBatch[sampleSeriesIndex].seriesIndex,\n\t                from: this.uid\n\t            });\n\n\t            if (baseAxis && rootTooltipModel.get('showContent') && rootTooltipModel.get('show')) {\n\t                var paramsList = zrUtil.map(seriesList, function (series, index) {\n\t                    return series.getDataParams(payloadBatch[index].dataIndexInside);\n\t                });\n\n\t                if (!contentNotChange) {\n\t                    // Update html content\n\t                    var firstDataIndex = payloadBatch[sampleSeriesIndex].dataIndexInside;\n\n\t                    // Default tooltip content\n\t                    // FIXME\n\t                    // (1) shold be the first data which has name?\n\t                    // (2) themeRiver, firstDataIndex is array, and first line is unnecessary.\n\t                    var firstLine = baseAxis.type === 'time'\n\t                        ? baseAxis.scale.getLabel(value[baseDimIndex])\n\t                        : seriesList[sampleSeriesIndex].getData().getName(firstDataIndex);\n\t                    var defaultHtml = (firstLine ? formatUtil.encodeHTML(firstLine) + '<br />' : '')\n\t                        + zrUtil.map(seriesList, function (series, index) {\n\t                            return series.formatTooltip(payloadBatch[index].dataIndexInside, true);\n\t                        }).join('<br />');\n\n\t                    var asyncTicket = 'axis_' + coordSys.name + '_' + firstDataIndex;\n\n\t                    this._showTooltipContent(\n\t                        rootTooltipModel, defaultHtml, paramsList, asyncTicket,\n\t                        point[0], point[1], positionExpr, null, api\n\t                    );\n\t                }\n\t                else {\n\t                    updatePosition(\n\t                        positionExpr || rootTooltipModel.get('position'),\n\t                        point[0], point[1],\n\t                        rootTooltipModel.get('confine'),\n\t                        this._tooltipContent, paramsList, null, api\n\t                    );\n\t                }\n\t            }\n\t        },\n\n\t        /**\n\t         * Show tooltip on item\n\t         * @param {module:echarts/model/Series} seriesModel\n\t         * @param {number} dataIndex\n\t         * @param {string} dataType\n\t         * @param {Object} e\n\t         */\n\t        _showItemTooltipContent: function (seriesModel, dataIndex, dataType, e) {\n\t            // FIXME Graph data\n\t            var api = this._api;\n\t            var data = seriesModel.getData(dataType);\n\t            var itemModel = data.getItemModel(dataIndex);\n\n\t            var tooltipOpt = itemModel.get('tooltip', true);\n\t            if (typeof tooltipOpt === 'string') {\n\t                // In each data item tooltip can be simply write:\n\t                // {\n\t                //  value: 10,\n\t                //  tooltip: 'Something you need to know'\n\t                // }\n\t                var tooltipContent = tooltipOpt;\n\t                tooltipOpt = {\n\t                    formatter: tooltipContent\n\t                };\n\t            }\n\t            var rootTooltipModel = this._tooltipModel;\n\t            var seriesTooltipModel = seriesModel.getModel(\n\t                'tooltip', rootTooltipModel\n\t            );\n\t            var tooltipModel = new Model(tooltipOpt, seriesTooltipModel, seriesTooltipModel.ecModel);\n\n\t            var params = seriesModel.getDataParams(dataIndex, dataType);\n\t            var defaultHtml = seriesModel.formatTooltip(dataIndex, false, dataType);\n\n\t            var asyncTicket = 'item_' + seriesModel.name + '_' + dataIndex;\n\n\t            this._showTooltipContent(\n\t                tooltipModel, defaultHtml, params, asyncTicket,\n\t                e.offsetX, e.offsetY, e.position, e.target, api\n\t            );\n\t        },\n\n\t        _showTooltipContent: function (\n\t            tooltipModel, defaultHtml, params, asyncTicket, x, y, positionExpr, target, api\n\t        ) {\n\t            // Reset ticket\n\t            this._ticket = '';\n\n\t            if (tooltipModel.get('showContent') && tooltipModel.get('show')) {\n\t                var tooltipContent = this._tooltipContent;\n\t                var confine = tooltipModel.get('confine');\n\n\t                var formatter = tooltipModel.get('formatter');\n\t                positionExpr = positionExpr || tooltipModel.get('position');\n\t                var html = defaultHtml;\n\n\t                if (formatter) {\n\t                    if (typeof formatter === 'string') {\n\t                        html = formatUtil.formatTpl(formatter, params, true);\n\t                    }\n\t                    else if (typeof formatter === 'function') {\n\t                        var self = this;\n\t                        var ticket = asyncTicket;\n\t                        var callback = function (cbTicket, html) {\n\t                            if (cbTicket === self._ticket) {\n\t                                tooltipContent.setContent(html);\n\n\t                                updatePosition(\n\t                                    positionExpr, x, y, confine,\n\t                                    tooltipContent, params, target, api\n\t                                );\n\t                            }\n\t                        };\n\t                        self._ticket = ticket;\n\t                        html = formatter(params, ticket, callback);\n\t                    }\n\t                }\n\n\t                tooltipContent.show(tooltipModel);\n\t                tooltipContent.setContent(html);\n\n\t                updatePosition(\n\t                    positionExpr, x, y, confine,\n\t                    tooltipContent, params, target, api\n\t                );\n\t            }\n\t        },\n\n\t        /**\n\t         * Show axis pointer\n\t         * @param {string} [coordSysName]\n\t         */\n\t        _showAxisPointer: function (coordSysName) {\n\t            if (coordSysName) {\n\t                var axisPointers = this._axisPointers[coordSysName];\n\t                axisPointers && zrUtil.each(axisPointers, function (el) {\n\t                    el.show();\n\t                });\n\t            }\n\t            else {\n\t                this.group.eachChild(function (child) {\n\t                    child.show();\n\t                });\n\t                this.group.show();\n\t            }\n\t        },\n\n\t        _resetLastHover: function () {\n\t            var lastHover = this._lastHover;\n\t            if (lastHover.payloadBatch) {\n\t                this._api.dispatchAction({\n\t                    type: 'downplay',\n\t                    batch: lastHover.payloadBatch\n\t                });\n\t            }\n\t            // Reset lastHover\n\t            this._lastHover = {};\n\t        },\n\t        /**\n\t         * Hide axis pointer\n\t         * @param {string} [coordSysName]\n\t         */\n\t        _hideAxisPointer: function (coordSysName) {\n\t            if (coordSysName) {\n\t                var axisPointers = this._axisPointers[coordSysName];\n\t                axisPointers && zrUtil.each(axisPointers, function (el) {\n\t                    el.hide();\n\t                });\n\t            }\n\t            else {\n\t                if (this.group.children().length) {\n\t                    this.group.hide();\n\t                }\n\t            }\n\t        },\n\n\t        _hide: function () {\n\t            clearTimeout(this._showTimeout);\n\n\t            this._hideAxisPointer();\n\t            this._resetLastHover();\n\t            if (!this._alwaysShowContent) {\n\t                this._tooltipContent.hideLater(this._tooltipModel.get('hideDelay'));\n\t            }\n\n\t            this._api.dispatchAction({\n\t                type: 'hideTip',\n\t                from: this.uid\n\t            });\n\n\t            this._lastX = this._lastY = null;\n\t        },\n\n\t        dispose: function (ecModel, api) {\n\t            if (env.node) {\n\t                return;\n\t            }\n\t            var zr = api.getZr();\n\t            this._tooltipContent.hide();\n\n\t            zr.off('click', this._tryShow);\n\t            zr.off('mousemove', this._mousemove);\n\t            zr.off('mouseout', this._hide);\n\t            zr.off('globalout', this._hide);\n\t        }\n\t    });\n\n\n/***/ },\n/* 302 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @module echarts/component/tooltip/TooltipContent\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var zrColor = __webpack_require__(39);\n\t    var eventUtil = __webpack_require__(88);\n\t    var formatUtil = __webpack_require__(6);\n\t    var each = zrUtil.each;\n\t    var toCamelCase = formatUtil.toCamelCase;\n\t    var env = __webpack_require__(2);\n\n\t    var vendors = ['', '-webkit-', '-moz-', '-o-'];\n\n\t    var gCssText = 'position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;';\n\n\t    /**\n\t     * @param {number} duration\n\t     * @return {string}\n\t     * @inner\n\t     */\n\t    function assembleTransition(duration) {\n\t        var transitionCurve = 'cubic-bezier(0.23, 1, 0.32, 1)';\n\t        var transitionText = 'left ' + duration + 's ' + transitionCurve + ','\n\t                            + 'top ' + duration + 's ' + transitionCurve;\n\t        return zrUtil.map(vendors, function (vendorPrefix) {\n\t            return vendorPrefix + 'transition:' + transitionText;\n\t        }).join(';');\n\t    }\n\n\t    /**\n\t     * @param {Object} textStyle\n\t     * @return {string}\n\t     * @inner\n\t     */\n\t    function assembleFont(textStyleModel) {\n\t        var cssText = [];\n\n\t        var fontSize = textStyleModel.get('fontSize');\n\t        var color = textStyleModel.getTextColor();\n\n\t        color && cssText.push('color:' + color);\n\n\t        cssText.push('font:' + textStyleModel.getFont());\n\n\t        fontSize &&\n\t            cssText.push('line-height:' + Math.round(fontSize * 3 / 2) + 'px');\n\n\t        each(['decoration', 'align'], function (name) {\n\t            var val = textStyleModel.get(name);\n\t            val && cssText.push('text-' + name + ':' + val);\n\t        });\n\n\t        return cssText.join(';');\n\t    }\n\n\t    /**\n\t     * @param {Object} tooltipModel\n\t     * @return {string}\n\t     * @inner\n\t     */\n\t    function assembleCssText(tooltipModel) {\n\n\t        tooltipModel = tooltipModel;\n\n\t        var cssText = [];\n\n\t        var transitionDuration = tooltipModel.get('transitionDuration');\n\t        var backgroundColor = tooltipModel.get('backgroundColor');\n\t        var textStyleModel = tooltipModel.getModel('textStyle');\n\t        var padding = tooltipModel.get('padding');\n\n\t        // Animation transition\n\t        transitionDuration &&\n\t            cssText.push(assembleTransition(transitionDuration));\n\n\t        if (backgroundColor) {\n\t            if (env.canvasSupported) {\n\t                cssText.push('background-Color:' + backgroundColor);\n\t            }\n\t            else {\n\t                // for ie\n\t                cssText.push(\n\t                    'background-Color:#' + zrColor.toHex(backgroundColor)\n\t                );\n\t                cssText.push('filter:alpha(opacity=70)');\n\t            }\n\t        }\n\n\t        // Border style\n\t        each(['width', 'color', 'radius'], function (name) {\n\t            var borderName = 'border-' + name;\n\t            var camelCase = toCamelCase(borderName);\n\t            var val = tooltipModel.get(camelCase);\n\t            val != null &&\n\t                cssText.push(borderName + ':' + val + (name === 'color' ? '' : 'px'));\n\t        });\n\n\t        // Text style\n\t        cssText.push(assembleFont(textStyleModel));\n\n\t        // Padding\n\t        if (padding != null) {\n\t            cssText.push('padding:' + formatUtil.normalizeCssArray(padding).join('px ') + 'px');\n\t        }\n\n\t        return cssText.join(';') + ';';\n\t    }\n\n\t    /**\n\t     * @alias module:echarts/component/tooltip/TooltipContent\n\t     * @constructor\n\t     */\n\t    function TooltipContent(container, api) {\n\t        var el = document.createElement('div');\n\t        var zr = api.getZr();\n\n\t        this.el = el;\n\n\t        this._x = api.getWidth() / 2;\n\t        this._y = api.getHeight() / 2;\n\n\t        container.appendChild(el);\n\n\t        this._container = container;\n\n\t        this._show = false;\n\n\t        /**\n\t         * @private\n\t         */\n\t        this._hideTimeout;\n\n\t        var self = this;\n\t        el.onmouseenter = function () {\n\t            // clear the timeout in hideLater and keep showing tooltip\n\t            if (self.enterable) {\n\t                clearTimeout(self._hideTimeout);\n\t                self._show = true;\n\t            }\n\t            self._inContent = true;\n\t        };\n\t        el.onmousemove = function (e) {\n\t            e = e || window.event;\n\t            if (!self.enterable) {\n\t                // Try trigger zrender event to avoid mouse\n\t                // in and out shape too frequently\n\t                var handler = zr.handler;\n\t                eventUtil.normalizeEvent(container, e, true);\n\t                handler.dispatch('mousemove', e);\n\t            }\n\t        };\n\t        el.onmouseleave = function () {\n\t            if (self.enterable) {\n\t                if (self._show) {\n\t                    self.hideLater(self._hideDelay);\n\t                }\n\t            }\n\t            self._inContent = false;\n\t        };\n\t    }\n\n\t    TooltipContent.prototype = {\n\n\t        constructor: TooltipContent,\n\n\t        enterable: true,\n\n\t        /**\n\t         * Update when tooltip is rendered\n\t         */\n\t        update: function () {\n\t            var container = this._container;\n\t            var stl = container.currentStyle\n\t                || document.defaultView.getComputedStyle(container);\n\t            var domStyle = container.style;\n\t            if (domStyle.position !== 'absolute' && stl.position !== 'absolute') {\n\t                domStyle.position = 'relative';\n\t            }\n\t            // Hide the tooltip\n\t            // PENDING\n\t            // this.hide();\n\t        },\n\n\t        show: function (tooltipModel) {\n\t            clearTimeout(this._hideTimeout);\n\t            var el = this.el;\n\n\t            el.style.cssText = gCssText + assembleCssText(tooltipModel)\n\t                // http://stackoverflow.com/questions/21125587/css3-transition-not-working-in-chrome-anymore\n\t                + ';left:' + this._x + 'px;top:' + this._y + 'px;'\n\t                + (tooltipModel.get('extraCssText') || '');\n\n\t            el.style.display = el.innerHTML ?  'block' : 'none';\n\n\t            this._show = true;\n\t        },\n\n\t        setContent: function (content) {\n\t            var el = this.el;\n\t            el.innerHTML = content;\n\t            el.style.display = content ? 'block' : 'none';\n\t        },\n\n\t        moveTo: function (x, y) {\n\t            var style = this.el.style;\n\t            style.left = x + 'px';\n\t            style.top = y + 'px';\n\n\t            this._x = x;\n\t            this._y = y;\n\t        },\n\n\t        hide: function () {\n\t            this.el.style.display = 'none';\n\t            this._show = false;\n\t        },\n\n\t        // showLater: function ()\n\n\t        hideLater: function (time) {\n\t            if (this._show && !(this._inContent && this.enterable)) {\n\t                if (time) {\n\t                    this._hideDelay = time;\n\t                    // Set show false to avoid invoke hideLater mutiple times\n\t                    this._show = false;\n\t                    this._hideTimeout = setTimeout(zrUtil.bind(this.hide, this), time);\n\t                }\n\t                else {\n\t                    this.hide();\n\t                }\n\t            }\n\t        },\n\n\t        isShow: function () {\n\t            return this._show;\n\t        }\n\t    };\n\n\t    module.exports = TooltipContent;\n\n\n/***/ },\n/* 303 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    __webpack_require__(304);\n\t    __webpack_require__(310);\n\t    __webpack_require__(312);\n\n\t    // Polar view\n\t    __webpack_require__(1).extendComponentView({\n\t        type: 'polar'\n\t    });\n\n\n/***/ },\n/* 304 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// TODO Axis scale\n\n\n\t    var Polar = __webpack_require__(305);\n\t    var numberUtil = __webpack_require__(7);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var axisHelper = __webpack_require__(115);\n\t    var niceScaleExtent = axisHelper.niceScaleExtent;\n\n\t    // 依赖 PolarModel 做预处理\n\t    __webpack_require__(308);\n\n\t    /**\n\t     * Resize method bound to the polar\n\t     * @param {module:echarts/coord/polar/PolarModel} polarModel\n\t     * @param {module:echarts/ExtensionAPI} api\n\t     */\n\t    function resizePolar(polarModel, api) {\n\t        var center = polarModel.get('center');\n\t        var radius = polarModel.get('radius');\n\t        var width = api.getWidth();\n\t        var height = api.getHeight();\n\t        var parsePercent = numberUtil.parsePercent;\n\n\t        this.cx = parsePercent(center[0], width);\n\t        this.cy = parsePercent(center[1], height);\n\n\t        var radiusAxis = this.getRadiusAxis();\n\t        var size = Math.min(width, height) / 2;\n\t        // var idx = radiusAxis.inverse ? 1 : 0;\n\t        radiusAxis.setExtent(0, parsePercent(radius, size));\n\t    }\n\n\t    /**\n\t     * Update polar\n\t     */\n\t    function updatePolarScale(ecModel, api) {\n\t        var polar = this;\n\t        var angleAxis = polar.getAngleAxis();\n\t        var radiusAxis = polar.getRadiusAxis();\n\t        // Reset scale\n\t        angleAxis.scale.setExtent(Infinity, -Infinity);\n\t        radiusAxis.scale.setExtent(Infinity, -Infinity);\n\n\t        ecModel.eachSeries(function (seriesModel) {\n\t            if (seriesModel.coordinateSystem === polar) {\n\t                var data = seriesModel.getData();\n\t                radiusAxis.scale.unionExtentFromData(data, 'radius');\n\t                angleAxis.scale.unionExtentFromData(data, 'angle');\n\t            }\n\t        });\n\n\t        niceScaleExtent(angleAxis, angleAxis.model);\n\t        niceScaleExtent(radiusAxis, radiusAxis.model);\n\n\t        // Fix extent of category angle axis\n\t        if (angleAxis.type === 'category' && !angleAxis.onBand) {\n\t            var extent = angleAxis.getExtent();\n\t            var diff = 360 / angleAxis.scale.count();\n\t            angleAxis.inverse ? (extent[1] += diff) : (extent[1] -= diff);\n\t            angleAxis.setExtent(extent[0], extent[1]);\n\t        }\n\t    }\n\n\t    /**\n\t     * Set common axis properties\n\t     * @param {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}\n\t     * @param {module:echarts/coord/polar/AxisModel}\n\t     * @inner\n\t     */\n\t    function setAxis(axis, axisModel) {\n\t        axis.type = axisModel.get('type');\n\t        axis.scale = axisHelper.createScaleByModel(axisModel);\n\t        axis.onBand = axisModel.get('boundaryGap') && axis.type === 'category';\n\n\t        // FIXME Radius axis not support inverse axis\n\t        if (axisModel.mainType === 'angleAxis') {\n\t            var startAngle = axisModel.get('startAngle');\n\t            axis.inverse = axisModel.get('inverse') ^ axisModel.get('clockwise');\n\t            axis.setExtent(startAngle, startAngle + (axis.inverse ? -360 : 360));\n\t        }\n\n\t        // Inject axis instance\n\t        axisModel.axis = axis;\n\t        axis.model = axisModel;\n\t    }\n\n\n\t    var polarCreator = {\n\n\t        dimensions: Polar.prototype.dimensions,\n\n\t        create: function (ecModel, api) {\n\t            var polarList = [];\n\t            ecModel.eachComponent('polar', function (polarModel, idx) {\n\t                var polar = new Polar(idx);\n\t                // Inject resize and update method\n\t                polar.resize = resizePolar;\n\t                polar.update = updatePolarScale;\n\n\t                var radiusAxis = polar.getRadiusAxis();\n\t                var angleAxis = polar.getAngleAxis();\n\n\t                var radiusAxisModel = polarModel.findAxisModel('radiusAxis');\n\t                var angleAxisModel = polarModel.findAxisModel('angleAxis');\n\n\t                setAxis(radiusAxis, radiusAxisModel);\n\t                setAxis(angleAxis, angleAxisModel);\n\n\t                polar.resize(polarModel, api);\n\t                polarList.push(polar);\n\n\t                polarModel.coordinateSystem = polar;\n\t            });\n\t            // Inject coordinateSystem to series\n\t            ecModel.eachSeries(function (seriesModel) {\n\t                if (seriesModel.get('coordinateSystem') === 'polar') {\n\t                    var polarModel = ecModel.queryComponents({\n\t                        mainType: 'polar',\n\t                        index: seriesModel.get('polarIndex'),\n\t                        id: seriesModel.get('polarId')\n\t                    })[0];\n\n\t                    if (true) {\n\t                        if (!polarModel) {\n\t                            throw new Error(\n\t                                'Polar \"' + zrUtil.retrieve(\n\t                                    seriesModel.get('polarIndex'),\n\t                                    seriesModel.get('polarId'),\n\t                                    0\n\t                                ) + '\" not found'\n\t                            );\n\t                        }\n\t                    }\n\t                    seriesModel.coordinateSystem = polarModel.coordinateSystem;\n\t                }\n\t            });\n\n\t            return polarList;\n\t        }\n\t    };\n\n\t    __webpack_require__(26).register('polar', polarCreator);\n\n\n/***/ },\n/* 305 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * @module echarts/coord/polar/Polar\n\t */\n\n\n\t    var RadiusAxis = __webpack_require__(306);\n\t    var AngleAxis = __webpack_require__(307);\n\n\t    /**\n\t     * @alias {module:echarts/coord/polar/Polar}\n\t     * @constructor\n\t     * @param {string} name\n\t     */\n\t    var Polar = function (name) {\n\n\t        /**\n\t         * @type {string}\n\t         */\n\t        this.name = name || '';\n\n\t        /**\n\t         * x of polar center\n\t         * @type {number}\n\t         */\n\t        this.cx = 0;\n\n\t        /**\n\t         * y of polar center\n\t         * @type {number}\n\t         */\n\t        this.cy = 0;\n\n\t        /**\n\t         * @type {module:echarts/coord/polar/RadiusAxis}\n\t         * @private\n\t         */\n\t        this._radiusAxis = new RadiusAxis();\n\n\t        /**\n\t         * @type {module:echarts/coord/polar/AngleAxis}\n\t         * @private\n\t         */\n\t        this._angleAxis = new AngleAxis();\n\t    };\n\n\t    Polar.prototype = {\n\n\t        constructor: Polar,\n\n\t        type: 'polar',\n\n\t        /**\n\t         * @param {Array.<string>}\n\t         * @readOnly\n\t         */\n\t        dimensions: ['radius', 'angle'],\n\n\t        /**\n\t         * If contain coord\n\t         * @param {Array.<number>} point\n\t         * @return {boolean}\n\t         */\n\t        containPoint: function (point) {\n\t            var coord = this.pointToCoord(point);\n\t            return this._radiusAxis.contain(coord[0])\n\t                && this._angleAxis.contain(coord[1]);\n\t        },\n\n\t        /**\n\t         * If contain data\n\t         * @param {Array.<number>} data\n\t         * @return {boolean}\n\t         */\n\t        containData: function (data) {\n\t            return this._radiusAxis.containData(data[0])\n\t                && this._angleAxis.containData(data[1]);\n\t        },\n\n\t        /**\n\t         * @param {string} axisType\n\t         * @return {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}\n\t         */\n\t        getAxis: function (axisType) {\n\t            return this['_' + axisType + 'Axis'];\n\t        },\n\n\t        /**\n\t         * Get axes by type of scale\n\t         * @param {string} scaleType\n\t         * @return {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}\n\t         */\n\t        getAxesByScale: function (scaleType) {\n\t            var axes = [];\n\t            var angleAxis = this._angleAxis;\n\t            var radiusAxis = this._radiusAxis;\n\t            angleAxis.scale.type === scaleType && axes.push(angleAxis);\n\t            radiusAxis.scale.type === scaleType && axes.push(radiusAxis);\n\n\t            return axes;\n\t        },\n\n\t        /**\n\t         * @return {module:echarts/coord/polar/AngleAxis}\n\t         */\n\t        getAngleAxis: function () {\n\t            return this._angleAxis;\n\t        },\n\n\t        /**\n\t         * @return {module:echarts/coord/polar/RadiusAxis}\n\t         */\n\t        getRadiusAxis: function () {\n\t            return this._radiusAxis;\n\t        },\n\n\t        /**\n\t         * @param {module:echarts/coord/polar/Axis}\n\t         * @return {module:echarts/coord/polar/Axis}\n\t         */\n\t        getOtherAxis: function (axis) {\n\t            var angleAxis = this._angleAxis;\n\t            return axis === angleAxis ? this._radiusAxis : angleAxis;\n\t        },\n\n\t        /**\n\t         * Base axis will be used on stacking.\n\t         *\n\t         * @return {module:echarts/coord/polar/Axis}\n\t         */\n\t        getBaseAxis: function () {\n\t            return this.getAxesByScale('ordinal')[0]\n\t                || this.getAxesByScale('time')[0]\n\t                || this.getAngleAxis();\n\t        },\n\n\t        /**\n\t         * Convert series data to a list of (x, y) points\n\t         * @param {module:echarts/data/List} data\n\t         * @return {Array}\n\t         *  Return list of coordinates. For example:\n\t         *  `[[10, 10], [20, 20], [30, 30]]`\n\t         */\n\t        dataToPoints: function (data) {\n\t            return data.mapArray(this.dimensions, function (radius, angle) {\n\t                return this.dataToPoint([radius, angle]);\n\t            }, this);\n\t        },\n\n\t        /**\n\t         * Convert a single data item to (x, y) point.\n\t         * Parameter data is an array which the first element is radius and the second is angle\n\t         * @param {Array.<number>} data\n\t         * @param {boolean} [clamp=false]\n\t         * @return {Array.<number>}\n\t         */\n\t        dataToPoint: function (data, clamp) {\n\t            return this.coordToPoint([\n\t                this._radiusAxis.dataToRadius(data[0], clamp),\n\t                this._angleAxis.dataToAngle(data[1], clamp)\n\t            ]);\n\t        },\n\n\t        /**\n\t         * Convert a (x, y) point to data\n\t         * @param {Array.<number>} point\n\t         * @param {boolean} [clamp=false]\n\t         * @return {Array.<number>}\n\t         */\n\t        pointToData: function (point, clamp) {\n\t            var coord = this.pointToCoord(point);\n\t            return [\n\t                this._radiusAxis.radiusToData(coord[0], clamp),\n\t                this._angleAxis.angleToData(coord[1], clamp)\n\t            ];\n\t        },\n\n\t        /**\n\t         * Convert a (x, y) point to (radius, angle) coord\n\t         * @param {Array.<number>} point\n\t         * @return {Array.<number>}\n\t         */\n\t        pointToCoord: function (point) {\n\t            var dx = point[0] - this.cx;\n\t            var dy = point[1] - this.cy;\n\t            var angleAxis = this.getAngleAxis();\n\t            var extent = angleAxis.getExtent();\n\t            var minAngle = Math.min(extent[0], extent[1]);\n\t            var maxAngle = Math.max(extent[0], extent[1]);\n\t            // Fix fixed extent in polarCreator\n\t            // FIXME\n\t            angleAxis.inverse\n\t                ? (minAngle = maxAngle - 360)\n\t                : (maxAngle = minAngle + 360);\n\n\t            var radius = Math.sqrt(dx * dx + dy * dy);\n\t            dx /= radius;\n\t            dy /= radius;\n\n\t            var radian = Math.atan2(-dy, dx) / Math.PI * 180;\n\n\t            // move to angleExtent\n\t            var dir = radian < minAngle ? 1 : -1;\n\t            while (radian < minAngle || radian > maxAngle) {\n\t                radian += dir * 360;\n\t            }\n\n\t            return [radius, radian];\n\t        },\n\n\t        /**\n\t         * Convert a (radius, angle) coord to (x, y) point\n\t         * @param {Array.<number>} coord\n\t         * @return {Array.<number>}\n\t         */\n\t        coordToPoint: function (coord) {\n\t            var radius = coord[0];\n\t            var radian = coord[1] / 180 * Math.PI;\n\t            var x = Math.cos(radian) * radius + this.cx;\n\t            // Inverse the y\n\t            var y = -Math.sin(radian) * radius + this.cy;\n\n\t            return [x, y];\n\t        }\n\t    };\n\n\t    module.exports = Polar;\n\n\n/***/ },\n/* 306 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var Axis = __webpack_require__(124);\n\n\t    function RadiusAxis(scale, radiusExtent) {\n\n\t        Axis.call(this, 'radius', scale, radiusExtent);\n\n\t        /**\n\t         * Axis type\n\t         *  - 'category'\n\t         *  - 'value'\n\t         *  - 'time'\n\t         *  - 'log'\n\t         * @type {string}\n\t         */\n\t        this.type = 'category';\n\t    }\n\n\t    RadiusAxis.prototype = {\n\n\t        constructor: RadiusAxis,\n\n\t        dataToRadius: Axis.prototype.dataToCoord,\n\n\t        radiusToData: Axis.prototype.coordToData\n\t    };\n\n\t    zrUtil.inherits(RadiusAxis, Axis);\n\n\t    module.exports = RadiusAxis;\n\n\n/***/ },\n/* 307 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var Axis = __webpack_require__(124);\n\n\t    function AngleAxis(scale, angleExtent) {\n\n\t        angleExtent = angleExtent || [0, 360];\n\n\t        Axis.call(this, 'angle', scale, angleExtent);\n\n\t        /**\n\t         * Axis type\n\t         *  - 'category'\n\t         *  - 'value'\n\t         *  - 'time'\n\t         *  - 'log'\n\t         * @type {string}\n\t         */\n\t        this.type = 'category';\n\t    }\n\n\t    AngleAxis.prototype = {\n\n\t        constructor: AngleAxis,\n\n\t        dataToAngle: Axis.prototype.dataToCoord,\n\n\t        angleToData: Axis.prototype.coordToData\n\t    };\n\n\t    zrUtil.inherits(AngleAxis, Axis);\n\n\t    module.exports = AngleAxis;\n\n\n/***/ },\n/* 308 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    __webpack_require__(309);\n\n\t    __webpack_require__(1).extendComponentModel({\n\n\t        type: 'polar',\n\n\t        dependencies: ['polarAxis', 'angleAxis'],\n\n\t        /**\n\t         * @type {module:echarts/coord/polar/Polar}\n\t         */\n\t        coordinateSystem: null,\n\n\t        /**\n\t         * @param {string} axisType\n\t         * @return {module:echarts/coord/polar/AxisModel}\n\t         */\n\t        findAxisModel: function (axisType) {\n\t            var foundAxisModel;\n\t            var ecModel = this.ecModel;\n\n\t            ecModel.eachComponent(axisType, function (axisModel) {\n\t                if (axisModel.getCoordSysModel() === this) {\n\t                    foundAxisModel = axisModel;\n\t                }\n\t            }, this);\n\t            return foundAxisModel;\n\t        },\n\n\t        defaultOption: {\n\n\t            zlevel: 0,\n\n\t            z: 0,\n\n\t            center: ['50%', '50%'],\n\n\t            radius: '80%'\n\t        }\n\t    });\n\n\n/***/ },\n/* 309 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var ComponentModel = __webpack_require__(19);\n\t    var axisModelCreator = __webpack_require__(128);\n\n\t    var PolarAxisModel = ComponentModel.extend({\n\n\t        type: 'polarAxis',\n\n\t        /**\n\t         * @type {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}\n\t         */\n\t        axis: null,\n\n\t        /**\n\t         * @override\n\t         */\n\t        getCoordSysModel: function () {\n\t            return this.ecModel.queryComponents({\n\t                mainType: 'polar',\n\t                index: this.option.polarIndex,\n\t                id: this.option.polarId\n\t            })[0];\n\t        }\n\n\t    });\n\n\t    zrUtil.merge(PolarAxisModel.prototype, __webpack_require__(130));\n\n\t    var polarAxisDefaultExtendedOption = {\n\t        angle: {\n\t            // polarIndex: 0,\n\t            // polarId: '',\n\n\t            startAngle: 90,\n\n\t            clockwise: true,\n\n\t            splitNumber: 12,\n\n\t            axisLabel: {\n\t                rotate: false\n\t            }\n\t        },\n\t        radius: {\n\t            // polarIndex: 0,\n\t            // polarId: '',\n\n\t            splitNumber: 5\n\t        }\n\t    };\n\n\t    function getAxisType(axisDim, option) {\n\t        // Default axis with data is category axis\n\t        return option.type || (option.data ? 'category' : 'value');\n\t    }\n\n\t    axisModelCreator('angle', PolarAxisModel, getAxisType, polarAxisDefaultExtendedOption.angle);\n\t    axisModelCreator('radius', PolarAxisModel, getAxisType, polarAxisDefaultExtendedOption.radius);\n\n\n\n/***/ },\n/* 310 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    __webpack_require__(304);\n\n\t    __webpack_require__(311);\n\n\n/***/ },\n/* 311 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var graphic = __webpack_require__(43);\n\t    var Model = __webpack_require__(12);\n\n\t    var elementList = ['axisLine', 'axisLabel', 'axisTick', 'splitLine', 'splitArea'];\n\n\t    function getAxisLineShape(polar, r0, r, angle) {\n\t        var start = polar.coordToPoint([r0, angle]);\n\t        var end = polar.coordToPoint([r, angle]);\n\n\t        return {\n\t            x1: start[0],\n\t            y1: start[1],\n\t            x2: end[0],\n\t            y2: end[1]\n\t        };\n\t    }\n\t    __webpack_require__(1).extendComponentView({\n\n\t        type: 'angleAxis',\n\n\t        render: function (angleAxisModel, ecModel) {\n\t            this.group.removeAll();\n\t            if (!angleAxisModel.get('show')) {\n\t                return;\n\t            }\n\n\t            var polarModel = ecModel.getComponent('polar', angleAxisModel.get('polarIndex'));\n\t            var angleAxis = angleAxisModel.axis;\n\t            var polar = polarModel.coordinateSystem;\n\t            var radiusExtent = polar.getRadiusAxis().getExtent();\n\t            var ticksAngles = angleAxis.getTicksCoords();\n\n\t            if (angleAxis.type !== 'category') {\n\t                // Remove the last tick which will overlap the first tick\n\t                ticksAngles.pop();\n\t            }\n\n\t            zrUtil.each(elementList, function (name) {\n\t                if (angleAxisModel.get(name +'.show')\n\t                    && (!angleAxis.isBlank() || name === 'axisLine')\n\t                ) {\n\t                    this['_' + name](angleAxisModel, polar, ticksAngles, radiusExtent);\n\t                }\n\t            }, this);\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _axisLine: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n\t            var lineStyleModel = angleAxisModel.getModel('axisLine.lineStyle');\n\n\t            var circle = new graphic.Circle({\n\t                shape: {\n\t                    cx: polar.cx,\n\t                    cy: polar.cy,\n\t                    r: radiusExtent[1]\n\t                },\n\t                style: lineStyleModel.getLineStyle(),\n\t                z2: 1,\n\t                silent: true\n\t            });\n\t            circle.style.fill = null;\n\n\t            this.group.add(circle);\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _axisTick: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n\t            var tickModel = angleAxisModel.getModel('axisTick');\n\n\t            var tickLen = (tickModel.get('inside') ? -1 : 1) * tickModel.get('length');\n\n\t            var lines = zrUtil.map(ticksAngles, function (tickAngle) {\n\t                return new graphic.Line({\n\t                    shape: getAxisLineShape(polar, radiusExtent[1], radiusExtent[1] + tickLen, tickAngle)\n\t                });\n\t            });\n\t            this.group.add(graphic.mergePath(\n\t                lines, {\n\t                    style: zrUtil.defaults(\n\t                        tickModel.getModel('lineStyle').getLineStyle(),\n\t                        {\n\t                            stroke: angleAxisModel.get('axisLine.lineStyle.color')\n\t                        }\n\t                    )\n\t                }\n\t            ));\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _axisLabel: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n\t            var axis = angleAxisModel.axis;\n\n\t            var categoryData = angleAxisModel.get('data');\n\n\t            var labelModel = angleAxisModel.getModel('axisLabel');\n\t            var axisTextStyleModel = labelModel.getModel('textStyle');\n\n\t            var labels = angleAxisModel.getFormattedLabels();\n\n\t            var labelMargin = labelModel.get('margin');\n\t            var labelsAngles = axis.getLabelsCoords();\n\n\t            // Use length of ticksAngles because it may remove the last tick to avoid overlapping\n\t            for (var i = 0; i < ticksAngles.length; i++) {\n\t                var r = radiusExtent[1];\n\t                var p = polar.coordToPoint([r + labelMargin, labelsAngles[i]]);\n\t                var cx = polar.cx;\n\t                var cy = polar.cy;\n\n\t                var labelTextAlign = Math.abs(p[0] - cx) / r < 0.3\n\t                    ? 'center' : (p[0] > cx ? 'left' : 'right');\n\t                var labelTextBaseline = Math.abs(p[1] - cy) / r < 0.3\n\t                    ? 'middle' : (p[1] > cy ? 'top' : 'bottom');\n\n\t                var textStyleModel = axisTextStyleModel;\n\t                if (categoryData && categoryData[i] && categoryData[i].textStyle) {\n\t                    textStyleModel = new Model(\n\t                        categoryData[i].textStyle, axisTextStyleModel\n\t                    );\n\t                }\n\t                this.group.add(new graphic.Text({\n\t                    style: {\n\t                        x: p[0],\n\t                        y: p[1],\n\t                        fill: textStyleModel.getTextColor() || angleAxisModel.get('axisLine.lineStyle.color'),\n\t                        text: labels[i],\n\t                        textAlign: labelTextAlign,\n\t                        textVerticalAlign: labelTextBaseline,\n\t                        textFont: textStyleModel.getFont()\n\t                    },\n\t                    silent: true\n\t                }));\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _splitLine: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n\t            var splitLineModel = angleAxisModel.getModel('splitLine');\n\t            var lineStyleModel = splitLineModel.getModel('lineStyle');\n\t            var lineColors = lineStyleModel.get('color');\n\t            var lineCount = 0;\n\n\t            lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n\n\t            var splitLines = [];\n\n\t            for (var i = 0; i < ticksAngles.length; i++) {\n\t                var colorIndex = (lineCount++) % lineColors.length;\n\t                splitLines[colorIndex] = splitLines[colorIndex] || [];\n\t                splitLines[colorIndex].push(new graphic.Line({\n\t                    shape: getAxisLineShape(polar, radiusExtent[0], radiusExtent[1], ticksAngles[i])\n\t                }));\n\t            }\n\n\t            // Simple optimization\n\t            // Batching the lines if color are the same\n\t            for (var i = 0; i < splitLines.length; i++) {\n\t                this.group.add(graphic.mergePath(splitLines[i], {\n\t                    style: zrUtil.defaults({\n\t                        stroke: lineColors[i % lineColors.length]\n\t                    }, lineStyleModel.getLineStyle()),\n\t                    silent: true,\n\t                    z: angleAxisModel.get('z')\n\t                }));\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _splitArea: function (angleAxisModel, polar, ticksAngles, radiusExtent) {\n\n\t            var splitAreaModel = angleAxisModel.getModel('splitArea');\n\t            var areaStyleModel = splitAreaModel.getModel('areaStyle');\n\t            var areaColors = areaStyleModel.get('color');\n\t            var lineCount = 0;\n\n\t            areaColors = areaColors instanceof Array ? areaColors : [areaColors];\n\n\t            var splitAreas = [];\n\n\t            var RADIAN = Math.PI / 180;\n\t            var prevAngle = -ticksAngles[0] * RADIAN;\n\t            var r0 = Math.min(radiusExtent[0], radiusExtent[1]);\n\t            var r1 = Math.max(radiusExtent[0], radiusExtent[1]);\n\n\t            var clockwise = angleAxisModel.get('clockwise');\n\n\t            for (var i = 1; i < ticksAngles.length; i++) {\n\t                var colorIndex = (lineCount++) % areaColors.length;\n\t                splitAreas[colorIndex] = splitAreas[colorIndex] || [];\n\t                splitAreas[colorIndex].push(new graphic.Sector({\n\t                    shape: {\n\t                        cx: polar.cx,\n\t                        cy: polar.cy,\n\t                        r0: r0,\n\t                        r: r1,\n\t                        startAngle: prevAngle,\n\t                        endAngle: -ticksAngles[i] * RADIAN,\n\t                        clockwise: clockwise\n\t                    },\n\t                    silent: true\n\t                }));\n\t                prevAngle = -ticksAngles[i] * RADIAN;\n\t            }\n\n\t            // Simple optimization\n\t            // Batching the lines if color are the same\n\t            for (var i = 0; i < splitAreas.length; i++) {\n\t                this.group.add(graphic.mergePath(splitAreas[i], {\n\t                    style: zrUtil.defaults({\n\t                        fill: areaColors[i % areaColors.length]\n\t                    }, areaStyleModel.getAreaStyle()),\n\t                    silent: true\n\t                }));\n\t            }\n\t        }\n\t    });\n\n\n/***/ },\n/* 312 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    __webpack_require__(304);\n\n\t    __webpack_require__(313);\n\n\n/***/ },\n/* 313 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var graphic = __webpack_require__(43);\n\t    var AxisBuilder = __webpack_require__(133);\n\n\t    var axisBuilderAttrs = [\n\t        'axisLine', 'axisLabel', 'axisTick', 'axisName'\n\t    ];\n\t    var selfBuilderAttrs = [\n\t        'splitLine', 'splitArea'\n\t    ];\n\n\t    __webpack_require__(1).extendComponentView({\n\n\t        type: 'radiusAxis',\n\n\t        render: function (radiusAxisModel, ecModel) {\n\t            this.group.removeAll();\n\t            if (!radiusAxisModel.get('show')) {\n\t                return;\n\t            }\n\t            var polarModel = ecModel.getComponent('polar', radiusAxisModel.get('polarIndex'));\n\t            var angleAxis = polarModel.coordinateSystem.getAngleAxis();\n\t            var radiusAxis = radiusAxisModel.axis;\n\t            var polar = polarModel.coordinateSystem;\n\t            var ticksCoords = radiusAxis.getTicksCoords();\n\t            var axisAngle = angleAxis.getExtent()[0];\n\t            var radiusExtent = radiusAxis.getExtent();\n\n\t            var layout = layoutAxis(polar, radiusAxisModel, axisAngle);\n\t            var axisBuilder = new AxisBuilder(radiusAxisModel, layout);\n\t            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n\t            this.group.add(axisBuilder.getGroup());\n\n\t            zrUtil.each(selfBuilderAttrs, function (name) {\n\t                if (radiusAxisModel.get(name +'.show') && !radiusAxis.isBlank()) {\n\t                    this['_' + name](radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords);\n\t                }\n\t            }, this);\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _splitLine: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {\n\t            var splitLineModel = radiusAxisModel.getModel('splitLine');\n\t            var lineStyleModel = splitLineModel.getModel('lineStyle');\n\t            var lineColors = lineStyleModel.get('color');\n\t            var lineCount = 0;\n\n\t            lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n\n\t            var splitLines = [];\n\n\t            for (var i = 0; i < ticksCoords.length; i++) {\n\t                var colorIndex = (lineCount++) % lineColors.length;\n\t                splitLines[colorIndex] = splitLines[colorIndex] || [];\n\t                splitLines[colorIndex].push(new graphic.Circle({\n\t                    shape: {\n\t                        cx: polar.cx,\n\t                        cy: polar.cy,\n\t                        r: ticksCoords[i]\n\t                    },\n\t                    silent: true\n\t                }));\n\t            }\n\n\t            // Simple optimization\n\t            // Batching the lines if color are the same\n\t            for (var i = 0; i < splitLines.length; i++) {\n\t                this.group.add(graphic.mergePath(splitLines[i], {\n\t                    style: zrUtil.defaults({\n\t                        stroke: lineColors[i % lineColors.length],\n\t                        fill: null\n\t                    }, lineStyleModel.getLineStyle()),\n\t                    silent: true\n\t                }));\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _splitArea: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {\n\n\t            var splitAreaModel = radiusAxisModel.getModel('splitArea');\n\t            var areaStyleModel = splitAreaModel.getModel('areaStyle');\n\t            var areaColors = areaStyleModel.get('color');\n\t            var lineCount = 0;\n\n\t            areaColors = areaColors instanceof Array ? areaColors : [areaColors];\n\n\t            var splitAreas = [];\n\n\t            var prevRadius = ticksCoords[0];\n\t            for (var i = 1; i < ticksCoords.length; i++) {\n\t                var colorIndex = (lineCount++) % areaColors.length;\n\t                splitAreas[colorIndex] = splitAreas[colorIndex] || [];\n\t                splitAreas[colorIndex].push(new graphic.Sector({\n\t                    shape: {\n\t                        cx: polar.cx,\n\t                        cy: polar.cy,\n\t                        r0: prevRadius,\n\t                        r: ticksCoords[i],\n\t                        startAngle: 0,\n\t                        endAngle: Math.PI * 2\n\t                    },\n\t                    silent: true\n\t                }));\n\t                prevRadius = ticksCoords[i];\n\t            }\n\n\t            // Simple optimization\n\t            // Batching the lines if color are the same\n\t            for (var i = 0; i < splitAreas.length; i++) {\n\t                this.group.add(graphic.mergePath(splitAreas[i], {\n\t                    style: zrUtil.defaults({\n\t                        fill: areaColors[i % areaColors.length]\n\t                    }, areaStyleModel.getAreaStyle()),\n\t                    silent: true\n\t                }));\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function layoutAxis(polar, radiusAxisModel, axisAngle) {\n\t        return {\n\t            position: [polar.cx, polar.cy],\n\t            rotation: axisAngle / 180 * Math.PI,\n\t            labelDirection: -1,\n\t            tickDirection: -1,\n\t            nameDirection: 1,\n\t            labelRotation: radiusAxisModel.getModel('axisLabel').get('rotate'),\n\t            // Over splitLine and splitArea\n\t            z2: 1\n\t        };\n\t    }\n\n\n/***/ },\n/* 314 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    __webpack_require__(315);\n\n\t    __webpack_require__(166);\n\n\t    __webpack_require__(316);\n\n\t    __webpack_require__(179);\n\n\t    var echarts = __webpack_require__(1);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    function makeAction(method, actionInfo) {\n\t        actionInfo.update = 'updateView';\n\t        echarts.registerAction(actionInfo, function (payload, ecModel) {\n\t            var selected = {};\n\n\t            ecModel.eachComponent(\n\t                { mainType: 'geo', query: payload},\n\t                function (geoModel) {\n\t                    geoModel[method](payload.name);\n\t                    var geo = geoModel.coordinateSystem;\n\t                    zrUtil.each(geo.regions, function (region) {\n\t                        selected[region.name] = geoModel.isSelected(region.name) || false;\n\t                    });\n\t                }\n\t            );\n\n\t            return {\n\t                selected: selected,\n\t                name: payload.name\n\t            }\n\t        });\n\t    }\n\n\t    makeAction('toggleSelected', {\n\t        type: 'geoToggleSelect',\n\t        event: 'geoselectchanged'\n\t    });\n\t    makeAction('select', {\n\t        type: 'geoSelect',\n\t        event: 'geoselected'\n\t    });\n\t    makeAction('unSelect', {\n\t        type: 'geoUnSelect',\n\t        event: 'geounselected'\n\t    });\n\n\n/***/ },\n/* 315 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t    var modelUtil = __webpack_require__(5);\n\t    var ComponentModel = __webpack_require__(19);\n\t    var Model = __webpack_require__(12);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var selectableMixin = __webpack_require__(143);\n\n\t    var geoCreator = __webpack_require__(166);\n\n\t    var GeoModel = ComponentModel.extend({\n\n\t        type: 'geo',\n\n\t        /**\n\t         * @type {module:echarts/coord/geo/Geo}\n\t         */\n\t        coordinateSystem: null,\n\n\t        layoutMode: 'box',\n\n\t        init: function (option) {\n\t            ComponentModel.prototype.init.apply(this, arguments);\n\n\t            // Default label emphasis `position` and `show`\n\t            modelUtil.defaultEmphasis(\n\t                option.label, ['position', 'show', 'textStyle', 'distance', 'formatter']\n\t            );\n\t        },\n\n\t        optionUpdated: function () {\n\t            var option = this.option;\n\t            var self = this;\n\n\t            option.regions = geoCreator.getFilledRegions(option.regions, option.map);\n\n\t            this._optionModelMap = zrUtil.reduce(option.regions || [], function (obj, regionOpt) {\n\t                if (regionOpt.name) {\n\t                    obj[regionOpt.name] = new Model(regionOpt, self);\n\t                }\n\t                return obj;\n\t            }, {});\n\n\t            this.updateSelectedMap(option.regions);\n\t        },\n\n\t        defaultOption: {\n\n\t            zlevel: 0,\n\n\t            z: 0,\n\n\t            show: true,\n\n\t            left: 'center',\n\n\t            top: 'center',\n\n\n\t            // width:,\n\t            // height:,\n\t            // right\n\t            // bottom\n\n\t            // Aspect is width / height. Inited to be geoJson bbox aspect\n\t            // This parameter is used for scale this aspect\n\t            aspectScale: 0.75,\n\n\t            ///// Layout with center and size\n\t            // If you wan't to put map in a fixed size box with right aspect ratio\n\t            // This two properties may more conveninet\n\t            // layoutCenter: [50%, 50%]\n\t            // layoutSize: 100\n\n\n\t            silent: false,\n\n\t            // Map type\n\t            map: '',\n\n\t            // Default on center of map\n\t            center: null,\n\n\t            zoom: 1,\n\n\t            scaleLimit: null,\n\n\t            // selectedMode: false\n\n\t            label: {\n\t                normal: {\n\t                    show: false,\n\t                    textStyle: {\n\t                        color: '#000'\n\t                    }\n\t                },\n\t                emphasis: {\n\t                    show: true,\n\t                    textStyle: {\n\t                        color: 'rgb(100,0,0)'\n\t                    }\n\t                }\n\t            },\n\n\t            itemStyle: {\n\t                normal: {\n\t                    // color: 各异,\n\t                    borderWidth: 0.5,\n\t                    borderColor: '#444',\n\t                    color: '#eee'\n\t                },\n\t                emphasis: {                 // 也是选中样式\n\t                    color: 'rgba(255,215,0,0.8)'\n\t                }\n\t            },\n\n\t            regions: []\n\t        },\n\n\t        /**\n\t         * Get model of region\n\t         * @param  {string} name\n\t         * @return {module:echarts/model/Model}\n\t         */\n\t        getRegionModel: function (name) {\n\t            return this._optionModelMap[name];\n\t        },\n\n\t        /**\n\t         * Format label\n\t         * @param {string} name Region name\n\t         * @param {string} [status='normal'] 'normal' or 'emphasis'\n\t         * @return {string}\n\t         */\n\t        getFormattedLabel: function (name, status) {\n\t            var formatter = this.get('label.' + status + '.formatter');\n\t            var params = {\n\t                name: name\n\t            };\n\t            if (typeof formatter === 'function') {\n\t                params.status = status;\n\t                return formatter(params);\n\t            }\n\t            else if (typeof formatter === 'string') {\n\t                var serName = params.seriesName;\n\t                return formatter.replace('{a}', serName != null ? serName : '');\n\t            }\n\t        },\n\n\t        setZoom: function (zoom) {\n\t            this.option.zoom = zoom;\n\t        },\n\n\t        setCenter: function (center) {\n\t            this.option.center = center;\n\t        }\n\t    });\n\n\t    zrUtil.mixin(GeoModel, selectableMixin);\n\n\t    module.exports = GeoModel;\n\n\n/***/ },\n/* 316 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var MapDraw = __webpack_require__(176);\n\n\t    module.exports = __webpack_require__(1).extendComponentView({\n\n\t        type: 'geo',\n\n\t        init: function (ecModel, api) {\n\t            var mapDraw = new MapDraw(api, true);\n\t            this._mapDraw = mapDraw;\n\n\t            this.group.add(mapDraw.group);\n\t        },\n\n\t        render: function (geoModel, ecModel, api, payload) {\n\t            // Not render if it is an toggleSelect action from self\n\t            if (payload && payload.type === 'geoToggleSelect'\n\t                && payload.from === this.uid\n\t            ) {\n\t                return;\n\t            }\n\n\t            var mapDraw = this._mapDraw;\n\t            if (geoModel.get('show')) {\n\t                mapDraw.draw(geoModel, ecModel, api, this, payload);\n\t            }\n\t            else {\n\t                this._mapDraw.group.removeAll();\n\t            }\n\n\t            this.group.silent = geoModel.get('silent');\n\t        },\n\n\t        dispose: function () {\n\t            this._mapDraw && this._mapDraw.remove();\n\t        }\n\n\t    });\n\n\n/***/ },\n/* 317 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Brush component entry\n\t */\n\n\n\t    __webpack_require__(1).registerPreprocessor(\n\t        __webpack_require__(318)\n\t    );\n\n\t    __webpack_require__(319);\n\t    __webpack_require__(323);\n\t    __webpack_require__(324);\n\t    __webpack_require__(325);\n\n\t    __webpack_require__(326);\n\n\n\n/***/ },\n/* 318 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file brush preprocessor\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var DEFAULT_TOOLBOX_BTNS = ['rect', 'polygon', 'keep', 'clear'];\n\n\t    module.exports = function (option, isNew) {\n\t        var brushComponents = option && option.brush;\n\t        if (!zrUtil.isArray(brushComponents)) {\n\t            brushComponents = brushComponents ? [brushComponents] : [];\n\t        }\n\n\t        if (!brushComponents.length) {\n\t            return;\n\t        }\n\n\t        var brushComponentSpecifiedBtns = [];\n\n\t        zrUtil.each(brushComponents, function (brushOpt) {\n\t            var tbs = brushOpt.hasOwnProperty('toolbox')\n\t                ? brushOpt.toolbox : [];\n\n\t            if (tbs instanceof Array) {\n\t                brushComponentSpecifiedBtns = brushComponentSpecifiedBtns.concat(tbs);\n\t            }\n\t        });\n\n\t        var toolbox = option && option.toolbox;\n\n\t        if (zrUtil.isArray(toolbox)) {\n\t            toolbox = toolbox[0];\n\t        }\n\t        if (!toolbox) {\n\t            toolbox = {feature: {}};\n\t            option.toolbox = [toolbox];\n\t        }\n\n\t        var toolboxFeature = (toolbox.feature || (toolbox.feature = {}));\n\t        var toolboxBrush = toolboxFeature.brush || (toolboxFeature.brush = {});\n\t        var brushTypes = toolboxBrush.type || (toolboxBrush.type = []);\n\n\t        brushTypes.push.apply(brushTypes, brushComponentSpecifiedBtns);\n\n\t        removeDuplicate(brushTypes);\n\n\t        if (isNew && !brushTypes.length) {\n\t            brushTypes.push.apply(brushTypes, DEFAULT_TOOLBOX_BTNS);\n\t        }\n\t    };\n\n\t    function removeDuplicate(arr) {\n\t        var map = {};\n\t        zrUtil.each(arr, function (val) {\n\t            map[val] = 1;\n\t        });\n\t        arr.length = 0;\n\t        zrUtil.each(map, function (flag, val) {\n\t            arr.push(val);\n\t        });\n\t    }\n\n\n\n/***/ },\n/* 319 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Brush visual coding.\n\t */\n\n\n\t    var echarts = __webpack_require__(1);\n\t    var visualSolution = __webpack_require__(320);\n\t    var zrUtil = __webpack_require__(4);\n\t    var BoundingRect = __webpack_require__(9);\n\t    var selector = __webpack_require__(321);\n\t    var throttle = __webpack_require__(81);\n\t    var brushHelper = __webpack_require__(322);\n\n\t    var STATE_LIST = ['inBrush', 'outOfBrush'];\n\t    var DISPATCH_METHOD = '__ecBrushSelect';\n\t    var DISPATCH_FLAG = '__ecInBrushSelectEvent';\n\t    var PRIORITY_BRUSH = echarts.PRIORITY.VISUAL.BRUSH;\n\n\t    /**\n\t     * Layout for visual, the priority higher than other layout, and before brush visual.\n\t     */\n\t    echarts.registerLayout(PRIORITY_BRUSH, function (ecModel, api, payload) {\n\t        ecModel.eachComponent({mainType: 'brush'}, function (brushModel) {\n\n\t            payload && payload.type === 'takeGlobalCursor' && brushModel.setBrushOption(\n\t                payload.key === 'brush' ? payload.brushOption : {brushType: false}\n\t            );\n\n\t            brushModel.coordInfoList = brushHelper.makeCoordInfoList(brushModel.option, ecModel);\n\n\t            brushHelper.parseInputRanges(brushModel, ecModel);\n\t        });\n\t    });\n\n\t    /**\n\t     * Register the visual encoding if this modules required.\n\t     */\n\t    echarts.registerVisual(PRIORITY_BRUSH, function (ecModel, api, payload) {\n\n\t        var brushSelected = [];\n\t        var throttleType;\n\t        var throttleDelay;\n\n\t        ecModel.eachComponent({mainType: 'brush'}, function (brushModel, brushIndex) {\n\n\t            var thisBrushSelected = {\n\t                brushId: brushModel.id,\n\t                brushIndex: brushIndex,\n\t                brushName: brushModel.name,\n\t                areas: zrUtil.clone(brushModel.areas),\n\t                selected: []\n\t            };\n\t            // Every brush component exists in event params, convenient\n\t            // for user to find by index.\n\t            brushSelected.push(thisBrushSelected);\n\n\t            var brushOption = brushModel.option;\n\t            var brushLink = brushOption.brushLink;\n\t            var linkedSeriesMap = [];\n\t            var selectedDataIndexForLink = [];\n\t            var rangeInfoBySeries = [];\n\t            var hasBrushExists = 0;\n\n\t            if (!brushIndex) { // Only the first throttle setting works.\n\t                throttleType = brushOption.throttleType;\n\t                throttleDelay = brushOption.throttleDelay;\n\t            }\n\n\t            // Add boundingRect and selectors to range.\n\t            var areas = zrUtil.map(brushModel.areas, function (area) {\n\t                return bindSelector(\n\t                    zrUtil.defaults(\n\t                        {boundingRect: boundingRectBuilders[area.brushType](area)},\n\t                        area\n\t                    )\n\t                );\n\t            });\n\n\t            var visualMappings = visualSolution.createVisualMappings(\n\t                brushModel.option, STATE_LIST, function (mappingOption) {\n\t                    mappingOption.mappingMethod = 'fixed';\n\t                }\n\t            );\n\n\t            zrUtil.isArray(brushLink) && zrUtil.each(brushLink, function (seriesIndex) {\n\t                linkedSeriesMap[seriesIndex] = 1;\n\t            });\n\n\t            function linkOthers(seriesIndex) {\n\t                return brushLink === 'all' || linkedSeriesMap[seriesIndex];\n\t            }\n\n\t            // If no supported brush or no brush on the series,\n\t            // all visuals should be in original state.\n\t            function brushed(rangeInfoList) {\n\t                return !!rangeInfoList.length;\n\t            }\n\n\t            /**\n\t             * Logic for each series: (If the logic has to be modified one day, do it carefully!)\n\t             *\n\t             * ( brushed ┬ && ┬hasBrushExist ┬ && linkOthers  ) => StepA: ┬record, ┬ StepB: ┬visualByRecord.\n\t             *   !brushed┘    ├hasBrushExist ┤                            └nothing,┘        ├visualByRecord.\n\t             *                └!hasBrushExist┘                                              └nothing.\n\t             * ( !brushed  && ┬hasBrushExist ┬ && linkOthers  ) => StepA:  nothing,  StepB: ┬visualByRecord.\n\t             *                └!hasBrushExist┘                                              └nothing.\n\t             * ( brushed ┬ &&                     !linkOthers ) => StepA:  nothing,  StepB: ┬visualByCheck.\n\t             *   !brushed┘                                                                  └nothing.\n\t             * ( !brushed  &&                     !linkOthers ) => StepA:  nothing,  StepB:  nothing.\n\t             */\n\n\t            // Step A\n\t            ecModel.eachSeries(function (seriesModel, seriesIndex) {\n\t                var rangeInfoList = rangeInfoBySeries[seriesIndex] = [];\n\n\t                seriesModel.subType === 'parallel'\n\t                    ? stepAParallel(seriesModel, seriesIndex, rangeInfoList)\n\t                    : stepAOthers(seriesModel, seriesIndex, rangeInfoList);\n\t            });\n\n\t            function stepAParallel(seriesModel, seriesIndex) {\n\t                var coordSys = seriesModel.coordinateSystem;\n\t                hasBrushExists |= coordSys.hasAxisbrushed();\n\n\t                linkOthers(seriesIndex) && coordSys.eachActiveState(\n\t                    seriesModel.getData(),\n\t                    function (activeState, dataIndex) {\n\t                        activeState === 'active' && (selectedDataIndexForLink[dataIndex] = 1);\n\t                    }\n\t                );\n\t            }\n\n\t            function stepAOthers(seriesModel, seriesIndex, rangeInfoList) {\n\t                var selectorsByBrushType = getSelectorsByBrushType(seriesModel);\n\t                if (!selectorsByBrushType || brushModelNotControll(brushModel, seriesIndex)) {\n\t                    return;\n\t                }\n\n\t                zrUtil.each(areas, function (area) {\n\t                    selectorsByBrushType[area.brushType]\n\t                        && brushHelper.controlSeries(area, brushModel, seriesModel)\n\t                        && rangeInfoList.push(area);\n\t                    hasBrushExists |= brushed(rangeInfoList);\n\t                });\n\n\t                if (linkOthers(seriesIndex) && brushed(rangeInfoList)) {\n\t                    var data = seriesModel.getData();\n\t                    data.each(function (dataIndex) {\n\t                        if (checkInRange(selectorsByBrushType, rangeInfoList, data, dataIndex)) {\n\t                            selectedDataIndexForLink[dataIndex] = 1;\n\t                        }\n\t                    });\n\t                }\n\t            }\n\n\t            // Step B\n\t            ecModel.eachSeries(function (seriesModel, seriesIndex) {\n\t                var seriesBrushSelected = {\n\t                    seriesId: seriesModel.id,\n\t                    seriesIndex: seriesIndex,\n\t                    seriesName: seriesModel.name,\n\t                    dataIndex: []\n\t                };\n\t                // Every series exists in event params, convenient\n\t                // for user to find series by seriesIndex.\n\t                thisBrushSelected.selected.push(seriesBrushSelected);\n\n\t                var selectorsByBrushType = getSelectorsByBrushType(seriesModel);\n\t                var rangeInfoList = rangeInfoBySeries[seriesIndex];\n\n\t                var data = seriesModel.getData();\n\t                var getValueState = linkOthers(seriesIndex)\n\t                    ? function (dataIndex) {\n\t                        return selectedDataIndexForLink[dataIndex]\n\t                            ? (seriesBrushSelected.dataIndex.push(data.getRawIndex(dataIndex)), 'inBrush')\n\t                            : 'outOfBrush';\n\t                    }\n\t                    : function (dataIndex) {\n\t                        return checkInRange(selectorsByBrushType, rangeInfoList, data, dataIndex)\n\t                            ? (seriesBrushSelected.dataIndex.push(data.getRawIndex(dataIndex)), 'inBrush')\n\t                            : 'outOfBrush';\n\t                    };\n\n\t                // If no supported brush or no brush, all visuals are in original state.\n\t                (linkOthers(seriesIndex) ? hasBrushExists : brushed(rangeInfoList))\n\t                    && visualSolution.applyVisual(\n\t                        STATE_LIST, visualMappings, data, getValueState\n\t                    );\n\t            });\n\n\t        });\n\n\t        dispatchAction(api, throttleType, throttleDelay, brushSelected, payload);\n\t    });\n\n\t    function dispatchAction(api, throttleType, throttleDelay, brushSelected, payload) {\n\t        // This event will not be triggered when `setOpion`, otherwise dead lock may\n\t        // triggered when do `setOption` in event listener, which we do not find\n\t        // satisfactory way to solve yet. Some considered resolutions:\n\t        // (a) Diff with prevoius selected data ant only trigger event when changed.\n\t        // But store previous data and diff precisely (i.e., not only by dataIndex, but\n\t        // also detect value changes in selected data) might bring complexity or fragility.\n\t        // (b) Use spectial param like `silent` to suppress event triggering.\n\t        // But such kind of volatile param may be weird in `setOption`.\n\t        if (!payload) {\n\t            return;\n\t        }\n\n\t        var zr = api.getZr();\n\t        if (zr[DISPATCH_FLAG]) {\n\t            return;\n\t        }\n\n\t        if (!zr[DISPATCH_METHOD]) {\n\t            zr[DISPATCH_METHOD] = doDispatch;\n\t        }\n\n\t        var fn = throttle.createOrUpdate(zr, DISPATCH_METHOD, throttleDelay, throttleType);\n\n\t        fn(api, brushSelected);\n\t    }\n\n\t    function doDispatch(api, brushSelected) {\n\t        if (!api.isDisposed()) {\n\t            var zr = api.getZr();\n\t            zr[DISPATCH_FLAG] = true;\n\t            api.dispatchAction({\n\t                type: 'brushSelect',\n\t                batch: brushSelected\n\t            });\n\t            zr[DISPATCH_FLAG] = false;\n\t        }\n\t    }\n\n\t    function checkInRange(selectorsByBrushType, rangeInfoList, data, dataIndex) {\n\t        var itemLayout = data.getItemLayout(dataIndex);\n\t        for (var i = 0, len = rangeInfoList.length; i < len; i++) {\n\t            var area = rangeInfoList[i];\n\t            if (selectorsByBrushType[area.brushType](\n\t                itemLayout, area.selectors, area\n\t            )) {\n\t                return true;\n\t            }\n\t        }\n\t    }\n\n\t    function getSelectorsByBrushType(seriesModel) {\n\t        var brushSelector = seriesModel.brushSelector;\n\t        if (zrUtil.isString(brushSelector)) {\n\t            var sels = [];\n\t            zrUtil.each(selector, function (selectorsByElementType, brushType) {\n\t                sels[brushType] = selectorsByElementType[brushSelector];\n\t            });\n\t            return sels;\n\t        }\n\t        else if (zrUtil.isFunction(brushSelector)) {\n\t            var bSelector = {};\n\t            zrUtil.each(selector, function (sel, brushType) {\n\t                bSelector[brushType] = brushSelector;\n\t            });\n\t            return bSelector;\n\t        }\n\t        return brushSelector;\n\t    }\n\n\t    function brushModelNotControll(brushModel, seriesIndex) {\n\t        var seriesIndices = brushModel.option.seriesIndex;\n\t        return seriesIndices != null\n\t            && seriesIndices !== 'all'\n\t            && (\n\t                zrUtil.isArray(seriesIndices)\n\t                ? zrUtil.indexOf(seriesIndices, seriesIndex) < 0\n\t                : seriesIndex !== seriesIndices\n\t            );\n\t    }\n\n\t    function bindSelector(area) {\n\t        var selectors = area.selectors = {};\n\t        zrUtil.each(selector[area.brushType], function (selFn, elType) {\n\t            // Do not use function binding or curry for performance.\n\t            selectors[elType] = function (itemLayout) {\n\t                return selFn(itemLayout, selectors, area);\n\t            };\n\t        });\n\t        return area;\n\t    }\n\n\t    var boundingRectBuilders = {\n\n\t        lineX: zrUtil.noop,\n\n\t        lineY: zrUtil.noop,\n\n\t        rect: function (area) {\n\t            return getBoundingRectFromMinMax(area.range);\n\t        },\n\n\t        polygon: function (area) {\n\t            var minMax;\n\t            var range = area.range;\n\n\t            for (var i = 0, len = range.length; i < len; i++) {\n\t                minMax = minMax || [[Infinity, -Infinity], [Infinity, -Infinity]];\n\t                var rg = range[i];\n\t                rg[0] < minMax[0][0] && (minMax[0][0] = rg[0]);\n\t                rg[0] > minMax[0][1] && (minMax[0][1] = rg[0]);\n\t                rg[1] < minMax[1][0] && (minMax[1][0] = rg[1]);\n\t                rg[1] > minMax[1][1] && (minMax[1][1] = rg[1]);\n\t            }\n\n\t            return minMax && getBoundingRectFromMinMax(minMax);\n\t        }\n\t    };\n\n\t    function getBoundingRectFromMinMax(minMax) {\n\t        return new BoundingRect(\n\t            minMax[0][0],\n\t            minMax[1][0],\n\t            minMax[0][1] - minMax[0][0],\n\t            minMax[1][1] - minMax[1][0]\n\t        );\n\t    }\n\n\n\n/***/ },\n/* 320 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Visual solution, for consistent option specification.\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var VisualMapping = __webpack_require__(195);\n\t    var each = zrUtil.each;\n\n\t    function hasKeys(obj) {\n\t        if (obj) {\n\t            for (var name in obj){\n\t                if (obj.hasOwnProperty(name)) {\n\t                    return true;\n\t                }\n\t            }\n\t        }\n\t    }\n\n\t    var visualSolution = {\n\n\t        /**\n\t         * @param {Object} option\n\t         * @param {Array.<string>} stateList\n\t         * @param {Function} [supplementVisualOption]\n\t         * @return {Object} visualMappings <state, <visualType, module:echarts/visual/VisualMapping>>\n\t         */\n\t        createVisualMappings: function (option, stateList, supplementVisualOption) {\n\t            var visualMappings = {};\n\n\t            each(stateList, function (state) {\n\t                var mappings = visualMappings[state] = createMappings();\n\n\t                each(option[state], function (visualData, visualType) {\n\t                    if (!VisualMapping.isValidType(visualType)) {\n\t                        return;\n\t                    }\n\t                    var mappingOption = {\n\t                        type: visualType,\n\t                        visual: visualData\n\t                    };\n\t                    supplementVisualOption && supplementVisualOption(mappingOption, state);\n\t                    mappings[visualType] = new VisualMapping(mappingOption);\n\n\t                    // Prepare a alpha for opacity, for some case that opacity\n\t                    // is not supported, such as rendering using gradient color.\n\t                    if (visualType === 'opacity') {\n\t                        mappingOption = zrUtil.clone(mappingOption);\n\t                        mappingOption.type = 'colorAlpha';\n\t                        mappings.__hidden.__alphaForOpacity = new VisualMapping(mappingOption);\n\t                    }\n\t                });\n\t            });\n\n\t            return visualMappings;\n\n\t            function createMappings() {\n\t                var Creater = function () {};\n\t                // Make sure hidden fields will not be visited by\n\t                // object iteration (with hasOwnProperty checking).\n\t                Creater.prototype.__hidden = Creater.prototype;\n\t                var obj = new Creater();\n\t                return obj;\n\t            }\n\t        },\n\n\t        /**\n\t         * @param {Object} thisOption\n\t         * @param {Object} newOption\n\t         * @param {Array.<string>} keys\n\t         */\n\t        replaceVisualOption: function (thisOption, newOption, keys) {\n\t            // Visual attributes merge is not supported, otherwise it\n\t            // brings overcomplicated merge logic. See #2853. So if\n\t            // newOption has anyone of these keys, all of these keys\n\t            // will be reset. Otherwise, all keys remain.\n\t            var has;\n\t            zrUtil.each(keys, function (key) {\n\t                if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {\n\t                    has = true;\n\t                }\n\t            });\n\t            has && zrUtil.each(keys, function (key) {\n\t                if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {\n\t                    thisOption[key] = zrUtil.clone(newOption[key]);\n\t                }\n\t                else {\n\t                    delete thisOption[key];\n\t                }\n\t            });\n\t        },\n\n\t        /**\n\t         * @param {Array.<string>} stateList\n\t         * @param {Object} visualMappings <state, Object.<visualType, module:echarts/visual/VisualMapping>>\n\t         * @param {module:echarts/data/List} list\n\t         * @param {Function} getValueState param: valueOrIndex, return: state.\n\t         * @param {object} [scope] Scope for getValueState\n\t         * @param {string} [dimension] Concrete dimension, if used.\n\t         */\n\t        applyVisual: function (stateList, visualMappings, data, getValueState, scope, dimension) {\n\t            var visualTypesMap = {};\n\t            zrUtil.each(stateList, function (state) {\n\t                var visualTypes = VisualMapping.prepareVisualTypes(visualMappings[state]);\n\t                visualTypesMap[state] = visualTypes;\n\t            });\n\n\t            var dataIndex;\n\n\t            function getVisual(key) {\n\t                return data.getItemVisual(dataIndex, key);\n\t            }\n\n\t            function setVisual(key, value) {\n\t                data.setItemVisual(dataIndex, key, value);\n\t            }\n\n\t            if (dimension == null) {\n\t                data.each(eachItem, true);\n\t            }\n\t            else {\n\t                data.each([dimension], eachItem, true);\n\t            }\n\n\t            function eachItem(valueOrIndex, index) {\n\t                dataIndex = dimension == null ? valueOrIndex : index;\n\n\t                var rawDataItem = data.getRawDataItem(dataIndex);\n\t                // Consider performance\n\t                if (rawDataItem && rawDataItem.visualMap === false) {\n\t                    return;\n\t                }\n\n\t                var valueState = getValueState.call(scope, valueOrIndex);\n\t                var mappings = visualMappings[valueState];\n\t                var visualTypes = visualTypesMap[valueState];\n\n\t                for (var i = 0, len = visualTypes.length; i < len; i++) {\n\t                    var type = visualTypes[i];\n\t                    mappings[type] && mappings[type].applyVisual(\n\t                        valueOrIndex, getVisual, setVisual\n\t                    );\n\t                }\n\t            }\n\t        }\n\t    };\n\n\t    module.exports = visualSolution;\n\n\n\n/***/ },\n/* 321 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var polygonContain = __webpack_require__(170).contain;\n\t    var BoundingRect = __webpack_require__(9);\n\n\t    // Key of the first level is brushType: `line`, `rect`, `polygon`.\n\t    // Key of the second level is chart element type: `point`, `rect`.\n\t    // See moudule:echarts/component/helper/BrushController\n\t    // function param:\n\t    //      {Object} itemLayout fetch from data.getItemLayout(dataIndex)\n\t    //      {Object} selectors {point: selector, rect: selector, ...}\n\t    //      {Object} area {range: [[], [], ..], boudingRect}\n\t    // function return:\n\t    //      {boolean} Whether in the given brush.\n\t    var selector = {\n\t        lineX: getLineSelectors(0),\n\t        lineY: getLineSelectors(1),\n\t        rect: {\n\t            point: function (itemLayout, selectors, area) {\n\t                return area.boundingRect.contain(itemLayout[0], itemLayout[1]);\n\t            },\n\t            rect: function (itemLayout, selectors, area) {\n\t                return area.boundingRect.intersect(itemLayout);\n\t            }\n\t        },\n\t        polygon: {\n\t            point: function (itemLayout, selectors, area) {\n\t                return area.boundingRect.contain(itemLayout[0], itemLayout[1])\n\t                    && polygonContain(area.range, itemLayout[0], itemLayout[1]);\n\t            },\n\t            rect: function (itemLayout, selectors, area) {\n\t                // FIXME\n\t                // 随意写的，没有考察过效率。\n\t                var points = area.range;\n\n\t                if (points.length <= 1) {\n\t                    return false;\n\t                }\n\n\t                var x = itemLayout.x;\n\t                var y = itemLayout.y;\n\t                var width = itemLayout.width;\n\t                var height = itemLayout.height;\n\t                var p = points[0];\n\n\t                if (polygonContain(points, x, y)\n\t                    || polygonContain(points, x + width, y)\n\t                    || polygonContain(points, x, y + height)\n\t                    || polygonContain(points, x + width, y + height)\n\t                    || BoundingRect.create(itemLayout).contain(p[0], p[1])\n\t                    || lineIntersectPolygon(x, y, x + width, y, points)\n\t                    || lineIntersectPolygon(x, y, x, y + height, points)\n\t                    || lineIntersectPolygon(x + width, y, x + width, y + height, points)\n\t                    || lineIntersectPolygon(x, y + height, x + width, y + height, points)\n\t                ) {\n\t                    return true;\n\t                }\n\t            }\n\t        }\n\t    };\n\n\t    function getLineSelectors(xyIndex) {\n\t        var xy = ['x', 'y'];\n\t        var wh = ['width', 'height'];\n\n\t        return {\n\t            point: function (itemLayout, selectors, area) {\n\t                var range = area.range;\n\t                var p = itemLayout[xyIndex];\n\t                return inLineRange(p, range);\n\t            },\n\t            rect: function (itemLayout, selectors, area) {\n\t                var range = area.range;\n\t                return inLineRange(itemLayout[xy[xyIndex]], range)\n\t                    || inLineRange(itemLayout[xy[xyIndex]] + itemLayout[wh[xyIndex]], range);\n\t            }\n\t        };\n\t    }\n\n\t    function inLineRange(p, range) {\n\t        return range[0] <= p && p <= range[1];\n\t    }\n\n\t    // FIXME\n\t    // 随意写的，没考察过效率。\n\t    function lineIntersectPolygon(lx, ly, l2x, l2y, points) {\n\t        for (var i = 0, p2 = points[points.length - 1]; i < points.length; i++) {\n\t            var p = points[i];\n\t            if (lineIntersect(lx, ly, l2x, l2y, p[0], p[1], p2[0], p2[1])) {\n\t                return true;\n\t            }\n\t            p2 = p;\n\t        }\n\t    }\n\n\t    // Code from <http://blog.csdn.net/rickliuxiao/article/details/6259322> with some fix.\n\t    // See <https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection>\n\t    function lineIntersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y) {\n\t        var delta = determinant(a2x - a1x, b1x - b2x, a2y - a1y, b1y - b2y);\n\t        if (nearZero(delta)) { // parallel\n\t            return false;\n\t        }\n\t        var namenda = determinant(b1x - a1x, b1x - b2x, b1y - a1y, b1y - b2y) / delta;\n\t        if (namenda < 0 || namenda > 1) {\n\t            return false;\n\t        }\n\t        var miu = determinant(a2x - a1x, b1x - a1x, a2y - a1y, b1y - a1y) / delta;\n\t        if (miu < 0 || miu > 1) {\n\t            return false;\n\t        }\n\t        return true;\n\t    }\n\n\t    function nearZero(val) {\n\t        return val <= (1e-6) && val >= -(1e-6);\n\t    }\n\n\t    function determinant(v1, v2, v3, v4) {\n\t        return v1 * v4 - v2 * v3;\n\t    }\n\n\t    module.exports = selector;\n\n\n\n/***/ },\n/* 322 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var graphic = __webpack_require__(43);\n\n\t    var each = zrUtil.each;\n\n\t    var helper = {};\n\n\t    var COMPONENT_NAMES = ['geo', 'xAxis', 'yAxis'];\n\t    var PANEL_ID_SPLIT = '--';\n\t    var COORD_CONVERTS = ['dataToPoint', 'pointToData'];\n\n\t    helper.parseOutputRanges = function (areas, coordInfoList, ecModel, rangesCoordInfo) {\n\t        each(areas, function (area, index) {\n\t            var panelId = area.panelId;\n\n\t            if (panelId) {\n\t                panelId = panelId.split(PANEL_ID_SPLIT);\n\n\t                area[panelId[0] + 'Index'] = +panelId[1];\n\n\t                var coordInfo = findCoordInfo(area, coordInfoList);\n\t                area.coordRange = coordConvert[area.brushType](\n\t                    1, coordInfo, area.range\n\t                );\n\t                rangesCoordInfo && (rangesCoordInfo[index] = coordInfo);\n\t            }\n\t        });\n\t    };\n\n\t    helper.parseInputRanges = function (brushModel, ecModel) {\n\t        each(brushModel.areas, function (area) {\n\t            var coordInfo = findCoordInfo(area, brushModel.coordInfoList);\n\n\t            if (true) {\n\t                zrUtil.assert(\n\t                    !coordInfo || coordInfo === true || area.coordRange,\n\t                    'coordRange must be specified when coord index specified.'\n\t                );\n\t                zrUtil.assert(\n\t                    !coordInfo || coordInfo !== true || area.range,\n\t                    'range must be specified.'\n\t                );\n\t            }\n\n\t            area.range = area.range || [];\n\n\t            // convert coordRange to global range and set panelId.\n\t            if (coordInfo && coordInfo !== true) {\n\t                area.range = coordConvert[area.brushType](\n\t                    0, coordInfo, area.coordRange\n\t                );\n\t                area.panelId = coordInfo.panelId;\n\t            }\n\t        });\n\t    };\n\n\t    helper.makePanelOpts = function (coordInfoList) {\n\t        var panelOpts = [];\n\n\t        each(coordInfoList, function (coordInfo) {\n\t            var coordSys = coordInfo.coordSys;\n\t            var rect;\n\n\t            if (coordInfo.geoIndex >= 0) {\n\t                rect = coordSys.getBoundingRect().clone();\n\t                // geo roam and zoom transform\n\t                rect.applyTransform(graphic.getTransform(coordSys));\n\t            }\n\t            else { // xAxis or yAxis\n\t                // grid is not Transformable.\n\t                rect = coordSys.grid.getRect().clone();\n\t            }\n\n\t            panelOpts.push({panelId: coordInfo.panelId, rect: rect});\n\t        });\n\n\t        return panelOpts;\n\t    };\n\n\t    /**\n\t     * @param {Object} option {xAxisIndex, yAxisIndex, geoIndex}\n\t     * @param {module:echarts/model/Global} ecModel\n\t     * @return {Array.<Obejct>} coordInfoList\n\t     */\n\t    helper.makeCoordInfoList = function (option, ecModel) {\n\t        var coordInfoList = [];\n\n\t        each(COMPONENT_NAMES, function (componentName) {\n\t            var componentIndices = option[componentName + 'Index'];\n\t            if (componentIndices == null || componentIndices === 'none') {\n\t                return;\n\t            }\n\t            if (componentIndices !== 'all' && !zrUtil.isArray(componentIndices)) {\n\t                componentIndices = [componentIndices];\n\t            }\n\n\t            ecModel.eachComponent({mainType: componentName}, function (componentModel, index) {\n\t                if (componentIndices !== 'all' && zrUtil.indexOf(componentIndices, index) < 0) {\n\t                    return;\n\t                }\n\n\t                var grid;\n\t                var coordSys;\n\n\t                (componentName === 'xAxis' || componentName === 'yAxis')\n\t                    ? (grid = componentModel.axis.grid)\n\t                    : (coordSys = componentModel.coordinateSystem); // geo\n\n\t                var coordInfo;\n\n\t                // Check duplicate and find cartesian when tranval to yAxis.\n\t                for (var i = 0, len = coordInfoList.length; i < len; i++) {\n\t                    var cInfo = coordInfoList[i];\n\t                    if (true) {\n\t                        zrUtil.assert(\n\t                            cInfo[componentName + 'Index'] != index,\n\t                            'Coord should not be defined duplicately: ' + componentName + index\n\t                        );\n\t                    }\n\t                    // CoordSys is always required for `rect brush` or `polygon brush`.\n\t                    // If both xAxisIndex and yAxisIndex specified, fetch cartesian by them.\n\t                    if (componentName === 'yAxis' && !cInfo.yAxis && cInfo.xAxis) {\n\t                        var aCoordSys = grid.getCartesian(cInfo.xAxisIndex, index);\n\t                        if (aCoordSys) { // The yAxis and xAxis are in the same cartesian.\n\t                            coordSys = aCoordSys;\n\t                            coordInfo = cInfo;\n\t                            break;\n\t                        }\n\t                    }\n\t                }\n\n\t                !coordInfo && coordInfoList.push(coordInfo = {});\n\n\t                coordInfo[componentName] = componentModel;\n\t                coordInfo[componentName + 'Index'] = index;\n\t                // If both xAxisIndex and yAxisIndex specified, panelId only use yAxisIndex,\n\t                // which is enough to index panel.\n\t                coordInfo.panelId = componentName + PANEL_ID_SPLIT + index;\n\t                coordInfo.coordSys = coordSys\n\t                    // If only xAxisIndex or only yAxisIndex specified, find its first cartesian.\n\t                    || grid.getCartesian(coordInfo.xAxisIndex, coordInfo.yAxisIndex);\n\n\t                coordInfo.coordSys\n\t                    ? (coordInfoList[componentName + 'Has'] = true)\n\t                    : coordInfoList.pop(); // If a coordInfo exists originally, existance of coordSys is ensured.\n\t            });\n\t        });\n\n\t        return coordInfoList;\n\t    };\n\n\t    helper.controlSeries = function (area, brushModel, seriesModel) {\n\t        // Check whether area is bound in coord, and series do not belong to that coord.\n\t        // If do not do this check, some brush (like lineX) will controll all axes.\n\t        var coordInfo = findCoordInfo(area, brushModel.coordInfoList);\n\t        return coordInfo === true || (coordInfo && coordInfo.coordSys === seriesModel.coordinateSystem);\n\t    };\n\n\t    function formatMinMax(minMax) {\n\t        minMax[0] > minMax[1] && minMax.reverse();\n\t        return minMax;\n\t    }\n\n\t    /**\n\t     * If return Object, a coord found.\n\t     * If reutrn true, global found.\n\t     * Otherwise nothing found.\n\t     *\n\t     * @param {Object} area {<componentName>Index}\n\t     * @param {Array} coordInfoList\n\t     * @return {Obejct|boolean}\n\t     */\n\t    function findCoordInfo(area, coordInfoList) {\n\t        var isGlobal = true;\n\t        for (var j = 0; j < COMPONENT_NAMES.length; j++) {\n\t            var indexAttr = COMPONENT_NAMES[j] + 'Index';\n\t            if (area[indexAttr] >= 0) {\n\t                isGlobal = false;\n\t                for (var i = 0; i < coordInfoList.length; i++) {\n\t                    if (coordInfoList[i][indexAttr] === area[indexAttr]) {\n\t                        return coordInfoList[i];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return isGlobal;\n\t    }\n\n\t    function axisConvert(axisName, to, coordInfo, coordRange) {\n\t        var axis = coordInfo.coordSys.getAxis(axisName);\n\n\t        if (true) {\n\t            zrUtil.assert(axis, 'line brush is only available in cartesian (grid).');\n\t        }\n\n\t        return formatMinMax(zrUtil.map([0, 1], function (i) {\n\t            return to\n\t                ? axis.coordToData(axis.toLocalCoord(coordRange[i]))\n\t                : axis.toGlobalCoord(axis.dataToCoord(coordRange[i]));\n\t        }));\n\t    }\n\n\t    var coordConvert = {\n\n\t        lineX: zrUtil.curry(axisConvert, 'x'),\n\n\t        lineY: zrUtil.curry(axisConvert, 'y'),\n\n\t        rect: function (to, coordInfo, coordRange) {\n\t            var coordSys = coordInfo.coordSys;\n\t            var xminymin = coordSys[COORD_CONVERTS[to]]([coordRange[0][0], coordRange[1][0]]);\n\t            var xmaxymax = coordSys[COORD_CONVERTS[to]]([coordRange[0][1], coordRange[1][1]]);\n\t            return [\n\t                formatMinMax([xminymin[0], xmaxymax[0]]),\n\t                formatMinMax([xminymin[1], xmaxymax[1]])\n\t            ];\n\t        },\n\n\t        polygon: function (to, coordInfo, coordRange) {\n\t            var coordSys = coordInfo.coordSys;\n\t            return zrUtil.map(coordRange, coordSys[COORD_CONVERTS[to]], coordSys);\n\t        }\n\t    };\n\n\t    module.exports = helper;\n\n\n\n/***/ },\n/* 323 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Brush model\n\t */\n\n\n\t    var echarts = __webpack_require__(1);\n\t    var zrUtil = __webpack_require__(4);\n\t    var visualSolution = __webpack_require__(320);\n\t    var Model = __webpack_require__(12);\n\n\t    var DEFAULT_OUT_OF_BRUSH_COLOR = ['#ddd'];\n\n\t    var BrushModel = echarts.extendComponentModel({\n\n\t        type: 'brush',\n\n\t        dependencies: ['geo', 'grid', 'xAxis', 'yAxis', 'parallel', 'series'],\n\n\t        /**\n\t         * @protected\n\t         */\n\t        defaultOption: {\n\t            // inBrush: null,\n\t            // outOfBrush: null,\n\t            toolbox: null,          // Default value see preprocessor.\n\t            brushLink: null,        // Series indices array, broadcast using dataIndex.\n\t                                    // or 'all', which means all series. 'none' or null means no series.\n\t            seriesIndex: 'all',     // seriesIndex array, specify series controlled by this brush component.\n\t            geoIndex: null,         //\n\t            xAxisIndex: null,\n\t            yAxisIndex: null,\n\n\t            brushType: 'rect',      // Default brushType, see BrushController.\n\t            brushMode: 'single',    // Default brushMode, 'single' or 'multiple'\n\t            transformable: true,    // Default transformable.\n\t            brushStyle: {           // Default brushStyle\n\t                borderWidth: 1,\n\t                color: 'rgba(120,140,180,0.3)',\n\t                borderColor: 'rgba(120,140,180,0.8)',\n\t                width: null         // do not use bursh width in line brush, but fetch from grid.\n\t            },\n\n\t            throttleType: 'fixRate',// Throttle in brushSelected event. 'fixRate' or 'debounce'.\n\t                                    // If null, no throttle. Valid only in the first brush component\n\t            throttleDelay: 0,       // Unit: ms, 0 means every event will be triggered.\n\n\t            // FIXME\n\t            // 试验效果\n\t            removeOnClick: true\n\t        },\n\n\t        /**\n\t         * @readOnly\n\t         * @type {Array.<Object>}\n\t         */\n\t        areas: [],\n\n\t        /**\n\t         * Current activated brush type.\n\t         * If null, brush is inactived.\n\t         * see module:echarts/component/helper/BrushController\n\t         * @readOnly\n\t         * @type {string}\n\t         */\n\t        brushType: null,\n\n\t        /**\n\t         * Current brush opt.\n\t         * see module:echarts/component/helper/BrushController\n\t         * @readOnly\n\t         * @type {Object}\n\t         */\n\t        brushOption: {},\n\n\t        /**\n\t         * @readOnly\n\t         * @type {Array.<Object>}\n\t         */\n\t        coordInfoList: [],\n\n\t        optionUpdated: function (newOption, isInit) {\n\t            var thisOption = this.option;\n\n\t            !isInit && visualSolution.replaceVisualOption(\n\t                thisOption, newOption, ['inBrush', 'outOfBrush']\n\t            );\n\n\t            thisOption.inBrush = thisOption.inBrush || {};\n\t            // Always give default visual, consider setOption at the second time.\n\t            thisOption.outOfBrush = thisOption.outOfBrush || {color: DEFAULT_OUT_OF_BRUSH_COLOR};\n\t        },\n\n\t        /**\n\t         * If ranges is null/undefined, range state remain.\n\t         *\n\t         * @param {Array.<Object>} [ranges]\n\t         */\n\t        setAreas: function (areas) {\n\t            if (true) {\n\t                zrUtil.assert(zrUtil.isArray(areas));\n\t                zrUtil.each(areas, function (area) {\n\t                    zrUtil.assert(area.brushType, 'Illegal areas');\n\t                });\n\t            }\n\n\t            // If ranges is null/undefined, range state remain.\n\t            // This helps user to dispatchAction({type: 'brush'}) with no areas\n\t            // set but just want to get the current brush select info from a `brush` event.\n\t            if (!areas) {\n\t                return;\n\t            }\n\n\t            this.areas = zrUtil.map(areas, function (area) {\n\t                return this._mergeBrushOption(area);\n\t            }, this);\n\t        },\n\n\t        /**\n\t         * see module:echarts/component/helper/BrushController\n\t         * @param {Object} brushOption\n\t         */\n\t        setBrushOption: function (brushOption) {\n\t            this.brushOption = this._mergeBrushOption(brushOption);\n\t            this.brushType = this.brushOption.brushType;\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _mergeBrushOption: function (brushOption) {\n\t            var option = this.option;\n\t            return zrUtil.merge(\n\t                {\n\t                    brushType: option.brushType,\n\t                    brushMode: option.brushMode,\n\t                    transformable: option.transformable,\n\t                    brushStyle: new Model(option.brushStyle).getItemStyle(),\n\t                    removeOnClick: option.removeOnClick\n\t                },\n\t                brushOption,\n\t                true\n\t            );\n\t        }\n\n\t    });\n\n\t    module.exports = BrushModel;\n\n\n\n/***/ },\n/* 324 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var BrushController = __webpack_require__(236);\n\t    var echarts = __webpack_require__(1);\n\t    var brushHelper = __webpack_require__(322);\n\n\t    module.exports = echarts.extendComponentView({\n\n\t        type: 'brush',\n\n\t        init: function (ecModel, api) {\n\n\t            /**\n\t             * @readOnly\n\t             * @type {module:echarts/model/Global}\n\t             */\n\t            this.ecModel = ecModel;\n\n\t            /**\n\t             * @readOnly\n\t             * @type {module:echarts/ExtensionAPI}\n\t             */\n\t            this.api = api;\n\n\t            /**\n\t             * @readOnly\n\t             * @type {module:echarts/component/brush/BrushModel}\n\t             */\n\t            this.model;\n\n\t            /**\n\t             * @private\n\t             * @type {module:echarts/component/helper/BrushController}\n\t             */\n\t            (this._brushController = new BrushController(api.getZr()))\n\t                .on('brush', zrUtil.bind(this._onBrush, this))\n\t                .mount();\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        render: function (brushModel) {\n\t            this.model = brushModel;\n\t            return updateController.apply(this, arguments);\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        updateView: updateController,\n\n\t        /**\n\t         * @override\n\t         */\n\t        updateLayout: updateController,\n\n\t        /**\n\t         * @override\n\t         */\n\t        updateVisual: updateController,\n\n\t        /**\n\t         * @override\n\t         */\n\t        dispose: function () {\n\t            this._brushController.dispose();\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _onBrush: function (areas, opt) {\n\t            var modelId = this.model.id;\n\n\t            brushHelper.parseOutputRanges(areas, this.model.coordInfoList, this.ecModel);\n\n\t            // Action is not dispatched on drag end, because the drag end\n\t            // emits the same params with the last drag move event, and\n\t            // may have some delay when using touch pad, which makes\n\t            // animation not smooth (when using debounce).\n\t            (!opt.isEnd || opt.removeOnClick) && this.api.dispatchAction({\n\t                type: 'brush',\n\t                brushId: modelId,\n\t                areas: zrUtil.clone(areas),\n\t                $from: modelId\n\t            });\n\t        }\n\n\t    });\n\n\t    function updateController(brushModel, ecModel, api, payload) {\n\t        // Do not update controller when drawing.\n\t        (!payload || payload.$from !== brushModel.id) && this._brushController\n\t            .setPanels(brushHelper.makePanelOpts(brushModel.coordInfoList))\n\t            .enableBrush(brushModel.brushOption)\n\t            .updateCovers(brushModel.areas.slice());\n\t    }\n\n\n\n/***/ },\n/* 325 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Brush action\n\t */\n\n\n\t    var echarts = __webpack_require__(1);\n\n\t    /**\n\t     * payload: {\n\t     *      brushIndex: number, or,\n\t     *      brushId: string, or,\n\t     *      brushName: string,\n\t     *      globalRanges: Array\n\t     * }\n\t     */\n\t    echarts.registerAction(\n\t         {type: 'brush', event: 'brush', update: 'updateView'},\n\t        function (payload, ecModel) {\n\t            ecModel.eachComponent({mainType: 'brush', query: payload}, function (brushModel) {\n\t                brushModel.setAreas(payload.areas);\n\t            });\n\t        }\n\t    );\n\n\t    /**\n\t     * payload: {\n\t     *      brushComponents: [\n\t     *          {\n\t     *              brushId,\n\t     *              brushIndex,\n\t     *              brushName,\n\t     *              series: [\n\t     *                  {\n\t     *                      seriesId,\n\t     *                      seriesIndex,\n\t     *                      seriesName,\n\t     *                      rawIndices: [21, 34, ...]\n\t     *                  },\n\t     *                  ...\n\t     *              ]\n\t     *          },\n\t     *          ...\n\t     *      ]\n\t     * }\n\t     */\n\t    echarts.registerAction(\n\t         {type: 'brushSelect', event: 'brushSelected', update: 'none'},\n\t        function () {}\n\t    );\n\n\n/***/ },\n/* 326 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var featureManager = __webpack_require__(327);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    function Brush(model, ecModel, api) {\n\t        this.model = model;\n\t        this.ecModel = ecModel;\n\t        this.api = api;\n\n\t        /**\n\t         * @private\n\t         * @type {string}\n\t         */\n\t        this._brushType;\n\n\t        /**\n\t         * @private\n\t         * @type {string}\n\t         */\n\t        this._brushMode;\n\t    }\n\n\t    Brush.defaultOption = {\n\t        show: true,\n\t        type: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'],\n\t        icon: {\n\t            rect: 'M7.3,34.7 M0.4,10V-0.2h9.8 M89.6,10V-0.2h-9.8 M0.4,60v10.2h9.8 M89.6,60v10.2h-9.8 M12.3,22.4V10.5h13.1 M33.6,10.5h7.8 M49.1,10.5h7.8 M77.5,22.4V10.5h-13 M12.3,31.1v8.2 M77.7,31.1v8.2 M12.3,47.6v11.9h13.1 M33.6,59.5h7.6 M49.1,59.5 h7.7 M77.5,47.6v11.9h-13', // jshint ignore:line\n\t            polygon: 'M55.2,34.9c1.7,0,3.1,1.4,3.1,3.1s-1.4,3.1-3.1,3.1 s-3.1-1.4-3.1-3.1S53.5,34.9,55.2,34.9z M50.4,51c1.7,0,3.1,1.4,3.1,3.1c0,1.7-1.4,3.1-3.1,3.1c-1.7,0-3.1-1.4-3.1-3.1 C47.3,52.4,48.7,51,50.4,51z M55.6,37.1l1.5-7.8 M60.1,13.5l1.6-8.7l-7.8,4 M59,19l-1,5.3 M24,16.1l6.4,4.9l6.4-3.3 M48.5,11.6 l-5.9,3.1 M19.1,12.8L9.7,5.1l1.1,7.7 M13.4,29.8l1,7.3l6.6,1.6 M11.6,18.4l1,6.1 M32.8,41.9 M26.6,40.4 M27.3,40.2l6.1,1.6 M49.9,52.1l-5.6-7.6l-4.9-1.2', // jshint ignore:line\n\t            lineX: 'M15.2,30 M19.7,15.6V1.9H29 M34.8,1.9H40.4 M55.3,15.6V1.9H45.9 M19.7,44.4V58.1H29 M34.8,58.1H40.4 M55.3,44.4 V58.1H45.9 M12.5,20.3l-9.4,9.6l9.6,9.8 M3.1,29.9h16.5 M62.5,20.3l9.4,9.6L62.3,39.7 M71.9,29.9H55.4', // jshint ignore:line\n\t            lineY: 'M38.8,7.7 M52.7,12h13.2v9 M65.9,26.6V32 M52.7,46.3h13.2v-9 M24.9,12H11.8v9 M11.8,26.6V32 M24.9,46.3H11.8v-9 M48.2,5.1l-9.3-9l-9.4,9.2 M38.9-3.9V12 M48.2,53.3l-9.3,9l-9.4-9.2 M38.9,62.3V46.4', // jshint ignore:line\n\t            keep: 'M4,10.5V1h10.3 M20.7,1h6.1 M33,1h6.1 M55.4,10.5V1H45.2 M4,17.3v6.6 M55.6,17.3v6.6 M4,30.5V40h10.3 M20.7,40 h6.1 M33,40h6.1 M55.4,30.5V40H45.2 M21,18.9h62.9v48.6H21V18.9z', // jshint ignore:line\n\t            clear: 'M22,14.7l30.9,31 M52.9,14.7L22,45.7 M4.7,16.8V4.2h13.1 M26,4.2h7.8 M41.6,4.2h7.8 M70.3,16.8V4.2H57.2 M4.7,25.9v8.6 M70.3,25.9v8.6 M4.7,43.2v12.6h13.1 M26,55.8h7.8 M41.6,55.8h7.8 M70.3,43.2v12.6H57.2' // jshint ignore:line\n\t        },\n\t        title: {\n\t            rect: '矩形选择',\n\t            polygon: '圈选',\n\t            lineX: '横向选择',\n\t            lineY: '纵向选择',\n\t            keep: '保持选择',\n\t            clear: '清除选择'\n\t        }\n\t    };\n\n\t    var proto = Brush.prototype;\n\n\t    proto.render =\n\t    proto.updateView =\n\t    proto.updateLayout = function (featureModel, ecModel, api) {\n\t        var brushType;\n\t        var brushMode;\n\t        var isBrushed;\n\n\t        ecModel.eachComponent({mainType: 'brush'}, function (brushModel) {\n\t            brushType = brushModel.brushType;\n\t            brushMode = brushModel.brushOption.brushMode || 'single';\n\t            isBrushed |= brushModel.areas.length;\n\t        });\n\t        this._brushType = brushType;\n\t        this._brushMode = brushMode;\n\n\t        zrUtil.each(featureModel.get('type', true), function (type) {\n\t            featureModel.setIconStatus(\n\t                type,\n\t                (\n\t                    type === 'keep'\n\t                    ? brushMode === 'multiple'\n\t                    : type === 'clear'\n\t                    ? isBrushed\n\t                    : type === brushType\n\t                ) ? 'emphasis' : 'normal'\n\t            );\n\t        });\n\t    };\n\n\t    proto.getIcons = function () {\n\t        var model = this.model;\n\t        var availableIcons = model.get('icon', true);\n\t        var icons = {};\n\t        zrUtil.each(model.get('type', true), function (type) {\n\t            if (availableIcons[type]) {\n\t                icons[type] = availableIcons[type];\n\t            }\n\t        });\n\t        return icons;\n\t    };\n\n\t    proto.onclick = function (ecModel, api, type) {\n\t        var api = this.api;\n\t        var brushType = this._brushType;\n\t        var brushMode = this._brushMode;\n\n\t        if (type === 'clear') {\n\t            api.dispatchAction({\n\t                type: 'brush',\n\t                // Clear all areas of all brush components.\n\t                areas: []\n\t            });\n\t        }\n\t        else {\n\t            api.dispatchAction({\n\t                type: 'takeGlobalCursor',\n\t                key: 'brush',\n\t                brushOption: {\n\t                    brushType: type === 'keep'\n\t                        ? brushType\n\t                        : (brushType === type ? false : type),\n\t                    brushMode: type === 'keep'\n\t                        ? (brushMode === 'multiple' ? 'single' : 'multiple')\n\t                        : brushMode\n\t                }\n\t            });\n\t        }\n\t    };\n\n\t    featureManager.register('brush', Brush);\n\n\t    module.exports = Brush;\n\n\n/***/ },\n/* 327 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\n\n\t    var features = {};\n\n\t    module.exports = {\n\t        register: function (name, ctor) {\n\t            features[name] = ctor;\n\t        },\n\n\t        get: function (name) {\n\t            return features[name];\n\t        }\n\t    };\n\n\n/***/ },\n/* 328 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var echarts = __webpack_require__(1);\n\t    var graphic = __webpack_require__(43);\n\t    var layout = __webpack_require__(21);\n\n\t    // Model\n\t    echarts.extendComponentModel({\n\n\t        type: 'title',\n\n\t        layoutMode: {type: 'box', ignoreSize: true},\n\n\t        defaultOption: {\n\t            // 一级层叠\n\t            zlevel: 0,\n\t            // 二级层叠\n\t            z: 6,\n\t            show: true,\n\n\t            text: '',\n\t            // 超链接跳转\n\t            // link: null,\n\t            // 仅支持self | blank\n\t            target: 'blank',\n\t            subtext: '',\n\n\t            // 超链接跳转\n\t            // sublink: null,\n\t            // 仅支持self | blank\n\t            subtarget: 'blank',\n\n\t            // 'center' ¦ 'left' ¦ 'right'\n\t            // ¦ {number}（x坐标，单位px）\n\t            left: 0,\n\t            // 'top' ¦ 'bottom' ¦ 'center'\n\t            // ¦ {number}（y坐标，单位px）\n\t            top: 0,\n\n\t            // 水平对齐\n\t            // 'auto' | 'left' | 'right' | 'center'\n\t            // 默认根据 left 的位置判断是左对齐还是右对齐\n\t            // textAlign: null\n\t            //\n\t            // 垂直对齐\n\t            // 'auto' | 'top' | 'bottom' | 'middle'\n\t            // 默认根据 top 位置判断是上对齐还是下对齐\n\t            // textBaseline: null\n\n\t            backgroundColor: 'rgba(0,0,0,0)',\n\n\t            // 标题边框颜色\n\t            borderColor: '#ccc',\n\n\t            // 标题边框线宽，单位px，默认为0（无边框）\n\t            borderWidth: 0,\n\n\t            // 标题内边距，单位px，默认各方向内边距为5，\n\t            // 接受数组分别设定上右下左边距，同css\n\t            padding: 5,\n\n\t            // 主副标题纵向间隔，单位px，默认为10，\n\t            itemGap: 10,\n\t            textStyle: {\n\t                fontSize: 18,\n\t                fontWeight: 'bolder',\n\t                color: '#333'\n\t            },\n\t            subtextStyle: {\n\t                color: '#aaa'\n\t            }\n\t        }\n\t    });\n\n\t    // View\n\t    echarts.extendComponentView({\n\n\t        type: 'title',\n\n\t        render: function (titleModel, ecModel, api) {\n\t            this.group.removeAll();\n\n\t            if (!titleModel.get('show')) {\n\t                return;\n\t            }\n\n\t            var group = this.group;\n\n\t            var textStyleModel = titleModel.getModel('textStyle');\n\t            var subtextStyleModel = titleModel.getModel('subtextStyle');\n\n\t            var textAlign = titleModel.get('textAlign');\n\t            var textBaseline = titleModel.get('textBaseline');\n\n\t            var textEl = new graphic.Text({\n\t                style: {\n\t                    text: titleModel.get('text'),\n\t                    textFont: textStyleModel.getFont(),\n\t                    fill: textStyleModel.getTextColor()\n\t                },\n\t                z2: 10\n\t            });\n\n\t            var textRect = textEl.getBoundingRect();\n\n\t            var subText = titleModel.get('subtext');\n\t            var subTextEl = new graphic.Text({\n\t                style: {\n\t                    text: subText,\n\t                    textFont: subtextStyleModel.getFont(),\n\t                    fill: subtextStyleModel.getTextColor(),\n\t                    y: textRect.height + titleModel.get('itemGap'),\n\t                    textBaseline: 'top'\n\t                },\n\t                z2: 10\n\t            });\n\n\t            var link = titleModel.get('link');\n\t            var sublink = titleModel.get('sublink');\n\n\t            textEl.silent = !link;\n\t            subTextEl.silent = !sublink;\n\n\t            if (link) {\n\t                textEl.on('click', function () {\n\t                    window.open(link, '_' + titleModel.get('target'));\n\t                });\n\t            }\n\t            if (sublink) {\n\t                subTextEl.on('click', function () {\n\t                    window.open(sublink, '_' + titleModel.get('subtarget'));\n\t                });\n\t            }\n\n\t            group.add(textEl);\n\t            subText && group.add(subTextEl);\n\t            // If no subText, but add subTextEl, there will be an empty line.\n\n\t            var groupRect = group.getBoundingRect();\n\t            var layoutOption = titleModel.getBoxLayoutParams();\n\t            layoutOption.width = groupRect.width;\n\t            layoutOption.height = groupRect.height;\n\t            var layoutRect = layout.getLayoutRect(\n\t                layoutOption, {\n\t                    width: api.getWidth(),\n\t                    height: api.getHeight()\n\t                }, titleModel.get('padding')\n\t            );\n\t            // Adjust text align based on position\n\t            if (!textAlign) {\n\t                // Align left if title is on the left. center and right is same\n\t                textAlign = titleModel.get('left') || titleModel.get('right');\n\t                if (textAlign === 'middle') {\n\t                    textAlign = 'center';\n\t                }\n\t                // Adjust layout by text align\n\t                if (textAlign === 'right') {\n\t                    layoutRect.x += layoutRect.width;\n\t                }\n\t                else if (textAlign === 'center') {\n\t                    layoutRect.x += layoutRect.width / 2;\n\t                }\n\t            }\n\t            if (!textBaseline) {\n\t                textBaseline = titleModel.get('top') || titleModel.get('bottom');\n\t                if (textBaseline === 'center') {\n\t                    textBaseline = 'middle';\n\t                }\n\t                if (textBaseline === 'bottom') {\n\t                    layoutRect.y += layoutRect.height;\n\t                }\n\t                else if (textBaseline === 'middle') {\n\t                    layoutRect.y += layoutRect.height / 2;\n\t                }\n\n\t                textBaseline = textBaseline || 'top';\n\t            }\n\n\t            group.attr('position', [layoutRect.x, layoutRect.y]);\n\t            var alignStyle = {\n\t                textAlign: textAlign,\n\t                textVerticalAlign: textBaseline\n\t            };\n\t            textEl.setStyle(alignStyle);\n\t            subTextEl.setStyle(alignStyle);\n\n\t            // Render background\n\t            // Get groupRect again because textAlign has been changed\n\t            groupRect = group.getBoundingRect();\n\t            var padding = layoutRect.margin;\n\t            var style = titleModel.getItemStyle(['color', 'opacity']);\n\t            style.fill = titleModel.get('backgroundColor');\n\t            var rect = new graphic.Rect({\n\t                shape: {\n\t                    x: groupRect.x - padding[3],\n\t                    y: groupRect.y - padding[0],\n\t                    width: groupRect.width + padding[1] + padding[3],\n\t                    height: groupRect.height + padding[0] + padding[2]\n\t                },\n\t                style: style,\n\t                silent: true\n\t            });\n\t            graphic.subPixelOptimizeRect(rect);\n\n\t            group.add(rect);\n\t        }\n\t    });\n\n\n/***/ },\n/* 329 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * DataZoom component entry\n\t */\n\n\n\t    __webpack_require__(330);\n\n\t    __webpack_require__(331);\n\t    __webpack_require__(334);\n\n\t    __webpack_require__(335);\n\t    __webpack_require__(336);\n\n\t    __webpack_require__(338);\n\t    __webpack_require__(339);\n\n\t    __webpack_require__(341);\n\t    __webpack_require__(342);\n\n\n\n/***/ },\n/* 330 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    __webpack_require__(19).registerSubTypeDefaulter('dataZoom', function (option) {\n\t        // Default 'slider' when no type specified.\n\t        return 'slider';\n\t    });\n\n\n\n/***/ },\n/* 331 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Data zoom model\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var env = __webpack_require__(2);\n\t    var echarts = __webpack_require__(1);\n\t    var modelUtil = __webpack_require__(5);\n\t    var helper = __webpack_require__(332);\n\t    var AxisProxy = __webpack_require__(333);\n\t    var each = zrUtil.each;\n\t    var eachAxisDim = helper.eachAxisDim;\n\n\t    var DataZoomModel = echarts.extendComponentModel({\n\n\t        type: 'dataZoom',\n\n\t        dependencies: [\n\t            'xAxis', 'yAxis', 'zAxis', 'radiusAxis', 'angleAxis', 'singleAxis', 'series'\n\t        ],\n\n\t        /**\n\t         * @protected\n\t         */\n\t        defaultOption: {\n\t            zlevel: 0,\n\t            z: 4,                   // Higher than normal component (z: 2).\n\t            orient: null,           // Default auto by axisIndex. Possible value: 'horizontal', 'vertical'.\n\t            xAxisIndex: null,       // Default the first horizontal category axis.\n\t            yAxisIndex: null,       // Default the first vertical category axis.\n\n\t            filterMode: 'filter',   // Possible values: 'filter' or 'empty'.\n\t                                    // 'filter': data items which are out of window will be removed.\n\t                                    //           This option is applicable when filtering outliers.\n\t                                    // 'empty': data items which are out of window will be set to empty.\n\t                                    //          This option is applicable when user should not neglect\n\t                                    //          that there are some data items out of window.\n\t                                    // Taking line chart as an example, line will be broken in\n\t                                    // the filtered points when filterModel is set to 'empty', but\n\t                                    // be connected when set to 'filter'.\n\n\t            throttle: null,         // Dispatch action by the fixed rate, avoid frequency.\n\t                                    // default 100. Do not throttle when use null/undefined.\n\t                                    // If animation === true and animationDurationUpdate > 0,\n\t                                    // default value is 100, otherwise 20.\n\t            start: 0,               // Start percent. 0 ~ 100\n\t            end: 100,               // End percent. 0 ~ 100\n\t            startValue: null,       // Start value. If startValue specified, start is ignored.\n\t            endValue: null          // End value. If endValue specified, end is ignored.\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        init: function (option, parentModel, ecModel) {\n\n\t            /**\n\t             * key like x_0, y_1\n\t             * @private\n\t             * @type {Object}\n\t             */\n\t            this._dataIntervalByAxis = {};\n\n\t            /**\n\t             * @private\n\t             */\n\t            this._dataInfo = {};\n\n\t            /**\n\t             * key like x_0, y_1\n\t             * @private\n\t             */\n\t            this._axisProxies = {};\n\n\t            /**\n\t             * @readOnly\n\t             */\n\t            this.textStyleModel;\n\n\t            /**\n\t             * @private\n\t             */\n\t            this._autoThrottle = true;\n\n\t            var rawOption = retrieveRaw(option);\n\n\t            this.mergeDefaultAndTheme(option, ecModel);\n\n\t            this.doInit(rawOption);\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        mergeOption: function (newOption) {\n\t            var rawOption = retrieveRaw(newOption);\n\n\t            //FIX #2591\n\t            zrUtil.merge(this.option, newOption, true);\n\n\t            this.doInit(rawOption);\n\t        },\n\n\t        /**\n\t         * @protected\n\t         */\n\t        doInit: function (rawOption) {\n\t            var thisOption = this.option;\n\n\t            // Disable realtime view update if canvas is not supported.\n\t            if (!env.canvasSupported) {\n\t                thisOption.realtime = false;\n\t            }\n\n\t            this._setDefaultThrottle(rawOption);\n\n\t            processRangeProp('start', 'startValue', rawOption, thisOption);\n\t            processRangeProp('end', 'endValue', rawOption, thisOption);\n\n\t            this.textStyleModel = this.getModel('textStyle');\n\n\t            this._resetTarget();\n\n\t            this._giveAxisProxies();\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _giveAxisProxies: function () {\n\t            var axisProxies = this._axisProxies;\n\n\t            this.eachTargetAxis(function (dimNames, axisIndex, dataZoomModel, ecModel) {\n\t                var axisModel = this.dependentModels[dimNames.axis][axisIndex];\n\n\t                // If exists, share axisProxy with other dataZoomModels.\n\t                var axisProxy = axisModel.__dzAxisProxy || (\n\t                    // Use the first dataZoomModel as the main model of axisProxy.\n\t                    axisModel.__dzAxisProxy = new AxisProxy(\n\t                        dimNames.name, axisIndex, this, ecModel\n\t                    )\n\t                );\n\t                // FIXME\n\t                // dispose __dzAxisProxy\n\n\t                axisProxies[dimNames.name + '_' + axisIndex] = axisProxy;\n\t            }, this);\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _resetTarget: function () {\n\t            var thisOption = this.option;\n\n\t            var autoMode = this._judgeAutoMode();\n\n\t            eachAxisDim(function (dimNames) {\n\t                var axisIndexName = dimNames.axisIndex;\n\t                thisOption[axisIndexName] = modelUtil.normalizeToArray(\n\t                    thisOption[axisIndexName]\n\t                );\n\t            }, this);\n\n\t            if (autoMode === 'axisIndex') {\n\t                this._autoSetAxisIndex();\n\t            }\n\t            else if (autoMode === 'orient') {\n\t                this._autoSetOrient();\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _judgeAutoMode: function () {\n\t            // Auto set only works for setOption at the first time.\n\t            // The following is user's reponsibility. So using merged\n\t            // option is OK.\n\t            var thisOption = this.option;\n\n\t            var hasIndexSpecified = false;\n\t            eachAxisDim(function (dimNames) {\n\t                // When user set axisIndex as a empty array, we think that user specify axisIndex\n\t                // but do not want use auto mode. Because empty array may be encountered when\n\t                // some error occured.\n\t                if (thisOption[dimNames.axisIndex] != null) {\n\t                    hasIndexSpecified = true;\n\t                }\n\t            }, this);\n\n\t            var orient = thisOption.orient;\n\n\t            if (orient == null && hasIndexSpecified) {\n\t                return 'orient';\n\t            }\n\t            else if (!hasIndexSpecified) {\n\t                if (orient == null) {\n\t                    thisOption.orient = 'horizontal';\n\t                }\n\t                return 'axisIndex';\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _autoSetAxisIndex: function () {\n\t            var autoAxisIndex = true;\n\t            var orient = this.get('orient', true);\n\t            var thisOption = this.option;\n\t            var dependentModels = this.dependentModels;\n\n\t            if (autoAxisIndex) {\n\t                // Find axis that parallel to dataZoom as default.\n\t                var dimName = orient === 'vertical' ? 'y' : 'x';\n\n\t                if (dependentModels[dimName + 'Axis'].length) {\n\t                    thisOption[dimName + 'AxisIndex'] = [0];\n\t                    autoAxisIndex = false;\n\t                }\n\t                else {\n\t                    each(dependentModels.singleAxis, function (singleAxisModel) {\n\t                        if (autoAxisIndex && singleAxisModel.get('orient', true) === orient) {\n\t                            thisOption.singleAxisIndex = [singleAxisModel.componentIndex];\n\t                            autoAxisIndex = false;\n\t                        }\n\t                    });\n\t                }\n\t            }\n\n\t            if (autoAxisIndex) {\n\t                // Find the first category axis as default. (consider polar)\n\t                eachAxisDim(function (dimNames) {\n\t                    if (!autoAxisIndex) {\n\t                        return;\n\t                    }\n\t                    var axisIndices = [];\n\t                    var axisModels = this.dependentModels[dimNames.axis];\n\t                    if (axisModels.length && !axisIndices.length) {\n\t                        for (var i = 0, len = axisModels.length; i < len; i++) {\n\t                            if (axisModels[i].get('type') === 'category') {\n\t                                axisIndices.push(i);\n\t                            }\n\t                        }\n\t                    }\n\t                    thisOption[dimNames.axisIndex] = axisIndices;\n\t                    if (axisIndices.length) {\n\t                        autoAxisIndex = false;\n\t                    }\n\t                }, this);\n\t            }\n\n\t            if (autoAxisIndex) {\n\t                // FIXME\n\t                // 这里是兼容ec2的写法（没指定xAxisIndex和yAxisIndex时把scatter和双数值轴折柱纳入dataZoom控制），\n\t                // 但是实际是否需要Grid.js#getScaleByOption来判断（考虑time，log等axis type）？\n\n\t                // If both dataZoom.xAxisIndex and dataZoom.yAxisIndex is not specified,\n\t                // dataZoom component auto adopts series that reference to\n\t                // both xAxis and yAxis which type is 'value'.\n\t                this.ecModel.eachSeries(function (seriesModel) {\n\t                    if (this._isSeriesHasAllAxesTypeOf(seriesModel, 'value')) {\n\t                        eachAxisDim(function (dimNames) {\n\t                            var axisIndices = thisOption[dimNames.axisIndex];\n\n\t                            var axisIndex = seriesModel.get(dimNames.axisIndex);\n\t                            var axisId = seriesModel.get(dimNames.axisId);\n\n\t                            var axisModel = seriesModel.ecModel.queryComponents({\n\t                                mainType: dimNames.axis,\n\t                                index: axisIndex,\n\t                                id: axisId\n\t                            })[0];\n\n\t                            if (true) {\n\t                                if (!axisModel) {\n\t                                    throw new Error(\n\t                                        dimNames.axis + ' \"' + zrUtil.retrieve(\n\t                                            axisIndex,\n\t                                            axisId,\n\t                                            0\n\t                                        ) + '\" not found'\n\t                                    );\n\t                                }\n\t                            }\n\t                            axisIndex = axisModel.componentIndex;\n\n\t                            if (zrUtil.indexOf(axisIndices, axisIndex) < 0) {\n\t                                axisIndices.push(axisIndex);\n\t                            }\n\t                        });\n\t                    }\n\t                }, this);\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _autoSetOrient: function () {\n\t            var dim;\n\n\t            // Find the first axis\n\t            this.eachTargetAxis(function (dimNames) {\n\t                !dim && (dim = dimNames.name);\n\t            }, this);\n\n\t            this.option.orient = dim === 'y' ? 'vertical' : 'horizontal';\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _isSeriesHasAllAxesTypeOf: function (seriesModel, axisType) {\n\t            // FIXME\n\t            // 需要series的xAxisIndex和yAxisIndex都首先自动设置上。\n\t            // 例如series.type === scatter时。\n\n\t            var is = true;\n\t            eachAxisDim(function (dimNames) {\n\t                var seriesAxisIndex = seriesModel.get(dimNames.axisIndex);\n\t                var axisModel = this.dependentModels[dimNames.axis][seriesAxisIndex];\n\n\t                if (!axisModel || axisModel.get('type') !== axisType) {\n\t                    is = false;\n\t                }\n\t            }, this);\n\t            return is;\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _setDefaultThrottle: function (rawOption) {\n\t            // When first time user set throttle, auto throttle ends.\n\t            if (rawOption.hasOwnProperty('throttle')) {\n\t                this._autoThrottle = false;\n\t            }\n\t            if (this._autoThrottle) {\n\t                var globalOption = this.ecModel.option;\n\t                this.option.throttle =\n\t                    (globalOption.animation && globalOption.animationDurationUpdate > 0)\n\t                    ? 100 : 20;\n\t            }\n\t        },\n\n\t        /**\n\t         * @public\n\t         */\n\t        getFirstTargetAxisModel: function () {\n\t            var firstAxisModel;\n\t            eachAxisDim(function (dimNames) {\n\t                if (firstAxisModel == null) {\n\t                    var indices = this.get(dimNames.axisIndex);\n\t                    if (indices.length) {\n\t                        firstAxisModel = this.dependentModels[dimNames.axis][indices[0]];\n\t                    }\n\t                }\n\t            }, this);\n\n\t            return firstAxisModel;\n\t        },\n\n\t        /**\n\t         * @public\n\t         * @param {Function} callback param: axisModel, dimNames, axisIndex, dataZoomModel, ecModel\n\t         */\n\t        eachTargetAxis: function (callback, context) {\n\t            var ecModel = this.ecModel;\n\t            eachAxisDim(function (dimNames) {\n\t                each(\n\t                    this.get(dimNames.axisIndex),\n\t                    function (axisIndex) {\n\t                        callback.call(context, dimNames, axisIndex, this, ecModel);\n\t                    },\n\t                    this\n\t                );\n\t            }, this);\n\t        },\n\n\t        getAxisProxy: function (dimName, axisIndex) {\n\t            return this._axisProxies[dimName + '_' + axisIndex];\n\t        },\n\n\t        /**\n\t         * If not specified, set to undefined.\n\t         *\n\t         * @public\n\t         * @param {Object} opt\n\t         * @param {number} [opt.start]\n\t         * @param {number} [opt.end]\n\t         * @param {number} [opt.startValue]\n\t         * @param {number} [opt.endValue]\n\t         */\n\t        setRawRange: function (opt) {\n\t            each(['start', 'end', 'startValue', 'endValue'], function (name) {\n\t                // If any of those prop is null/undefined, we should alos set\n\t                // them, because only one pair between start/end and\n\t                // startValue/endValue can work.\n\t                this.option[name] = opt[name];\n\t            }, this);\n\t        },\n\n\t        /**\n\t         * @public\n\t         * @return {Array.<number>} [startPercent, endPercent]\n\t         */\n\t        getPercentRange: function () {\n\t            var axisProxy = this.findRepresentativeAxisProxy();\n\t            if (axisProxy) {\n\t                return axisProxy.getDataPercentWindow();\n\t            }\n\t        },\n\n\t        /**\n\t         * @public\n\t         * For example, chart.getModel().getComponent('dataZoom').getValueRange('y', 0);\n\t         *\n\t         * @param {string} [axisDimName]\n\t         * @param {number} [axisIndex]\n\t         * @return {Array.<number>} [startValue, endValue] value can only be '-' or finite number.\n\t         */\n\t        getValueRange: function (axisDimName, axisIndex) {\n\t            if (axisDimName == null && axisIndex == null) {\n\t                var axisProxy = this.findRepresentativeAxisProxy();\n\t                if (axisProxy) {\n\t                    return axisProxy.getDataValueWindow();\n\t                }\n\t            }\n\t            else {\n\t                return this.getAxisProxy(axisDimName, axisIndex).getDataValueWindow();\n\t            }\n\t        },\n\n\t        /**\n\t         * @public\n\t         * @return {module:echarts/component/dataZoom/AxisProxy}\n\t         */\n\t        findRepresentativeAxisProxy: function () {\n\t            // Find the first hosted axisProxy\n\t            var axisProxies = this._axisProxies;\n\t            for (var key in axisProxies) {\n\t                if (axisProxies.hasOwnProperty(key) && axisProxies[key].hostedBy(this)) {\n\t                    return axisProxies[key];\n\t                }\n\t            }\n\n\t            // If no hosted axis find not hosted axisProxy.\n\t            // Consider this case: dataZoomModel1 and dataZoomModel2 control the same axis,\n\t            // and the option.start or option.end settings are different. The percentRange\n\t            // should follow axisProxy.\n\t            // (We encounter this problem in toolbox data zoom.)\n\t            for (var key in axisProxies) {\n\t                if (axisProxies.hasOwnProperty(key) && !axisProxies[key].hostedBy(this)) {\n\t                    return axisProxies[key];\n\t                }\n\t            }\n\t        }\n\n\t    });\n\n\t    function retrieveRaw(option) {\n\t        var ret = {};\n\t        each(\n\t            ['start', 'end', 'startValue', 'endValue', 'throttle'],\n\t            function (name) {\n\t                option.hasOwnProperty(name) && (ret[name] = option[name]);\n\t            }\n\t        );\n\t        return ret;\n\t    }\n\n\t    function processRangeProp(percentProp, valueProp, rawOption, thisOption) {\n\t        // start/end has higher priority over startValue/endValue,\n\t        // but we should make chart.setOption({endValue: 1000}) effective,\n\t        // rather than chart.setOption({endValue: 1000, end: null}).\n\t        if (rawOption[valueProp] != null && rawOption[percentProp] == null) {\n\t            thisOption[percentProp] = null;\n\t        }\n\t        // Otherwise do nothing and use the merge result.\n\t    }\n\n\t    module.exports = DataZoomModel;\n\n\n\n/***/ },\n/* 332 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t    var formatUtil = __webpack_require__(6);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var helper = {};\n\n\t    var AXIS_DIMS = ['x', 'y', 'z', 'radius', 'angle', 'single'];\n\t    // Supported coords.\n\t    var COORDS = ['cartesian2d', 'polar', 'singleAxis'];\n\n\t    /**\n\t     * @param {string} coordType\n\t     * @return {boolean}\n\t     */\n\t    helper.isCoordSupported = function (coordType) {\n\t        return zrUtil.indexOf(COORDS, coordType) >= 0;\n\t    };\n\n\t    /**\n\t     * Create \"each\" method to iterate names.\n\t     *\n\t     * @pubilc\n\t     * @param  {Array.<string>} names\n\t     * @param  {Array.<string>=} attrs\n\t     * @return {Function}\n\t     */\n\t    helper.createNameEach = function (names, attrs) {\n\t        names = names.slice();\n\t        var capitalNames = zrUtil.map(names, formatUtil.capitalFirst);\n\t        attrs = (attrs || []).slice();\n\t        var capitalAttrs = zrUtil.map(attrs, formatUtil.capitalFirst);\n\n\t        return function (callback, context) {\n\t            zrUtil.each(names, function (name, index) {\n\t                var nameObj = {name: name, capital: capitalNames[index]};\n\n\t                for (var j = 0; j < attrs.length; j++) {\n\t                    nameObj[attrs[j]] = name + capitalAttrs[j];\n\t                }\n\n\t                callback.call(context, nameObj);\n\t            });\n\t        };\n\t    };\n\n\t    /**\n\t     * Iterate each dimension name.\n\t     *\n\t     * @public\n\t     * @param {Function} callback The parameter is like:\n\t     *                            {\n\t     *                                name: 'angle',\n\t     *                                capital: 'Angle',\n\t     *                                axis: 'angleAxis',\n\t     *                                axisIndex: 'angleAixs',\n\t     *                                index: 'angleIndex'\n\t     *                            }\n\t     * @param {Object} context\n\t     */\n\t    helper.eachAxisDim = helper.createNameEach(AXIS_DIMS, ['axisIndex', 'axis', 'index', 'id']);\n\n\t    /**\n\t     * If tow dataZoomModels has the same axis controlled, we say that they are 'linked'.\n\t     * dataZoomModels and 'links' make up one or more graphics.\n\t     * This function finds the graphic where the source dataZoomModel is in.\n\t     *\n\t     * @public\n\t     * @param {Function} forEachNode Node iterator.\n\t     * @param {Function} forEachEdgeType edgeType iterator\n\t     * @param {Function} edgeIdGetter Giving node and edgeType, return an array of edge id.\n\t     * @return {Function} Input: sourceNode, Output: Like {nodes: [], dims: {}}\n\t     */\n\t    helper.createLinkedNodesFinder = function (forEachNode, forEachEdgeType, edgeIdGetter) {\n\n\t        return function (sourceNode) {\n\t            var result = {\n\t                nodes: [],\n\t                records: {} // key: edgeType.name, value: Object (key: edge id, value: boolean).\n\t            };\n\n\t            forEachEdgeType(function (edgeType) {\n\t                result.records[edgeType.name] = {};\n\t            });\n\n\t            if (!sourceNode) {\n\t                return result;\n\t            }\n\n\t            absorb(sourceNode, result);\n\n\t            var existsLink;\n\t            do {\n\t                existsLink = false;\n\t                forEachNode(processSingleNode);\n\t            }\n\t            while (existsLink);\n\n\t            function processSingleNode(node) {\n\t                if (!isNodeAbsorded(node, result) && isLinked(node, result)) {\n\t                    absorb(node, result);\n\t                    existsLink = true;\n\t                }\n\t            }\n\n\t            return result;\n\t        };\n\n\t        function isNodeAbsorded(node, result) {\n\t            return zrUtil.indexOf(result.nodes, node) >= 0;\n\t        }\n\n\t        function isLinked(node, result) {\n\t            var hasLink = false;\n\t            forEachEdgeType(function (edgeType) {\n\t                zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {\n\t                    result.records[edgeType.name][edgeId] && (hasLink = true);\n\t                });\n\t            });\n\t            return hasLink;\n\t        }\n\n\t        function absorb(node, result) {\n\t            result.nodes.push(node);\n\t            forEachEdgeType(function (edgeType) {\n\t                zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {\n\t                    result.records[edgeType.name][edgeId] = true;\n\t                });\n\t            });\n\t        }\n\t    };\n\n\t    module.exports = helper;\n\n\n/***/ },\n/* 333 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Axis operator\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var numberUtil = __webpack_require__(7);\n\t    var helper = __webpack_require__(332);\n\t    var each = zrUtil.each;\n\t    var asc = numberUtil.asc;\n\n\t    /**\n\t     * Operate single axis.\n\t     * One axis can only operated by one axis operator.\n\t     * Different dataZoomModels may be defined to operate the same axis.\n\t     * (i.e. 'inside' data zoom and 'slider' data zoom components)\n\t     * So dataZoomModels share one axisProxy in that case.\n\t     *\n\t     * @class\n\t     */\n\t    var AxisProxy = function (dimName, axisIndex, dataZoomModel, ecModel) {\n\n\t        /**\n\t         * @private\n\t         * @type {string}\n\t         */\n\t        this._dimName = dimName;\n\n\t        /**\n\t         * @private\n\t         */\n\t        this._axisIndex = axisIndex;\n\n\t        /**\n\t         * @private\n\t         * @type {Array.<number>}\n\t         */\n\t        this._valueWindow;\n\n\t        /**\n\t         * @private\n\t         * @type {Array.<number>}\n\t         */\n\t        this._percentWindow;\n\n\t        /**\n\t         * @private\n\t         * @type {Array.<number>}\n\t         */\n\t        this._dataExtent;\n\n\t        /**\n\t         * @readOnly\n\t         * @type {module: echarts/model/Global}\n\t         */\n\t        this.ecModel = ecModel;\n\n\t        /**\n\t         * @private\n\t         * @type {module: echarts/component/dataZoom/DataZoomModel}\n\t         */\n\t        this._dataZoomModel = dataZoomModel;\n\t    };\n\n\t    AxisProxy.prototype = {\n\n\t        constructor: AxisProxy,\n\n\t        /**\n\t         * Whether the axisProxy is hosted by dataZoomModel.\n\t         *\n\t         * @public\n\t         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\n\t         * @return {boolean}\n\t         */\n\t        hostedBy: function (dataZoomModel) {\n\t            return this._dataZoomModel === dataZoomModel;\n\t        },\n\n\t        /**\n\t         * @return {Array.<number>} Value can only be NaN or finite value.\n\t         */\n\t        getDataValueWindow: function () {\n\t            return this._valueWindow.slice();\n\t        },\n\n\t        /**\n\t         * @return {Array.<number>}\n\t         */\n\t        getDataPercentWindow: function () {\n\t            return this._percentWindow.slice();\n\t        },\n\n\t        /**\n\t         * @public\n\t         * @param {number} axisIndex\n\t         * @return {Array} seriesModels\n\t         */\n\t        getTargetSeriesModels: function () {\n\t            var seriesModels = [];\n\t            var ecModel = this.ecModel;\n\n\t            ecModel.eachSeries(function (seriesModel) {\n\t                if (helper.isCoordSupported(seriesModel.get('coordinateSystem'))) {\n\t                    var dimName = this._dimName;\n\t                    var axisModel = ecModel.queryComponents({\n\t                        mainType: dimName + 'Axis',\n\t                        index: seriesModel.get(dimName + 'AxisIndex'),\n\t                        id: seriesModel.get(dimName + 'AxisId')\n\t                    })[0];\n\t                    if (this._axisIndex === (axisModel && axisModel.componentIndex)) {\n\t                        seriesModels.push(seriesModel);\n\t                    }\n\t                }\n\t            }, this);\n\n\t            return seriesModels;\n\t        },\n\n\t        getAxisModel: function () {\n\t            return this.ecModel.getComponent(this._dimName + 'Axis', this._axisIndex);\n\t        },\n\n\t        getOtherAxisModel: function () {\n\t            var axisDim = this._dimName;\n\t            var ecModel = this.ecModel;\n\t            var axisModel = this.getAxisModel();\n\t            var isCartesian = axisDim === 'x' || axisDim === 'y';\n\t            var otherAxisDim;\n\t            var coordSysIndexName;\n\t            if (isCartesian) {\n\t                coordSysIndexName = 'gridIndex';\n\t                otherAxisDim = axisDim === 'x' ? 'y' : 'x';\n\t            }\n\t            else {\n\t                coordSysIndexName = 'polarIndex';\n\t                otherAxisDim = axisDim === 'angle' ? 'radius' : 'angle';\n\t            }\n\t            var foundOtherAxisModel;\n\t            ecModel.eachComponent(otherAxisDim + 'Axis', function (otherAxisModel) {\n\t                if ((otherAxisModel.get(coordSysIndexName) || 0)\n\t                    === (axisModel.get(coordSysIndexName) || 0)\n\t                ) {\n\t                    foundOtherAxisModel = otherAxisModel;\n\t                }\n\t            });\n\t            return foundOtherAxisModel;\n\t        },\n\n\t        /**\n\t         * Only calculate by given range and this._dataExtent, do not change anything.\n\t         *\n\t         * @param {Object} opt\n\t         * @param {number} [opt.start]\n\t         * @param {number} [opt.end]\n\t         * @param {number} [opt.startValue]\n\t         * @param {number} [opt.endValue]\n\t         */\n\t        calculateDataWindow: function (opt) {\n\t            var dataExtent = this._dataExtent;\n\t            var axisModel = this.getAxisModel();\n\t            var scale = axisModel.axis.scale;\n\t            var percentExtent = [0, 100];\n\t            var percentWindow = [\n\t                opt.start,\n\t                opt.end\n\t            ];\n\t            var valueWindow = [];\n\n\t            // In percent range is used and axis min/max/scale is set,\n\t            // window should be based on min/max/0, but should not be\n\t            // based on the extent of filtered data.\n\t            dataExtent = dataExtent.slice();\n\t            fixExtentByAxis(dataExtent, axisModel);\n\n\t            each(['startValue', 'endValue'], function (prop) {\n\t                valueWindow.push(opt[prop] != null ? scale.parse(opt[prop]) : null);\n\t            });\n\n\t            // Normalize bound.\n\t            each([0, 1], function (idx) {\n\t                var boundValue = valueWindow[idx];\n\t                var boundPercent = percentWindow[idx];\n\n\t                // start/end has higher priority over startValue/endValue,\n\t                // because start/end can be consistent among different type\n\t                // of axis but startValue/endValue not.\n\n\t                if (boundPercent != null || boundValue == null) {\n\t                    if (boundPercent == null) {\n\t                        boundPercent = percentExtent[idx];\n\t                    }\n\t                    // Use scale.parse to math round for category or time axis.\n\t                    boundValue = scale.parse(numberUtil.linearMap(\n\t                        boundPercent, percentExtent, dataExtent, true\n\t                    ));\n\t                }\n\t                else { // boundPercent == null && boundValue != null\n\t                    boundPercent = numberUtil.linearMap(\n\t                        boundValue, dataExtent, percentExtent, true\n\t                    );\n\t                }\n\t                // valueWindow[idx] = round(boundValue);\n\t                // percentWindow[idx] = round(boundPercent);\n\t                valueWindow[idx] = boundValue;\n\t                percentWindow[idx] = boundPercent;\n\t            });\n\n\t            return {\n\t                valueWindow: asc(valueWindow),\n\t                percentWindow: asc(percentWindow)\n\t            };\n\t        },\n\n\t        /**\n\t         * Notice: reset should not be called before series.restoreData() called,\n\t         * so it is recommanded to be called in \"process stage\" but not \"model init\n\t         * stage\".\n\t         *\n\t         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\n\t         */\n\t        reset: function (dataZoomModel) {\n\t            if (dataZoomModel !== this._dataZoomModel) {\n\t                return;\n\t            }\n\n\t            // Culculate data window and data extent, and record them.\n\t            this._dataExtent = calculateDataExtent(\n\t                this._dimName, this.getTargetSeriesModels()\n\t            );\n\t            var dataWindow = this.calculateDataWindow(dataZoomModel.option);\n\t            this._valueWindow = dataWindow.valueWindow;\n\t            this._percentWindow = dataWindow.percentWindow;\n\n\t            // Update axis setting then.\n\t            setAxisModel(this);\n\t        },\n\n\t        /**\n\t         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\n\t         */\n\t        restore: function (dataZoomModel) {\n\t            if (dataZoomModel !== this._dataZoomModel) {\n\t                return;\n\t            }\n\n\t            this._valueWindow = this._percentWindow = null;\n\t            setAxisModel(this, true);\n\t        },\n\n\t        /**\n\t         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel\n\t         */\n\t        filterData: function (dataZoomModel) {\n\t            if (dataZoomModel !== this._dataZoomModel) {\n\t                return;\n\t            }\n\n\t            var axisDim = this._dimName;\n\t            var seriesModels = this.getTargetSeriesModels();\n\t            var filterMode = dataZoomModel.get('filterMode');\n\t            var valueWindow = this._valueWindow;\n\n\t            // FIXME\n\t            // Toolbox may has dataZoom injected. And if there are stacked bar chart\n\t            // with NaN data, NaN will be filtered and stack will be wrong.\n\t            // So we need to force the mode to be set empty.\n\t            // In fect, it is not a big deal that do not support filterMode-'filter'\n\t            // when using toolbox#dataZoom, utill tooltip#dataZoom support \"single axis\n\t            // selection\" some day, which might need \"adapt to data extent on the\n\t            // otherAxis\", which is disabled by filterMode-'empty'.\n\t            var otherAxisModel = this.getOtherAxisModel();\n\t            if (dataZoomModel.get('$fromToolbox')\n\t                && otherAxisModel\n\t                && otherAxisModel.get('type') === 'category'\n\t            ) {\n\t                filterMode = 'empty';\n\t            }\n\n\t            // Process series data\n\t            each(seriesModels, function (seriesModel) {\n\t                var seriesData = seriesModel.getData();\n\n\t                seriesData && each(seriesModel.coordDimToDataDim(axisDim), function (dim) {\n\t                    if (filterMode === 'empty') {\n\t                        seriesModel.setData(\n\t                            seriesData.map(dim, function (value) {\n\t                                return !isInWindow(value) ? NaN : value;\n\t                            })\n\t                        );\n\t                    }\n\t                    else {\n\t                        seriesData.filterSelf(dim, isInWindow);\n\t                    }\n\t                });\n\t            });\n\n\t            function isInWindow(value) {\n\t                return value >= valueWindow[0] && value <= valueWindow[1];\n\t            }\n\t        }\n\t    };\n\n\t    function calculateDataExtent(axisDim, seriesModels) {\n\t        var dataExtent = [Infinity, -Infinity];\n\n\t        each(seriesModels, function (seriesModel) {\n\t            var seriesData = seriesModel.getData();\n\t            if (seriesData) {\n\t                each(seriesModel.coordDimToDataDim(axisDim), function (dim) {\n\t                    var seriesExtent = seriesData.getDataExtent(dim);\n\t                    seriesExtent[0] < dataExtent[0] && (dataExtent[0] = seriesExtent[0]);\n\t                    seriesExtent[1] > dataExtent[1] && (dataExtent[1] = seriesExtent[1]);\n\t                });\n\t            }\n\t        }, this);\n\n\t        if (dataExtent[1] < dataExtent[0]) {\n\t            dataExtent = [NaN, NaN];\n\t        }\n\n\t        return dataExtent;\n\t    }\n\n\t    function fixExtentByAxis(dataExtent, axisModel) {\n\t        var min = axisModel.getMin(true);\n\t        if (min != null && min !== 'dataMin') {\n\t            dataExtent[0] = min;\n\t        }\n\t        var max = axisModel.getMax(true);\n\t        if (max != null && max !== 'dataMax') {\n\t            dataExtent[1] = max;\n\t        }\n\n\t        if (!axisModel.get('scale', true)) {\n\t            dataExtent[0] > 0 && (dataExtent[0] = 0);\n\t            dataExtent[1] < 0 && (dataExtent[1] = 0);\n\t        }\n\n\t        return dataExtent;\n\t    }\n\n\t    function setAxisModel(axisProxy, isRestore) {\n\t        var axisModel = axisProxy.getAxisModel();\n\n\t        var percentWindow = axisProxy._percentWindow;\n\t        var valueWindow = axisProxy._valueWindow;\n\n\t        if (!percentWindow) {\n\t            return;\n\t        }\n\n\t        // [0, 500]: arbitrary value, guess axis extent.\n\t        var precision = numberUtil.getPixelPrecision(valueWindow, [0, 500]);\n\t        // isRestore or isFull\n\t        var useOrigin = isRestore || (percentWindow[0] === 0 && percentWindow[1] === 100);\n\n\t        axisModel.setRange(\n\t            useOrigin ? null : +valueWindow[0].toFixed(precision),\n\t            useOrigin ? null : +valueWindow[1].toFixed(precision)\n\t        );\n\t    }\n\n\t    module.exports = AxisProxy;\n\n\n\n/***/ },\n/* 334 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var ComponentView = __webpack_require__(29);\n\n\t    module.exports = ComponentView.extend({\n\n\t        type: 'dataZoom',\n\n\t        render: function (dataZoomModel, ecModel, api, payload) {\n\t            this.dataZoomModel = dataZoomModel;\n\t            this.ecModel = ecModel;\n\t            this.api = api;\n\t        },\n\n\t        /**\n\t         * Find the first target coordinate system.\n\t         *\n\t         * @protected\n\t         * @return {Object} {\n\t         *                   grid: [\n\t         *                       {model: coord0, axisModels: [axis1, axis3], coordIndex: 1},\n\t         *                       {model: coord1, axisModels: [axis0, axis2], coordIndex: 0},\n\t         *                       ...\n\t         *                   ],  // cartesians must not be null/undefined.\n\t         *                   polar: [\n\t         *                       {model: coord0, axisModels: [axis4], coordIndex: 0},\n\t         *                       ...\n\t         *                   ],  // polars must not be null/undefined.\n\t         *                   singleAxis: [\n\t         *                       {model: coord0, axisModels: [], coordIndex: 0}\n\t         *                   ]\n\t         */\n\t        getTargetCoordInfo: function () {\n\t            var dataZoomModel = this.dataZoomModel;\n\t            var ecModel = this.ecModel;\n\t            var coordSysLists = {};\n\n\t            dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {\n\t                var axisModel = ecModel.getComponent(dimNames.axis, axisIndex);\n\t                if (axisModel) {\n\t                    var coordModel = axisModel.getCoordSysModel();\n\t                    coordModel && save(\n\t                        coordModel,\n\t                        axisModel,\n\t                        coordSysLists[coordModel.mainType] || (coordSysLists[coordModel.mainType] = []),\n\t                        coordModel.componentIndex\n\t                    );\n\t                }\n\t            }, this);\n\n\t            function save(coordModel, axisModel, store, coordIndex) {\n\t                var item;\n\t                for (var i = 0; i < store.length; i++) {\n\t                    if (store[i].model === coordModel) {\n\t                        item = store[i];\n\t                        break;\n\t                    }\n\t                }\n\t                if (!item) {\n\t                    store.push(item = {\n\t                        model: coordModel, axisModels: [], coordIndex: coordIndex\n\t                    });\n\t                }\n\t                item.axisModels.push(axisModel);\n\t            }\n\n\t            return coordSysLists;\n\t        }\n\n\t    });\n\n\n\n/***/ },\n/* 335 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Data zoom model\n\t */\n\n\n\t    var DataZoomModel = __webpack_require__(331);\n\n\t    var SliderZoomModel = DataZoomModel.extend({\n\n\t        type: 'dataZoom.slider',\n\n\t        layoutMode: 'box',\n\n\t        /**\n\t         * @protected\n\t         */\n\t        defaultOption: {\n\t            show: true,\n\n\t            // ph => placeholder. Using placehoder here because\n\t            // deault value can only be drived in view stage.\n\t            right: 'ph',  // Default align to grid rect.\n\t            top: 'ph',    // Default align to grid rect.\n\t            width: 'ph',  // Default align to grid rect.\n\t            height: 'ph', // Default align to grid rect.\n\t            left: null,   // Default align to grid rect.\n\t            bottom: null, // Default align to grid rect.\n\n\t            backgroundColor: 'rgba(47,69,84,0)',    // Background of slider zoom component.\n\t            // dataBackgroundColor: '#ddd',         // Background coor of data shadow and border of box,\n\t                                                    // highest priority, remain for compatibility of\n\t                                                    // previous version, but not recommended any more.\n\t            dataBackground: {\n\t                lineStyle: {\n\t                    color: '#2f4554',\n\t                    width: 0.5,\n\t                    opacity: 0.3\n\t                },\n\t                areaStyle: {\n\t                    color: 'rgba(47,69,84,0.3)',\n\t                    opacity: 0.3\n\t                }\n\t            },\n\t            borderColor: '#ddd',                    // border color of the box. For compatibility,\n\t                                                    // if dataBackgroundColor is set, borderColor\n\t                                                    // is ignored.\n\n\t            fillerColor: 'rgba(167,183,204,0.4)',     // Color of selected area.\n\t            // handleColor: 'rgba(89,170,216,0.95)',     // Color of handle.\n\t            // handleIcon: 'path://M4.9,17.8c0-1.4,4.5-10.5,5.5-12.4c0-0.1,0.6-1.1,0.9-1.1c0.4,0,0.9,1,0.9,1.1c1.1,2.2,5.4,11,5.4,12.4v17.8c0,1.5-0.6,2.1-1.3,2.1H6.1c-0.7,0-1.3-0.6-1.3-2.1V17.8z',\n\t            handleIcon: 'M8.2,13.6V3.9H6.3v9.7H3.1v14.9h3.3v9.7h1.8v-9.7h3.3V13.6H8.2z M9.7,24.4H4.8v-1.4h4.9V24.4z M9.7,19.1H4.8v-1.4h4.9V19.1z',\n\t            // Percent of the slider height\n\t            handleSize: '100%',\n\n\t            handleStyle: {\n\t                color: '#a7b7cc'\n\t            },\n\n\t            labelPrecision: null,\n\t            labelFormatter: null,\n\t            showDetail: true,\n\t            showDataShadow: 'auto',                 // Default auto decision.\n\t            realtime: true,\n\t            zoomLock: false,                        // Whether disable zoom.\n\t            textStyle: {\n\t                color: '#333'\n\t            }\n\t        }\n\n\t    });\n\n\t    module.exports = SliderZoomModel;\n\n\n\n/***/ },\n/* 336 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var graphic = __webpack_require__(43);\n\t    var throttle = __webpack_require__(81);\n\t    var DataZoomView = __webpack_require__(334);\n\t    var Rect = graphic.Rect;\n\t    var numberUtil = __webpack_require__(7);\n\t    var linearMap = numberUtil.linearMap;\n\t    var layout = __webpack_require__(21);\n\t    var sliderMove = __webpack_require__(337);\n\t    var asc = numberUtil.asc;\n\t    var bind = zrUtil.bind;\n\t    // var mathMax = Math.max;\n\t    var each = zrUtil.each;\n\n\t    // Constants\n\t    var DEFAULT_LOCATION_EDGE_GAP = 7;\n\t    var DEFAULT_FRAME_BORDER_WIDTH = 1;\n\t    var DEFAULT_FILLER_SIZE = 30;\n\t    var HORIZONTAL = 'horizontal';\n\t    var VERTICAL = 'vertical';\n\t    var LABEL_GAP = 5;\n\t    var SHOW_DATA_SHADOW_SERIES_TYPE = ['line', 'bar', 'candlestick', 'scatter'];\n\n\t    var SliderZoomView = DataZoomView.extend({\n\n\t        type: 'dataZoom.slider',\n\n\t        init: function (ecModel, api) {\n\n\t            /**\n\t             * @private\n\t             * @type {Object}\n\t             */\n\t            this._displayables = {};\n\n\t            /**\n\t             * @private\n\t             * @type {string}\n\t             */\n\t            this._orient;\n\n\t            /**\n\t             * [0, 100]\n\t             * @private\n\t             */\n\t            this._range;\n\n\t            /**\n\t             * [coord of the first handle, coord of the second handle]\n\t             * @private\n\t             */\n\t            this._handleEnds;\n\n\t            /**\n\t             * [length, thick]\n\t             * @private\n\t             * @type {Array.<number>}\n\t             */\n\t            this._size;\n\n\t            /**\n\t             * @private\n\t             * @type {number}\n\t             */\n\t            this._handleWidth;\n\n\t            /**\n\t             * @private\n\t             * @type {number}\n\t             */\n\t            this._handleHeight;\n\n\t            /**\n\t             * @private\n\t             */\n\t            this._location;\n\n\t            /**\n\t             * @private\n\t             */\n\t            this._dragging;\n\n\t            /**\n\t             * @private\n\t             */\n\t            this._dataShadowInfo;\n\n\t            this.api = api;\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        render: function (dataZoomModel, ecModel, api, payload) {\n\t            SliderZoomView.superApply(this, 'render', arguments);\n\n\t            throttle.createOrUpdate(\n\t                this,\n\t                '_dispatchZoomAction',\n\t                this.dataZoomModel.get('throttle'),\n\t                'fixRate'\n\t            );\n\n\t            this._orient = dataZoomModel.get('orient');\n\n\t            if (this.dataZoomModel.get('show') === false) {\n\t                this.group.removeAll();\n\t                return;\n\t            }\n\n\t            // Notice: this._resetInterval() should not be executed when payload.type\n\t            // is 'dataZoom', origin this._range should be maintained, otherwise 'pan'\n\t            // or 'zoom' info will be missed because of 'throttle' of this.dispatchAction,\n\t            if (!payload || payload.type !== 'dataZoom' || payload.from !== this.uid) {\n\t                this._buildView();\n\t            }\n\n\t            this._updateView();\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        remove: function () {\n\t            SliderZoomView.superApply(this, 'remove', arguments);\n\t            throttle.clear(this, '_dispatchZoomAction');\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        dispose: function () {\n\t            SliderZoomView.superApply(this, 'dispose', arguments);\n\t            throttle.clear(this, '_dispatchZoomAction');\n\t        },\n\n\t        _buildView: function () {\n\t            var thisGroup = this.group;\n\n\t            thisGroup.removeAll();\n\n\t            this._resetLocation();\n\t            this._resetInterval();\n\n\t            var barGroup = this._displayables.barGroup = new graphic.Group();\n\n\t            this._renderBackground();\n\n\t            this._renderHandle();\n\n\t            this._renderDataShadow();\n\n\t            thisGroup.add(barGroup);\n\n\t            this._positionGroup();\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _resetLocation: function () {\n\t            var dataZoomModel = this.dataZoomModel;\n\t            var api = this.api;\n\n\t            // If some of x/y/width/height are not specified,\n\t            // auto-adapt according to target grid.\n\t            var coordRect = this._findCoordRect();\n\t            var ecSize = {width: api.getWidth(), height: api.getHeight()};\n\t            // Default align by coordinate system rect.\n\t            var positionInfo = this._orient === HORIZONTAL\n\t                ? {\n\t                    // Why using 'right', because right should be used in vertical,\n\t                    // and it is better to be consistent for dealing with position param merge.\n\t                    right: ecSize.width - coordRect.x - coordRect.width,\n\t                    top: (ecSize.height - DEFAULT_FILLER_SIZE - DEFAULT_LOCATION_EDGE_GAP),\n\t                    width: coordRect.width,\n\t                    height: DEFAULT_FILLER_SIZE\n\t                }\n\t                : { // vertical\n\t                    right: DEFAULT_LOCATION_EDGE_GAP,\n\t                    top: coordRect.y,\n\t                    width: DEFAULT_FILLER_SIZE,\n\t                    height: coordRect.height\n\t                };\n\n\t            // Do not write back to option and replace value 'ph', because\n\t            // the 'ph' value should be recalculated when resize.\n\t            var layoutParams = layout.getLayoutParams(dataZoomModel.option);\n\n\t            // Replace the placeholder value.\n\t            zrUtil.each(['right', 'top', 'width', 'height'], function (name) {\n\t                if (layoutParams[name] === 'ph') {\n\t                    layoutParams[name] = positionInfo[name];\n\t                }\n\t            });\n\n\t            var layoutRect = layout.getLayoutRect(\n\t                layoutParams,\n\t                ecSize,\n\t                dataZoomModel.padding\n\t            );\n\n\t            this._location = {x: layoutRect.x, y: layoutRect.y};\n\t            this._size = [layoutRect.width, layoutRect.height];\n\t            this._orient === VERTICAL && this._size.reverse();\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _positionGroup: function () {\n\t            var thisGroup = this.group;\n\t            var location = this._location;\n\t            var orient = this._orient;\n\n\t            // Just use the first axis to determine mapping.\n\t            var targetAxisModel = this.dataZoomModel.getFirstTargetAxisModel();\n\t            var inverse = targetAxisModel && targetAxisModel.get('inverse');\n\n\t            var barGroup = this._displayables.barGroup;\n\t            var otherAxisInverse = (this._dataShadowInfo || {}).otherAxisInverse;\n\n\t            // Transform barGroup.\n\t            barGroup.attr(\n\t                (orient === HORIZONTAL && !inverse)\n\t                ? {scale: otherAxisInverse ? [1, 1] : [1, -1]}\n\t                : (orient === HORIZONTAL && inverse)\n\t                ? {scale: otherAxisInverse ? [-1, 1] : [-1, -1]}\n\t                : (orient === VERTICAL && !inverse)\n\t                ? {scale: otherAxisInverse ? [1, -1] : [1, 1], rotation: Math.PI / 2}\n\t                // Dont use Math.PI, considering shadow direction.\n\t                : {scale: otherAxisInverse ? [-1, -1] : [-1, 1], rotation: Math.PI / 2}\n\t            );\n\n\t            // Position barGroup\n\t            var rect = thisGroup.getBoundingRect([barGroup]);\n\t            thisGroup.attr('position', [location.x - rect.x, location.y - rect.y]);\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _getViewExtent: function () {\n\t            return [0, this._size[0]];\n\t        },\n\n\t        _renderBackground : function () {\n\t            var dataZoomModel = this.dataZoomModel;\n\t            var size = this._size;\n\n\t            this._displayables.barGroup.add(new Rect({\n\t                silent: true,\n\t                shape: {\n\t                    x: 0, y: 0, width: size[0], height: size[1]\n\t                },\n\t                style: {\n\t                    fill: dataZoomModel.get('backgroundColor')\n\t                },\n\t                z2: -40\n\t            }));\n\t        },\n\n\t        _renderDataShadow: function () {\n\t            var info = this._dataShadowInfo = this._prepareDataShadowInfo();\n\n\t            if (!info) {\n\t                return;\n\t            }\n\n\t            var size = this._size;\n\t            var seriesModel = info.series;\n\t            var data = seriesModel.getRawData();\n\t            var otherDim = seriesModel.getShadowDim\n\t                ? seriesModel.getShadowDim() // @see candlestick\n\t                : info.otherDim;\n\n\t            if (otherDim == null) {\n\t                return;\n\t            }\n\n\t            var otherDataExtent = data.getDataExtent(otherDim);\n\t            // Nice extent.\n\t            var otherOffset = (otherDataExtent[1] - otherDataExtent[0]) * 0.3;\n\t            otherDataExtent = [\n\t                otherDataExtent[0] - otherOffset,\n\t                otherDataExtent[1] + otherOffset\n\t            ];\n\t            var otherShadowExtent = [0, size[1]];\n\n\t            var thisShadowExtent = [0, size[0]];\n\n\t            var areaPoints = [[size[0], 0], [0, 0]];\n\t            var linePoints = [];\n\t            var step = thisShadowExtent[1] / (data.count() - 1);\n\t            var thisCoord = 0;\n\n\t            // Optimize for large data shadow\n\t            var stride = Math.round(data.count() / size[0]);\n\t            var lastIsEmpty;\n\t            data.each([otherDim], function (value, index) {\n\t                if (stride > 0 && (index % stride)) {\n\t                    thisCoord += step;\n\t                    return;\n\t                }\n\n\t                // FIXME\n\t                // Should consider axis.min/axis.max when drawing dataShadow.\n\n\t                // FIXME\n\t                // 应该使用统一的空判断？还是在list里进行空判断？\n\t                var isEmpty = value == null || isNaN(value) || value === '';\n\t                // See #4235.\n\t                var otherCoord = isEmpty\n\t                    ? 0 : linearMap(value, otherDataExtent, otherShadowExtent, true);\n\n\t                // Attempt to draw data shadow precisely when there are empty value.\n\t                if (isEmpty && !lastIsEmpty && index) {\n\t                    areaPoints.push([areaPoints[areaPoints.length - 1][0], 0]);\n\t                    linePoints.push([linePoints[linePoints.length - 1][0], 0]);\n\t                }\n\t                else if (!isEmpty && lastIsEmpty) {\n\t                    areaPoints.push([thisCoord, 0]);\n\t                    linePoints.push([thisCoord, 0]);\n\t                }\n\n\t                areaPoints.push([thisCoord, otherCoord]);\n\t                linePoints.push([thisCoord, otherCoord]);\n\n\t                thisCoord += step;\n\t                lastIsEmpty = isEmpty;\n\t            });\n\n\t            var dataZoomModel = this.dataZoomModel;\n\t            // var dataBackgroundModel = dataZoomModel.getModel('dataBackground');\n\t            this._displayables.barGroup.add(new graphic.Polygon({\n\t                shape: {points: areaPoints},\n\t                style: zrUtil.defaults(\n\t                    {fill: dataZoomModel.get('dataBackgroundColor')},\n\t                    dataZoomModel.getModel('dataBackground.areaStyle').getAreaStyle()\n\t                ),\n\t                silent: true,\n\t                z2: -20\n\t            }));\n\t            this._displayables.barGroup.add(new graphic.Polyline({\n\t                shape: {points: linePoints},\n\t                style: dataZoomModel.getModel('dataBackground.lineStyle').getLineStyle(),\n\t                silent: true,\n\t                z2: -19\n\t            }));\n\t        },\n\n\t        _prepareDataShadowInfo: function () {\n\t            var dataZoomModel = this.dataZoomModel;\n\t            var showDataShadow = dataZoomModel.get('showDataShadow');\n\n\t            if (showDataShadow === false) {\n\t                return;\n\t            }\n\n\t            // Find a representative series.\n\t            var result;\n\t            var ecModel = this.ecModel;\n\n\t            dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {\n\t                var seriesModels = dataZoomModel\n\t                    .getAxisProxy(dimNames.name, axisIndex)\n\t                    .getTargetSeriesModels();\n\n\t                zrUtil.each(seriesModels, function (seriesModel) {\n\t                    if (result) {\n\t                        return;\n\t                    }\n\n\t                    if (showDataShadow !== true && zrUtil.indexOf(\n\t                            SHOW_DATA_SHADOW_SERIES_TYPE, seriesModel.get('type')\n\t                        ) < 0\n\t                    ) {\n\t                        return;\n\t                    }\n\n\t                    var thisAxis = ecModel.getComponent(dimNames.axis, axisIndex).axis;\n\t                    var otherDim = getOtherDim(dimNames.name);\n\t                    var otherAxisInverse;\n\t                    var coordSys = seriesModel.coordinateSystem;\n\t                    if (otherDim != null && coordSys.getOtherAxis) {\n\t                        otherAxisInverse = coordSys.getOtherAxis(thisAxis).inverse;\n\t                    }\n\n\t                    result = {\n\t                        thisAxis: thisAxis,\n\t                        series: seriesModel,\n\t                        thisDim: dimNames.name,\n\t                        otherDim: otherDim,\n\t                        otherAxisInverse: otherAxisInverse\n\t                    };\n\n\t                }, this);\n\n\t            }, this);\n\n\t            return result;\n\t        },\n\n\t        _renderHandle: function () {\n\t            var displaybles = this._displayables;\n\t            var handles = displaybles.handles = [];\n\t            var handleLabels = displaybles.handleLabels = [];\n\t            var barGroup = this._displayables.barGroup;\n\t            var size = this._size;\n\t            var dataZoomModel = this.dataZoomModel;\n\n\t            barGroup.add(displaybles.filler = new Rect({\n\t                draggable: true,\n\t                cursor: 'move',\n\t                drift: bind(this._onDragMove, this, 'all'),\n\t                ondragstart: bind(this._showDataInfo, this, true),\n\t                ondragend: bind(this._onDragEnd, this),\n\t                onmouseover: bind(this._showDataInfo, this, true),\n\t                onmouseout: bind(this._showDataInfo, this, false),\n\t                style: {\n\t                    fill: dataZoomModel.get('fillerColor'),\n\t                    textPosition : 'inside'\n\t                }\n\t            }));\n\n\t            // Frame border.\n\t            barGroup.add(new Rect(graphic.subPixelOptimizeRect({\n\t                silent: true,\n\t                shape: {\n\t                    x: 0,\n\t                    y: 0,\n\t                    width: size[0],\n\t                    height: size[1]\n\t                },\n\t                style: {\n\t                    stroke: dataZoomModel.get('dataBackgroundColor')\n\t                        || dataZoomModel.get('borderColor'),\n\t                    lineWidth: DEFAULT_FRAME_BORDER_WIDTH,\n\t                    fill: 'rgba(0,0,0,0)'\n\t                }\n\t            })));\n\n\t            var iconStr = dataZoomModel.get('handleIcon');\n\t            each([0, 1], function (handleIndex) {\n\t                var path = graphic.makePath(iconStr, {\n\t                    style: {\n\t                        strokeNoScale: true\n\t                    },\n\t                    rectHover: true,\n\t                    cursor: this._orient === 'vertical' ? 'ns-resize' : 'ew-resize',\n\t                    draggable: true,\n\t                    drift: bind(this._onDragMove, this, handleIndex),\n\t                    ondragend: bind(this._onDragEnd, this),\n\t                    onmouseover: bind(this._showDataInfo, this, true),\n\t                    onmouseout: bind(this._showDataInfo, this, false)\n\t                }, {\n\t                    x: -0.5,\n\t                    y: 0,\n\t                    width: 1,\n\t                    height: 1\n\t                }, 'center');\n\n\t                var bRect = path.getBoundingRect();\n\t                this._handleHeight = numberUtil.parsePercent(dataZoomModel.get('handleSize'), this._size[1]);\n\t                this._handleWidth = bRect.width / bRect.height * this._handleHeight;\n\n\t                path.setStyle(dataZoomModel.getModel('handleStyle').getItemStyle());\n\t                var handleColor = dataZoomModel.get('handleColor');\n\t                // Compatitable with previous version\n\t                if (handleColor != null) {\n\t                    path.style.fill = handleColor;\n\t                }\n\n\t                barGroup.add(handles[handleIndex] = path);\n\n\t                var textStyleModel = dataZoomModel.textStyleModel;\n\n\t                this.group.add(\n\t                    handleLabels[handleIndex] = new graphic.Text({\n\t                    silent: true,\n\t                    invisible: true,\n\t                    style: {\n\t                        x: 0, y: 0, text: '',\n\t                        textVerticalAlign: 'middle',\n\t                        textAlign: 'center',\n\t                        fill: textStyleModel.getTextColor(),\n\t                        textFont: textStyleModel.getFont()\n\t                    },\n\t                    z2: 10\n\t                }));\n\n\t            }, this);\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _resetInterval: function () {\n\t            var range = this._range = this.dataZoomModel.getPercentRange();\n\t            var viewExtent = this._getViewExtent();\n\n\t            this._handleEnds = [\n\t                linearMap(range[0], [0, 100], viewExtent, true),\n\t                linearMap(range[1], [0, 100], viewExtent, true)\n\t            ];\n\t        },\n\n\t        /**\n\t         * @private\n\t         * @param {(number|string)} handleIndex 0 or 1 or 'all'\n\t         * @param {number} dx\n\t         * @param {number} dy\n\t         */\n\t        _updateInterval: function (handleIndex, delta) {\n\t            var handleEnds = this._handleEnds;\n\t            var viewExtend = this._getViewExtent();\n\n\t            sliderMove(\n\t                delta,\n\t                handleEnds,\n\t                viewExtend,\n\t                (handleIndex === 'all' || this.dataZoomModel.get('zoomLock'))\n\t                    ? 'rigid' : 'cross',\n\t                handleIndex\n\t            );\n\n\t            this._range = asc([\n\t                linearMap(handleEnds[0], viewExtend, [0, 100], true),\n\t                linearMap(handleEnds[1], viewExtend, [0, 100], true)\n\t            ]);\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _updateView: function (nonRealtime) {\n\t            var displaybles = this._displayables;\n\t            var handleEnds = this._handleEnds;\n\t            var handleInterval = asc(handleEnds.slice());\n\t            var size = this._size;\n\n\t            each([0, 1], function (handleIndex) {\n\t                // Handles\n\t                var handle = displaybles.handles[handleIndex];\n\t                var handleHeight = this._handleHeight;\n\t                handle.attr({\n\t                    scale: [handleHeight, handleHeight],\n\t                    position: [handleEnds[handleIndex], size[1] / 2 - handleHeight / 2]\n\t                });\n\t            }, this);\n\n\t            // Filler\n\t            displaybles.filler.setShape({\n\t                x: handleInterval[0],\n\t                y: 0,\n\t                width: handleInterval[1] - handleInterval[0],\n\t                height: size[1]\n\t            });\n\n\t            this._updateDataInfo(nonRealtime);\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _updateDataInfo: function (nonRealtime) {\n\t            var dataZoomModel = this.dataZoomModel;\n\t            var displaybles = this._displayables;\n\t            var handleLabels = displaybles.handleLabels;\n\t            var orient = this._orient;\n\t            var labelTexts = ['', ''];\n\n\t            // FIXME\n\t            // date型，支持formatter，autoformatter（ec2 date.getAutoFormatter）\n\t            if (dataZoomModel.get('showDetail')) {\n\t                var axisProxy = dataZoomModel.findRepresentativeAxisProxy();\n\n\t                if (axisProxy) {\n\t                    var axis = axisProxy.getAxisModel().axis;\n\t                    var range = this._range;\n\n\t                    var dataInterval = nonRealtime\n\t                        // See #4434, data and axis are not processed and reset yet in non-realtime mode.\n\t                        ? axisProxy.calculateDataWindow({\n\t                            start: range[0], end: range[1]\n\t                        }).valueWindow\n\t                        : axisProxy.getDataValueWindow();\n\n\t                    labelTexts = [\n\t                        this._formatLabel(dataInterval[0], axis),\n\t                        this._formatLabel(dataInterval[1], axis)\n\t                    ];\n\t                }\n\t            }\n\n\t            var orderedHandleEnds = asc(this._handleEnds.slice());\n\n\t            setLabel.call(this, 0);\n\t            setLabel.call(this, 1);\n\n\t            function setLabel(handleIndex) {\n\t                // Label\n\t                // Text should not transform by barGroup.\n\t                // Ignore handlers transform\n\t                var barTransform = graphic.getTransform(\n\t                    displaybles.handles[handleIndex].parent, this.group\n\t                );\n\t                var direction = graphic.transformDirection(\n\t                    handleIndex === 0 ? 'right' : 'left', barTransform\n\t                );\n\t                var offset = this._handleWidth / 2 + LABEL_GAP;\n\t                var textPoint = graphic.applyTransform(\n\t                    [\n\t                        orderedHandleEnds[handleIndex] + (handleIndex === 0 ? -offset : offset),\n\t                        this._size[1] / 2\n\t                    ],\n\t                    barTransform\n\t                );\n\t                handleLabels[handleIndex].setStyle({\n\t                    x: textPoint[0],\n\t                    y: textPoint[1],\n\t                    textVerticalAlign: orient === HORIZONTAL ? 'middle' : direction,\n\t                    textAlign: orient === HORIZONTAL ? direction : 'center',\n\t                    text: labelTexts[handleIndex]\n\t                });\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _formatLabel: function (value, axis) {\n\t            var dataZoomModel = this.dataZoomModel;\n\t            var labelFormatter = dataZoomModel.get('labelFormatter');\n\n\t            var labelPrecision = dataZoomModel.get('labelPrecision');\n\t            if (labelPrecision == null || labelPrecision === 'auto') {\n\t                labelPrecision = axis.getPixelPrecision();\n\t            }\n\n\t            var valueStr = (value == null || isNaN(value))\n\t                ? ''\n\t                // FIXME Glue code\n\t                : (axis.type === 'category' || axis.type === 'time')\n\t                    ? axis.scale.getLabel(Math.round(value))\n\t                    // param of toFixed should less then 20.\n\t                    : value.toFixed(Math.min(labelPrecision, 20));\n\n\t            return zrUtil.isFunction(labelFormatter)\n\t                ? labelFormatter(value, valueStr)\n\t                : zrUtil.isString(labelFormatter)\n\t                ? labelFormatter.replace('{value}', valueStr)\n\t                : valueStr;\n\t        },\n\n\t        /**\n\t         * @private\n\t         * @param {boolean} showOrHide true: show, false: hide\n\t         */\n\t        _showDataInfo: function (showOrHide) {\n\t            // Always show when drgging.\n\t            showOrHide = this._dragging || showOrHide;\n\n\t            var handleLabels = this._displayables.handleLabels;\n\t            handleLabels[0].attr('invisible', !showOrHide);\n\t            handleLabels[1].attr('invisible', !showOrHide);\n\t        },\n\n\t        _onDragMove: function (handleIndex, dx, dy) {\n\t            this._dragging = true;\n\n\t            // Transform dx, dy to bar coordination.\n\t            var vertex = this._applyBarTransform([dx, dy], true);\n\n\t            this._updateInterval(handleIndex, vertex[0]);\n\n\t            var realtime = this.dataZoomModel.get('realtime');\n\n\t            this._updateView(!realtime);\n\n\t            if (realtime) {\n\t                realtime && this._dispatchZoomAction();\n\t            }\n\t        },\n\n\t        _onDragEnd: function () {\n\t            this._dragging = false;\n\t            this._showDataInfo(false);\n\t            this._dispatchZoomAction();\n\t        },\n\n\t        /**\n\t         * This action will be throttled.\n\t         * @private\n\t         */\n\t        _dispatchZoomAction: function () {\n\t            var range = this._range;\n\n\t            this.api.dispatchAction({\n\t                type: 'dataZoom',\n\t                from: this.uid,\n\t                dataZoomId: this.dataZoomModel.id,\n\t                start: range[0],\n\t                end: range[1]\n\t            });\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _applyBarTransform: function (vertex, inverse) {\n\t            var barTransform = this._displayables.barGroup.getLocalTransform();\n\t            return graphic.applyTransform(vertex, barTransform, inverse);\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _findCoordRect: function () {\n\t            // Find the grid coresponding to the first axis referred by dataZoom.\n\t            var rect;\n\t            each(this.getTargetCoordInfo(), function (coordInfoList) {\n\t                if (!rect && coordInfoList.length) {\n\t                    var coordSys = coordInfoList[0].model.coordinateSystem;\n\t                    rect = coordSys.getRect && coordSys.getRect();\n\t                }\n\t            });\n\t            if (!rect) {\n\t                var width = this.api.getWidth();\n\t                var height = this.api.getHeight();\n\t                rect = {\n\t                    x: width * 0.2,\n\t                    y: height * 0.2,\n\t                    width: width * 0.6,\n\t                    height: height * 0.6\n\t                };\n\t            }\n\n\t            return rect;\n\t        }\n\n\t    });\n\n\t    function getOtherDim(thisDim) {\n\t        // FIXME\n\t        // 这个逻辑和getOtherAxis里一致，但是写在这里是否不好\n\t        var map = {x: 'y', y: 'x', radius: 'angle', angle: 'radius'};\n\t        return map[thisDim];\n\t    }\n\n\t    module.exports = SliderZoomView;\n\n\n\n/***/ },\n/* 337 */\n/***/ function(module, exports) {\n\n\t\n\n\t    /**\n\t     * Calculate slider move result.\n\t     *\n\t     * @param {number} delta Move length.\n\t     * @param {Array.<number>} handleEnds handleEnds[0] and be bigger then handleEnds[1].\n\t     *                                    handleEnds will be modified in this method.\n\t     * @param {Array.<number>} extent handleEnds is restricted by extent.\n\t     *                                extent[0] should less or equals than extent[1].\n\t     * @param {string} mode 'rigid': Math.abs(handleEnds[0] - handleEnds[1]) remain unchanged,\n\t     *                      'cross' handleEnds[0] can be bigger then handleEnds[1],\n\t     *                      'push' handleEnds[0] can not be bigger then handleEnds[1],\n\t     *                              when they touch, one push other.\n\t     * @param {number} handleIndex If mode is 'rigid', handleIndex is not required.\n\t     * @param {Array.<number>} The input handleEnds.\n\t     */\n\t    module.exports = function (delta, handleEnds, extent, mode, handleIndex) {\n\t        if (!delta) {\n\t            return handleEnds;\n\t        }\n\n\t        if (mode === 'rigid') {\n\t            delta = getRealDelta(delta, handleEnds, extent);\n\t            handleEnds[0] += delta;\n\t            handleEnds[1] += delta;\n\t        }\n\t        else {\n\t            delta = getRealDelta(delta, handleEnds[handleIndex], extent);\n\t            handleEnds[handleIndex] += delta;\n\n\t            if (mode === 'push' && handleEnds[0] > handleEnds[1]) {\n\t                handleEnds[1 - handleIndex] = handleEnds[handleIndex];\n\t            }\n\t        }\n\n\t        return handleEnds;\n\n\t        function getRealDelta(delta, handleEnds, extent) {\n\t            var handleMinMax = !handleEnds.length\n\t                ? [handleEnds, handleEnds]\n\t                : handleEnds.slice();\n\t            handleEnds[0] > handleEnds[1] && handleMinMax.reverse();\n\n\t            if (delta < 0 && handleMinMax[0] + delta < extent[0]) {\n\t                delta = extent[0] - handleMinMax[0];\n\t            }\n\t            if (delta > 0 && handleMinMax[1] + delta > extent[1]) {\n\t                delta = extent[1] - handleMinMax[1];\n\t            }\n\t            return delta;\n\t        }\n\t    };\n\n\n/***/ },\n/* 338 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Data zoom model\n\t */\n\n\n\t    module.exports = __webpack_require__(331).extend({\n\n\t        type: 'dataZoom.inside',\n\n\t        /**\n\t         * @protected\n\t         */\n\t        defaultOption: {\n\t            disabled: false,   // Whether disable this inside zoom.\n\t            zoomLock: false  // Whether disable zoom but only pan.\n\t        }\n\t    });\n\n\n/***/ },\n/* 339 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var DataZoomView = __webpack_require__(334);\n\t    var zrUtil = __webpack_require__(4);\n\t    var sliderMove = __webpack_require__(337);\n\t    var roams = __webpack_require__(340);\n\t    var bind = zrUtil.bind;\n\n\t    var InsideZoomView = DataZoomView.extend({\n\n\t        type: 'dataZoom.inside',\n\n\t        /**\n\t         * @override\n\t         */\n\t        init: function (ecModel, api) {\n\t            /**\n\t             * 'throttle' is used in this.dispatchAction, so we save range\n\t             * to avoid missing some 'pan' info.\n\t             * @private\n\t             * @type {Array.<number>}\n\t             */\n\t            this._range;\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        render: function (dataZoomModel, ecModel, api, payload) {\n\t            InsideZoomView.superApply(this, 'render', arguments);\n\n\t            // Notice: origin this._range should be maintained, and should not be re-fetched\n\t            // from dataZoomModel when payload.type is 'dataZoom', otherwise 'pan' or 'zoom'\n\t            // info will be missed because of 'throttle' of this.dispatchAction.\n\t            if (roams.shouldRecordRange(payload, dataZoomModel.id)) {\n\t                this._range = dataZoomModel.getPercentRange();\n\t            }\n\n\t            // Reset controllers.\n\t            zrUtil.each(this.getTargetCoordInfo(), function (coordInfoList, coordSysName) {\n\n\t                var allCoordIds = zrUtil.map(coordInfoList, function (coordInfo) {\n\t                    return roams.generateCoordId(coordInfo.model);\n\t                });\n\n\t                zrUtil.each(coordInfoList, function (coordInfo) {\n\t                    var coordModel = coordInfo.model;\n\n\t                    roams.register(\n\t                        api,\n\t                        {\n\t                            coordId: roams.generateCoordId(coordModel),\n\t                            allCoordIds: allCoordIds,\n\t                            containsPoint: function (x, y) {\n\t                                return coordModel.coordinateSystem.containPoint([x, y]);\n\t                            },\n\t                            dataZoomId: dataZoomModel.id,\n\t                            throttleRate: dataZoomModel.get('throttle', true),\n\t                            panGetRange: bind(this._onPan, this, coordInfo, coordSysName),\n\t                            zoomGetRange: bind(this._onZoom, this, coordInfo, coordSysName)\n\t                        }\n\t                    );\n\t                }, this);\n\n\t            }, this);\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        dispose: function () {\n\t            roams.unregister(this.api, this.dataZoomModel.id);\n\t            InsideZoomView.superApply(this, 'dispose', arguments);\n\t            this._range = null;\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _onPan: function (coordInfo, coordSysName, controller, dx, dy, oldX, oldY, newX, newY) {\n\t            if (this.dataZoomModel.option.disabled) {\n\t                return this._range;\n\t            }\n\n\t            var range = this._range.slice();\n\n\t            // Calculate transform by the first axis.\n\t            var axisModel = coordInfo.axisModels[0];\n\t            if (!axisModel) {\n\t                return;\n\t            }\n\n\t            var directionInfo = getDirectionInfo[coordSysName](\n\t                [oldX, oldY], [newX, newY], axisModel, controller, coordInfo\n\t            );\n\n\t            var percentDelta = directionInfo.signal\n\t                * (range[1] - range[0])\n\t                * directionInfo.pixel / directionInfo.pixelLength;\n\n\t            sliderMove(percentDelta, range, [0, 100], 'rigid');\n\n\t            return (this._range = range);\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _onZoom: function (coordInfo, coordSysName, controller, scale, mouseX, mouseY) {\n\t            var option = this.dataZoomModel.option;\n\n\t            if (option.disabled || option.zoomLock) {\n\t                return this._range;\n\t            }\n\n\t            var range = this._range.slice();\n\n\t            // Calculate transform by the first axis.\n\t            var axisModel = coordInfo.axisModels[0];\n\t            if (!axisModel) {\n\t                return;\n\t            }\n\n\t            var directionInfo = getDirectionInfo[coordSysName](\n\t                null, [mouseX, mouseY], axisModel, controller, coordInfo\n\t            );\n\n\t            var percentPoint = (directionInfo.pixel - directionInfo.pixelStart) /\n\t                directionInfo.pixelLength * (range[1] - range[0]) + range[0];\n\n\t            scale = Math.max(1 / scale, 0);\n\t            range[0] = (range[0] - percentPoint) * scale + percentPoint;\n\t            range[1] = (range[1] - percentPoint) * scale + percentPoint;\n\t            return (this._range = fixRange(range));\n\t        }\n\n\t    });\n\n\t    var getDirectionInfo = {\n\n\t        grid: function (oldPoint, newPoint, axisModel, controller, coordInfo) {\n\t            var axis = axisModel.axis;\n\t            var ret = {};\n\t            var rect = coordInfo.model.coordinateSystem.getRect();\n\t            oldPoint = oldPoint || [0, 0];\n\n\t            if (axis.dim === 'x') {\n\t                ret.pixel = newPoint[0] - oldPoint[0];\n\t                ret.pixelLength = rect.width;\n\t                ret.pixelStart = rect.x;\n\t                ret.signal = axis.inverse ? 1 : -1;\n\t            }\n\t            else { // axis.dim === 'y'\n\t                ret.pixel = newPoint[1] - oldPoint[1];\n\t                ret.pixelLength = rect.height;\n\t                ret.pixelStart = rect.y;\n\t                ret.signal = axis.inverse ? -1 : 1;\n\t            }\n\n\t            return ret;\n\t        },\n\n\t        polar: function (oldPoint, newPoint, axisModel, controller, coordInfo) {\n\t            var axis = axisModel.axis;\n\t            var ret = {};\n\t            var polar = coordInfo.model.coordinateSystem;\n\t            var radiusExtent = polar.getRadiusAxis().getExtent();\n\t            var angleExtent = polar.getAngleAxis().getExtent();\n\n\t            oldPoint = oldPoint ? polar.pointToCoord(oldPoint) : [0, 0];\n\t            newPoint = polar.pointToCoord(newPoint);\n\n\t            if (axisModel.mainType === 'radiusAxis') {\n\t                ret.pixel = newPoint[0] - oldPoint[0];\n\t                // ret.pixelLength = Math.abs(radiusExtent[1] - radiusExtent[0]);\n\t                // ret.pixelStart = Math.min(radiusExtent[0], radiusExtent[1]);\n\t                ret.pixelLength = radiusExtent[1] - radiusExtent[0];\n\t                ret.pixelStart = radiusExtent[0];\n\t                ret.signal = axis.inverse ? 1 : -1;\n\t            }\n\t            else { // 'angleAxis'\n\t                ret.pixel = newPoint[1] - oldPoint[1];\n\t                // ret.pixelLength = Math.abs(angleExtent[1] - angleExtent[0]);\n\t                // ret.pixelStart = Math.min(angleExtent[0], angleExtent[1]);\n\t                ret.pixelLength = angleExtent[1] - angleExtent[0];\n\t                ret.pixelStart = angleExtent[0];\n\t                ret.signal = axis.inverse ? -1 : 1;\n\t            }\n\n\t            return ret;\n\t        },\n\n\t        singleAxis: function (oldPoint, newPoint, axisModel, controller, coordInfo) {\n\t            var axis = axisModel.axis;\n\t            var rect = coordInfo.model.coordinateSystem.getRect();\n\t            var ret = {};\n\n\t            oldPoint = oldPoint || [0, 0];\n\n\t            if (axis.orient === 'horizontal') {\n\t                ret.pixel = newPoint[0] - oldPoint[0];\n\t                ret.pixelLength = rect.width;\n\t                ret.pixelStart = rect.x;\n\t                ret.signal = axis.inverse ? 1 : -1;\n\t            }\n\t            else { // 'vertical'\n\t                ret.pixel = newPoint[1] - oldPoint[1];\n\t                ret.pixelLength = rect.height;\n\t                ret.pixelStart = rect.y;\n\t                ret.signal = axis.inverse ? -1 : 1;\n\t            }\n\n\t            return ret;\n\t        }\n\t    };\n\n\t    function fixRange(range) {\n\t        // Clamp, using !(<= or >=) to handle NaN.\n\t        // jshint ignore:start\n\t        var bound = [0, 100];\n\t        !(range[0] <= bound[1]) && (range[0] = bound[1]);\n\t        !(range[1] <= bound[1]) && (range[1] = bound[1]);\n\t        !(range[0] >= bound[0]) && (range[0] = bound[0]);\n\t        !(range[1] >= bound[0]) && (range[1] = bound[0]);\n\t        // jshint ignore:end\n\n\t        return range;\n\t    }\n\n\t    module.exports = InsideZoomView;\n\n\n/***/ },\n/* 340 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Roam controller manager.\n\t */\n\n\n\t    // Only create one roam controller for each coordinate system.\n\t    // one roam controller might be refered by two inside data zoom\n\t    // components (for example, one for x and one for y). When user\n\t    // pan or zoom, only dispatch one action for those data zoom\n\t    // components.\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var RoamController = __webpack_require__(177);\n\t    var throttle = __webpack_require__(81);\n\t    var curry = zrUtil.curry;\n\n\t    var ATTR = '\\0_ec_dataZoom_roams';\n\n\t    var roams = {\n\n\t        /**\n\t         * @public\n\t         * @param {module:echarts/ExtensionAPI} api\n\t         * @param {Object} dataZoomInfo\n\t         * @param {string} dataZoomInfo.coordId\n\t         * @param {Function} dataZoomInfo.containsPoint\n\t         * @param {Array.<string>} dataZoomInfo.allCoordIds\n\t         * @param {string} dataZoomInfo.dataZoomId\n\t         * @param {number} dataZoomInfo.throttleRate\n\t         * @param {Function} dataZoomInfo.panGetRange\n\t         * @param {Function} dataZoomInfo.zoomGetRange\n\t         */\n\t        register: function (api, dataZoomInfo) {\n\t            var store = giveStore(api);\n\t            var theDataZoomId = dataZoomInfo.dataZoomId;\n\t            var theCoordId = dataZoomInfo.coordId;\n\n\t            // Do clean when a dataZoom changes its target coordnate system.\n\t            // Avoid memory leak, dispose all not-used-registered.\n\t            zrUtil.each(store, function (record, coordId) {\n\t                var dataZoomInfos = record.dataZoomInfos;\n\t                if (dataZoomInfos[theDataZoomId]\n\t                    && zrUtil.indexOf(dataZoomInfo.allCoordIds, theCoordId) < 0\n\t                ) {\n\t                    delete dataZoomInfos[theDataZoomId];\n\t                    record.count--;\n\t                }\n\t            });\n\n\t            cleanStore(store);\n\n\t            var record = store[theCoordId];\n\t            // Create if needed.\n\t            if (!record) {\n\t                record = store[theCoordId] = {\n\t                    coordId: theCoordId,\n\t                    dataZoomInfos: {},\n\t                    count: 0\n\t                };\n\t                record.controller = createController(api, dataZoomInfo, record);\n\t                record.dispatchAction = zrUtil.curry(dispatchAction, api);\n\t            }\n\n\t            // Consider resize, area should be always updated.\n\t            record.controller.setContainsPoint(dataZoomInfo.containsPoint);\n\n\t            // Update throttle.\n\t            throttle.createOrUpdate(\n\t                record,\n\t                'dispatchAction',\n\t                dataZoomInfo.throttleRate,\n\t                'fixRate'\n\t            );\n\n\t            // Update reference of dataZoom.\n\t            !(record.dataZoomInfos[theDataZoomId]) && record.count++;\n\t            record.dataZoomInfos[theDataZoomId] = dataZoomInfo;\n\t        },\n\n\t        /**\n\t         * @public\n\t         * @param {module:echarts/ExtensionAPI} api\n\t         * @param {string} dataZoomId\n\t         */\n\t        unregister: function (api, dataZoomId) {\n\t            var store = giveStore(api);\n\n\t            zrUtil.each(store, function (record) {\n\t                record.controller.dispose();\n\t                var dataZoomInfos = record.dataZoomInfos;\n\t                if (dataZoomInfos[dataZoomId]) {\n\t                    delete dataZoomInfos[dataZoomId];\n\t                    record.count--;\n\t                }\n\t            });\n\n\t            cleanStore(store);\n\t        },\n\n\t        /**\n\t         * @public\n\t         */\n\t        shouldRecordRange: function (payload, dataZoomId) {\n\t            if (payload && payload.type === 'dataZoom' && payload.batch) {\n\t                for (var i = 0, len = payload.batch.length; i < len; i++) {\n\t                    if (payload.batch[i].dataZoomId === dataZoomId) {\n\t                        return false;\n\t                    }\n\t                }\n\t            }\n\t            return true;\n\t        },\n\n\t        /**\n\t         * @public\n\t         */\n\t        generateCoordId: function (coordModel) {\n\t            return coordModel.type + '\\0_' + coordModel.id;\n\t        }\n\t    };\n\n\t    /**\n\t     * Key: coordId, value: {dataZoomInfos: [], count, controller}\n\t     * @type {Array.<Object>}\n\t     */\n\t    function giveStore(api) {\n\t        // Mount store on zrender instance, so that we do not\n\t        // need to worry about dispose.\n\t        var zr = api.getZr();\n\t        return zr[ATTR] || (zr[ATTR] = {});\n\t    }\n\n\t    function createController(api, dataZoomInfo, newRecord) {\n\t        var controller = new RoamController(api.getZr());\n\t        controller.enable();\n\t        controller.on('pan', curry(onPan, newRecord));\n\t        controller.on('zoom', curry(onZoom, newRecord));\n\n\t        return controller;\n\t    }\n\n\t    function cleanStore(store) {\n\t        zrUtil.each(store, function (record, coordId) {\n\t            if (!record.count) {\n\t                record.controller.dispose();\n\t                delete store[coordId];\n\t            }\n\t        });\n\t    }\n\n\t    function onPan(record, dx, dy, oldX, oldY, newX, newY) {\n\t        wrapAndDispatch(record, function (info) {\n\t            return info.panGetRange(record.controller, dx, dy, oldX, oldY, newX, newY);\n\t        });\n\t    }\n\n\t    function onZoom(record, scale, mouseX, mouseY) {\n\t        wrapAndDispatch(record, function (info) {\n\t            return info.zoomGetRange(record.controller, scale, mouseX, mouseY);\n\t        });\n\t    }\n\n\t    function wrapAndDispatch(record, getRange) {\n\t        var batch = [];\n\n\t        zrUtil.each(record.dataZoomInfos, function (info) {\n\t            var range = getRange(info);\n\t            range && batch.push({\n\t                dataZoomId: info.dataZoomId,\n\t                start: range[0],\n\t                end: range[1]\n\t            });\n\t        });\n\n\t        record.dispatchAction(batch);\n\t    }\n\n\t    /**\n\t     * This action will be throttled.\n\t     */\n\t    function dispatchAction(api, batch) {\n\t        api.dispatchAction({\n\t            type: 'dataZoom',\n\t            batch: batch\n\t        });\n\t    }\n\n\t    module.exports = roams;\n\n\n\n/***/ },\n/* 341 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Data zoom processor\n\t */\n\n\n\t    var echarts = __webpack_require__(1);\n\n\t    echarts.registerProcessor(function (ecModel, api) {\n\n\t        ecModel.eachComponent('dataZoom', function (dataZoomModel) {\n\t            // We calculate window and reset axis here but not in model\n\t            // init stage and not after action dispatch handler, because\n\t            // reset should be called after seriesData.restoreData.\n\t            dataZoomModel.eachTargetAxis(resetSingleAxis);\n\n\t            // Caution: data zoom filtering is order sensitive when using\n\t            // percent range and no min/max/scale set on axis.\n\t            // For example, we have dataZoom definition:\n\t            // [\n\t            //      {xAxisIndex: 0, start: 30, end: 70},\n\t            //      {yAxisIndex: 0, start: 20, end: 80}\n\t            // ]\n\t            // In this case, [20, 80] of y-dataZoom should be based on data\n\t            // that have filtered by x-dataZoom using range of [30, 70],\n\t            // but should not be based on full raw data. Thus sliding\n\t            // x-dataZoom will change both ranges of xAxis and yAxis,\n\t            // while sliding y-dataZoom will only change the range of yAxis.\n\t            // So we should filter x-axis after reset x-axis immediately,\n\t            // and then reset y-axis and filter y-axis.\n\t            dataZoomModel.eachTargetAxis(filterSingleAxis);\n\t        });\n\n\t        ecModel.eachComponent('dataZoom', function (dataZoomModel) {\n\t            // Fullfill all of the range props so that user\n\t            // is able to get them from chart.getOption().\n\t            var axisProxy = dataZoomModel.findRepresentativeAxisProxy();\n\t            var percentRange = axisProxy.getDataPercentWindow();\n\t            var valueRange = axisProxy.getDataValueWindow();\n\n\t            dataZoomModel.setRawRange({\n\t                start: percentRange[0],\n\t                end: percentRange[1],\n\t                startValue: valueRange[0],\n\t                endValue: valueRange[1]\n\t            });\n\t        });\n\t    });\n\n\t    function resetSingleAxis(dimNames, axisIndex, dataZoomModel) {\n\t        dataZoomModel.getAxisProxy(dimNames.name, axisIndex).reset(dataZoomModel);\n\t    }\n\n\t    function filterSingleAxis(dimNames, axisIndex, dataZoomModel) {\n\t        dataZoomModel.getAxisProxy(dimNames.name, axisIndex).filterData(dataZoomModel);\n\t    }\n\n\n\n\n/***/ },\n/* 342 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Data zoom action\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var helper = __webpack_require__(332);\n\t    var echarts = __webpack_require__(1);\n\n\n\t    echarts.registerAction('dataZoom', function (payload, ecModel) {\n\n\t        var linkedNodesFinder = helper.createLinkedNodesFinder(\n\t            zrUtil.bind(ecModel.eachComponent, ecModel, 'dataZoom'),\n\t            helper.eachAxisDim,\n\t            function (model, dimNames) {\n\t                return model.get(dimNames.axisIndex);\n\t            }\n\t        );\n\n\t        var effectedModels = [];\n\n\t        ecModel.eachComponent(\n\t            {mainType: 'dataZoom', query: payload},\n\t            function (model, index) {\n\t                effectedModels.push.apply(\n\t                    effectedModels, linkedNodesFinder(model).nodes\n\t                );\n\t            }\n\t        );\n\n\t        zrUtil.each(effectedModels, function (dataZoomModel, index) {\n\t            dataZoomModel.setRawRange({\n\t                start: payload.start,\n\t                end: payload.end,\n\t                startValue: payload.startValue,\n\t                endValue: payload.endValue\n\t            });\n\t        });\n\n\t    });\n\n\n\n/***/ },\n/* 343 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * visualMap component entry\n\t */\n\n\n\t    __webpack_require__(344);\n\t    __webpack_require__(355);\n\n\n\n/***/ },\n/* 344 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * DataZoom component entry\n\t */\n\n\n\t    __webpack_require__(1).registerPreprocessor(\n\t        __webpack_require__(345)\n\t    );\n\n\t    __webpack_require__(346);\n\t    __webpack_require__(347);\n\t    __webpack_require__(348);\n\t    __webpack_require__(351);\n\t    __webpack_require__(354);\n\n\n\n/***/ },\n/* 345 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file VisualMap preprocessor\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var each = zrUtil.each;\n\n\t    module.exports = function (option) {\n\t        var visualMap = option && option.visualMap;\n\n\t        if (!zrUtil.isArray(visualMap)) {\n\t            visualMap = visualMap ? [visualMap] : [];\n\t        }\n\n\t        each(visualMap, function (opt) {\n\t            if (!opt) {\n\t                return;\n\t            }\n\n\t            // rename splitList to pieces\n\t            if (has(opt, 'splitList') && !has(opt, 'pieces')) {\n\t                opt.pieces = opt.splitList;\n\t                delete opt.splitList;\n\t            }\n\n\t            var pieces = opt.pieces;\n\t            if (pieces && zrUtil.isArray(pieces)) {\n\t                each(pieces, function (piece) {\n\t                    if (zrUtil.isObject(piece)) {\n\t                        if (has(piece, 'start') && !has(piece, 'min')) {\n\t                            piece.min = piece.start;\n\t                        }\n\t                        if (has(piece, 'end') && !has(piece, 'max')) {\n\t                            piece.max = piece.end;\n\t                        }\n\t                    }\n\t                });\n\t            }\n\t        });\n\t    };\n\n\t    function has(obj, name) {\n\t        return obj && obj.hasOwnProperty && obj.hasOwnProperty(name);\n\t    }\n\n\n\n/***/ },\n/* 346 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    __webpack_require__(19).registerSubTypeDefaulter('visualMap', function (option) {\n\t        // Compatible with ec2, when splitNumber === 0, continuous visualMap will be used.\n\t        return (\n\t                !option.categories\n\t                && (\n\t                    !(\n\t                        option.pieces\n\t                            ? option.pieces.length > 0\n\t                            : option.splitNumber > 0\n\t                    )\n\t                    || option.calculable\n\t                )\n\t            )\n\t            ? 'continuous' : 'piecewise';\n\t    });\n\n\n\n/***/ },\n/* 347 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Data range visual coding.\n\t */\n\n\n\t    var echarts = __webpack_require__(1);\n\t    var visualSolution = __webpack_require__(320);\n\t    var VisualMapping = __webpack_require__(195);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    echarts.registerVisual(echarts.PRIORITY.VISUAL.COMPONENT, function (ecModel) {\n\t        ecModel.eachComponent('visualMap', function (visualMapModel) {\n\t            processSingleVisualMap(visualMapModel, ecModel);\n\t        });\n\n\t        prepareVisualMeta(ecModel);\n\t    });\n\n\t    function processSingleVisualMap(visualMapModel, ecModel) {\n\t        visualMapModel.eachTargetSeries(function (seriesModel) {\n\t            var data = seriesModel.getData();\n\n\t            visualSolution.applyVisual(\n\t                visualMapModel.stateList,\n\t                visualMapModel.targetVisuals,\n\t                data,\n\t                visualMapModel.getValueState,\n\t                visualMapModel,\n\t                visualMapModel.getDataDimension(data)\n\t            );\n\t        });\n\t    }\n\n\t    // Only support color.\n\t    function prepareVisualMeta(ecModel) {\n\t        ecModel.eachSeries(function (seriesModel) {\n\t            var data = seriesModel.getData();\n\t            var visualMetaList = [];\n\n\t            ecModel.eachComponent('visualMap', function (visualMapModel) {\n\t                if (visualMapModel.isTargetSeries(seriesModel)) {\n\t                    var visualMeta = visualMapModel.getVisualMeta(\n\t                        zrUtil.bind(getColorVisual, null, seriesModel, visualMapModel)\n\t                    ) || {stops: [], outerColors: []};\n\t                    visualMeta.dimension = visualMapModel.getDataDimension(data);\n\t                    visualMetaList.push(visualMeta);\n\t                }\n\t            });\n\n\t            // console.log(JSON.stringify(visualMetaList.map(a => a.stops)));\n\t            seriesModel.getData().setVisual('visualMeta', visualMetaList);\n\t        });\n\t    }\n\n\t    // FIXME\n\t    // performance and export for heatmap?\n\t    // value can be Infinity or -Infinity\n\t    function getColorVisual(seriesModel, visualMapModel, value, valueState) {\n\t        var mappings = visualMapModel.targetVisuals[valueState];\n\t        var visualTypes = VisualMapping.prepareVisualTypes(mappings);\n\t        var resultVisual = {\n\t            color: seriesModel.getData().getVisual('color') // default color.\n\t        };\n\n\t        for (var i = 0, len = visualTypes.length; i < len; i++) {\n\t            var type = visualTypes[i];\n\t            var mapping = mappings[\n\t                type === 'opacity' ? '__alphaForOpacity' : type\n\t            ];\n\t            mapping && mapping.applyVisual(value, getVisual, setVisual);\n\t        }\n\n\t        return resultVisual.color;\n\n\t        function getVisual(key) {\n\t            return resultVisual[key];\n\t        }\n\n\t        function setVisual(key, value) {\n\t            resultVisual[key] = value;\n\t        }\n\t    }\n\n\n\n\n/***/ },\n/* 348 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Data zoom model\n\t */\n\n\n\t    var VisualMapModel = __webpack_require__(349);\n\t    var zrUtil = __webpack_require__(4);\n\t    var numberUtil = __webpack_require__(7);\n\n\t    // Constant\n\t    var DEFAULT_BAR_BOUND = [20, 140];\n\n\t    var ContinuousModel = VisualMapModel.extend({\n\n\t        type: 'visualMap.continuous',\n\n\t        /**\n\t         * @protected\n\t         */\n\t        defaultOption: {\n\t            align: 'auto',          // 'auto', 'left', 'right', 'top', 'bottom'\n\t            calculable: false,      // This prop effect default component type determine,\n\t                                    // See echarts/component/visualMap/typeDefaulter.\n\t            range: null,            // selected range. In default case `range` is [min, max]\n\t                                    // and can auto change along with modification of min max,\n\t                                    // util use specifid a range.\n\t            realtime: true,         // Whether realtime update.\n\t            itemHeight: null,       // The length of the range control edge.\n\t            itemWidth: null,        // The length of the other side.\n\t            hoverLink: true,        // Enable hover highlight.\n\t            hoverLinkDataSize: null,// The size of hovered data.\n\t            hoverLinkOnHandle: true // Whether trigger hoverLink when hover handle.\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        optionUpdated: function (newOption, isInit) {\n\t            ContinuousModel.superApply(this, 'optionUpdated', arguments);\n\n\t            this.resetTargetSeries();\n\t            this.resetExtent();\n\n\t            this.resetVisual(function (mappingOption) {\n\t                mappingOption.mappingMethod = 'linear';\n\t                mappingOption.dataExtent = this.getExtent();\n\t            });\n\n\t            this._resetRange();\n\t        },\n\n\t        /**\n\t         * @protected\n\t         * @override\n\t         */\n\t        resetItemSize: function () {\n\t            ContinuousModel.superApply(this, 'resetItemSize', arguments);\n\n\t            var itemSize = this.itemSize;\n\n\t            this._orient === 'horizontal' && itemSize.reverse();\n\n\t            (itemSize[0] == null || isNaN(itemSize[0])) && (itemSize[0] = DEFAULT_BAR_BOUND[0]);\n\t            (itemSize[1] == null || isNaN(itemSize[1])) && (itemSize[1] = DEFAULT_BAR_BOUND[1]);\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _resetRange: function () {\n\t            var dataExtent = this.getExtent();\n\t            var range = this.option.range;\n\n\t            if (!range || range.auto) {\n\t                // `range` should always be array (so we dont use other\n\t                // value like 'auto') for user-friend. (consider getOption).\n\t                dataExtent.auto = 1;\n\t                this.option.range = dataExtent;\n\t            }\n\t            else if (zrUtil.isArray(range)) {\n\t                if (range[0] > range[1]) {\n\t                    range.reverse();\n\t                }\n\t                range[0] = Math.max(range[0], dataExtent[0]);\n\t                range[1] = Math.min(range[1], dataExtent[1]);\n\t            }\n\t        },\n\n\t        /**\n\t         * @protected\n\t         * @override\n\t         */\n\t        completeVisualOption: function () {\n\t            VisualMapModel.prototype.completeVisualOption.apply(this, arguments);\n\n\t            zrUtil.each(this.stateList, function (state) {\n\t                var symbolSize = this.option.controller[state].symbolSize;\n\t                if (symbolSize && symbolSize[0] !== symbolSize[1]) {\n\t                    symbolSize[0] = 0; // For good looking.\n\t                }\n\t            }, this);\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        setSelected: function (selected) {\n\t            this.option.range = selected.slice();\n\t            this._resetRange();\n\t        },\n\n\t        /**\n\t         * @public\n\t         */\n\t        getSelected: function () {\n\t            var dataExtent = this.getExtent();\n\n\t            var dataInterval = numberUtil.asc(\n\t                (this.get('range') || []).slice()\n\t            );\n\n\t            // Clamp\n\t            dataInterval[0] > dataExtent[1] && (dataInterval[0] = dataExtent[1]);\n\t            dataInterval[1] > dataExtent[1] && (dataInterval[1] = dataExtent[1]);\n\t            dataInterval[0] < dataExtent[0] && (dataInterval[0] = dataExtent[0]);\n\t            dataInterval[1] < dataExtent[0] && (dataInterval[1] = dataExtent[0]);\n\n\t            return dataInterval;\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        getValueState: function (value) {\n\t            var range = this.option.range;\n\t            var dataExtent = this.getExtent();\n\n\t            // When range[0] === dataExtent[0], any value larger than dataExtent[0] maps to 'inRange'.\n\t            // range[1] is processed likewise.\n\t            return (\n\t                (range[0] <= dataExtent[0] || range[0] <= value)\n\t                && (range[1] >= dataExtent[1] || value <= range[1])\n\t            ) ? 'inRange' : 'outOfRange';\n\t        },\n\n\t        /**\n\t         * @params {Array.<number>} range target value: range[0] <= value && value <= range[1]\n\t         * @return {Array.<Object>} [{seriesId, dataIndices: <Array.<number>>}, ...]\n\t         */\n\t        findTargetDataIndices: function (range) {\n\t            var result = [];\n\n\t            this.eachTargetSeries(function (seriesModel) {\n\t                var dataIndices = [];\n\t                var data = seriesModel.getData();\n\n\t                data.each(this.getDataDimension(data), function (value, dataIndex) {\n\t                    range[0] <= value && value <= range[1] && dataIndices.push(dataIndex);\n\t                }, true, this);\n\n\t                result.push({seriesId: seriesModel.id, dataIndex: dataIndices});\n\t            }, this);\n\n\t            return result;\n\t        },\n\n\t        /**\n\t         * @implement\n\t         */\n\t        getVisualMeta: function (getColorVisual) {\n\t            var oVals = getColorStopValues(this, 'outOfRange', this.getExtent());\n\t            var iVals = getColorStopValues(this, 'inRange', this.option.range.slice());\n\t            var stops = [];\n\n\t            function setStop(value, valueState) {\n\t                stops.push({\n\t                    value: value,\n\t                    color: getColorVisual(value, valueState)\n\t                });\n\t            }\n\n\t            // Format to: outOfRange -- inRange -- outOfRange.\n\t            var iIdx = 0;\n\t            var oIdx = 0;\n\t            var iLen = iVals.length;\n\t            var oLen = oVals.length;\n\n\t            for (; oIdx < oLen && (!iVals.length || oVals[oIdx] <= iVals[0]); oIdx++) {\n\t                // If oVal[oIdx] === iVals[iIdx], oVal[oIdx] should be ignored.\n\t                if (oVals[oIdx] < iVals[iIdx]) {\n\t                    setStop(oVals[oIdx], 'outOfRange');\n\t                }\n\t            }\n\t            for (var first = 1; iIdx < iLen; iIdx++, first = 0) {\n\t                // If range is full, value beyond min, max will be clamped.\n\t                // make a singularity\n\t                first && stops.length && setStop(iVals[iIdx], 'outOfRange');\n\t                setStop(iVals[iIdx], 'inRange');\n\t            }\n\t            for (var first = 1; oIdx < oLen; oIdx++) {\n\t                if (!iVals.length || iVals[iVals.length - 1] < oVals[oIdx]) {\n\t                    // make a singularity\n\t                    if (first) {\n\t                        stops.length && setStop(stops[stops.length - 1].value, 'outOfRange');\n\t                        first = 0;\n\t                    }\n\t                    setStop(oVals[oIdx], 'outOfRange');\n\t                }\n\t            }\n\n\t            var stopsLen = stops.length;\n\n\t            return {\n\t                stops: stops,\n\t                outerColors: [\n\t                    stopsLen ? stops[0].color : 'transparent',\n\t                    stopsLen ? stops[stopsLen - 1].color : 'transparent'\n\t                ]\n\t            };\n\t        }\n\n\t    });\n\n\t    function getColorStopValues(visualMapModel, valueState, dataExtent) {\n\t        if (dataExtent[0] === dataExtent[1]) {\n\t            return dataExtent.slice();\n\t        }\n\n\t        // When using colorHue mapping, it is not linear color any more.\n\t        // Moreover, canvas gradient seems not to be accurate linear.\n\t        // FIXME\n\t        // Should be arbitrary value 100? or based on pixel size?\n\t        var count = 200;\n\t        var step = (dataExtent[1] - dataExtent[0]) / count;\n\n\t        var value = dataExtent[0];\n\t        var stopValues = [];\n\t        for (var i = 0; i <= count && value < dataExtent[1]; i++) {\n\t            stopValues.push(value);\n\t            value += step;\n\t        }\n\t        stopValues.push(dataExtent[1]);\n\n\t        return stopValues;\n\t    }\n\n\t    module.exports = ContinuousModel;\n\n\n\n/***/ },\n/* 349 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Controller visual map model\n\t */\n\n\n\t    var echarts = __webpack_require__(1);\n\t    var zrUtil = __webpack_require__(4);\n\t    var env = __webpack_require__(2);\n\t    var visualDefault = __webpack_require__(350);\n\t    var VisualMapping = __webpack_require__(195);\n\t    var visualSolution = __webpack_require__(320);\n\t    var mapVisual = VisualMapping.mapVisual;\n\t    var modelUtil = __webpack_require__(5);\n\t    var eachVisual = VisualMapping.eachVisual;\n\t    var numberUtil = __webpack_require__(7);\n\t    var isArray = zrUtil.isArray;\n\t    var each = zrUtil.each;\n\t    var asc = numberUtil.asc;\n\t    var linearMap = numberUtil.linearMap;\n\t    var noop = zrUtil.noop;\n\n\t    var DEFAULT_COLOR = ['#f6efa6', '#d88273', '#bf444c'];\n\n\t    var VisualMapModel = echarts.extendComponentModel({\n\n\t        type: 'visualMap',\n\n\t        dependencies: ['series'],\n\n\t        /**\n\t         * @readOnly\n\t         * @type {Array.<string>}\n\t         */\n\t        stateList: ['inRange', 'outOfRange'],\n\n\t        /**\n\t         * @readOnly\n\t         * @type {Array.<string>}\n\t         */\n\t        replacableOptionKeys: [\n\t            'inRange', 'outOfRange', 'target', 'controller', 'color'\n\t        ],\n\n\t        /**\n\t         * [lowerBound, upperBound]\n\t         *\n\t         * @readOnly\n\t         * @type {Array.<number>}\n\t         */\n\t        dataBound: [-Infinity, Infinity],\n\n\t        /**\n\t         * @readOnly\n\t         * @type {string|Object}\n\t         */\n\t        layoutMode: {type: 'box', ignoreSize: true},\n\n\t        /**\n\t         * @protected\n\t         */\n\t        defaultOption: {\n\t            show: true,\n\n\t            zlevel: 0,\n\t            z: 4,\n\n\t            seriesIndex: null,       // 所控制的series indices，默认所有有value的series.\n\n\t                                    // set min: 0, max: 200, only for campatible with ec2.\n\t                                    // In fact min max should not have default value.\n\t            min: 0,                 // min value, must specified if pieces is not specified.\n\t            max: 200,               // max value, must specified if pieces is not specified.\n\n\t            dimension: null,\n\t            inRange: null,          // 'color', 'colorHue', 'colorSaturation', 'colorLightness', 'colorAlpha',\n\t                                    // 'symbol', 'symbolSize'\n\t            outOfRange: null,       // 'color', 'colorHue', 'colorSaturation',\n\t                                    // 'colorLightness', 'colorAlpha',\n\t                                    // 'symbol', 'symbolSize'\n\n\t            left: 0,                // 'center' ¦ 'left' ¦ 'right' ¦ {number} (px)\n\t            right: null,            // The same as left.\n\t            top: null,              // 'top' ¦ 'bottom' ¦ 'center' ¦ {number} (px)\n\t            bottom: 0,              // The same as top.\n\n\t            itemWidth: null,\n\t            itemHeight: null,\n\t            inverse: false,\n\t            orient: 'vertical',        // 'horizontal' ¦ 'vertical'\n\n\t            backgroundColor: 'rgba(0,0,0,0)',\n\t            borderColor: '#ccc',       // 值域边框颜色\n\t            contentColor: '#5793f3',\n\t            inactiveColor: '#aaa',\n\t            borderWidth: 0,            // 值域边框线宽，单位px，默认为0（无边框）\n\t            padding: 5,                // 值域内边距，单位px，默认各方向内边距为5，\n\t                                       // 接受数组分别设定上右下左边距，同css\n\t            textGap: 10,               //\n\t            precision: 0,              // 小数精度，默认为0，无小数点\n\t            color: null,               //颜色（deprecated，兼容ec2，顺序同pieces，不同于inRange/outOfRange）\n\n\t            formatter: null,\n\t            text: null,                // 文本，如['高', '低']，兼容ec2，text[0]对应高值，text[1]对应低值\n\t            textStyle: {\n\t                color: '#333'          // 值域文字颜色\n\t            }\n\t        },\n\n\t        /**\n\t         * @protected\n\t         */\n\t        init: function (option, parentModel, ecModel) {\n\n\t            /**\n\t             * @private\n\t             * @type {Array.<number>}\n\t             */\n\t            this._dataExtent;\n\n\t            /**\n\t             * @readOnly\n\t             */\n\t            this.targetVisuals = {};\n\n\t            /**\n\t             * @readOnly\n\t             */\n\t            this.controllerVisuals = {};\n\n\t            /**\n\t             * @readOnly\n\t             */\n\t            this.textStyleModel;\n\n\t            /**\n\t             * [width, height]\n\t             * @readOnly\n\t             * @type {Array.<number>}\n\t             */\n\t            this.itemSize;\n\n\t            this.mergeDefaultAndTheme(option, ecModel);\n\t        },\n\n\t        /**\n\t         * @protected\n\t         */\n\t        optionUpdated: function (newOption, isInit) {\n\t            var thisOption = this.option;\n\n\t            // FIXME\n\t            // necessary?\n\t            // Disable realtime view update if canvas is not supported.\n\t            if (!env.canvasSupported) {\n\t                thisOption.realtime = false;\n\t            }\n\n\t            !isInit && visualSolution.replaceVisualOption(\n\t                thisOption, newOption, this.replacableOptionKeys\n\t            );\n\n\t            this.textStyleModel = this.getModel('textStyle');\n\n\t            this.resetItemSize();\n\n\t            this.completeVisualOption();\n\t        },\n\n\t        /**\n\t         * @protected\n\t         */\n\t        resetVisual: function (supplementVisualOption) {\n\t            var stateList = this.stateList;\n\t            supplementVisualOption = zrUtil.bind(supplementVisualOption, this);\n\n\t            this.controllerVisuals = visualSolution.createVisualMappings(\n\t                this.option.controller, stateList, supplementVisualOption\n\t            );\n\t            this.targetVisuals = visualSolution.createVisualMappings(\n\t                this.option.target, stateList, supplementVisualOption\n\t            );\n\t        },\n\n\n\t        /**\n\t         * @protected\n\t         */\n\t        resetTargetSeries: function () {\n\t            var thisOption = this.option;\n\t            var allSeriesIndex = thisOption.seriesIndex == null;\n\t            thisOption.seriesIndex = allSeriesIndex\n\t                ? [] : modelUtil.normalizeToArray(thisOption.seriesIndex);\n\n\t            allSeriesIndex && this.ecModel.eachSeries(function (seriesModel, index) {\n\t                thisOption.seriesIndex.push(index);\n\t            });\n\t        },\n\n\t        /**\n\t         * @public\n\t         */\n\t        eachTargetSeries: function (callback, context) {\n\t            zrUtil.each(this.option.seriesIndex, function (seriesIndex) {\n\t                callback.call(context, this.ecModel.getSeriesByIndex(seriesIndex));\n\t            }, this);\n\t        },\n\n\t        /**\n\t         * @pubilc\n\t         */\n\t        isTargetSeries: function (seriesModel) {\n\t            var is = false;\n\t            this.eachTargetSeries(function (model) {\n\t                model === seriesModel && (is = true);\n\t            });\n\t            return is;\n\t        },\n\n\t        /**\n\t         * @example\n\t         * this.formatValueText(someVal); // format single numeric value to text.\n\t         * this.formatValueText(someVal, true); // format single category value to text.\n\t         * this.formatValueText([min, max]); // format numeric min-max to text.\n\t         * this.formatValueText([this.dataBound[0], max]); // using data lower bound.\n\t         * this.formatValueText([min, this.dataBound[1]]); // using data upper bound.\n\t         *\n\t         * @param {number|Array.<number>} value Real value, or this.dataBound[0 or 1].\n\t         * @param {boolean} [isCategory=false] Only available when value is number.\n\t         * @param {Array.<string>} edgeSymbols Open-close symbol when value is interval.\n\t         * @return {string}\n\t         * @protected\n\t         */\n\t        formatValueText: function(value, isCategory, edgeSymbols) {\n\t            var option = this.option;\n\t            var precision = option.precision;\n\t            var dataBound = this.dataBound;\n\t            var formatter = option.formatter;\n\t            var isMinMax;\n\t            var textValue;\n\t            edgeSymbols = edgeSymbols || ['<', '>'];\n\n\t            if (zrUtil.isArray(value)) {\n\t                value = value.slice();\n\t                isMinMax = true;\n\t            }\n\n\t            textValue = isCategory\n\t                ? value\n\t                : (isMinMax\n\t                    ? [toFixed(value[0]), toFixed(value[1])]\n\t                    : toFixed(value)\n\t                );\n\n\t            if (zrUtil.isString(formatter)) {\n\t                return formatter\n\t                    .replace('{value}', isMinMax ? textValue[0] : textValue)\n\t                    .replace('{value2}', isMinMax ? textValue[1] : textValue);\n\t            }\n\t            else if (zrUtil.isFunction(formatter)) {\n\t                return isMinMax\n\t                    ? formatter(value[0], value[1])\n\t                    : formatter(value);\n\t            }\n\n\t            if (isMinMax) {\n\t                if (value[0] === dataBound[0]) {\n\t                    return edgeSymbols[0] + ' ' + textValue[1];\n\t                }\n\t                else if (value[1] === dataBound[1]) {\n\t                    return edgeSymbols[1] + ' ' + textValue[0];\n\t                }\n\t                else {\n\t                    return textValue[0] + ' - ' + textValue[1];\n\t                }\n\t            }\n\t            else { // Format single value (includes category case).\n\t                return textValue;\n\t            }\n\n\t            function toFixed(val) {\n\t                return val === dataBound[0]\n\t                    ? 'min'\n\t                    : val === dataBound[1]\n\t                    ? 'max'\n\t                    : (+val).toFixed(precision);\n\t            }\n\t        },\n\n\t        /**\n\t         * @protected\n\t         */\n\t        resetExtent: function () {\n\t            var thisOption = this.option;\n\n\t            // Can not calculate data extent by data here.\n\t            // Because series and data may be modified in processing stage.\n\t            // So we do not support the feature \"auto min/max\".\n\n\t            var extent = asc([thisOption.min, thisOption.max]);\n\n\t            this._dataExtent = extent;\n\t        },\n\n\t        /**\n\t         * @public\n\t         * @param {module:echarts/data/List} list\n\t         * @return {string} Concrete dimention. If return null/undefined,\n\t         *                  no dimension used.\n\t         */\n\t        getDataDimension: function (list) {\n\t            var optDim = this.option.dimension;\n\t            return optDim != null\n\t                ? optDim : list.dimensions.length - 1;\n\t        },\n\n\t        /**\n\t         * @public\n\t         * @override\n\t         */\n\t        getExtent: function () {\n\t            return this._dataExtent.slice();\n\t        },\n\n\t        /**\n\t         * @protected\n\t         */\n\t        completeVisualOption: function () {\n\t            var thisOption = this.option;\n\t            var base = {inRange: thisOption.inRange, outOfRange: thisOption.outOfRange};\n\n\t            var target = thisOption.target || (thisOption.target = {});\n\t            var controller = thisOption.controller || (thisOption.controller = {});\n\n\t            zrUtil.merge(target, base); // Do not override\n\t            zrUtil.merge(controller, base); // Do not override\n\n\t            var isCategory = this.isCategory();\n\n\t            completeSingle.call(this, target);\n\t            completeSingle.call(this, controller);\n\t            completeInactive.call(this, target, 'inRange', 'outOfRange');\n\t            // completeInactive.call(this, target, 'outOfRange', 'inRange');\n\t            completeController.call(this, controller);\n\n\t            function completeSingle(base) {\n\t                // Compatible with ec2 dataRange.color.\n\t                // The mapping order of dataRange.color is: [high value, ..., low value]\n\t                // whereas inRange.color and outOfRange.color is [low value, ..., high value]\n\t                // Notice: ec2 has no inverse.\n\t                if (isArray(thisOption.color)\n\t                    // If there has been inRange: {symbol: ...}, adding color is a mistake.\n\t                    // So adding color only when no inRange defined.\n\t                    && !base.inRange\n\t                ) {\n\t                    base.inRange = {color: thisOption.color.slice().reverse()};\n\t                }\n\n\t                // Compatible with previous logic, always give a defautl color, otherwise\n\t                // simple config with no inRange and outOfRange will not work.\n\t                // Originally we use visualMap.color as the default color, but setOption at\n\t                // the second time the default color will be erased. So we change to use\n\t                // constant DEFAULT_COLOR.\n\t                // If user do not want the defualt color, set inRange: {color: null}.\n\t                base.inRange = base.inRange || {color: DEFAULT_COLOR};\n\n\t                // If using shortcut like: {inRange: 'symbol'}, complete default value.\n\t                each(this.stateList, function (state) {\n\t                    var visualType = base[state];\n\n\t                    if (zrUtil.isString(visualType)) {\n\t                        var defa = visualDefault.get(visualType, 'active', isCategory);\n\t                        if (defa) {\n\t                            base[state] = {};\n\t                            base[state][visualType] = defa;\n\t                        }\n\t                        else {\n\t                            // Mark as not specified.\n\t                            delete base[state];\n\t                        }\n\t                    }\n\t                }, this);\n\t            }\n\n\t            function completeInactive(base, stateExist, stateAbsent) {\n\t                var optExist = base[stateExist];\n\t                var optAbsent = base[stateAbsent];\n\n\t                if (optExist && !optAbsent) {\n\t                    optAbsent = base[stateAbsent] = {};\n\t                    each(optExist, function (visualData, visualType) {\n\t                        if (!VisualMapping.isValidType(visualType)) {\n\t                            return;\n\t                        }\n\n\t                        var defa = visualDefault.get(visualType, 'inactive', isCategory);\n\n\t                        if (defa != null) {\n\t                            optAbsent[visualType] = defa;\n\n\t                            // Compatibable with ec2:\n\t                            // Only inactive color to rgba(0,0,0,0) can not\n\t                            // make label transparent, so use opacity also.\n\t                            if (visualType === 'color'\n\t                                && !optAbsent.hasOwnProperty('opacity')\n\t                                && !optAbsent.hasOwnProperty('colorAlpha')\n\t                            ) {\n\t                                optAbsent.opacity = [0, 0];\n\t                            }\n\t                        }\n\t                    });\n\t                }\n\t            }\n\n\t            function completeController(controller) {\n\t                var symbolExists = (controller.inRange || {}).symbol\n\t                    || (controller.outOfRange || {}).symbol;\n\t                var symbolSizeExists = (controller.inRange || {}).symbolSize\n\t                    || (controller.outOfRange || {}).symbolSize;\n\t                var inactiveColor = this.get('inactiveColor');\n\n\t                each(this.stateList, function (state) {\n\n\t                    var itemSize = this.itemSize;\n\t                    var visuals = controller[state];\n\n\t                    // Set inactive color for controller if no other color\n\t                    // attr (like colorAlpha) specified.\n\t                    if (!visuals) {\n\t                        visuals = controller[state] = {\n\t                            color: isCategory ? inactiveColor : [inactiveColor]\n\t                        };\n\t                    }\n\n\t                    // Consistent symbol and symbolSize if not specified.\n\t                    if (visuals.symbol == null) {\n\t                        visuals.symbol = symbolExists\n\t                            && zrUtil.clone(symbolExists)\n\t                            || (isCategory ? 'roundRect' : ['roundRect']);\n\t                    }\n\t                    if (visuals.symbolSize == null) {\n\t                        visuals.symbolSize = symbolSizeExists\n\t                            && zrUtil.clone(symbolSizeExists)\n\t                            || (isCategory ? itemSize[0] : [itemSize[0], itemSize[0]]);\n\t                    }\n\n\t                    // Filter square and none.\n\t                    visuals.symbol = mapVisual(visuals.symbol, function (symbol) {\n\t                        return (symbol === 'none' || symbol === 'square') ? 'roundRect' : symbol;\n\t                    });\n\n\t                    // Normalize symbolSize\n\t                    var symbolSize = visuals.symbolSize;\n\n\t                    if (symbolSize != null) {\n\t                        var max = -Infinity;\n\t                        // symbolSize can be object when categories defined.\n\t                        eachVisual(symbolSize, function (value) {\n\t                            value > max && (max = value);\n\t                        });\n\t                        visuals.symbolSize = mapVisual(symbolSize, function (value) {\n\t                            return linearMap(value, [0, max], [0, itemSize[0]], true);\n\t                        });\n\t                    }\n\n\t                }, this);\n\t            }\n\t        },\n\n\t        /**\n\t         * @protected\n\t         */\n\t        resetItemSize: function () {\n\t            this.itemSize = [\n\t                parseFloat(this.get('itemWidth')),\n\t                parseFloat(this.get('itemHeight'))\n\t            ];\n\t        },\n\n\t        /**\n\t         * @public\n\t         */\n\t        isCategory: function () {\n\t            return !!this.option.categories;\n\t        },\n\n\t        /**\n\t         * @public\n\t         * @abstract\n\t         */\n\t        setSelected: noop,\n\n\t        /**\n\t         * @public\n\t         * @abstract\n\t         * @param {*|module:echarts/data/List} valueOrData\n\t         * @param {number} dataIndex\n\t         * @return {string} state See this.stateList\n\t         */\n\t        getValueState: noop,\n\n\t        /**\n\t         * FIXME\n\t         * Do not publish to thirt-part-dev temporarily\n\t         * util the interface is stable. (Should it return\n\t         * a function but not visual meta?)\n\t         *\n\t         * @pubilc\n\t         * @abstract\n\t         * @param {Function} getColorVisual\n\t         *        params: value, valueState\n\t         *        return: color\n\t         * @return {Object} visualMeta\n\t         *        should includes {stops, outerColors}\n\t         *        outerColor means [colorBeyondMinValue, colorBeyondMaxValue]\n\t         */\n\t        getVisualMeta: noop\n\n\t    });\n\n\t    module.exports = VisualMapModel;\n\n\n\n/***/ },\n/* 350 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Visual mapping.\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var visualDefault = {\n\n\t        /**\n\t         * @public\n\t         */\n\t        get: function (visualType, key, isCategory) {\n\t            var value = zrUtil.clone(\n\t                (defaultOption[visualType] || {})[key]\n\t            );\n\n\t            return isCategory\n\t                ? (zrUtil.isArray(value) ? value[value.length - 1] : value)\n\t                : value;\n\t        }\n\n\t    };\n\n\t    var defaultOption = {\n\n\t        color: {\n\t            active: ['#006edd', '#e0ffff'],\n\t            inactive: ['rgba(0,0,0,0)']\n\t        },\n\n\t        colorHue: {\n\t            active: [0, 360],\n\t            inactive: [0, 0]\n\t        },\n\n\t        colorSaturation: {\n\t            active: [0.3, 1],\n\t            inactive: [0, 0]\n\t        },\n\n\t        colorLightness: {\n\t            active: [0.9, 0.5],\n\t            inactive: [0, 0]\n\t        },\n\n\t        colorAlpha: {\n\t            active: [0.3, 1],\n\t            inactive: [0, 0]\n\t        },\n\n\t        opacity: {\n\t            active: [0.3, 1],\n\t            inactive: [0, 0]\n\t        },\n\n\t        symbol: {\n\t            active: ['circle', 'roundRect', 'diamond'],\n\t            inactive: ['none']\n\t        },\n\n\t        symbolSize: {\n\t            active: [10, 50],\n\t            inactive: [0, 0]\n\t        }\n\t    };\n\n\t    module.exports = visualDefault;\n\n\n\n\n/***/ },\n/* 351 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var VisualMapView = __webpack_require__(352);\n\t    var graphic = __webpack_require__(43);\n\t    var zrUtil = __webpack_require__(4);\n\t    var numberUtil = __webpack_require__(7);\n\t    var sliderMove = __webpack_require__(337);\n\t    var LinearGradient = __webpack_require__(78);\n\t    var helper = __webpack_require__(353);\n\t    var modelUtil = __webpack_require__(5);\n\n\t    var linearMap = numberUtil.linearMap;\n\t    var each = zrUtil.each;\n\t    var mathMin = Math.min;\n\t    var mathMax = Math.max;\n\n\t    // Arbitrary value\n\t    var HOVER_LINK_SIZE = 12;\n\t    var HOVER_LINK_OUT = 6;\n\n\t    // Notice:\n\t    // Any \"interval\" should be by the order of [low, high].\n\t    // \"handle0\" (handleIndex === 0) maps to\n\t    // low data value: this._dataInterval[0] and has low coord.\n\t    // \"handle1\" (handleIndex === 1) maps to\n\t    // high data value: this._dataInterval[1] and has high coord.\n\t    // The logic of transform is implemented in this._createBarGroup.\n\n\t    var ContinuousView = VisualMapView.extend({\n\n\t        type: 'visualMap.continuous',\n\n\t        /**\n\t         * @override\n\t         */\n\t        init: function () {\n\n\t            ContinuousView.superApply(this, 'init', arguments);\n\n\t            /**\n\t             * @private\n\t             */\n\t            this._shapes = {};\n\n\t            /**\n\t             * @private\n\t             */\n\t            this._dataInterval = [];\n\n\t            /**\n\t             * @private\n\t             */\n\t            this._handleEnds = [];\n\n\t            /**\n\t             * @private\n\t             */\n\t            this._orient;\n\n\t            /**\n\t             * @private\n\t             */\n\t            this._useHandle;\n\n\t            /**\n\t             * @private\n\t             */\n\t            this._hoverLinkDataIndices = [];\n\n\t            /**\n\t             * @private\n\t             */\n\t            this._dragging;\n\n\t            /**\n\t             * @private\n\t             */\n\t            this._hovering;\n\t        },\n\n\t        /**\n\t         * @protected\n\t         * @override\n\t         */\n\t        doRender: function (visualMapModel, ecModel, api, payload) {\n\t            if (!payload || payload.type !== 'selectDataRange' || payload.from !== this.uid) {\n\t                this._buildView();\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _buildView: function () {\n\t            this.group.removeAll();\n\n\t            var visualMapModel = this.visualMapModel;\n\t            var thisGroup = this.group;\n\n\t            this._orient = visualMapModel.get('orient');\n\t            this._useHandle = visualMapModel.get('calculable');\n\n\t            this._resetInterval();\n\n\t            this._renderBar(thisGroup);\n\n\t            var dataRangeText = visualMapModel.get('text');\n\t            this._renderEndsText(thisGroup, dataRangeText, 0);\n\t            this._renderEndsText(thisGroup, dataRangeText, 1);\n\n\t            // Do this for background size calculation.\n\t            this._updateView(true);\n\n\t            // After updating view, inner shapes is built completely,\n\t            // and then background can be rendered.\n\t            this.renderBackground(thisGroup);\n\n\t            // Real update view\n\t            this._updateView();\n\n\t            this._enableHoverLinkToSeries();\n\t            this._enableHoverLinkFromSeries();\n\n\t            this.positionGroup(thisGroup);\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _renderEndsText: function (group, dataRangeText, endsIndex) {\n\t            if (!dataRangeText) {\n\t                return;\n\t            }\n\n\t            // Compatible with ec2, text[0] map to high value, text[1] map low value.\n\t            var text = dataRangeText[1 - endsIndex];\n\t            text = text != null ? text + '' : '';\n\n\t            var visualMapModel = this.visualMapModel;\n\t            var textGap = visualMapModel.get('textGap');\n\t            var itemSize = visualMapModel.itemSize;\n\n\t            var barGroup = this._shapes.barGroup;\n\t            var position = this._applyTransform(\n\t                [\n\t                    itemSize[0] / 2,\n\t                    endsIndex === 0 ? -textGap : itemSize[1] + textGap\n\t                ],\n\t                barGroup\n\t            );\n\t            var align = this._applyTransform(\n\t                endsIndex === 0 ? 'bottom' : 'top',\n\t                barGroup\n\t            );\n\t            var orient = this._orient;\n\t            var textStyleModel = this.visualMapModel.textStyleModel;\n\n\t            this.group.add(new graphic.Text({\n\t                style: {\n\t                    x: position[0],\n\t                    y: position[1],\n\t                    textVerticalAlign: orient === 'horizontal' ? 'middle' : align,\n\t                    textAlign: orient === 'horizontal' ? align : 'center',\n\t                    text: text,\n\t                    textFont: textStyleModel.getFont(),\n\t                    fill: textStyleModel.getTextColor()\n\t                }\n\t            }));\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _renderBar: function (targetGroup) {\n\t            var visualMapModel = this.visualMapModel;\n\t            var shapes = this._shapes;\n\t            var itemSize = visualMapModel.itemSize;\n\t            var orient = this._orient;\n\t            var useHandle = this._useHandle;\n\t            var itemAlign = helper.getItemAlign(visualMapModel, this.api, itemSize);\n\t            var barGroup = shapes.barGroup = this._createBarGroup(itemAlign);\n\n\t            // Bar\n\t            barGroup.add(shapes.outOfRange = createPolygon());\n\t            barGroup.add(shapes.inRange = createPolygon(\n\t                null,\n\t                useHandle ? 'move' : null,\n\t                zrUtil.bind(this._dragHandle, this, 'all', false),\n\t                zrUtil.bind(this._dragHandle, this, 'all', true)\n\t            ));\n\n\t            var textRect = visualMapModel.textStyleModel.getTextRect('国');\n\t            var textSize = mathMax(textRect.width, textRect.height);\n\n\t            // Handle\n\t            if (useHandle) {\n\t                shapes.handleThumbs = [];\n\t                shapes.handleLabels = [];\n\t                shapes.handleLabelPoints = [];\n\n\t                this._createHandle(barGroup, 0, itemSize, textSize, orient, itemAlign);\n\t                this._createHandle(barGroup, 1, itemSize, textSize, orient, itemAlign);\n\t            }\n\n\t            this._createIndicator(barGroup, itemSize, textSize, orient);\n\n\t            targetGroup.add(barGroup);\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _createHandle: function (barGroup, handleIndex, itemSize, textSize, orient) {\n\t            var onDrift = zrUtil.bind(this._dragHandle, this, handleIndex, false);\n\t            var onDragEnd = zrUtil.bind(this._dragHandle, this, handleIndex, true);\n\t            var handleThumb = createPolygon(\n\t                createHandlePoints(handleIndex, textSize),\n\t                'move',\n\t                onDrift,\n\t                onDragEnd\n\t            );\n\t            handleThumb.position[0] = itemSize[0];\n\t            barGroup.add(handleThumb);\n\n\t            // Text is always horizontal layout but should not be effected by\n\t            // transform (orient/inverse). So label is built separately but not\n\t            // use zrender/graphic/helper/RectText, and is located based on view\n\t            // group (according to handleLabelPoint) but not barGroup.\n\t            var textStyleModel = this.visualMapModel.textStyleModel;\n\t            var handleLabel = new graphic.Text({\n\t                draggable: true,\n\t                drift: onDrift,\n\t                ondragend: onDragEnd,\n\t                style: {\n\t                    x: 0, y: 0, text: '',\n\t                    textFont: textStyleModel.getFont(),\n\t                    fill: textStyleModel.getTextColor()\n\t                }\n\t            });\n\t            this.group.add(handleLabel);\n\n\t            var handleLabelPoint = [\n\t                orient === 'horizontal'\n\t                    ? textSize / 2\n\t                    : textSize * 1.5,\n\t                orient === 'horizontal'\n\t                    ? (handleIndex === 0 ? -(textSize * 1.5) : (textSize * 1.5))\n\t                    : (handleIndex === 0 ? -textSize / 2 : textSize / 2)\n\t            ];\n\n\t            var shapes = this._shapes;\n\t            shapes.handleThumbs[handleIndex] = handleThumb;\n\t            shapes.handleLabelPoints[handleIndex] = handleLabelPoint;\n\t            shapes.handleLabels[handleIndex] = handleLabel;\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _createIndicator: function (barGroup, itemSize, textSize, orient) {\n\t            var indicator = createPolygon([[0, 0]], 'move');\n\t            indicator.position[0] = itemSize[0];\n\t            indicator.attr({invisible: true, silent: true});\n\t            barGroup.add(indicator);\n\n\t            var textStyleModel = this.visualMapModel.textStyleModel;\n\t            var indicatorLabel = new graphic.Text({\n\t                silent: true,\n\t                invisible: true,\n\t                style: {\n\t                    x: 0, y: 0, text: '',\n\t                    textFont: textStyleModel.getFont(),\n\t                    fill: textStyleModel.getTextColor()\n\t                }\n\t            });\n\t            this.group.add(indicatorLabel);\n\n\t            var indicatorLabelPoint = [\n\t                orient === 'horizontal' ? textSize / 2 : HOVER_LINK_OUT + 3,\n\t                0\n\t            ];\n\n\t            var shapes = this._shapes;\n\t            shapes.indicator = indicator;\n\t            shapes.indicatorLabel = indicatorLabel;\n\t            shapes.indicatorLabelPoint = indicatorLabelPoint;\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _dragHandle: function (handleIndex, isEnd, dx, dy) {\n\t            if (!this._useHandle) {\n\t                return;\n\t            }\n\n\t            this._dragging = !isEnd;\n\n\t            if (!isEnd) {\n\t                // Transform dx, dy to bar coordination.\n\t                var vertex = this._applyTransform([dx, dy], this._shapes.barGroup, true);\n\t                this._updateInterval(handleIndex, vertex[1]);\n\n\t                // Considering realtime, update view should be executed\n\t                // before dispatch action.\n\t                this._updateView();\n\t            }\n\n\t            // dragEnd do not dispatch action when realtime.\n\t            if (isEnd === !this.visualMapModel.get('realtime')) { // jshint ignore:line\n\t                this.api.dispatchAction({\n\t                    type: 'selectDataRange',\n\t                    from: this.uid,\n\t                    visualMapId: this.visualMapModel.id,\n\t                    selected: this._dataInterval.slice()\n\t                });\n\t            }\n\n\t            if (isEnd) {\n\t                !this._hovering && this._clearHoverLinkToSeries();\n\t            }\n\t            else if (useHoverLinkOnHandle(this.visualMapModel)) {\n\t                this._doHoverLinkToSeries(this._handleEnds[handleIndex], false);\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _resetInterval: function () {\n\t            var visualMapModel = this.visualMapModel;\n\n\t            var dataInterval = this._dataInterval = visualMapModel.getSelected();\n\t            var dataExtent = visualMapModel.getExtent();\n\t            var sizeExtent = [0, visualMapModel.itemSize[1]];\n\n\t            this._handleEnds = [\n\t                linearMap(dataInterval[0], dataExtent, sizeExtent, true),\n\t                linearMap(dataInterval[1], dataExtent, sizeExtent, true)\n\t            ];\n\t        },\n\n\t        /**\n\t         * @private\n\t         * @param {(number|string)} handleIndex 0 or 1 or 'all'\n\t         * @param {number} dx\n\t         * @param {number} dy\n\t         */\n\t        _updateInterval: function (handleIndex, delta) {\n\t            delta = delta || 0;\n\t            var visualMapModel = this.visualMapModel;\n\t            var handleEnds = this._handleEnds;\n\n\t            sliderMove(\n\t                delta,\n\t                handleEnds,\n\t                [0, visualMapModel.itemSize[1]],\n\t                handleIndex === 'all' ? 'rigid' : 'push',\n\t                handleIndex\n\t            );\n\t            var dataExtent = visualMapModel.getExtent();\n\t            var sizeExtent = [0, visualMapModel.itemSize[1]];\n\t            // Update data interval.\n\t            this._dataInterval = [\n\t                linearMap(handleEnds[0], sizeExtent, dataExtent, true),\n\t                linearMap(handleEnds[1], sizeExtent, dataExtent, true)\n\t            ];\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _updateView: function (forSketch) {\n\t            var visualMapModel = this.visualMapModel;\n\t            var dataExtent = visualMapModel.getExtent();\n\t            var shapes = this._shapes;\n\n\t            var outOfRangeHandleEnds = [0, visualMapModel.itemSize[1]];\n\t            var inRangeHandleEnds = forSketch ? outOfRangeHandleEnds : this._handleEnds;\n\n\t            var visualInRange = this._createBarVisual(\n\t                this._dataInterval, dataExtent, inRangeHandleEnds, 'inRange'\n\t            );\n\t            var visualOutOfRange = this._createBarVisual(\n\t                dataExtent, dataExtent, outOfRangeHandleEnds, 'outOfRange'\n\t            );\n\n\t            shapes.inRange\n\t                .setStyle({\n\t                    fill: visualInRange.barColor,\n\t                    opacity: visualInRange.opacity\n\t                })\n\t                .setShape('points', visualInRange.barPoints);\n\t            shapes.outOfRange\n\t                .setStyle({\n\t                    fill: visualOutOfRange.barColor,\n\t                    opacity: visualOutOfRange.opacity\n\t                })\n\t                .setShape('points', visualOutOfRange.barPoints);\n\n\t            this._updateHandle(inRangeHandleEnds, visualInRange);\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _createBarVisual: function (dataInterval, dataExtent, handleEnds, forceState) {\n\t            var opts = {\n\t                forceState: forceState,\n\t                convertOpacityToAlpha: true\n\t            };\n\t            var colorStops = this._makeColorGradient(dataInterval, opts);\n\n\t            var symbolSizes = [\n\t                this.getControllerVisual(dataInterval[0], 'symbolSize', opts),\n\t                this.getControllerVisual(dataInterval[1], 'symbolSize', opts)\n\t            ];\n\t            var barPoints = this._createBarPoints(handleEnds, symbolSizes);\n\n\t            return {\n\t                barColor: new LinearGradient(0, 0, 0, 1, colorStops),\n\t                barPoints: barPoints,\n\t                handlesColor: [\n\t                    colorStops[0].color,\n\t                    colorStops[colorStops.length - 1].color\n\t                ]\n\t            };\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _makeColorGradient: function (dataInterval, opts) {\n\t            // Considering colorHue, which is not linear, so we have to sample\n\t            // to calculate gradient color stops, but not only caculate head\n\t            // and tail.\n\t            var sampleNumber = 100; // Arbitrary value.\n\t            var colorStops = [];\n\t            var step = (dataInterval[1] - dataInterval[0]) / sampleNumber;\n\n\t            colorStops.push({\n\t                color: this.getControllerVisual(dataInterval[0], 'color', opts),\n\t                offset: 0\n\t            });\n\n\t            for (var i = 1; i < sampleNumber; i++) {\n\t                var currValue = dataInterval[0] + step * i;\n\t                if (currValue > dataInterval[1]) {\n\t                    break;\n\t                }\n\t                colorStops.push({\n\t                    color: this.getControllerVisual(currValue, 'color', opts),\n\t                    offset: i / sampleNumber\n\t                });\n\t            }\n\n\t            colorStops.push({\n\t                color: this.getControllerVisual(dataInterval[1], 'color', opts),\n\t                offset: 1\n\t            });\n\n\t            return colorStops;\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _createBarPoints: function (handleEnds, symbolSizes) {\n\t            var itemSize = this.visualMapModel.itemSize;\n\n\t            return [\n\t                [itemSize[0] - symbolSizes[0], handleEnds[0]],\n\t                [itemSize[0], handleEnds[0]],\n\t                [itemSize[0], handleEnds[1]],\n\t                [itemSize[0] - symbolSizes[1], handleEnds[1]]\n\t            ];\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _createBarGroup: function (itemAlign) {\n\t            var orient = this._orient;\n\t            var inverse = this.visualMapModel.get('inverse');\n\n\t            return new graphic.Group(\n\t                (orient === 'horizontal' && !inverse)\n\t                ? {scale: itemAlign === 'bottom' ? [1, 1] : [-1, 1], rotation: Math.PI / 2}\n\t                : (orient === 'horizontal' && inverse)\n\t                ? {scale: itemAlign === 'bottom' ? [-1, 1] : [1, 1], rotation: -Math.PI / 2}\n\t                : (orient === 'vertical' && !inverse)\n\t                ? {scale: itemAlign === 'left' ? [1, -1] : [-1, -1]}\n\t                : {scale: itemAlign === 'left' ? [1, 1] : [-1, 1]}\n\t            );\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _updateHandle: function (handleEnds, visualInRange) {\n\t            if (!this._useHandle) {\n\t                return;\n\t            }\n\n\t            var shapes = this._shapes;\n\t            var visualMapModel = this.visualMapModel;\n\t            var handleThumbs = shapes.handleThumbs;\n\t            var handleLabels = shapes.handleLabels;\n\n\t            each([0, 1], function (handleIndex) {\n\t                var handleThumb = handleThumbs[handleIndex];\n\t                handleThumb.setStyle('fill', visualInRange.handlesColor[handleIndex]);\n\t                handleThumb.position[1] = handleEnds[handleIndex];\n\n\t                // Update handle label position.\n\t                var textPoint = graphic.applyTransform(\n\t                    shapes.handleLabelPoints[handleIndex],\n\t                    graphic.getTransform(handleThumb, this.group)\n\t                );\n\t                handleLabels[handleIndex].setStyle({\n\t                    x: textPoint[0],\n\t                    y: textPoint[1],\n\t                    text: visualMapModel.formatValueText(this._dataInterval[handleIndex]),\n\t                    textVerticalAlign: 'middle',\n\t                    textAlign: this._applyTransform(\n\t                        this._orient === 'horizontal'\n\t                            ? (handleIndex === 0 ? 'bottom' : 'top')\n\t                            : 'left',\n\t                        shapes.barGroup\n\t                    )\n\t                });\n\t            }, this);\n\t        },\n\n\t        /**\n\t         * @private\n\t         * @param {number} cursorValue\n\t         * @param {number} textValue\n\t         * @param {string} [rangeSymbol]\n\t         * @param {number} [halfHoverLinkSize]\n\t         */\n\t        _showIndicator: function (cursorValue, textValue, rangeSymbol, halfHoverLinkSize) {\n\t            var visualMapModel = this.visualMapModel;\n\t            var dataExtent = visualMapModel.getExtent();\n\t            var itemSize = visualMapModel.itemSize;\n\t            var sizeExtent = [0, itemSize[1]];\n\t            var pos = linearMap(cursorValue, dataExtent, sizeExtent, true);\n\n\t            var shapes = this._shapes;\n\t            var indicator = shapes.indicator;\n\t            if (!indicator) {\n\t                return;\n\t            }\n\n\t            indicator.position[1] = pos;\n\t            indicator.attr('invisible', false);\n\t            indicator.setShape('points', createIndicatorPoints(\n\t                !!rangeSymbol, halfHoverLinkSize, pos, itemSize[1]\n\t            ));\n\n\t            var opts = {convertOpacityToAlpha: true};\n\t            var color = this.getControllerVisual(cursorValue, 'color', opts);\n\t            indicator.setStyle('fill', color);\n\n\t            // Update handle label position.\n\t            var textPoint = graphic.applyTransform(\n\t                shapes.indicatorLabelPoint,\n\t                graphic.getTransform(indicator, this.group)\n\t            );\n\n\t            var indicatorLabel = shapes.indicatorLabel;\n\t            indicatorLabel.attr('invisible', false);\n\t            var align = this._applyTransform('left', shapes.barGroup);\n\t            var orient = this._orient;\n\t            indicatorLabel.setStyle({\n\t                text: (rangeSymbol ? rangeSymbol : '') + visualMapModel.formatValueText(textValue),\n\t                textVerticalAlign: orient === 'horizontal' ? align : 'middle',\n\t                textAlign: orient === 'horizontal' ? 'center' : align,\n\t                x: textPoint[0],\n\t                y: textPoint[1]\n\t            });\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _enableHoverLinkToSeries: function () {\n\t            var self = this;\n\t            this._shapes.barGroup\n\n\t                .on('mousemove', function (e) {\n\t                    self._hovering = true;\n\n\t                    if (!self._dragging) {\n\t                        var itemSize = self.visualMapModel.itemSize;\n\t                        var pos = self._applyTransform(\n\t                            [e.offsetX, e.offsetY], self._shapes.barGroup, true, true\n\t                        );\n\t                        // For hover link show when hover handle, which might be\n\t                        // below or upper than sizeExtent.\n\t                        pos[1] = mathMin(mathMax(0, pos[1]), itemSize[1]);\n\n\t                        self._doHoverLinkToSeries(\n\t                            pos[1],\n\t                            0 <= pos[0] && pos[0] <= itemSize[0]\n\t                        );\n\t                    }\n\t                })\n\n\t                .on('mouseout', function () {\n\t                    // When mouse is out of handle, hoverLink still need\n\t                    // to be displayed when realtime is set as false.\n\t                    self._hovering = false;\n\t                    !self._dragging && self._clearHoverLinkToSeries();\n\t                });\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _enableHoverLinkFromSeries: function () {\n\t            var zr = this.api.getZr();\n\n\t            if (this.visualMapModel.option.hoverLink) {\n\t                zr.on('mouseover', this._hoverLinkFromSeriesMouseOver, this);\n\t                zr.on('mouseout', this._hideIndicator, this);\n\t            }\n\t            else {\n\t                this._clearHoverLinkFromSeries();\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _doHoverLinkToSeries: function (cursorPos, hoverOnBar) {\n\t            var visualMapModel = this.visualMapModel;\n\t            var itemSize = visualMapModel.itemSize;\n\n\t            if (!visualMapModel.option.hoverLink) {\n\t                return;\n\t            }\n\n\t            var sizeExtent = [0, itemSize[1]];\n\t            var dataExtent = visualMapModel.getExtent();\n\n\t            // For hover link show when hover handle, which might be below or upper than sizeExtent.\n\t            cursorPos = mathMin(mathMax(sizeExtent[0], cursorPos), sizeExtent[1]);\n\n\t            var halfHoverLinkSize = getHalfHoverLinkSize(visualMapModel, dataExtent, sizeExtent);\n\t            var hoverRange = [cursorPos - halfHoverLinkSize, cursorPos + halfHoverLinkSize];\n\t            var cursorValue = linearMap(cursorPos, sizeExtent, dataExtent, true);\n\t            var valueRange = [\n\t                linearMap(hoverRange[0], sizeExtent, dataExtent, true),\n\t                linearMap(hoverRange[1], sizeExtent, dataExtent, true)\n\t            ];\n\t            // Consider data range is out of visualMap range, see test/visualMap-continuous.html,\n\t            // where china and india has very large population.\n\t            hoverRange[0] < sizeExtent[0] && (valueRange[0] = -Infinity);\n\t            hoverRange[1] > sizeExtent[1] && (valueRange[1] = Infinity);\n\n\t            // Do not show indicator when mouse is over handle,\n\t            // otherwise labels overlap, especially when dragging.\n\t            if (hoverOnBar) {\n\t                if (valueRange[0] === -Infinity) {\n\t                    this._showIndicator(cursorValue, valueRange[1], '< ', halfHoverLinkSize);\n\t                }\n\t                else if (valueRange[1] === Infinity) {\n\t                    this._showIndicator(cursorValue, valueRange[0], '> ', halfHoverLinkSize);\n\t                }\n\t                else {\n\t                    this._showIndicator(cursorValue, cursorValue, '≈ ', halfHoverLinkSize);\n\t                }\n\t            }\n\n\t            // When realtime is set as false, handles, which are in barGroup,\n\t            // also trigger hoverLink, which help user to realize where they\n\t            // focus on when dragging. (see test/heatmap-large.html)\n\t            // When realtime is set as true, highlight will not show when hover\n\t            // handle, because the label on handle, which displays a exact value\n\t            // but not range, might mislead users.\n\t            var oldBatch = this._hoverLinkDataIndices;\n\t            var newBatch = [];\n\t            if (hoverOnBar || useHoverLinkOnHandle(visualMapModel)) {\n\t                newBatch = this._hoverLinkDataIndices = visualMapModel.findTargetDataIndices(valueRange);\n\t            }\n\n\t            var resultBatches = modelUtil.compressBatches(oldBatch, newBatch);\n\t            this._dispatchHighDown('downplay', helper.convertDataIndex(resultBatches[0]));\n\t            this._dispatchHighDown('highlight', helper.convertDataIndex(resultBatches[1]));\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _hoverLinkFromSeriesMouseOver: function (e) {\n\t            var el = e.target;\n\n\t            if (!el || el.dataIndex == null) {\n\t                return;\n\t            }\n\n\t            var dataModel = el.dataModel || this.ecModel.getSeriesByIndex(el.seriesIndex);\n\t            var data = dataModel.getData(el.dataType);\n\t            var dim = data.getDimension(this.visualMapModel.getDataDimension(data));\n\t            var value = data.get(dim, el.dataIndex, true);\n\n\t            if (!isNaN(value)) {\n\t                this._showIndicator(value, value);\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _hideIndicator: function () {\n\t            var shapes = this._shapes;\n\t            shapes.indicator && shapes.indicator.attr('invisible', true);\n\t            shapes.indicatorLabel && shapes.indicatorLabel.attr('invisible', true);\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _clearHoverLinkToSeries: function () {\n\t            this._hideIndicator();\n\n\t            var indices = this._hoverLinkDataIndices;\n\n\t            this._dispatchHighDown('downplay', helper.convertDataIndex(indices));\n\n\t            indices.length = 0;\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _clearHoverLinkFromSeries: function () {\n\t            this._hideIndicator();\n\n\t            var zr = this.api.getZr();\n\t            zr.off('mouseover', this._hoverLinkFromSeriesMouseOver);\n\t            zr.off('mouseout', this._hideIndicator);\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _applyTransform: function (vertex, element, inverse, global) {\n\t            var transform = graphic.getTransform(element, global ? null : this.group);\n\n\t            return graphic[\n\t                zrUtil.isArray(vertex) ? 'applyTransform' : 'transformDirection'\n\t            ](vertex, transform, inverse);\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _dispatchHighDown: function (type, batch) {\n\t            batch && batch.length && this.api.dispatchAction({\n\t                type: type,\n\t                batch: batch\n\t            });\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        dispose: function () {\n\t            this._clearHoverLinkFromSeries();\n\t            this._clearHoverLinkToSeries();\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        remove: function () {\n\t            this._clearHoverLinkFromSeries();\n\t            this._clearHoverLinkToSeries();\n\t        }\n\n\t    });\n\n\t    function createPolygon(points, cursor, onDrift, onDragEnd) {\n\t        return new graphic.Polygon({\n\t            shape: {points: points},\n\t            draggable: !!onDrift,\n\t            cursor: cursor,\n\t            drift: onDrift,\n\t            ondragend: onDragEnd\n\t        });\n\t    }\n\n\t    function createHandlePoints(handleIndex, textSize) {\n\t        return handleIndex === 0\n\t            ? [[0, 0], [textSize, 0], [textSize, -textSize]]\n\t            : [[0, 0], [textSize, 0], [textSize, textSize]];\n\t    }\n\n\t    function createIndicatorPoints(isRange, halfHoverLinkSize, pos, extentMax) {\n\t        return isRange\n\t            ? [ // indicate range\n\t                [0, -mathMin(halfHoverLinkSize, mathMax(pos, 0))],\n\t                [HOVER_LINK_OUT, 0],\n\t                [0, mathMin(halfHoverLinkSize, mathMax(extentMax - pos, 0))]\n\t            ]\n\t            : [ // indicate single value\n\t                [0, 0], [5, -5], [5, 5]\n\t            ];\n\t    }\n\n\t    function getHalfHoverLinkSize(visualMapModel, dataExtent, sizeExtent) {\n\t        var halfHoverLinkSize = HOVER_LINK_SIZE / 2;\n\t        var hoverLinkDataSize = visualMapModel.get('hoverLinkDataSize');\n\t        if (hoverLinkDataSize) {\n\t            halfHoverLinkSize = linearMap(hoverLinkDataSize, dataExtent, sizeExtent, true) / 2;\n\t        }\n\t        return halfHoverLinkSize;\n\t    }\n\n\t    function useHoverLinkOnHandle(visualMapModel) {\n\t        return !visualMapModel.get('realtime') && visualMapModel.get('hoverLinkOnHandle');\n\t    }\n\n\t    module.exports = ContinuousView;\n\n\n\n/***/ },\n/* 352 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var graphic = __webpack_require__(43);\n\t    var formatUtil = __webpack_require__(6);\n\t    var layout = __webpack_require__(21);\n\t    var echarts = __webpack_require__(1);\n\t    var VisualMapping = __webpack_require__(195);\n\n\t    module.exports = echarts.extendComponentView({\n\n\t        type: 'visualMap',\n\n\t        /**\n\t         * @readOnly\n\t         * @type {Object}\n\t         */\n\t        autoPositionValues: {left: 1, right: 1, top: 1, bottom: 1},\n\n\t        init: function (ecModel, api) {\n\t            /**\n\t             * @readOnly\n\t             * @type {module:echarts/model/Global}\n\t             */\n\t            this.ecModel = ecModel;\n\n\t            /**\n\t             * @readOnly\n\t             * @type {module:echarts/ExtensionAPI}\n\t             */\n\t            this.api = api;\n\n\t            /**\n\t             * @readOnly\n\t             * @type {module:echarts/component/visualMap/visualMapModel}\n\t             */\n\t            this.visualMapModel;\n\t        },\n\n\t        /**\n\t         * @protected\n\t         */\n\t        render: function (visualMapModel, ecModel, api, payload) {\n\t            this.visualMapModel = visualMapModel;\n\n\t            if (visualMapModel.get('show') === false) {\n\t                this.group.removeAll();\n\t                return;\n\t            }\n\n\t            this.doRender.apply(this, arguments);\n\t        },\n\n\t        /**\n\t         * @protected\n\t         */\n\t        renderBackground: function (group) {\n\t            var visualMapModel = this.visualMapModel;\n\t            var padding = formatUtil.normalizeCssArray(visualMapModel.get('padding') || 0);\n\t            var rect = group.getBoundingRect();\n\n\t            group.add(new graphic.Rect({\n\t                z2: -1, // Lay background rect on the lowest layer.\n\t                silent: true,\n\t                shape: {\n\t                    x: rect.x - padding[3],\n\t                    y: rect.y - padding[0],\n\t                    width: rect.width + padding[3] + padding[1],\n\t                    height: rect.height + padding[0] + padding[2]\n\t                },\n\t                style: {\n\t                    fill: visualMapModel.get('backgroundColor'),\n\t                    stroke: visualMapModel.get('borderColor'),\n\t                    lineWidth: visualMapModel.get('borderWidth')\n\t                }\n\t            }));\n\t        },\n\n\t        /**\n\t         * @protected\n\t         * @param {number} targetValue can be Infinity or -Infinity\n\t         * @param {string=} visualCluster Only can be 'color' 'opacity' 'symbol' 'symbolSize'\n\t         * @param {Object} [opts]\n\t         * @param {string=} [opts.forceState] Specify state, instead of using getValueState method.\n\t         * @param {string=} [opts.convertOpacityToAlpha=false] For color gradient in controller widget.\n\t         * @return {*} Visual value.\n\t         */\n\t        getControllerVisual: function (targetValue, visualCluster, opts) {\n\t            opts = opts || {};\n\n\t            var forceState = opts.forceState;\n\t            var visualMapModel = this.visualMapModel;\n\t            var visualObj = {};\n\n\t            // Default values.\n\t            if (visualCluster === 'symbol') {\n\t                visualObj.symbol = visualMapModel.get('itemSymbol');\n\t            }\n\t            if (visualCluster === 'color') {\n\t                var defaultColor = visualMapModel.get('contentColor');\n\t                visualObj.color = defaultColor;\n\t            }\n\n\t            function getter(key) {\n\t                return visualObj[key];\n\t            }\n\n\t            function setter(key, value) {\n\t                visualObj[key] = value;\n\t            }\n\n\t            var mappings = visualMapModel.controllerVisuals[\n\t                forceState || visualMapModel.getValueState(targetValue)\n\t            ];\n\t            var visualTypes = VisualMapping.prepareVisualTypes(mappings);\n\n\t            zrUtil.each(visualTypes, function (type) {\n\t                var visualMapping = mappings[type];\n\t                if (opts.convertOpacityToAlpha && type === 'opacity') {\n\t                    type = 'colorAlpha';\n\t                    visualMapping = mappings.__alphaForOpacity;\n\t                }\n\t                if (VisualMapping.dependsOn(type, visualCluster)) {\n\t                    visualMapping && visualMapping.applyVisual(\n\t                        targetValue, getter, setter\n\t                    );\n\t                }\n\t            });\n\n\t            return visualObj[visualCluster];\n\t        },\n\n\t        /**\n\t         * @protected\n\t         */\n\t        positionGroup: function (group) {\n\t            var model = this.visualMapModel;\n\t            var api = this.api;\n\n\t            layout.positionElement(\n\t                group,\n\t                model.getBoxLayoutParams(),\n\t                {width: api.getWidth(), height: api.getHeight()}\n\t            );\n\t        },\n\n\t        /**\n\t         * @protected\n\t         * @abstract\n\t         */\n\t        doRender: zrUtil.noop\n\n\t    });\n\n\n\n/***/ },\n/* 353 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var layout = __webpack_require__(21);\n\n\t    var helper = {\n\n\t        /**\n\t         * @param {module:echarts/component/visualMap/VisualMapModel} visualMapModel\\\n\t         * @param {module:echarts/ExtensionAPI} api\n\t         * @param {Array.<number>} itemSize always [short, long]\n\t         * @return {string} 'left' or 'right' or 'top' or 'bottom'\n\t         */\n\t        getItemAlign: function (visualMapModel, api, itemSize) {\n\t            var modelOption = visualMapModel.option;\n\t            var itemAlign = modelOption.align;\n\n\t            if (itemAlign != null && itemAlign !== 'auto') {\n\t                return itemAlign;\n\t            }\n\n\t            // Auto decision align.\n\t            var ecSize = {width: api.getWidth(), height: api.getHeight()};\n\t            var realIndex = modelOption.orient === 'horizontal' ? 1 : 0;\n\n\t            var paramsSet = [\n\t                ['left', 'right', 'width'],\n\t                ['top', 'bottom', 'height']\n\t            ];\n\t            var reals = paramsSet[realIndex];\n\t            var fakeValue = [0, null, 10];\n\n\t            var layoutInput = {};\n\t            for (var i = 0; i < 3; i++) {\n\t                layoutInput[paramsSet[1 - realIndex][i]] = fakeValue[i];\n\t                layoutInput[reals[i]] = i === 2 ? itemSize[0] : modelOption[reals[i]];\n\t            }\n\n\t            var rParam = [['x', 'width', 3], ['y', 'height', 0]][realIndex];\n\t            var rect = layout.getLayoutRect(layoutInput, ecSize, modelOption.padding);\n\n\t            return reals[\n\t                (rect.margin[rParam[2]] || 0) + rect[rParam[0]] + rect[rParam[1]] * 0.5\n\t                    < ecSize[rParam[1]] * 0.5 ? 0 : 1\n\t            ];\n\t        },\n\n\t        /**\n\t         * Prepare dataIndex for outside usage, where dataIndex means rawIndex, and\n\t         * dataIndexInside means filtered index.\n\t         */\n\t        convertDataIndex: function (batch) {\n\t            zrUtil.each(batch || [], function (batchItem) {\n\t                if (batch.dataIndex != null) {\n\t                    batch.dataIndexInside = batch.dataIndex;\n\t                    batch.dataIndex = null;\n\t                }\n\t            });\n\t            return batch;\n\t        }\n\n\t    };\n\n\n\t    module.exports = helper;\n\n\n\n/***/ },\n/* 354 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Data range action\n\t */\n\n\n\t    var echarts = __webpack_require__(1);\n\n\t    var actionInfo = {\n\t        type: 'selectDataRange',\n\t        event: 'dataRangeSelected',\n\t        // FIXME use updateView appears wrong\n\t        update: 'update'\n\t    };\n\n\t    echarts.registerAction(actionInfo, function (payload, ecModel) {\n\n\t        ecModel.eachComponent({mainType: 'visualMap', query: payload}, function (model) {\n\t            model.setSelected(payload.selected);\n\t        });\n\n\t    });\n\n\n\n/***/ },\n/* 355 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * DataZoom component entry\n\t */\n\n\n\t    __webpack_require__(1).registerPreprocessor(\n\t        __webpack_require__(345)\n\t    );\n\n\t    __webpack_require__(346);\n\t    __webpack_require__(347);\n\t    __webpack_require__(356);\n\t    __webpack_require__(357);\n\t    __webpack_require__(354);\n\n\n\n/***/ },\n/* 356 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var VisualMapModel = __webpack_require__(349);\n\t    var zrUtil = __webpack_require__(4);\n\t    var VisualMapping = __webpack_require__(195);\n\t    var visualDefault = __webpack_require__(350);\n\t    var reformIntervals = __webpack_require__(7).reformIntervals;\n\n\t    var PiecewiseModel = VisualMapModel.extend({\n\n\t        type: 'visualMap.piecewise',\n\n\t        /**\n\t         * Order Rule:\n\t         *\n\t         * option.categories / option.pieces / option.text / option.selected:\n\t         *     If !option.inverse,\n\t         *     Order when vertical: ['top', ..., 'bottom'].\n\t         *     Order when horizontal: ['left', ..., 'right'].\n\t         *     If option.inverse, the meaning of\n\t         *     the order should be reversed.\n\t         *\n\t         * this._pieceList:\n\t         *     The order is always [low, ..., high].\n\t         *\n\t         * Mapping from location to low-high:\n\t         *     If !option.inverse\n\t         *     When vertical, top is high.\n\t         *     When horizontal, right is high.\n\t         *     If option.inverse, reverse.\n\t         */\n\n\t        /**\n\t         * @protected\n\t         */\n\t        defaultOption: {\n\t            selected: null,             // Object. If not specified, means selected.\n\t                                        // When pieces and splitNumber: {'0': true, '5': true}\n\t                                        // When categories: {'cate1': false, 'cate3': true}\n\t                                        // When selected === false, means all unselected.\n\n\t            minOpen: false,             // Whether include values that smaller than `min`.\n\t            maxOpen: false,             // Whether include values that bigger than `max`.\n\n\t            align: 'auto',              // 'auto', 'left', 'right'\n\t            itemWidth: 20,              // When put the controller vertically, it is the length of\n\t                                        // horizontal side of each item. Otherwise, vertical side.\n\t            itemHeight: 14,             // When put the controller vertically, it is the length of\n\t                                        // vertical side of each item. Otherwise, horizontal side.\n\t            itemSymbol: 'roundRect',\n\t            pieceList: null,            // Each item is Object, with some of those attrs:\n\t                                        // {min, max, lt, gt, lte, gte, value,\n\t                                        // color, colorSaturation, colorAlpha, opacity,\n\t                                        // symbol, symbolSize}, which customize the range or visual\n\t                                        // coding of the certain piece. Besides, see \"Order Rule\".\n\t            categories: null,           // category names, like: ['some1', 'some2', 'some3'].\n\t                                        // Attr min/max are ignored when categories set. See \"Order Rule\"\n\t            splitNumber: 5,             // If set to 5, auto split five pieces equally.\n\t                                        // If set to 0 and component type not set, component type will be\n\t                                        // determined as \"continuous\". (It is less reasonable but for ec2\n\t                                        // compatibility, see echarts/component/visualMap/typeDefaulter)\n\t            selectedMode: 'multiple',   // Can be 'multiple' or 'single'.\n\t            itemGap: 10,                // The gap between two items, in px.\n\t            hoverLink: true,            // Enable hover highlight.\n\n\t            showLabel: null             // By default, when text is used, label will hide (the logic\n\t                                        // is remained for compatibility reason)\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        optionUpdated: function (newOption, isInit) {\n\t            PiecewiseModel.superApply(this, 'optionUpdated', arguments);\n\n\t            /**\n\t             * The order is always [low, ..., high].\n\t             * [{text: string, interval: Array.<number>}, ...]\n\t             * @private\n\t             * @type {Array.<Object>}\n\t             */\n\t            this._pieceList = [];\n\n\t            this.resetTargetSeries();\n\t            this.resetExtent();\n\n\t            /**\n\t             * 'pieces', 'categories', 'splitNumber'\n\t             * @type {string}\n\t             */\n\t            var mode = this._mode = this._determineMode();\n\n\t            resetMethods[this._mode].call(this);\n\n\t            this._resetSelected(newOption, isInit);\n\n\t            var categories = this.option.categories;\n\n\t            this.resetVisual(function (mappingOption, state) {\n\t                if (mode === 'categories') {\n\t                    mappingOption.mappingMethod = 'category';\n\t                    mappingOption.categories = zrUtil.clone(categories);\n\t                }\n\t                else {\n\t                    mappingOption.dataExtent = this.getExtent();\n\t                    mappingOption.mappingMethod = 'piecewise';\n\t                    mappingOption.pieceList = zrUtil.map(this._pieceList, function (piece) {\n\t                        var piece = zrUtil.clone(piece);\n\t                        if (state !== 'inRange') {\n\t                            // FIXME\n\t                            // outOfRange do not support special visual in pieces.\n\t                            piece.visual = null;\n\t                        }\n\t                        return piece;\n\t                    });\n\t                }\n\t            });\n\t        },\n\n\t        /**\n\t         * @protected\n\t         * @override\n\t         */\n\t        completeVisualOption: function () {\n\t            // Consider this case:\n\t            // visualMap: {\n\t            //      pieces: [{symbol: 'circle', lt: 0}, {symbol: 'rect', gte: 0}]\n\t            // }\n\t            // where no inRange/outOfRange set but only pieces. So we should make\n\t            // default inRange/outOfRange for this case, otherwise visuals that only\n\t            // appear in `pieces` will not be taken into account in visual encoding.\n\n\t            var option = this.option;\n\t            var visualTypesInPieces = {};\n\t            var visualTypes = VisualMapping.listVisualTypes();\n\t            var isCategory = this.isCategory();\n\n\t            zrUtil.each(option.pieces, function (piece) {\n\t                zrUtil.each(visualTypes, function (visualType) {\n\t                    if (piece.hasOwnProperty(visualType)) {\n\t                        visualTypesInPieces[visualType] = 1;\n\t                    }\n\t                });\n\t            });\n\n\t            zrUtil.each(visualTypesInPieces, function (v, visualType) {\n\t                var exists = 0;\n\t                zrUtil.each(this.stateList, function (state) {\n\t                    exists |= has(option, state, visualType)\n\t                        || has(option.target, state, visualType);\n\t                }, this);\n\n\t                !exists && zrUtil.each(this.stateList, function (state) {\n\t                    (option[state] || (option[state] = {}))[visualType] = visualDefault.get(\n\t                        visualType, state === 'inRange' ? 'active' : 'inactive', isCategory\n\t                    );\n\t                });\n\t            }, this);\n\n\t            function has(obj, state, visualType) {\n\t                return obj && obj[state] && (\n\t                    zrUtil.isObject(obj[state])\n\t                        ? obj[state].hasOwnProperty(visualType)\n\t                        : obj[state] === visualType // e.g., inRange: 'symbol'\n\t                );\n\t            }\n\n\t            VisualMapModel.prototype.completeVisualOption.apply(this, arguments);\n\t        },\n\n\t        _resetSelected: function (newOption, isInit) {\n\t            var thisOption = this.option;\n\t            var pieceList = this._pieceList;\n\n\t            // Selected do not merge but all override.\n\t            var selected = (isInit ? thisOption : newOption).selected || {};\n\t            thisOption.selected = selected;\n\n\t            // Consider 'not specified' means true.\n\t            zrUtil.each(pieceList, function (piece, index) {\n\t                var key = this.getSelectedMapKey(piece);\n\t                if (!selected.hasOwnProperty(key)) {\n\t                    selected[key] = true;\n\t                }\n\t            }, this);\n\n\t            if (thisOption.selectedMode === 'single') {\n\t                // Ensure there is only one selected.\n\t                var hasSel = false;\n\n\t                zrUtil.each(pieceList, function (piece, index) {\n\t                    var key = this.getSelectedMapKey(piece);\n\t                    if (selected[key]) {\n\t                        hasSel\n\t                            ? (selected[key] = false)\n\t                            : (hasSel = true);\n\t                    }\n\t                }, this);\n\t            }\n\t            // thisOption.selectedMode === 'multiple', default: all selected.\n\t        },\n\n\t        /**\n\t         * @public\n\t         */\n\t        getSelectedMapKey: function (piece) {\n\t            return this._mode === 'categories'\n\t                ? piece.value + '' : piece.index + '';\n\t        },\n\n\t        /**\n\t         * @public\n\t         */\n\t        getPieceList: function () {\n\t            return this._pieceList;\n\t        },\n\n\t        /**\n\t         * @private\n\t         * @return {string}\n\t         */\n\t        _determineMode: function () {\n\t            var option = this.option;\n\n\t            return option.pieces && option.pieces.length > 0\n\t                ? 'pieces'\n\t                : this.option.categories\n\t                ? 'categories'\n\t                : 'splitNumber';\n\t        },\n\n\t        /**\n\t         * @public\n\t         * @override\n\t         */\n\t        setSelected: function (selected) {\n\t            this.option.selected = zrUtil.clone(selected);\n\t        },\n\n\t        /**\n\t         * @public\n\t         * @override\n\t         */\n\t        getValueState: function (value) {\n\t            var index = VisualMapping.findPieceIndex(value, this._pieceList);\n\n\t            return index != null\n\t                ? (this.option.selected[this.getSelectedMapKey(this._pieceList[index])]\n\t                    ? 'inRange' : 'outOfRange'\n\t                )\n\t                : 'outOfRange';\n\t        },\n\n\t        /**\n\t         * @public\n\t         * @params {number} pieceIndex piece index in visualMapModel.getPieceList()\n\t         * @return {Array.<Object>} [{seriesId, dataIndices: <Array.<number>>}, ...]\n\t         */\n\t        findTargetDataIndices: function (pieceIndex) {\n\t            var result = [];\n\n\t            this.eachTargetSeries(function (seriesModel) {\n\t                var dataIndices = [];\n\t                var data = seriesModel.getData();\n\n\t                data.each(this.getDataDimension(data), function (value, dataIndex) {\n\t                    // Should always base on model pieceList, because it is order sensitive.\n\t                    var pIdx = VisualMapping.findPieceIndex(value, this._pieceList);\n\t                    pIdx === pieceIndex && dataIndices.push(dataIndex);\n\t                }, true, this);\n\n\t                result.push({seriesId: seriesModel.id, dataIndex: dataIndices});\n\t            }, this);\n\n\t            return result;\n\t        },\n\n\t        /**\n\t         * @private\n\t         * @param {Object} piece piece.value or piece.interval is required.\n\t         * @return {number} Can be Infinity or -Infinity\n\t         */\n\t        getRepresentValue: function (piece) {\n\t            var representValue;\n\t            if (this.isCategory()) {\n\t                representValue = piece.value;\n\t            }\n\t            else {\n\t                if (piece.value != null) {\n\t                    representValue = piece.value;\n\t                }\n\t                else {\n\t                    var pieceInterval = piece.interval || [];\n\t                    representValue = (pieceInterval[0] === -Infinity && pieceInterval[1] === Infinity)\n\t                        ? 0\n\t                        : (pieceInterval[0] + pieceInterval[1]) / 2;\n\t                }\n\t            }\n\t            return representValue;\n\t        },\n\n\t        getVisualMeta: function (getColorVisual) {\n\t            // Do not support category. (category axis is ordinal, numerical)\n\t            if (this.isCategory()) {\n\t                return;\n\t            }\n\n\t            var stops = [];\n\t            var outerColors = [];\n\t            var visualMapModel = this;\n\n\t            function setStop(interval, valueState) {\n\t                var representValue = visualMapModel.getRepresentValue({interval: interval});\n\t                if (!valueState) {\n\t                    valueState = visualMapModel.getValueState(representValue);\n\t                }\n\t                var color = getColorVisual(representValue, valueState);\n\t                if (interval[0] === -Infinity) {\n\t                    outerColors[0] = color;\n\t                }\n\t                else if (interval[1] === Infinity) {\n\t                    outerColors[1] = color;\n\t                }\n\t                else {\n\t                    stops.push(\n\t                        {value: interval[0], color: color},\n\t                        {value: interval[1], color: color}\n\t                    );\n\t                }\n\t            }\n\n\t            // Suplement\n\t            var pieceList = this._pieceList.slice();\n\t            if (!pieceList.length) {\n\t                pieceList.push({interval: [-Infinity, Infinity]});\n\t            }\n\t            else {\n\t                var edge = pieceList[0].interval[0];\n\t                edge !== -Infinity && pieceList.unshift({interval: [-Infinity, edge]});\n\t                edge = pieceList[pieceList.length - 1].interval[1];\n\t                edge !== Infinity && pieceList.push({interval: [edge, Infinity]});\n\t            }\n\n\t            var curr = -Infinity;\n\t            zrUtil.each(pieceList, function (piece) {\n\t                var interval = piece.interval;\n\t                if (interval) {\n\t                    // Fulfill gap.\n\t                    interval[0] > curr && setStop([curr, interval[0]], 'outOfRange');\n\t                    setStop(interval.slice());\n\t                    curr = interval[1];\n\t                }\n\t            }, this);\n\n\t            return {stops: stops, outerColors: outerColors};\n\t        }\n\n\t    });\n\n\t    /**\n\t     * Key is this._mode\n\t     * @type {Object}\n\t     * @this {module:echarts/component/viusalMap/PiecewiseMode}\n\t     */\n\t    var resetMethods = {\n\n\t        splitNumber: function () {\n\t            var thisOption = this.option;\n\t            var pieceList = this._pieceList;\n\t            var precision = thisOption.precision;\n\t            var dataExtent = this.getExtent();\n\t            var splitNumber = thisOption.splitNumber;\n\t            splitNumber = Math.max(parseInt(splitNumber, 10), 1);\n\t            thisOption.splitNumber = splitNumber;\n\n\t            var splitStep = (dataExtent[1] - dataExtent[0]) / splitNumber;\n\t            // Precision auto-adaption\n\t            while (+splitStep.toFixed(precision) !== splitStep && precision < 5) {\n\t                precision++;\n\t            }\n\t            thisOption.precision = precision;\n\t            splitStep = +splitStep.toFixed(precision);\n\n\t            var index = 0;\n\n\t            if (thisOption.minOpen) {\n\t                pieceList.push({\n\t                    index: index++,\n\t                    interval: [-Infinity, dataExtent[0]],\n\t                    close: [0, 0]\n\t                });\n\t            }\n\n\t            for (\n\t                var curr = dataExtent[0], len = index + splitNumber;\n\t                index < len;\n\t                curr += splitStep\n\t            ) {\n\t                var max = index === splitNumber - 1 ? dataExtent[1] : (curr + splitStep);\n\n\t                pieceList.push({\n\t                    index: index++,\n\t                    interval: [curr, max],\n\t                    close: [1, 1]\n\t                });\n\t            }\n\n\t            if (thisOption.maxOpen) {\n\t                pieceList.push({\n\t                    index: index++,\n\t                    interval: [dataExtent[1], Infinity],\n\t                    close: [0, 0]\n\t                });\n\t            }\n\n\t            reformIntervals(pieceList);\n\n\t            zrUtil.each(pieceList, function (piece) {\n\t                piece.text = this.formatValueText(piece.interval);\n\t            }, this);\n\t        },\n\n\t        categories: function () {\n\t            var thisOption = this.option;\n\t            zrUtil.each(thisOption.categories, function (cate) {\n\t                // FIXME category模式也使用pieceList，但在visualMapping中不是使用pieceList。\n\t                // 是否改一致。\n\t                this._pieceList.push({\n\t                    text: this.formatValueText(cate, true),\n\t                    value: cate\n\t                });\n\t            }, this);\n\n\t            // See \"Order Rule\".\n\t            normalizeReverse(thisOption, this._pieceList);\n\t        },\n\n\t        pieces: function () {\n\t            var thisOption = this.option;\n\t            var pieceList = this._pieceList;\n\n\t            zrUtil.each(thisOption.pieces, function (pieceListItem, index) {\n\n\t                if (!zrUtil.isObject(pieceListItem)) {\n\t                    pieceListItem = {value: pieceListItem};\n\t                }\n\n\t                var item = {text: '', index: index};\n\n\t                if (pieceListItem.label != null) {\n\t                    item.text = pieceListItem.label;\n\t                }\n\n\t                if (pieceListItem.hasOwnProperty('value')) {\n\t                    var value = item.value = pieceListItem.value;\n\t                    item.interval = [value, value];\n\t                    item.close = [1, 1];\n\t                }\n\t                else {\n\t                    // `min` `max` is legacy option.\n\t                    // `lt` `gt` `lte` `gte` is recommanded.\n\t                    var interval = item.interval = [];\n\t                    var close = item.close = [0, 0];\n\n\t                    var closeList = [1, 0, 1];\n\t                    var infinityList = [-Infinity, Infinity];\n\n\t                    var useMinMax = [];\n\t                    for (var lg = 0; lg < 2; lg++) {\n\t                        var names = [['gte', 'gt', 'min'], ['lte', 'lt', 'max']][lg];\n\t                        for (var i = 0; i < 3 && interval[lg] == null; i++) {\n\t                            interval[lg] = pieceListItem[names[i]];\n\t                            close[lg] = closeList[i];\n\t                            useMinMax[lg] = i === 2;\n\t                        }\n\t                        interval[lg] == null && (interval[lg] = infinityList[lg]);\n\t                    }\n\t                    useMinMax[0] && interval[1] === Infinity && (close[0] = 0);\n\t                    useMinMax[1] && interval[0] === -Infinity && (close[1] = 0);\n\n\t                    if (true) {\n\t                        if (interval[0] > interval[1]) {\n\t                            console.warn(\n\t                                'Piece ' + index + 'is illegal: ' + interval\n\t                                + ' lower bound should not greater then uppper bound.'\n\t                            );\n\t                        }\n\t                    }\n\n\t                    if (interval[0] === interval[1] && close[0] && close[1]) {\n\t                        // Consider: [{min: 5, max: 5, visual: {...}}, {min: 0, max: 5}],\n\t                        // we use value to lift the priority when min === max\n\t                        item.value = interval[0];\n\t                    }\n\t                }\n\n\t                item.visual = VisualMapping.retrieveVisuals(pieceListItem);\n\n\t                pieceList.push(item);\n\n\t            }, this);\n\n\t            // See \"Order Rule\".\n\t            normalizeReverse(thisOption, pieceList);\n\t            // Only pieces\n\t            reformIntervals(pieceList);\n\n\t            zrUtil.each(pieceList, function (piece) {\n\t                var close = piece.close;\n\t                var edgeSymbols = [['<', '≤'][close[1]], ['>', '≥'][close[0]]];\n\t                piece.text = piece.text || this.formatValueText(\n\t                    piece.value != null ? piece.value : piece.interval,\n\t                    false,\n\t                    edgeSymbols\n\t                );\n\t            }, this);\n\t        }\n\t    };\n\n\t    function normalizeReverse(thisOption, pieceList) {\n\t        var inverse = thisOption.inverse;\n\t        if (thisOption.orient === 'vertical' ? !inverse : inverse) {\n\t             pieceList.reverse();\n\t        }\n\t    }\n\n\t    module.exports = PiecewiseModel;\n\n\n/***/ },\n/* 357 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var VisualMapView = __webpack_require__(352);\n\t    var zrUtil = __webpack_require__(4);\n\t    var graphic = __webpack_require__(43);\n\t    var symbolCreators = __webpack_require__(107);\n\t    var layout = __webpack_require__(21);\n\t    var helper = __webpack_require__(353);\n\n\t    var PiecewiseVisualMapView = VisualMapView.extend({\n\n\t        type: 'visualMap.piecewise',\n\n\t        /**\n\t         * @protected\n\t         * @override\n\t         */\n\t        doRender: function () {\n\t            var thisGroup = this.group;\n\n\t            thisGroup.removeAll();\n\n\t            var visualMapModel = this.visualMapModel;\n\t            var textGap = visualMapModel.get('textGap');\n\t            var textStyleModel = visualMapModel.textStyleModel;\n\t            var textFont = textStyleModel.getFont();\n\t            var textFill = textStyleModel.getTextColor();\n\t            var itemAlign = this._getItemAlign();\n\t            var itemSize = visualMapModel.itemSize;\n\t            var viewData = this._getViewData();\n\t            var endsText = viewData.endsText;\n\t            var showLabel = zrUtil.retrieve(visualMapModel.get('showLabel', true), !endsText);\n\n\t            endsText && this._renderEndsText(\n\t                thisGroup, endsText[0], itemSize, showLabel, itemAlign\n\t            );\n\n\t            zrUtil.each(viewData.viewPieceList, renderItem, this);\n\n\t            endsText && this._renderEndsText(\n\t                thisGroup, endsText[1], itemSize, showLabel, itemAlign\n\t            );\n\n\t            layout.box(\n\t                visualMapModel.get('orient'), thisGroup, visualMapModel.get('itemGap')\n\t            );\n\n\t            this.renderBackground(thisGroup);\n\n\t            this.positionGroup(thisGroup);\n\n\t            function renderItem(item) {\n\t                var piece = item.piece;\n\n\t                var itemGroup = new graphic.Group();\n\t                itemGroup.onclick = zrUtil.bind(this._onItemClick, this, piece);\n\n\t                this._enableHoverLink(itemGroup, item.indexInModelPieceList);\n\n\t                var representValue = visualMapModel.getRepresentValue(piece);\n\n\t                this._createItemSymbol(\n\t                    itemGroup, representValue, [0, 0, itemSize[0], itemSize[1]]\n\t                );\n\n\t                if (showLabel) {\n\t                    var visualState = this.visualMapModel.getValueState(representValue);\n\n\t                    itemGroup.add(new graphic.Text({\n\t                        style: {\n\t                            x: itemAlign === 'right' ? -textGap : itemSize[0] + textGap,\n\t                            y: itemSize[1] / 2,\n\t                            text: piece.text,\n\t                            textVerticalAlign: 'middle',\n\t                            textAlign: itemAlign,\n\t                            textFont: textFont,\n\t                            fill: textFill,\n\t                            opacity: visualState === 'outOfRange' ? 0.5 : 1\n\t                        }\n\t                    }));\n\t                }\n\n\t                thisGroup.add(itemGroup);\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _enableHoverLink: function (itemGroup, pieceIndex) {\n\t            itemGroup\n\t                .on('mouseover', zrUtil.bind(onHoverLink, this, 'highlight'))\n\t                .on('mouseout', zrUtil.bind(onHoverLink, this, 'downplay'));\n\n\t            function onHoverLink(method) {\n\t                var visualMapModel = this.visualMapModel;\n\n\t                visualMapModel.option.hoverLink && this.api.dispatchAction({\n\t                    type: method,\n\t                    batch: helper.convertDataIndex(\n\t                        visualMapModel.findTargetDataIndices(pieceIndex)\n\t                    )\n\t                });\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _getItemAlign: function () {\n\t            var visualMapModel = this.visualMapModel;\n\t            var modelOption = visualMapModel.option;\n\n\t            if (modelOption.orient === 'vertical') {\n\t                return helper.getItemAlign(\n\t                    visualMapModel, this.api, visualMapModel.itemSize\n\t                );\n\t            }\n\t            else { // horizontal, most case left unless specifying right.\n\t                var align = modelOption.align;\n\t                if (!align || align === 'auto') {\n\t                    align = 'left';\n\t                }\n\t                return align;\n\t            }\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _renderEndsText: function (group, text, itemSize, showLabel, itemAlign) {\n\t            if (!text) {\n\t                return;\n\t            }\n\n\t            var itemGroup = new graphic.Group();\n\t            var textStyleModel = this.visualMapModel.textStyleModel;\n\n\t            itemGroup.add(new graphic.Text({\n\t                style: {\n\t                    x: showLabel ? (itemAlign === 'right' ? itemSize[0] : 0) : itemSize[0] / 2,\n\t                    y: itemSize[1] / 2,\n\t                    textVerticalAlign: 'middle',\n\t                    textAlign: showLabel ? itemAlign : 'center',\n\t                    text: text,\n\t                    textFont: textStyleModel.getFont(),\n\t                    fill: textStyleModel.getTextColor()\n\t                }\n\t            }));\n\n\t            group.add(itemGroup);\n\t        },\n\n\t        /**\n\t         * @private\n\t         * @return {Object} {peiceList, endsText} The order is the same as screen pixel order.\n\t         */\n\t        _getViewData: function () {\n\t            var visualMapModel = this.visualMapModel;\n\n\t            var viewPieceList = zrUtil.map(visualMapModel.getPieceList(), function (piece, index) {\n\t                return {piece: piece, indexInModelPieceList: index};\n\t            });\n\t            var endsText = visualMapModel.get('text');\n\n\t            // Consider orient and inverse.\n\t            var orient = visualMapModel.get('orient');\n\t            var inverse = visualMapModel.get('inverse');\n\n\t            // Order of model pieceList is always [low, ..., high]\n\t            if (orient === 'horizontal' ? inverse : !inverse) {\n\t                viewPieceList.reverse();\n\t            }\n\t            // Origin order of endsText is [high, low]\n\t            else if (endsText) {\n\t                endsText = endsText.slice().reverse();\n\t            }\n\n\t            return {viewPieceList: viewPieceList, endsText: endsText};\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _createItemSymbol: function (group, representValue, shapeParam) {\n\t            group.add(symbolCreators.createSymbol(\n\t                this.getControllerVisual(representValue, 'symbol'),\n\t                shapeParam[0], shapeParam[1], shapeParam[2], shapeParam[3],\n\t                this.getControllerVisual(representValue, 'color')\n\t            ));\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _onItemClick: function (piece) {\n\t            var visualMapModel = this.visualMapModel;\n\t            var option = visualMapModel.option;\n\t            var selected = zrUtil.clone(option.selected);\n\t            var newKey = visualMapModel.getSelectedMapKey(piece);\n\n\t            if (option.selectedMode === 'single') {\n\t                selected[newKey] = true;\n\t                zrUtil.each(selected, function (o, key) {\n\t                    selected[key] = key === newKey;\n\t                });\n\t            }\n\t            else {\n\t                selected[newKey] = !selected[newKey];\n\t            }\n\n\t            this.api.dispatchAction({\n\t                type: 'selectDataRange',\n\t                from: this.uid,\n\t                visualMapId: this.visualMapModel.id,\n\t                selected: selected\n\t            });\n\t        }\n\t    });\n\n\t    module.exports = PiecewiseVisualMapView;\n\n\n\n/***/ },\n/* 358 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// HINT Markpoint can't be used too much\n\n\n\t    __webpack_require__(359);\n\t    __webpack_require__(361);\n\n\t    __webpack_require__(1).registerPreprocessor(function (opt) {\n\t        // Make sure markPoint component is enabled\n\t        opt.markPoint = opt.markPoint || {};\n\t    });\n\n\n/***/ },\n/* 359 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    module.exports = __webpack_require__(360).extend({\n\n\t        type: 'markPoint',\n\n\t        defaultOption: {\n\t            zlevel: 0,\n\t            z: 5,\n\t            symbol: 'pin',\n\t            symbolSize: 50,\n\t            //symbolRotate: 0,\n\t            //symbolOffset: [0, 0]\n\t            tooltip: {\n\t                trigger: 'item'\n\t            },\n\t            label: {\n\t                normal: {\n\t                    show: true,\n\t                    position: 'inside'\n\t                },\n\t                emphasis: {\n\t                    show: true\n\t                }\n\t            },\n\t            itemStyle: {\n\t                normal: {\n\t                    borderWidth: 2\n\t                }\n\t            }\n\t        }\n\t    });\n\n\n/***/ },\n/* 360 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var modelUtil = __webpack_require__(5);\n\t    var zrUtil = __webpack_require__(4);\n\t    var env = __webpack_require__(2);\n\n\t    var formatUtil = __webpack_require__(6);\n\t    var addCommas = formatUtil.addCommas;\n\t    var encodeHTML = formatUtil.encodeHTML;\n\n\t    function fillLabel(opt) {\n\t        modelUtil.defaultEmphasis(\n\t            opt.label,\n\t            modelUtil.LABEL_OPTIONS\n\t        );\n\t    }\n\t    var MarkerModel = __webpack_require__(1).extendComponentModel({\n\n\t        type: 'marker',\n\n\t        dependencies: ['series', 'grid', 'polar', 'geo'],\n\t        /**\n\t         * @overrite\n\t         */\n\t        init: function (option, parentModel, ecModel, extraOpt) {\n\n\t            if (true) {\n\t                if (this.type === 'marker') {\n\t                    throw new Error('Marker component is abstract component. Use markLine, markPoint, markArea instead.');\n\t                }\n\t            }\n\t            this.mergeDefaultAndTheme(option, ecModel);\n\t            this.mergeOption(option, ecModel, extraOpt.createdBySelf, true);\n\t        },\n\n\t        /**\n\t         * @return {boolean}\n\t         */\n\t        isAnimationEnabled: function () {\n\t            if (env.node) {\n\t                return false;\n\t            }\n\n\t            var hostSeries = this.__hostSeries;\n\t            return this.getShallow('animation') && hostSeries && hostSeries.isAnimationEnabled();\n\t        },\n\n\t        mergeOption: function (newOpt, ecModel, createdBySelf, isInit) {\n\t            var MarkerModel = this.constructor;\n\t            var modelPropName = this.mainType + 'Model';\n\t            if (!createdBySelf) {\n\t                ecModel.eachSeries(function (seriesModel) {\n\n\t                    var markerOpt = seriesModel.get(this.mainType);\n\n\t                    var markerModel = seriesModel[modelPropName];\n\t                    if (!markerOpt || !markerOpt.data) {\n\t                        seriesModel[modelPropName] = null;\n\t                        return;\n\t                    }\n\t                    if (!markerModel) {\n\t                        if (isInit) {\n\t                            // Default label emphasis `position` and `show`\n\t                            fillLabel(markerOpt);\n\t                        }\n\t                        zrUtil.each(markerOpt.data, function (item) {\n\t                            // FIXME Overwrite fillLabel method ?\n\t                            if (item instanceof Array) {\n\t                                fillLabel(item[0]);\n\t                                fillLabel(item[1]);\n\t                            }\n\t                            else {\n\t                                fillLabel(item);\n\t                            }\n\t                        });\n\n\t                        markerModel = new MarkerModel(\n\t                            markerOpt, this, ecModel\n\t                        );\n\n\t                        zrUtil.extend(markerModel, {\n\t                            mainType: this.mainType,\n\t                            // Use the same series index and name\n\t                            seriesIndex: seriesModel.seriesIndex,\n\t                            name: seriesModel.name,\n\t                            createdBySelf: true\n\t                        });\n\n\t                        markerModel.__hostSeries = seriesModel;\n\t                    }\n\t                    else {\n\t                        markerModel.mergeOption(markerOpt, ecModel, true);\n\t                    }\n\t                    seriesModel[modelPropName] = markerModel;\n\t                }, this);\n\t            }\n\t        },\n\n\t        formatTooltip: function (dataIndex) {\n\t            var data = this.getData();\n\t            var value = this.getRawValue(dataIndex);\n\t            var formattedValue = zrUtil.isArray(value)\n\t                ? zrUtil.map(value, addCommas).join(', ') : addCommas(value);\n\t            var name = data.getName(dataIndex);\n\t            var html = encodeHTML(this.name);\n\t            if (value != null || name) {\n\t                html += '<br />';\n\t            }\n\t            if (name) {\n\t                html += encodeHTML(name);\n\t                if (value != null) {\n\t                    html += ' : ';\n\t                }\n\t            }\n\t            if (value != null) {\n\t                html += encodeHTML(formattedValue);\n\t            }\n\t            return html;\n\t        },\n\n\t        getData: function () {\n\t            return this._data;\n\t        },\n\n\t        setData: function (data) {\n\t            this._data = data;\n\t        }\n\t    });\n\n\t    zrUtil.mixin(MarkerModel, modelUtil.dataFormatMixin);\n\n\t    module.exports = MarkerModel;\n\n\n/***/ },\n/* 361 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var SymbolDraw = __webpack_require__(105);\n\t    var zrUtil = __webpack_require__(4);\n\t    var numberUtil = __webpack_require__(7);\n\n\t    var List = __webpack_require__(98);\n\n\t    var markerHelper = __webpack_require__(362);\n\n\t    function updateMarkerLayout(mpData, seriesModel, api) {\n\t        var coordSys = seriesModel.coordinateSystem;\n\t        mpData.each(function (idx) {\n\t            var itemModel = mpData.getItemModel(idx);\n\t            var point;\n\t            var xPx = numberUtil.parsePercent(itemModel.get('x'), api.getWidth());\n\t            var yPx = numberUtil.parsePercent(itemModel.get('y'), api.getHeight());\n\t            if (!isNaN(xPx) && !isNaN(yPx)) {\n\t                point = [xPx, yPx];\n\t            }\n\t            // Chart like bar may have there own marker positioning logic\n\t            else if (seriesModel.getMarkerPosition) {\n\t                // Use the getMarkerPoisition\n\t                point = seriesModel.getMarkerPosition(\n\t                    mpData.getValues(mpData.dimensions, idx)\n\t                );\n\t            }\n\t            else if (coordSys) {\n\t                var x = mpData.get(coordSys.dimensions[0], idx);\n\t                var y = mpData.get(coordSys.dimensions[1], idx);\n\t                point = coordSys.dataToPoint([x, y]);\n\n\t            }\n\n\t            // Use x, y if has any\n\t            if (!isNaN(xPx)) {\n\t                point[0] = xPx;\n\t            }\n\t            if (!isNaN(yPx)) {\n\t                point[1] = yPx;\n\t            }\n\n\t            mpData.setItemLayout(idx, point);\n\t        });\n\t    }\n\n\t    __webpack_require__(363).extend({\n\n\t        type: 'markPoint',\n\n\t        updateLayout: function (markPointModel, ecModel, api) {\n\t            ecModel.eachSeries(function (seriesModel) {\n\t                var mpModel = seriesModel.markPointModel;\n\t                if (mpModel) {\n\t                    updateMarkerLayout(mpModel.getData(), seriesModel, api);\n\t                    this.markerGroupMap[seriesModel.name].updateLayout(mpModel);\n\t                }\n\t            }, this);\n\t        },\n\n\t        renderSeries: function (seriesModel, mpModel, ecModel, api) {\n\t            var coordSys = seriesModel.coordinateSystem;\n\t            var seriesName = seriesModel.name;\n\t            var seriesData = seriesModel.getData();\n\n\t            var symbolDrawMap = this.markerGroupMap;\n\t            var symbolDraw = symbolDrawMap[seriesName];\n\t            if (!symbolDraw) {\n\t                symbolDraw = symbolDrawMap[seriesName] = new SymbolDraw();\n\t            }\n\n\t            var mpData = createList(coordSys, seriesModel, mpModel);\n\n\t            // FIXME\n\t            mpModel.setData(mpData);\n\n\t            updateMarkerLayout(mpModel.getData(), seriesModel, api);\n\n\t            mpData.each(function (idx) {\n\t                var itemModel = mpData.getItemModel(idx);\n\t                var symbolSize = itemModel.getShallow('symbolSize');\n\t                if (typeof symbolSize === 'function') {\n\t                    // FIXME 这里不兼容 ECharts 2.x，2.x 貌似参数是整个数据？\n\t                    symbolSize = symbolSize(\n\t                        mpModel.getRawValue(idx), mpModel.getDataParams(idx)\n\t                    );\n\t                }\n\t                mpData.setItemVisual(idx, {\n\t                    symbolSize: symbolSize,\n\t                    color: itemModel.get('itemStyle.normal.color')\n\t                        || seriesData.getVisual('color'),\n\t                    symbol: itemModel.getShallow('symbol')\n\t                });\n\t            });\n\n\t            // TODO Text are wrong\n\t            symbolDraw.updateData(mpData);\n\t            this.group.add(symbolDraw.group);\n\n\t            // Set host model for tooltip\n\t            // FIXME\n\t            mpData.eachItemGraphicEl(function (el) {\n\t                el.traverse(function (child) {\n\t                    child.dataModel = mpModel;\n\t                });\n\t            });\n\n\t            symbolDraw.__keep = true;\n\n\t            symbolDraw.group.silent = mpModel.get('silent') || seriesModel.get('silent');\n\t        }\n\t    });\n\n\t    /**\n\t     * @inner\n\t     * @param {module:echarts/coord/*} [coordSys]\n\t     * @param {module:echarts/model/Series} seriesModel\n\t     * @param {module:echarts/model/Model} mpModel\n\t     */\n\t    function createList(coordSys, seriesModel, mpModel) {\n\t        var coordDimsInfos;\n\t        if (coordSys) {\n\t            coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {\n\t                var info = seriesModel.getData().getDimensionInfo(\n\t                    seriesModel.coordDimToDataDim(coordDim)[0]\n\t                ) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys\n\t                info.name = coordDim;\n\t                return info;\n\t            });\n\t        }\n\t        else {\n\t            coordDimsInfos =[{\n\t                name: 'value',\n\t                type: 'float'\n\t            }];\n\t        }\n\n\t        var mpData = new List(coordDimsInfos, mpModel);\n\t        var dataOpt = zrUtil.map(mpModel.get('data'), zrUtil.curry(\n\t                markerHelper.dataTransform, seriesModel\n\t            ));\n\t        if (coordSys) {\n\t            dataOpt = zrUtil.filter(\n\t                dataOpt, zrUtil.curry(markerHelper.dataFilter, coordSys)\n\t            );\n\t        }\n\n\t        mpData.initData(dataOpt, null,\n\t            coordSys ? markerHelper.dimValueGetter : function (item) {\n\t                return item.value;\n\t            }\n\t        );\n\t        return mpData;\n\t    }\n\n\n\n/***/ },\n/* 362 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var numberUtil = __webpack_require__(7);\n\t    var indexOf = zrUtil.indexOf;\n\n\t    function hasXOrY(item) {\n\t        return !(isNaN(parseFloat(item.x)) && isNaN(parseFloat(item.y)));\n\t    }\n\n\t    function hasXAndY(item) {\n\t        return !isNaN(parseFloat(item.x)) && !isNaN(parseFloat(item.y));\n\t    }\n\n\t    function getPrecision(data, valueAxisDim, dataIndex) {\n\t        var precision = -1;\n\t        do {\n\t            precision = Math.max(\n\t                numberUtil.getPrecision(data.get(\n\t                    valueAxisDim, dataIndex\n\t                )),\n\t                precision\n\t            );\n\t            data = data.stackedOn;\n\t        } while (data);\n\n\t        return precision;\n\t    }\n\n\t    function markerTypeCalculatorWithExtent(\n\t        mlType, data, otherDataDim, targetDataDim, otherCoordIndex, targetCoordIndex\n\t    ) {\n\t        var coordArr = [];\n\t        var value = numCalculate(data, targetDataDim, mlType);\n\n\t        var dataIndex = data.indexOfNearest(targetDataDim, value, true);\n\t        coordArr[otherCoordIndex] = data.get(otherDataDim, dataIndex, true);\n\t        coordArr[targetCoordIndex] = data.get(targetDataDim, dataIndex, true);\n\n\t        var precision = getPrecision(data, targetDataDim, dataIndex);\n\t        if (precision >= 0) {\n\t            coordArr[targetCoordIndex] = +coordArr[targetCoordIndex].toFixed(precision);\n\t        }\n\n\t        return coordArr;\n\t    }\n\n\t    var curry = zrUtil.curry;\n\t    // TODO Specified percent\n\t    var markerTypeCalculator = {\n\t        /**\n\t         * @method\n\t         * @param {module:echarts/data/List} data\n\t         * @param {string} baseAxisDim\n\t         * @param {string} valueAxisDim\n\t         */\n\t        min: curry(markerTypeCalculatorWithExtent, 'min'),\n\t        /**\n\t         * @method\n\t         * @param {module:echarts/data/List} data\n\t         * @param {string} baseAxisDim\n\t         * @param {string} valueAxisDim\n\t         */\n\t        max: curry(markerTypeCalculatorWithExtent, 'max'),\n\n\t        /**\n\t         * @method\n\t         * @param {module:echarts/data/List} data\n\t         * @param {string} baseAxisDim\n\t         * @param {string} valueAxisDim\n\t         */\n\t        average: curry(markerTypeCalculatorWithExtent, 'average')\n\t    };\n\n\t    /**\n\t     * Transform markPoint data item to format used in List by do the following\n\t     * 1. Calculate statistic like `max`, `min`, `average`\n\t     * 2. Convert `item.xAxis`, `item.yAxis` to `item.coord` array\n\t     * @param  {module:echarts/model/Series} seriesModel\n\t     * @param  {module:echarts/coord/*} [coordSys]\n\t     * @param  {Object} item\n\t     * @return {Object}\n\t     */\n\t    var dataTransform = function (seriesModel, item) {\n\t        var data = seriesModel.getData();\n\t        var coordSys = seriesModel.coordinateSystem;\n\n\t        // 1. If not specify the position with pixel directly\n\t        // 2. If `coord` is not a data array. Which uses `xAxis`,\n\t        // `yAxis` to specify the coord on each dimension\n\n\t        // parseFloat first because item.x and item.y can be percent string like '20%'\n\t        if (item && !hasXAndY(item) && !zrUtil.isArray(item.coord) && coordSys) {\n\t            var dims = coordSys.dimensions;\n\t            var axisInfo = getAxisInfo(item, data, coordSys, seriesModel);\n\n\t            // Clone the option\n\t            // Transform the properties xAxis, yAxis, radiusAxis, angleAxis, geoCoord to value\n\t            item = zrUtil.clone(item);\n\n\t            if (item.type\n\t                && markerTypeCalculator[item.type]\n\t                && axisInfo.baseAxis && axisInfo.valueAxis\n\t            ) {\n\t                var otherCoordIndex = indexOf(dims, axisInfo.baseAxis.dim);\n\t                var targetCoordIndex = indexOf(dims, axisInfo.valueAxis.dim);\n\n\t                item.coord = markerTypeCalculator[item.type](\n\t                    data, axisInfo.baseDataDim, axisInfo.valueDataDim,\n\t                    otherCoordIndex, targetCoordIndex\n\t                );\n\t                // Force to use the value of calculated value.\n\t                item.value = item.coord[targetCoordIndex];\n\t            }\n\t            else {\n\t                // FIXME Only has one of xAxis and yAxis.\n\t                var coord = [\n\t                    item.xAxis != null ? item.xAxis : item.radiusAxis,\n\t                    item.yAxis != null ? item.yAxis : item.angleAxis\n\t                ];\n\t                // Each coord support max, min, average\n\t                for (var i = 0; i < 2; i++) {\n\t                    if (markerTypeCalculator[coord[i]]) {\n\t                        var dataDim = seriesModel.coordDimToDataDim(dims[i])[0];\n\t                        coord[i] = numCalculate(data, dataDim, coord[i]);\n\t                    }\n\t                }\n\t                item.coord = coord;\n\t            }\n\t        }\n\t        return item;\n\t    };\n\n\t    var getAxisInfo = function (item, data, coordSys, seriesModel) {\n\t        var ret = {};\n\n\t        if (item.valueIndex != null || item.valueDim != null) {\n\t            ret.valueDataDim = item.valueIndex != null\n\t                ? data.getDimension(item.valueIndex) : item.valueDim;\n\t            ret.valueAxis = coordSys.getAxis(seriesModel.dataDimToCoordDim(ret.valueDataDim));\n\t            ret.baseAxis = coordSys.getOtherAxis(ret.valueAxis);\n\t            ret.baseDataDim = seriesModel.coordDimToDataDim(ret.baseAxis.dim)[0];\n\t        }\n\t        else {\n\t            ret.baseAxis = seriesModel.getBaseAxis();\n\t            ret.valueAxis = coordSys.getOtherAxis(ret.baseAxis);\n\t            ret.baseDataDim = seriesModel.coordDimToDataDim(ret.baseAxis.dim)[0];\n\t            ret.valueDataDim = seriesModel.coordDimToDataDim(ret.valueAxis.dim)[0];\n\t        }\n\n\t        return ret;\n\t    };\n\n\t    /**\n\t     * Filter data which is out of coordinateSystem range\n\t     * [dataFilter description]\n\t     * @param  {module:echarts/coord/*} [coordSys]\n\t     * @param  {Object} item\n\t     * @return {boolean}\n\t     */\n\t    var dataFilter = function (coordSys, item) {\n\t        // Alwalys return true if there is no coordSys\n\t        return (coordSys && coordSys.containData && item.coord && !hasXOrY(item))\n\t            ? coordSys.containData(item.coord) : true;\n\t    };\n\n\t    var dimValueGetter = function (item, dimName, dataIndex, dimIndex) {\n\t        // x, y, radius, angle\n\t        if (dimIndex < 2) {\n\t            return item.coord && item.coord[dimIndex];\n\t        }\n\t        return item.value;\n\t    };\n\n\t    var numCalculate = function (data, valueDataDim, type) {\n\t        if (type === 'average') {\n\t            var sum = 0;\n\t            var count = 0;\n\t            data.each(valueDataDim, function (val, idx) {\n\t                if (!isNaN(val)) {\n\t                    sum += val;\n\t                    count++;\n\t                }\n\t            }, true);\n\t            return sum / count;\n\t        }\n\t        else {\n\t            return data.getDataExtent(valueDataDim, true)[type === 'max' ? 1 : 0];\n\t        }\n\t    };\n\n\t    module.exports = {\n\t        dataTransform: dataTransform,\n\t        dataFilter: dataFilter,\n\t        dimValueGetter: dimValueGetter,\n\t        getAxisInfo: getAxisInfo,\n\t        numCalculate: numCalculate\n\t    };\n\n\n/***/ },\n/* 363 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    module.exports = __webpack_require__(1).extendComponentView({\n\n\t        type: 'marker',\n\n\t        init: function () {\n\t            /**\n\t             * Markline grouped by series\n\t             * @private\n\t             * @type {Object}\n\t             */\n\t            this.markerGroupMap = {};\n\t        },\n\n\t        render: function (markerModel, ecModel, api) {\n\t            var markerGroupMap = this.markerGroupMap;\n\t            for (var name in markerGroupMap) {\n\t                if (markerGroupMap.hasOwnProperty(name)) {\n\t                    markerGroupMap[name].__keep = false;\n\t                }\n\t            }\n\n\t            var markerModelKey = this.type + 'Model';\n\t            ecModel.eachSeries(function (seriesModel) {\n\t                var markerModel = seriesModel[markerModelKey];\n\t                markerModel && this.renderSeries(seriesModel, markerModel, ecModel, api);\n\t            }, this);\n\n\t            for (var name in markerGroupMap) {\n\t                if (markerGroupMap.hasOwnProperty(name) && !markerGroupMap[name].__keep) {\n\t                    this.group.remove(markerGroupMap[name].group);\n\t                }\n\t            }\n\t        },\n\n\t        renderSeries: function () {}\n\t    });\n\n\n/***/ },\n/* 364 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    __webpack_require__(365);\n\t    __webpack_require__(366);\n\n\t    __webpack_require__(1).registerPreprocessor(function (opt) {\n\t        // Make sure markLine component is enabled\n\t        opt.markLine = opt.markLine || {};\n\t    });\n\n\n/***/ },\n/* 365 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    module.exports = __webpack_require__(360).extend({\n\n\t        type: 'markLine',\n\n\t        defaultOption: {\n\t            zlevel: 0,\n\t            z: 5,\n\n\t            symbol: ['circle', 'arrow'],\n\t            symbolSize: [8, 16],\n\n\t            //symbolRotate: 0,\n\n\t            precision: 2,\n\t            tooltip: {\n\t                trigger: 'item'\n\t            },\n\t            label: {\n\t                normal: {\n\t                    show: true,\n\t                    position: 'end'\n\t                },\n\t                emphasis: {\n\t                    show: true\n\t                }\n\t            },\n\t            lineStyle: {\n\t                normal: {\n\t                    type: 'dashed'\n\t                },\n\t                emphasis: {\n\t                    width: 3\n\t                }\n\t            },\n\t            animationEasing: 'linear'\n\t        }\n\t    });\n\n\n/***/ },\n/* 366 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var List = __webpack_require__(98);\n\t    var numberUtil = __webpack_require__(7);\n\n\t    var markerHelper = __webpack_require__(362);\n\n\t    var LineDraw = __webpack_require__(202);\n\n\t    var markLineTransform = function (seriesModel, coordSys, mlModel, item) {\n\t        var data = seriesModel.getData();\n\t        // Special type markLine like 'min', 'max', 'average'\n\t        var mlType = item.type;\n\n\t        if (!zrUtil.isArray(item)\n\t            && (\n\t                mlType === 'min' || mlType === 'max' || mlType === 'average'\n\t                // In case\n\t                // data: [{\n\t                //   yAxis: 10\n\t                // }]\n\t                || (item.xAxis != null || item.yAxis != null)\n\t            )\n\t        ) {\n\t            var valueAxis;\n\t            var valueDataDim;\n\t            var value;\n\n\t            if (item.yAxis != null || item.xAxis != null) {\n\t                valueDataDim = item.yAxis != null ? 'y' : 'x';\n\t                valueAxis = coordSys.getAxis(valueDataDim);\n\n\t                value = zrUtil.retrieve(item.yAxis, item.xAxis);\n\t            }\n\t            else {\n\t                var axisInfo = markerHelper.getAxisInfo(item, data, coordSys, seriesModel);\n\t                valueDataDim = axisInfo.valueDataDim;\n\t                valueAxis = axisInfo.valueAxis;\n\t                value = markerHelper.numCalculate(data, valueDataDim, mlType);\n\t            }\n\t            var valueIndex = valueDataDim === 'x' ? 0 : 1;\n\t            var baseIndex = 1 - valueIndex;\n\n\t            var mlFrom = zrUtil.clone(item);\n\t            var mlTo = {};\n\n\t            mlFrom.type = null;\n\n\t            mlFrom.coord = [];\n\t            mlTo.coord = [];\n\t            mlFrom.coord[baseIndex] = -Infinity;\n\t            mlTo.coord[baseIndex] = Infinity;\n\n\t            var precision = mlModel.get('precision');\n\t            if (precision >= 0 && typeof value === 'number') {\n\t                value = +value.toFixed(precision);\n\t            }\n\n\t            mlFrom.coord[valueIndex] = mlTo.coord[valueIndex] = value;\n\n\t            item = [mlFrom, mlTo, { // Extra option for tooltip and label\n\t                type: mlType,\n\t                valueIndex: item.valueIndex,\n\t                // Force to use the value of calculated value.\n\t                value: value\n\t            }];\n\t        }\n\n\t        item = [\n\t            markerHelper.dataTransform(seriesModel, item[0]),\n\t            markerHelper.dataTransform(seriesModel, item[1]),\n\t            zrUtil.extend({}, item[2])\n\t        ];\n\n\t        // Avoid line data type is extended by from(to) data type\n\t        item[2].type = item[2].type || '';\n\n\t        // Merge from option and to option into line option\n\t        zrUtil.merge(item[2], item[0]);\n\t        zrUtil.merge(item[2], item[1]);\n\n\t        return item;\n\t    };\n\n\t    function isInifinity(val) {\n\t        return !isNaN(val) && !isFinite(val);\n\t    }\n\n\t    // If a markLine has one dim\n\t    function ifMarkLineHasOnlyDim(dimIndex, fromCoord, toCoord, coordSys) {\n\t        var otherDimIndex = 1 - dimIndex;\n\t        var dimName = coordSys.dimensions[dimIndex];\n\t        return isInifinity(fromCoord[otherDimIndex]) && isInifinity(toCoord[otherDimIndex])\n\t            && fromCoord[dimIndex] === toCoord[dimIndex] && coordSys.getAxis(dimName).containData(fromCoord[dimIndex]);\n\t    }\n\n\t    function markLineFilter(coordSys, item) {\n\t        if (coordSys.type === 'cartesian2d') {\n\t            var fromCoord = item[0].coord;\n\t            var toCoord = item[1].coord;\n\t            // In case\n\t            // {\n\t            //  markLine: {\n\t            //    data: [{ yAxis: 2 }]\n\t            //  }\n\t            // }\n\t            if (\n\t                fromCoord && toCoord &&\n\t                (ifMarkLineHasOnlyDim(1, fromCoord, toCoord, coordSys)\n\t                || ifMarkLineHasOnlyDim(0, fromCoord, toCoord, coordSys))\n\t            ) {\n\t                return true;\n\t            }\n\t        }\n\t        return markerHelper.dataFilter(coordSys, item[0])\n\t            && markerHelper.dataFilter(coordSys, item[1]);\n\t    }\n\n\t    function updateSingleMarkerEndLayout(\n\t        data, idx, isFrom, seriesModel, api\n\t    ) {\n\t        var coordSys = seriesModel.coordinateSystem;\n\t        var itemModel = data.getItemModel(idx);\n\n\t        var point;\n\t        var xPx = numberUtil.parsePercent(itemModel.get('x'), api.getWidth());\n\t        var yPx = numberUtil.parsePercent(itemModel.get('y'), api.getHeight());\n\t        if (!isNaN(xPx) && !isNaN(yPx)) {\n\t            point = [xPx, yPx];\n\t        }\n\t        else {\n\t            // Chart like bar may have there own marker positioning logic\n\t            if (seriesModel.getMarkerPosition) {\n\t                // Use the getMarkerPoisition\n\t                point = seriesModel.getMarkerPosition(\n\t                    data.getValues(data.dimensions, idx)\n\t                );\n\t            }\n\t            else {\n\t                var dims = coordSys.dimensions;\n\t                var x = data.get(dims[0], idx);\n\t                var y = data.get(dims[1], idx);\n\t                point = coordSys.dataToPoint([x, y]);\n\t            }\n\t            // Expand line to the edge of grid if value on one axis is Inifnity\n\t            // In case\n\t            //  markLine: {\n\t            //    data: [{\n\t            //      yAxis: 2\n\t            //      // or\n\t            //      type: 'average'\n\t            //    }]\n\t            //  }\n\t            if (coordSys.type === 'cartesian2d') {\n\t                var xAxis = coordSys.getAxis('x');\n\t                var yAxis = coordSys.getAxis('y');\n\t                var dims = coordSys.dimensions;\n\t                if (isInifinity(data.get(dims[0], idx))) {\n\t                    point[0] = xAxis.toGlobalCoord(xAxis.getExtent()[isFrom ? 0 : 1]);\n\t                }\n\t                else if (isInifinity(data.get(dims[1], idx))) {\n\t                    point[1] = yAxis.toGlobalCoord(yAxis.getExtent()[isFrom ? 0 : 1]);\n\t                }\n\t            }\n\n\t            // Use x, y if has any\n\t            if (!isNaN(xPx)) {\n\t                point[0] = xPx;\n\t            }\n\t            if (!isNaN(yPx)) {\n\t                point[1] = yPx;\n\t            }\n\t        }\n\n\t        data.setItemLayout(idx, point);\n\t    }\n\n\t    __webpack_require__(363).extend({\n\n\t        type: 'markLine',\n\n\t        updateLayout: function (markLineModel, ecModel, api) {\n\t            ecModel.eachSeries(function (seriesModel) {\n\t                var mlModel = seriesModel.markLineModel;\n\t                if (mlModel) {\n\t                    var mlData = mlModel.getData();\n\t                    var fromData = mlModel.__from;\n\t                    var toData = mlModel.__to;\n\t                    // Update visual and layout of from symbol and to symbol\n\t                    fromData.each(function (idx) {\n\t                        updateSingleMarkerEndLayout(fromData, idx, true, seriesModel, api);\n\t                        updateSingleMarkerEndLayout(toData, idx, false, seriesModel, api);\n\t                    });\n\t                    // Update layout of line\n\t                    mlData.each(function (idx) {\n\t                        mlData.setItemLayout(idx, [\n\t                            fromData.getItemLayout(idx),\n\t                            toData.getItemLayout(idx)\n\t                        ]);\n\t                    });\n\n\t                    this.markerGroupMap[seriesModel.name].updateLayout();\n\n\t                }\n\t            }, this);\n\t        },\n\n\t        renderSeries: function (seriesModel, mlModel, ecModel, api) {\n\t            var coordSys = seriesModel.coordinateSystem;\n\t            var seriesName = seriesModel.name;\n\t            var seriesData = seriesModel.getData();\n\n\t            var lineDrawMap = this.markerGroupMap;\n\t            var lineDraw = lineDrawMap[seriesName];\n\t            if (!lineDraw) {\n\t                lineDraw = lineDrawMap[seriesName] = new LineDraw();\n\t            }\n\t            this.group.add(lineDraw.group);\n\n\t            var mlData = createList(coordSys, seriesModel, mlModel);\n\n\t            var fromData = mlData.from;\n\t            var toData = mlData.to;\n\t            var lineData = mlData.line;\n\n\t            mlModel.__from = fromData;\n\t            mlModel.__to = toData;\n\t            // Line data for tooltip and formatter\n\t            mlModel.setData(lineData);\n\n\t            var symbolType = mlModel.get('symbol');\n\t            var symbolSize = mlModel.get('symbolSize');\n\t            if (!zrUtil.isArray(symbolType)) {\n\t                symbolType = [symbolType, symbolType];\n\t            }\n\t            if (typeof symbolSize === 'number') {\n\t                symbolSize = [symbolSize, symbolSize];\n\t            }\n\n\t            // Update visual and layout of from symbol and to symbol\n\t            mlData.from.each(function (idx) {\n\t                updateDataVisualAndLayout(fromData, idx, true);\n\t                updateDataVisualAndLayout(toData, idx, false);\n\t            });\n\n\t            // Update visual and layout of line\n\t            lineData.each(function (idx) {\n\t                var lineColor = lineData.getItemModel(idx).get('lineStyle.normal.color');\n\t                lineData.setItemVisual(idx, {\n\t                    color: lineColor || fromData.getItemVisual(idx, 'color')\n\t                });\n\t                lineData.setItemLayout(idx, [\n\t                    fromData.getItemLayout(idx),\n\t                    toData.getItemLayout(idx)\n\t                ]);\n\n\t                lineData.setItemVisual(idx, {\n\t                    'fromSymbolSize': fromData.getItemVisual(idx, 'symbolSize'),\n\t                    'fromSymbol': fromData.getItemVisual(idx, 'symbol'),\n\t                    'toSymbolSize': toData.getItemVisual(idx, 'symbolSize'),\n\t                    'toSymbol': toData.getItemVisual(idx, 'symbol')\n\t                });\n\t            });\n\n\t            lineDraw.updateData(lineData);\n\n\t            // Set host model for tooltip\n\t            // FIXME\n\t            mlData.line.eachItemGraphicEl(function (el, idx) {\n\t                el.traverse(function (child) {\n\t                    child.dataModel = mlModel;\n\t                });\n\t            });\n\n\t            function updateDataVisualAndLayout(data, idx, isFrom) {\n\t                var itemModel = data.getItemModel(idx);\n\n\t                updateSingleMarkerEndLayout(\n\t                    data, idx, isFrom, seriesModel, api\n\t                );\n\n\t                data.setItemVisual(idx, {\n\t                    symbolSize: itemModel.get('symbolSize') || symbolSize[isFrom ? 0 : 1],\n\t                    symbol: itemModel.get('symbol', true) || symbolType[isFrom ? 0 : 1],\n\t                    color: itemModel.get('itemStyle.normal.color') || seriesData.getVisual('color')\n\t                });\n\t            }\n\n\t            lineDraw.__keep = true;\n\n\t            lineDraw.group.silent = mlModel.get('silent') || seriesModel.get('silent');\n\t        }\n\t    });\n\n\t    /**\n\t     * @inner\n\t     * @param {module:echarts/coord/*} coordSys\n\t     * @param {module:echarts/model/Series} seriesModel\n\t     * @param {module:echarts/model/Model} mpModel\n\t     */\n\t    function createList(coordSys, seriesModel, mlModel) {\n\n\t        var coordDimsInfos;\n\t        if (coordSys) {\n\t            coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {\n\t                var info = seriesModel.getData().getDimensionInfo(\n\t                    seriesModel.coordDimToDataDim(coordDim)[0]\n\t                ) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys\n\t                info.name = coordDim;\n\t                return info;\n\t            });\n\t        }\n\t        else {\n\t            coordDimsInfos =[{\n\t                name: 'value',\n\t                type: 'float'\n\t            }];\n\t        }\n\n\t        var fromData = new List(coordDimsInfos, mlModel);\n\t        var toData = new List(coordDimsInfos, mlModel);\n\t        // No dimensions\n\t        var lineData = new List([], mlModel);\n\n\t        var optData = zrUtil.map(mlModel.get('data'), zrUtil.curry(\n\t            markLineTransform, seriesModel, coordSys, mlModel\n\t        ));\n\t        if (coordSys) {\n\t            optData = zrUtil.filter(\n\t                optData, zrUtil.curry(markLineFilter, coordSys)\n\t            );\n\t        }\n\t        var dimValueGetter = coordSys ? markerHelper.dimValueGetter : function (item) {\n\t            return item.value;\n\t        };\n\t        fromData.initData(\n\t            zrUtil.map(optData, function (item) { return item[0]; }),\n\t            null, dimValueGetter\n\t        );\n\t        toData.initData(\n\t            zrUtil.map(optData, function (item) { return item[1]; }),\n\t            null, dimValueGetter\n\t        );\n\t        lineData.initData(\n\t            zrUtil.map(optData, function (item) { return item[2]; })\n\t        );\n\t        lineData.hasItemOption = true;\n\t        return {\n\t            from: fromData,\n\t            to: toData,\n\t            line: lineData\n\t        };\n\t    }\n\n\n/***/ },\n/* 367 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    __webpack_require__(368);\n\t    __webpack_require__(369);\n\n\t    __webpack_require__(1).registerPreprocessor(function (opt) {\n\t        // Make sure markArea component is enabled\n\t        opt.markArea = opt.markArea || {};\n\t    });\n\n\n/***/ },\n/* 368 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    module.exports = __webpack_require__(360).extend({\n\n\t        type: 'markArea',\n\n\t        defaultOption: {\n\t            zlevel: 0,\n\t            // PENDING\n\t            z: 1,\n\t            tooltip: {\n\t                trigger: 'item'\n\t            },\n\t            // markArea should fixed on the coordinate system\n\t            animation: false,\n\t            label: {\n\t                normal: {\n\t                    show: true,\n\t                    position: 'top'\n\t                },\n\t                emphasis: {\n\t                    show: true,\n\t                    position: 'top'\n\t                }\n\t            },\n\t            itemStyle: {\n\t                normal: {\n\t                    // color and borderColor default to use color from series\n\t                    // color: 'auto'\n\t                    // borderColor: 'auto'\n\t                    borderWidth: 0\n\t                }\n\t            }\n\t        }\n\t    });\n\n\n/***/ },\n/* 369 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// TODO Better on polar\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var List = __webpack_require__(98);\n\t    var numberUtil = __webpack_require__(7);\n\t    var graphic = __webpack_require__(43);\n\t    var colorUtil = __webpack_require__(39);\n\n\t    var markerHelper = __webpack_require__(362);\n\n\t    var markAreaTransform = function (seriesModel, coordSys, maModel, item) {\n\t        var lt = markerHelper.dataTransform(seriesModel, item[0]);\n\t        var rb = markerHelper.dataTransform(seriesModel, item[1]);\n\t        var retrieve = zrUtil.retrieve;\n\n\t        // FIXME make sure lt is less than rb\n\t        var ltCoord = lt.coord;\n\t        var rbCoord = rb.coord;\n\t        ltCoord[0] = retrieve(ltCoord[0], -Infinity);\n\t        ltCoord[1] = retrieve(ltCoord[1], -Infinity);\n\n\t        rbCoord[0] = retrieve(rbCoord[0], Infinity);\n\t        rbCoord[1] = retrieve(rbCoord[1], Infinity);\n\n\t        // Merge option into one\n\t        var result = zrUtil.mergeAll([{}, lt, rb]);\n\n\t        result.coord = [\n\t            lt.coord, rb.coord\n\t        ];\n\t        result.x0 = lt.x;\n\t        result.y0 = lt.y;\n\t        result.x1 = rb.x;\n\t        result.y1 = rb.y;\n\t        return result;\n\t    };\n\n\t    function isInifinity(val) {\n\t        return !isNaN(val) && !isFinite(val);\n\t    }\n\n\t    // If a markArea has one dim\n\t    function ifMarkLineHasOnlyDim(dimIndex, fromCoord, toCoord, coordSys) {\n\t        var otherDimIndex = 1 - dimIndex;\n\t        return isInifinity(fromCoord[otherDimIndex]) && isInifinity(toCoord[otherDimIndex]);\n\t    }\n\n\t    function markAreaFilter(coordSys, item) {\n\t        var fromCoord = item.coord[0];\n\t        var toCoord = item.coord[1];\n\t        if (coordSys.type === 'cartesian2d') {\n\t            // In case\n\t            // {\n\t            //  markArea: {\n\t            //    data: [{ yAxis: 2 }]\n\t            //  }\n\t            // }\n\t            if (\n\t                fromCoord && toCoord &&\n\t                (ifMarkLineHasOnlyDim(1, fromCoord, toCoord, coordSys)\n\t                || ifMarkLineHasOnlyDim(0, fromCoord, toCoord, coordSys))\n\t            ) {\n\t                return true;\n\t            }\n\t        }\n\t        return markerHelper.dataFilter(coordSys, {\n\t                coord: fromCoord,\n\t                x: item.x0,\n\t                y: item.y0\n\t            })\n\t            || markerHelper.dataFilter(coordSys, {\n\t                coord: toCoord,\n\t                x: item.x1,\n\t                y: item.y1\n\t            });\n\t    }\n\n\t    // dims can be ['x0', 'y0'], ['x1', 'y1'], ['x0', 'y1'], ['x1', 'y0']\n\t    function getSingleMarkerEndPoint(data, idx, dims, seriesModel, api) {\n\t        var coordSys = seriesModel.coordinateSystem;\n\t        var itemModel = data.getItemModel(idx);\n\n\t        var point;\n\t        var xPx = numberUtil.parsePercent(itemModel.get(dims[0]), api.getWidth());\n\t        var yPx = numberUtil.parsePercent(itemModel.get(dims[1]), api.getHeight());\n\t        if (!isNaN(xPx) && !isNaN(yPx)) {\n\t            point = [xPx, yPx];\n\t        }\n\t        else {\n\t            // Chart like bar may have there own marker positioning logic\n\t            if (seriesModel.getMarkerPosition) {\n\t                // Use the getMarkerPoisition\n\t                point = seriesModel.getMarkerPosition(\n\t                    data.getValues(dims, idx)\n\t                );\n\t            }\n\t            else {\n\t                var x = data.get(dims[0], idx);\n\t                var y = data.get(dims[1], idx);\n\t                point = coordSys.dataToPoint([x, y], true);\n\t            }\n\t            if (coordSys.type === 'cartesian2d') {\n\t                var xAxis = coordSys.getAxis('x');\n\t                var yAxis = coordSys.getAxis('y');\n\t                var x = data.get(dims[0], idx);\n\t                var y = data.get(dims[1], idx);\n\t                if (isInifinity(x)) {\n\t                    point[0] = xAxis.toGlobalCoord(xAxis.getExtent()[dims[0] === 'x0' ? 0 : 1]);\n\t                }\n\t                else if (isInifinity(y)) {\n\t                    point[1] = yAxis.toGlobalCoord(yAxis.getExtent()[dims[1] === 'y0' ? 0 : 1]);\n\t                }\n\t            }\n\n\t            // Use x, y if has any\n\t            if (!isNaN(xPx)) {\n\t                point[0] = xPx;\n\t            }\n\t            if (!isNaN(yPx)) {\n\t                point[1] = yPx;\n\t            }\n\t        }\n\n\t        return point;\n\t    }\n\n\t    var dimPermutations = [['x0', 'y0'], ['x1', 'y0'], ['x1', 'y1'], ['x0', 'y1']];\n\n\t    __webpack_require__(363).extend({\n\n\t        type: 'markArea',\n\n\t        updateLayout: function (markAreaModel, ecModel, api) {\n\t            ecModel.eachSeries(function (seriesModel) {\n\t                var maModel = seriesModel.markAreaModel;\n\t                if (maModel) {\n\t                    var areaData = maModel.getData();\n\t                    areaData.each(function (idx) {\n\t                        var points = zrUtil.map(dimPermutations, function (dim) {\n\t                            return getSingleMarkerEndPoint(areaData, idx, dim, seriesModel, api);\n\t                        });\n\t                        // Layout\n\t                        areaData.setItemLayout(idx, points);\n\t                        var el = areaData.getItemGraphicEl(idx);\n\t                        el.setShape('points', points);\n\t                    });\n\t                }\n\t            }, this);\n\t        },\n\n\t        renderSeries: function (seriesModel, maModel, ecModel, api) {\n\t            var coordSys = seriesModel.coordinateSystem;\n\t            var seriesName = seriesModel.name;\n\t            var seriesData = seriesModel.getData();\n\n\t            var areaGroupMap = this.markerGroupMap;\n\t            var polygonGroup = areaGroupMap[seriesName];\n\t            if (!polygonGroup) {\n\t                polygonGroup = areaGroupMap[seriesName] = {\n\t                    group: new graphic.Group()\n\t                };\n\t            }\n\t            this.group.add(polygonGroup.group);\n\t            polygonGroup.__keep = true;\n\n\t            var areaData = createList(coordSys, seriesModel, maModel);\n\n\t            // Line data for tooltip and formatter\n\t            maModel.setData(areaData);\n\n\t            // Update visual and layout of line\n\t            areaData.each(function (idx) {\n\t                // Layout\n\t                areaData.setItemLayout(idx, zrUtil.map(dimPermutations, function (dim) {\n\t                    return getSingleMarkerEndPoint(areaData, idx, dim, seriesModel, api);\n\t                }));\n\n\t                // Visual\n\t                areaData.setItemVisual(idx, {\n\t                    color: seriesData.getVisual('color')\n\t                });\n\t            });\n\n\n\t            areaData.diff(polygonGroup.__data)\n\t                .add(function (idx) {\n\t                    var polygon = new graphic.Polygon({\n\t                        shape: {\n\t                            points: areaData.getItemLayout(idx)\n\t                        }\n\t                    });\n\t                    areaData.setItemGraphicEl(idx, polygon);\n\t                    polygonGroup.group.add(polygon);\n\t                })\n\t                .update(function (newIdx, oldIdx) {\n\t                    var polygon = polygonGroup.__data.getItemGraphicEl(oldIdx);\n\t                    graphic.updateProps(polygon, {\n\t                        shape: {\n\t                            points: areaData.getItemLayout(newIdx)\n\t                        }\n\t                    }, maModel, newIdx);\n\t                    polygonGroup.group.add(polygon);\n\t                    areaData.setItemGraphicEl(newIdx, polygon);\n\t                })\n\t                .remove(function (idx) {\n\t                    var polygon = polygonGroup.__data.getItemGraphicEl(idx);\n\t                    polygonGroup.group.remove(polygon);\n\t                })\n\t                .execute();\n\n\t            areaData.eachItemGraphicEl(function (polygon, idx) {\n\t                var itemModel = areaData.getItemModel(idx);\n\t                var labelModel = itemModel.getModel('label.normal');\n\t                var labelHoverModel = itemModel.getModel('label.emphasis');\n\t                var color = areaData.getItemVisual(idx, 'color');\n\t                polygon.useStyle(\n\t                    zrUtil.defaults(\n\t                        itemModel.getModel('itemStyle.normal').getItemStyle(),\n\t                        {\n\t                            fill: colorUtil.modifyAlpha(color, 0.4),\n\t                            stroke: color\n\t                        }\n\t                    )\n\t                );\n\n\t                polygon.hoverStyle = itemModel.getModel('itemStyle.normal').getItemStyle();\n\n\t                var defaultValue = areaData.getName(idx) || '';\n\t                var textColor = color || polygon.style.fill;\n\n\t                if (labelModel.getShallow('show')) {\n\t                    graphic.setText(polygon.style, labelModel, textColor);\n\t                    polygon.style.text = zrUtil.retrieve(\n\t                        maModel.getFormattedLabel(idx, 'normal'),\n\t                        defaultValue\n\t                    );\n\t                }\n\t                else {\n\t                    polygon.style.text = '';\n\t                }\n\n\t                if (labelHoverModel.getShallow('show')) {\n\t                    graphic.setText(polygon.hoverStyle, labelHoverModel, textColor);\n\t                    polygon.hoverStyle.text = zrUtil.retrieve(\n\t                        maModel.getFormattedLabel(idx, 'emphasis'),\n\t                        defaultValue\n\t                    );\n\t                }\n\t                else {\n\t                    polygon.hoverStyle.text = '';\n\t                }\n\n\t                graphic.setHoverStyle(polygon, {});\n\n\t                polygon.dataModel = maModel;\n\t            });\n\n\t            polygonGroup.__data = areaData;\n\n\t            polygonGroup.group.silent = maModel.get('silent') || seriesModel.get('silent');\n\t        }\n\t    });\n\n\t    /**\n\t     * @inner\n\t     * @param {module:echarts/coord/*} coordSys\n\t     * @param {module:echarts/model/Series} seriesModel\n\t     * @param {module:echarts/model/Model} mpModel\n\t     */\n\t    function createList(coordSys, seriesModel, maModel) {\n\n\t        var coordDimsInfos;\n\t        var areaData;\n\t        var dims = ['x0', 'y0', 'x1', 'y1'];\n\t        if (coordSys) {\n\t            coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {\n\t                var info = seriesModel.getData().getDimensionInfo(\n\t                    seriesModel.coordDimToDataDim(coordDim)[0]\n\t                ) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys\n\t                info.name = coordDim;\n\t                return info;\n\t            });\n\t            areaData = new List(zrUtil.map(dims, function (dim, idx) {\n\t                return {\n\t                    name: dim,\n\t                    type: coordDimsInfos[idx % 2].type\n\t                };\n\t            }), maModel);\n\t        }\n\t        else {\n\t            coordDimsInfos =[{\n\t                name: 'value',\n\t                type: 'float'\n\t            }];\n\t            areaData = new List(coordDimsInfos, maModel);\n\t        }\n\n\t        var optData = zrUtil.map(maModel.get('data'), zrUtil.curry(\n\t            markAreaTransform, seriesModel, coordSys, maModel\n\t        ));\n\t        if (coordSys) {\n\t            optData = zrUtil.filter(\n\t                optData, zrUtil.curry(markAreaFilter, coordSys)\n\t            );\n\t        }\n\n\t        var dimValueGetter = coordSys ? function (item, dimName, dataIndex, dimIndex) {\n\t            return item.coord[Math.floor(dimIndex / 2)][dimIndex % 2];\n\t        } : function (item) {\n\t            return item.value;\n\t        };\n\t        areaData.initData(optData, null, dimValueGetter);\n\t        areaData.hasItemOption = true;\n\t        return areaData;\n\t    }\n\n\n/***/ },\n/* 370 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * DataZoom component entry\n\t */\n\n\n\t    var echarts = __webpack_require__(1);\n\n\t    echarts.registerPreprocessor(__webpack_require__(371));\n\n\t    __webpack_require__(372);\n\t    __webpack_require__(373);\n\t    __webpack_require__(374);\n\t    __webpack_require__(376);\n\n\n\n/***/ },\n/* 371 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Timeline preprocessor\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    module.exports = function (option) {\n\t        var timelineOpt = option && option.timeline;\n\n\t        if (!zrUtil.isArray(timelineOpt)) {\n\t            timelineOpt = timelineOpt ? [timelineOpt] : [];\n\t        }\n\n\t        zrUtil.each(timelineOpt, function (opt) {\n\t            if (!opt) {\n\t                return;\n\t            }\n\n\t            compatibleEC2(opt);\n\t        });\n\t    };\n\n\t    function compatibleEC2(opt) {\n\t        var type = opt.type;\n\n\t        var ec2Types = {'number': 'value', 'time': 'time'};\n\n\t        // Compatible with ec2\n\t        if (ec2Types[type]) {\n\t            opt.axisType = ec2Types[type];\n\t            delete opt.type;\n\t        }\n\n\t        transferItem(opt);\n\n\t        if (has(opt, 'controlPosition')) {\n\t            var controlStyle = opt.controlStyle || (opt.controlStyle = {});\n\t            if (!has(controlStyle, 'position')) {\n\t                controlStyle.position = opt.controlPosition;\n\t            }\n\t            if (controlStyle.position === 'none' && !has(controlStyle, 'show')) {\n\t                controlStyle.show = false;\n\t                delete controlStyle.position;\n\t            }\n\t            delete opt.controlPosition;\n\t        }\n\n\t        zrUtil.each(opt.data || [], function (dataItem) {\n\t            if (zrUtil.isObject(dataItem) && !zrUtil.isArray(dataItem)) {\n\t                if (!has(dataItem, 'value') && has(dataItem, 'name')) {\n\t                    // In ec2, using name as value.\n\t                    dataItem.value = dataItem.name;\n\t                }\n\t                transferItem(dataItem);\n\t            }\n\t        });\n\t    }\n\n\t    function transferItem(opt) {\n\t        var itemStyle = opt.itemStyle || (opt.itemStyle = {});\n\n\t        var itemStyleEmphasis = itemStyle.emphasis || (itemStyle.emphasis = {});\n\n\t        // Transfer label out\n\t        var label = opt.label || (opt.label || {});\n\t        var labelNormal = label.normal || (label.normal = {});\n\t        var excludeLabelAttr = {normal: 1, emphasis: 1};\n\n\t        zrUtil.each(label, function (value, name) {\n\t            if (!excludeLabelAttr[name] && !has(labelNormal, name)) {\n\t                labelNormal[name] = value;\n\t            }\n\t        });\n\n\t        if (itemStyleEmphasis.label && !has(label, 'emphasis')) {\n\t            label.emphasis = itemStyleEmphasis.label;\n\t            delete itemStyleEmphasis.label;\n\t        }\n\t    }\n\n\t    function has(obj, attr) {\n\t        return obj.hasOwnProperty(attr);\n\t    }\n\n\n\n/***/ },\n/* 372 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    __webpack_require__(19).registerSubTypeDefaulter('timeline', function () {\n\t        // Only slider now.\n\t        return 'slider';\n\t    });\n\n\n\n/***/ },\n/* 373 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Timeilne action\n\t */\n\n\n\t    var echarts = __webpack_require__(1);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    echarts.registerAction(\n\n\t        {type: 'timelineChange', event: 'timelineChanged', update: 'prepareAndUpdate'},\n\n\t        function (payload, ecModel) {\n\n\t            var timelineModel = ecModel.getComponent('timeline');\n\t            if (timelineModel && payload.currentIndex != null) {\n\t                timelineModel.setCurrentIndex(payload.currentIndex);\n\n\t                if (!timelineModel.get('loop', true) && timelineModel.isIndexMax()) {\n\t                    timelineModel.setPlayState(false);\n\t                }\n\t            }\n\n\t            // Set normalized currentIndex to payload.\n\t            ecModel.resetOption('timeline');\n\n\t            return zrUtil.defaults({\n\t                currentIndex: timelineModel.option.currentIndex\n\t            }, payload);\n\t        }\n\t    );\n\n\t    echarts.registerAction(\n\n\t        {type: 'timelinePlayChange', event: 'timelinePlayChanged', update: 'update'},\n\n\t        function (payload, ecModel) {\n\t            var timelineModel = ecModel.getComponent('timeline');\n\t            if (timelineModel && payload.playState != null) {\n\t                timelineModel.setPlayState(payload.playState);\n\t            }\n\t        }\n\t    );\n\n\n\n/***/ },\n/* 374 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Silder timeline model\n\t */\n\n\n\t    var TimelineModel = __webpack_require__(375);\n\t    var zrUtil = __webpack_require__(4);\n\t    var modelUtil = __webpack_require__(5);\n\n\t    var SliderTimelineModel = TimelineModel.extend({\n\n\t        type: 'timeline.slider',\n\n\t        /**\n\t         * @protected\n\t         */\n\t        defaultOption: {\n\n\t            backgroundColor: 'rgba(0,0,0,0)',   // 时间轴背景颜色\n\t            borderColor: '#ccc',               // 时间轴边框颜色\n\t            borderWidth: 0,                    // 时间轴边框线宽，单位px，默认为0（无边框）\n\n\t            orient: 'horizontal',              // 'vertical'\n\t            inverse: false,\n\n\t            tooltip: {                          // boolean or Object\n\t                trigger: 'item'                 // data item may also have tootip attr.\n\t            },\n\n\t            symbol: 'emptyCircle',\n\t            symbolSize: 10,\n\n\t            lineStyle: {\n\t                show: true,\n\t                width: 2,\n\t                color: '#304654'\n\t            },\n\t            label: {                            // 文本标签\n\t                position: 'auto',           // auto left right top bottom\n\t                                            // When using number, label position is not\n\t                                            // restricted by viewRect.\n\t                                            // positive: right/bottom, negative: left/top\n\t                normal: {\n\t                    show: true,\n\t                    interval: 'auto',\n\t                    rotate: 0,\n\t                    // formatter: null,\n\t                    textStyle: {                // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n\t                        color: '#304654'\n\t                    }\n\t                },\n\t                emphasis: {\n\t                    show: true,\n\t                    textStyle: {                // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n\t                        color: '#c23531'\n\t                    }\n\t                }\n\t            },\n\t            itemStyle: {\n\t                normal: {\n\t                    color: '#304654',\n\t                    borderWidth: 1\n\t                },\n\t                emphasis: {\n\t                    color: '#c23531'\n\t                }\n\t            },\n\n\t            checkpointStyle: {\n\t                symbol: 'circle',\n\t                symbolSize: 13,\n\t                color: '#c23531',\n\t                borderWidth: 5,\n\t                borderColor: 'rgba(194,53,49, 0.5)',\n\t                animation: true,\n\t                animationDuration: 300,\n\t                animationEasing: 'quinticInOut'\n\t            },\n\n\t            controlStyle: {\n\t                show: true,\n\t                showPlayBtn: true,\n\t                showPrevBtn: true,\n\t                showNextBtn: true,\n\t                itemSize: 22,\n\t                itemGap: 12,\n\t                position: 'left',  // 'left' 'right' 'top' 'bottom'\n\t                playIcon: 'path://M31.6,53C17.5,53,6,41.5,6,27.4S17.5,1.8,31.6,1.8C45.7,1.8,57.2,13.3,57.2,27.4S45.7,53,31.6,53z M31.6,3.3 C18.4,3.3,7.5,14.1,7.5,27.4c0,13.3,10.8,24.1,24.1,24.1C44.9,51.5,55.7,40.7,55.7,27.4C55.7,14.1,44.9,3.3,31.6,3.3z M24.9,21.3 c0-2.2,1.6-3.1,3.5-2l10.5,6.1c1.899,1.1,1.899,2.9,0,4l-10.5,6.1c-1.9,1.1-3.5,0.2-3.5-2V21.3z', // jshint ignore:line\n\t                stopIcon: 'path://M30.9,53.2C16.8,53.2,5.3,41.7,5.3,27.6S16.8,2,30.9,2C45,2,56.4,13.5,56.4,27.6S45,53.2,30.9,53.2z M30.9,3.5C17.6,3.5,6.8,14.4,6.8,27.6c0,13.3,10.8,24.1,24.101,24.1C44.2,51.7,55,40.9,55,27.6C54.9,14.4,44.1,3.5,30.9,3.5z M36.9,35.8c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H36c0.5,0,0.9,0.4,0.9,1V35.8z M27.8,35.8 c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H27c0.5,0,0.9,0.4,0.9,1L27.8,35.8L27.8,35.8z', // jshint ignore:line\n\t                nextIcon: 'path://M18.6,50.8l22.5-22.5c0.2-0.2,0.3-0.4,0.3-0.7c0-0.3-0.1-0.5-0.3-0.7L18.7,4.4c-0.1-0.1-0.2-0.3-0.2-0.5 c0-0.4,0.3-0.8,0.8-0.8c0.2,0,0.5,0.1,0.6,0.3l23.5,23.5l0,0c0.2,0.2,0.3,0.4,0.3,0.7c0,0.3-0.1,0.5-0.3,0.7l-0.1,0.1L19.7,52 c-0.1,0.1-0.3,0.2-0.5,0.2c-0.4,0-0.8-0.3-0.8-0.8C18.4,51.2,18.5,51,18.6,50.8z', // jshint ignore:line\n\t                prevIcon: 'path://M43,52.8L20.4,30.3c-0.2-0.2-0.3-0.4-0.3-0.7c0-0.3,0.1-0.5,0.3-0.7L42.9,6.4c0.1-0.1,0.2-0.3,0.2-0.5 c0-0.4-0.3-0.8-0.8-0.8c-0.2,0-0.5,0.1-0.6,0.3L18.3,28.8l0,0c-0.2,0.2-0.3,0.4-0.3,0.7c0,0.3,0.1,0.5,0.3,0.7l0.1,0.1L41.9,54 c0.1,0.1,0.3,0.2,0.5,0.2c0.4,0,0.8-0.3,0.8-0.8C43.2,53.2,43.1,53,43,52.8z', // jshint ignore:line\n\t                normal: {\n\t                    color: '#304654',\n\t                    borderColor: '#304654',\n\t                    borderWidth: 1\n\t                },\n\t                emphasis: {\n\t                    color: '#c23531',\n\t                    borderColor: '#c23531',\n\t                    borderWidth: 2\n\t                }\n\t            },\n\t            data: []\n\t        }\n\n\t    });\n\n\t    zrUtil.mixin(SliderTimelineModel, modelUtil.dataFormatMixin);\n\n\t    module.exports = SliderTimelineModel;\n\n\n/***/ },\n/* 375 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Timeline model\n\t */\n\n\n\t    var ComponentModel = __webpack_require__(19);\n\t    var List = __webpack_require__(98);\n\t    var zrUtil = __webpack_require__(4);\n\t    var modelUtil = __webpack_require__(5);\n\n\t    var TimelineModel = ComponentModel.extend({\n\n\t        type: 'timeline',\n\n\t        layoutMode: 'box',\n\n\t        /**\n\t         * @protected\n\t         */\n\t        defaultOption: {\n\n\t            zlevel: 0,                  // 一级层叠\n\t            z: 4,                       // 二级层叠\n\t            show: true,\n\n\t            axisType: 'time',  // 模式是时间类型，支持 value, category\n\n\t            realtime: true,\n\n\t            left: '20%',\n\t            top: null,\n\t            right: '20%',\n\t            bottom: 0,\n\t            width: null,\n\t            height: 40,\n\t            padding: 5,\n\n\t            controlPosition: 'left',           // 'left' 'right' 'top' 'bottom' 'none'\n\t            autoPlay: false,\n\t            rewind: false,                     // 反向播放\n\t            loop: true,\n\t            playInterval: 2000,                // 播放时间间隔，单位ms\n\n\t            currentIndex: 0,\n\n\t            itemStyle: {\n\t                normal: {},\n\t                emphasis: {}\n\t            },\n\t            label: {\n\t                normal: {\n\t                    textStyle: {\n\t                        color: '#000'\n\t                    }\n\t                },\n\t                emphasis: {}\n\t            },\n\n\t            data: []\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        init: function (option, parentModel, ecModel) {\n\n\t            /**\n\t             * @private\n\t             * @type {module:echarts/data/List}\n\t             */\n\t            this._data;\n\n\t            /**\n\t             * @private\n\t             * @type {Array.<string>}\n\t             */\n\t            this._names;\n\n\t            this.mergeDefaultAndTheme(option, ecModel);\n\t            this._initData();\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        mergeOption: function (option) {\n\t            TimelineModel.superApply(this, 'mergeOption', arguments);\n\t            this._initData();\n\t        },\n\n\t        /**\n\t         * @param {number} [currentIndex]\n\t         */\n\t        setCurrentIndex: function (currentIndex) {\n\t            if (currentIndex == null) {\n\t                currentIndex = this.option.currentIndex;\n\t            }\n\t            var count = this._data.count();\n\n\t            if (this.option.loop) {\n\t                currentIndex = (currentIndex % count + count) % count;\n\t            }\n\t            else {\n\t                currentIndex >= count && (currentIndex = count - 1);\n\t                currentIndex < 0 && (currentIndex = 0);\n\t            }\n\n\t            this.option.currentIndex = currentIndex;\n\t        },\n\n\t        /**\n\t         * @return {number} currentIndex\n\t         */\n\t        getCurrentIndex: function () {\n\t            return this.option.currentIndex;\n\t        },\n\n\t        /**\n\t         * @return {boolean}\n\t         */\n\t        isIndexMax: function () {\n\t            return this.getCurrentIndex() >= this._data.count() - 1;\n\t        },\n\n\t        /**\n\t         * @param {boolean} state true: play, false: stop\n\t         */\n\t        setPlayState: function (state) {\n\t            this.option.autoPlay = !!state;\n\t        },\n\n\t        /**\n\t         * @return {boolean} true: play, false: stop\n\t         */\n\t        getPlayState: function () {\n\t            return !!this.option.autoPlay;\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _initData: function () {\n\t            var thisOption = this.option;\n\t            var dataArr = thisOption.data || [];\n\t            var axisType = thisOption.axisType;\n\t            var names = this._names = [];\n\n\t            if (axisType === 'category') {\n\t                var idxArr = [];\n\t                zrUtil.each(dataArr, function (item, index) {\n\t                    var value = modelUtil.getDataItemValue(item);\n\t                    var newItem;\n\n\t                    if (zrUtil.isObject(item)) {\n\t                        newItem = zrUtil.clone(item);\n\t                        newItem.value = index;\n\t                    }\n\t                    else {\n\t                        newItem = index;\n\t                    }\n\n\t                    idxArr.push(newItem);\n\n\t                    if (!zrUtil.isString(value) && (value == null || isNaN(value))) {\n\t                        value = '';\n\t                    }\n\n\t                    names.push(value + '');\n\t                });\n\t                dataArr = idxArr;\n\t            }\n\n\t            var dimType = ({category: 'ordinal', time: 'time'})[axisType] || 'number';\n\n\t            var data = this._data = new List([{name: 'value', type: dimType}], this);\n\n\t            data.initData(dataArr, names);\n\t        },\n\n\t        getData: function () {\n\t            return this._data;\n\t        },\n\n\t        /**\n\t         * @public\n\t         * @return {Array.<string>} categoreis\n\t         */\n\t        getCategories: function () {\n\t            if (this.get('axisType') === 'category') {\n\t                return this._names.slice();\n\t            }\n\t        }\n\n\t    });\n\n\t    module.exports = TimelineModel;\n\n\n/***/ },\n/* 376 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Silder timeline view\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var graphic = __webpack_require__(43);\n\t    var layout = __webpack_require__(21);\n\t    var TimelineView = __webpack_require__(377);\n\t    var TimelineAxis = __webpack_require__(378);\n\t    var symbolUtil = __webpack_require__(107);\n\t    var axisHelper = __webpack_require__(115);\n\t    var BoundingRect = __webpack_require__(9);\n\t    var matrix = __webpack_require__(11);\n\t    var numberUtil = __webpack_require__(7);\n\t    var formatUtil = __webpack_require__(6);\n\t    var encodeHTML = formatUtil.encodeHTML;\n\n\t    var bind = zrUtil.bind;\n\t    var each = zrUtil.each;\n\n\t    var PI = Math.PI;\n\n\t    module.exports = TimelineView.extend({\n\n\t        type: 'timeline.slider',\n\n\t        init: function (ecModel, api) {\n\n\t            this.api = api;\n\n\t            /**\n\t             * @private\n\t             * @type {module:echarts/component/timeline/TimelineAxis}\n\t             */\n\t            this._axis;\n\n\t            /**\n\t             * @private\n\t             * @type {module:zrender/core/BoundingRect}\n\t             */\n\t            this._viewRect;\n\n\t            /**\n\t             * @type {number}\n\t             */\n\t            this._timer;\n\n\t            /**\n\t             * @type {module:zrende/Element}\n\t             */\n\t            this._currentPointer;\n\n\t            /**\n\t             * @type {module:zrender/container/Group}\n\t             */\n\t            this._mainGroup;\n\n\t            /**\n\t             * @type {module:zrender/container/Group}\n\t             */\n\t            this._labelGroup;\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        render: function (timelineModel, ecModel, api, payload) {\n\t            this.model = timelineModel;\n\t            this.api = api;\n\t            this.ecModel = ecModel;\n\n\t            this.group.removeAll();\n\n\t            if (timelineModel.get('show', true)) {\n\n\t                var layoutInfo = this._layout(timelineModel, api);\n\t                var mainGroup = this._createGroup('mainGroup');\n\t                var labelGroup = this._createGroup('labelGroup');\n\n\t                /**\n\t                 * @private\n\t                 * @type {module:echarts/component/timeline/TimelineAxis}\n\t                 */\n\t                var axis = this._axis = this._createAxis(layoutInfo, timelineModel);\n\n\t                timelineModel.formatTooltip = function (dataIndex) {\n\t                    return encodeHTML(axis.scale.getLabel(dataIndex));\n\t                };\n\n\t                each(\n\t                    ['AxisLine', 'AxisTick', 'Control', 'CurrentPointer'],\n\t                    function (name) {\n\t                        this['_render' + name](layoutInfo, mainGroup, axis, timelineModel);\n\t                    },\n\t                    this\n\t                );\n\n\t                this._renderAxisLabel(layoutInfo, labelGroup, axis, timelineModel);\n\t                this._position(layoutInfo, timelineModel);\n\t            }\n\n\t            this._doPlayStop();\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        remove: function () {\n\t            this._clearTimer();\n\t            this.group.removeAll();\n\t        },\n\n\t        /**\n\t         * @override\n\t         */\n\t        dispose: function () {\n\t            this._clearTimer();\n\t        },\n\n\t        _layout: function (timelineModel, api) {\n\t            var labelPosOpt = timelineModel.get('label.normal.position');\n\t            var orient = timelineModel.get('orient');\n\t            var viewRect = getViewRect(timelineModel, api);\n\t            // Auto label offset.\n\t            if (labelPosOpt == null || labelPosOpt === 'auto') {\n\t                labelPosOpt = orient === 'horizontal'\n\t                    ? ((viewRect.y + viewRect.height / 2) < api.getHeight() / 2 ? '-' : '+')\n\t                    : ((viewRect.x + viewRect.width / 2) < api.getWidth() / 2 ? '+' : '-');\n\t            }\n\t            else if (isNaN(labelPosOpt)) {\n\t                labelPosOpt = ({\n\t                    horizontal: {top: '-', bottom: '+'},\n\t                    vertical: {left: '-', right: '+'}\n\t                })[orient][labelPosOpt];\n\t            }\n\n\t            // FIXME\n\t            // 暂没有实现用户传入\n\t            // var labelAlign = timelineModel.get('label.normal.textStyle.align');\n\t            // var labelBaseline = timelineModel.get('label.normal.textStyle.baseline');\n\t            var labelAlignMap = {\n\t                horizontal: 'center',\n\t                vertical: (labelPosOpt >= 0 || labelPosOpt === '+') ? 'left' : 'right'\n\t            };\n\n\t            var labelBaselineMap = {\n\t                horizontal: (labelPosOpt >= 0 || labelPosOpt === '+') ? 'top' : 'bottom',\n\t                vertical: 'middle'\n\t            };\n\t            var rotationMap = {\n\t                horizontal: 0,\n\t                vertical: PI / 2\n\t            };\n\n\t            // Position\n\t            var mainLength = orient === 'vertical' ? viewRect.height : viewRect.width;\n\n\t            var controlModel = timelineModel.getModel('controlStyle');\n\t            var showControl = controlModel.get('show');\n\t            var controlSize = showControl ? controlModel.get('itemSize') : 0;\n\t            var controlGap = showControl ? controlModel.get('itemGap') : 0;\n\t            var sizePlusGap = controlSize + controlGap;\n\n\t            // Special label rotate.\n\t            var labelRotation = timelineModel.get('label.normal.rotate') || 0;\n\t            labelRotation = labelRotation * PI / 180; // To radian.\n\n\t            var playPosition;\n\t            var prevBtnPosition;\n\t            var nextBtnPosition;\n\t            var axisExtent;\n\t            var controlPosition = controlModel.get('position', true);\n\t            var showControl = controlModel.get('show', true);\n\t            var showPlayBtn = showControl && controlModel.get('showPlayBtn', true);\n\t            var showPrevBtn = showControl && controlModel.get('showPrevBtn', true);\n\t            var showNextBtn = showControl && controlModel.get('showNextBtn', true);\n\t            var xLeft = 0;\n\t            var xRight = mainLength;\n\n\t            // position[0] means left, position[1] means middle.\n\t            if (controlPosition === 'left' || controlPosition === 'bottom') {\n\t                showPlayBtn && (playPosition = [0, 0], xLeft += sizePlusGap);\n\t                showPrevBtn && (prevBtnPosition = [xLeft, 0], xLeft += sizePlusGap);\n\t                showNextBtn && (nextBtnPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);\n\t            }\n\t            else { // 'top' 'right'\n\t                showPlayBtn && (playPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);\n\t                showPrevBtn && (prevBtnPosition = [0, 0], xLeft += sizePlusGap);\n\t                showNextBtn && (nextBtnPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);\n\t            }\n\t            axisExtent = [xLeft, xRight];\n\n\t            if (timelineModel.get('inverse')) {\n\t                axisExtent.reverse();\n\t            }\n\n\t            return {\n\t                viewRect: viewRect,\n\t                mainLength: mainLength,\n\t                orient: orient,\n\n\t                rotation: rotationMap[orient],\n\t                labelRotation: labelRotation,\n\t                labelPosOpt: labelPosOpt,\n\t                labelAlign: labelAlignMap[orient],\n\t                labelBaseline: labelBaselineMap[orient],\n\n\t                // Based on mainGroup.\n\t                playPosition: playPosition,\n\t                prevBtnPosition: prevBtnPosition,\n\t                nextBtnPosition: nextBtnPosition,\n\t                axisExtent: axisExtent,\n\n\t                controlSize: controlSize,\n\t                controlGap: controlGap\n\t            };\n\t        },\n\n\t        _position: function (layoutInfo, timelineModel) {\n\t            // Position is be called finally, because bounding rect is needed for\n\t            // adapt content to fill viewRect (auto adapt offset).\n\n\t            // Timeline may be not all in the viewRect when 'offset' is specified\n\t            // as a number, because it is more appropriate that label aligns at\n\t            // 'offset' but not the other edge defined by viewRect.\n\n\t            var mainGroup = this._mainGroup;\n\t            var labelGroup = this._labelGroup;\n\n\t            var viewRect = layoutInfo.viewRect;\n\t            if (layoutInfo.orient === 'vertical') {\n\t                // transfrom to horizontal, inverse rotate by left-top point.\n\t                var m = matrix.create();\n\t                var rotateOriginX = viewRect.x;\n\t                var rotateOriginY = viewRect.y + viewRect.height;\n\t                matrix.translate(m, m, [-rotateOriginX, -rotateOriginY]);\n\t                matrix.rotate(m, m, -PI / 2);\n\t                matrix.translate(m, m, [rotateOriginX, rotateOriginY]);\n\t                viewRect = viewRect.clone();\n\t                viewRect.applyTransform(m);\n\t            }\n\n\t            var viewBound = getBound(viewRect);\n\t            var mainBound = getBound(mainGroup.getBoundingRect());\n\t            var labelBound = getBound(labelGroup.getBoundingRect());\n\n\t            var mainPosition = mainGroup.position;\n\t            var labelsPosition = labelGroup.position;\n\n\t            labelsPosition[0] = mainPosition[0] = viewBound[0][0];\n\n\t            var labelPosOpt = layoutInfo.labelPosOpt;\n\n\t            if (isNaN(labelPosOpt)) { // '+' or '-'\n\t                var mainBoundIdx = labelPosOpt === '+' ? 0 : 1;\n\t                toBound(mainPosition, mainBound, viewBound, 1, mainBoundIdx);\n\t                toBound(labelsPosition, labelBound, viewBound, 1, 1 - mainBoundIdx);\n\t            }\n\t            else {\n\t                var mainBoundIdx = labelPosOpt >= 0 ? 0 : 1;\n\t                toBound(mainPosition, mainBound, viewBound, 1, mainBoundIdx);\n\t                labelsPosition[1] = mainPosition[1] + labelPosOpt;\n\t            }\n\n\t            mainGroup.attr('position', mainPosition);\n\t            labelGroup.attr('position', labelsPosition);\n\t            mainGroup.rotation = labelGroup.rotation = layoutInfo.rotation;\n\n\t            setOrigin(mainGroup);\n\t            setOrigin(labelGroup);\n\n\t            function setOrigin(targetGroup) {\n\t                var pos = targetGroup.position;\n\t                targetGroup.origin = [\n\t                    viewBound[0][0] - pos[0],\n\t                    viewBound[1][0] - pos[1]\n\t                ];\n\t            }\n\n\t            function getBound(rect) {\n\t                // [[xmin, xmax], [ymin, ymax]]\n\t                return [\n\t                    [rect.x, rect.x + rect.width],\n\t                    [rect.y, rect.y + rect.height]\n\t                ];\n\t            }\n\n\t            function toBound(fromPos, from, to, dimIdx, boundIdx) {\n\t                fromPos[dimIdx] += to[dimIdx][boundIdx] - from[dimIdx][boundIdx];\n\t            }\n\t        },\n\n\t        _createAxis: function (layoutInfo, timelineModel) {\n\t            var data = timelineModel.getData();\n\t            var axisType = timelineModel.get('axisType');\n\n\t            var scale = axisHelper.createScaleByModel(timelineModel, axisType);\n\t            var dataExtent = data.getDataExtent('value');\n\t            scale.setExtent(dataExtent[0], dataExtent[1]);\n\t            this._customizeScale(scale, data);\n\t            scale.niceTicks();\n\n\t            var axis = new TimelineAxis('value', scale, layoutInfo.axisExtent, axisType);\n\t            axis.model = timelineModel;\n\n\t            return axis;\n\t        },\n\n\t        _customizeScale: function (scale, data) {\n\n\t            scale.getTicks = function () {\n\t                return data.mapArray(['value'], function (value) {\n\t                    return value;\n\t                });\n\t            };\n\n\t            scale.getTicksLabels = function () {\n\t                return zrUtil.map(this.getTicks(), scale.getLabel, scale);\n\t            };\n\t        },\n\n\t        _createGroup: function (name) {\n\t            var newGroup = this['_' + name] = new graphic.Group();\n\t            this.group.add(newGroup);\n\t            return newGroup;\n\t        },\n\n\t        _renderAxisLine: function (layoutInfo, group, axis, timelineModel) {\n\t            var axisExtent = axis.getExtent();\n\n\t            if (!timelineModel.get('lineStyle.show')) {\n\t                return;\n\t            }\n\n\t            group.add(new graphic.Line({\n\t                shape: {\n\t                    x1: axisExtent[0], y1: 0,\n\t                    x2: axisExtent[1], y2: 0\n\t                },\n\t                style: zrUtil.extend(\n\t                    {lineCap: 'round'},\n\t                    timelineModel.getModel('lineStyle').getLineStyle()\n\t                ),\n\t                silent: true,\n\t                z2: 1\n\t            }));\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _renderAxisTick: function (layoutInfo, group, axis, timelineModel) {\n\t            var data = timelineModel.getData();\n\t            var ticks = axis.scale.getTicks();\n\n\t            each(ticks, function (value, dataIndex) {\n\n\t                var tickCoord = axis.dataToCoord(value);\n\t                var itemModel = data.getItemModel(dataIndex);\n\t                var itemStyleModel = itemModel.getModel('itemStyle.normal');\n\t                var hoverStyleModel = itemModel.getModel('itemStyle.emphasis');\n\t                var symbolOpt = {\n\t                    position: [tickCoord, 0],\n\t                    onclick: bind(this._changeTimeline, this, dataIndex)\n\t                };\n\t                var el = giveSymbol(itemModel, itemStyleModel, group, symbolOpt);\n\t                graphic.setHoverStyle(el, hoverStyleModel.getItemStyle());\n\n\t                if (itemModel.get('tooltip')) {\n\t                    el.dataIndex = dataIndex;\n\t                    el.dataModel = timelineModel;\n\t                }\n\t                else {\n\t                    el.dataIndex = el.dataModel = null;\n\t                }\n\n\t            }, this);\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _renderAxisLabel: function (layoutInfo, group, axis, timelineModel) {\n\t            var labelModel = timelineModel.getModel('label.normal');\n\n\t            if (!labelModel.get('show')) {\n\t                return;\n\t            }\n\n\t            var data = timelineModel.getData();\n\t            var ticks = axis.scale.getTicks();\n\t            var labels = axisHelper.getFormattedLabels(\n\t                axis, labelModel.get('formatter')\n\t            );\n\t            var labelInterval = axis.getLabelInterval();\n\n\t            each(ticks, function (tick, dataIndex) {\n\t                if (axis.isLabelIgnored(dataIndex, labelInterval)) {\n\t                    return;\n\t                }\n\n\t                var itemModel = data.getItemModel(dataIndex);\n\t                var itemTextStyleModel = itemModel.getModel('label.normal.textStyle');\n\t                var hoverTextStyleModel = itemModel.getModel('label.emphasis.textStyle');\n\t                var tickCoord = axis.dataToCoord(tick);\n\t                var textEl = new graphic.Text({\n\t                    style: {\n\t                        text: labels[dataIndex],\n\t                        textAlign: layoutInfo.labelAlign,\n\t                        textVerticalAlign: layoutInfo.labelBaseline,\n\t                        textFont: itemTextStyleModel.getFont(),\n\t                        fill: itemTextStyleModel.getTextColor()\n\t                    },\n\t                    position: [tickCoord, 0],\n\t                    rotation: layoutInfo.labelRotation - layoutInfo.rotation,\n\t                    onclick: bind(this._changeTimeline, this, dataIndex),\n\t                    silent: false\n\t                });\n\n\t                group.add(textEl);\n\t                graphic.setHoverStyle(textEl, hoverTextStyleModel.getItemStyle());\n\n\t            }, this);\n\t        },\n\n\t        /**\n\t         * @private\n\t         */\n\t        _renderControl: function (layoutInfo, group, axis, timelineModel) {\n\t            var controlSize = layoutInfo.controlSize;\n\t            var rotation = layoutInfo.rotation;\n\n\t            var itemStyle = timelineModel.getModel('controlStyle.normal').getItemStyle();\n\t            var hoverStyle = timelineModel.getModel('controlStyle.emphasis').getItemStyle();\n\t            var rect = [0, -controlSize / 2, controlSize, controlSize];\n\t            var playState = timelineModel.getPlayState();\n\t            var inverse = timelineModel.get('inverse', true);\n\n\t            makeBtn(\n\t                layoutInfo.nextBtnPosition,\n\t                'controlStyle.nextIcon',\n\t                bind(this._changeTimeline, this, inverse ? '-' : '+')\n\t            );\n\t            makeBtn(\n\t                layoutInfo.prevBtnPosition,\n\t                'controlStyle.prevIcon',\n\t                bind(this._changeTimeline, this, inverse ? '+' : '-')\n\t            );\n\t            makeBtn(\n\t                layoutInfo.playPosition,\n\t                'controlStyle.' + (playState ? 'stopIcon' : 'playIcon'),\n\t                bind(this._handlePlayClick, this, !playState),\n\t                true\n\t            );\n\n\t            function makeBtn(position, iconPath, onclick, willRotate) {\n\t                if (!position) {\n\t                    return;\n\t                }\n\t                var opt = {\n\t                    position: position,\n\t                    origin: [controlSize / 2, 0],\n\t                    rotation: willRotate ? -rotation : 0,\n\t                    rectHover: true,\n\t                    style: itemStyle,\n\t                    onclick: onclick\n\t                };\n\t                var btn = makeIcon(timelineModel, iconPath, rect, opt);\n\t                group.add(btn);\n\t                graphic.setHoverStyle(btn, hoverStyle);\n\t            }\n\t        },\n\n\t        _renderCurrentPointer: function (layoutInfo, group, axis, timelineModel) {\n\t            var data = timelineModel.getData();\n\t            var currentIndex = timelineModel.getCurrentIndex();\n\t            var pointerModel = data.getItemModel(currentIndex).getModel('checkpointStyle');\n\t            var me = this;\n\n\t            var callback = {\n\t                onCreate: function (pointer) {\n\t                    pointer.draggable = true;\n\t                    pointer.drift = bind(me._handlePointerDrag, me);\n\t                    pointer.ondragend = bind(me._handlePointerDragend, me);\n\t                    pointerMoveTo(pointer, currentIndex, axis, timelineModel, true);\n\t                },\n\t                onUpdate: function (pointer) {\n\t                    pointerMoveTo(pointer, currentIndex, axis, timelineModel);\n\t                }\n\t            };\n\n\t            // Reuse when exists, for animation and drag.\n\t            this._currentPointer = giveSymbol(\n\t                pointerModel, pointerModel, this._mainGroup, {}, this._currentPointer, callback\n\t            );\n\t        },\n\n\t        _handlePlayClick: function (nextState) {\n\t            this._clearTimer();\n\t            this.api.dispatchAction({\n\t                type: 'timelinePlayChange',\n\t                playState: nextState,\n\t                from: this.uid\n\t            });\n\t        },\n\n\t        _handlePointerDrag: function (dx, dy, e) {\n\t            this._clearTimer();\n\t            this._pointerChangeTimeline([e.offsetX, e.offsetY]);\n\t        },\n\n\t        _handlePointerDragend: function (e) {\n\t            this._pointerChangeTimeline([e.offsetX, e.offsetY], true);\n\t        },\n\n\t        _pointerChangeTimeline: function (mousePos, trigger) {\n\t            var toCoord = this._toAxisCoord(mousePos)[0];\n\n\t            var axis = this._axis;\n\t            var axisExtent = numberUtil.asc(axis.getExtent().slice());\n\n\t            toCoord > axisExtent[1] && (toCoord = axisExtent[1]);\n\t            toCoord < axisExtent[0] && (toCoord = axisExtent[0]);\n\n\t            this._currentPointer.position[0] = toCoord;\n\t            this._currentPointer.dirty();\n\n\t            var targetDataIndex = this._findNearestTick(toCoord);\n\t            var timelineModel = this.model;\n\n\t            if (trigger || (\n\t                targetDataIndex !== timelineModel.getCurrentIndex()\n\t                && timelineModel.get('realtime')\n\t            )) {\n\t                this._changeTimeline(targetDataIndex);\n\t            }\n\t        },\n\n\t        _doPlayStop: function () {\n\t            this._clearTimer();\n\n\t            if (this.model.getPlayState()) {\n\t                this._timer = setTimeout(\n\t                    bind(handleFrame, this),\n\t                    this.model.get('playInterval')\n\t                );\n\t            }\n\n\t            function handleFrame() {\n\t                // Do not cache\n\t                var timelineModel = this.model;\n\t                this._changeTimeline(\n\t                    timelineModel.getCurrentIndex()\n\t                    + (timelineModel.get('rewind', true) ? -1 : 1)\n\t                );\n\t            }\n\t        },\n\n\t        _toAxisCoord: function (vertex) {\n\t            var trans = this._mainGroup.getLocalTransform();\n\t            return graphic.applyTransform(vertex, trans, true);\n\t        },\n\n\t        _findNearestTick: function (axisCoord) {\n\t            var data = this.model.getData();\n\t            var dist = Infinity;\n\t            var targetDataIndex;\n\t            var axis = this._axis;\n\n\t            data.each(['value'], function (value, dataIndex) {\n\t                var coord = axis.dataToCoord(value);\n\t                var d = Math.abs(coord - axisCoord);\n\t                if (d < dist) {\n\t                    dist = d;\n\t                    targetDataIndex = dataIndex;\n\t                }\n\t            });\n\n\t            return targetDataIndex;\n\t        },\n\n\t        _clearTimer: function () {\n\t            if (this._timer) {\n\t                clearTimeout(this._timer);\n\t                this._timer = null;\n\t            }\n\t        },\n\n\t        _changeTimeline: function (nextIndex) {\n\t            var currentIndex = this.model.getCurrentIndex();\n\n\t            if (nextIndex === '+') {\n\t                nextIndex = currentIndex + 1;\n\t            }\n\t            else if (nextIndex === '-') {\n\t                nextIndex = currentIndex - 1;\n\t            }\n\n\t            this.api.dispatchAction({\n\t                type: 'timelineChange',\n\t                currentIndex: nextIndex,\n\t                from: this.uid\n\t            });\n\t        }\n\n\t    });\n\n\t    function getViewRect(model, api) {\n\t        return layout.getLayoutRect(\n\t            model.getBoxLayoutParams(),\n\t            {\n\t                width: api.getWidth(),\n\t                height: api.getHeight()\n\t            },\n\t            model.get('padding')\n\t        );\n\t    }\n\n\t    function makeIcon(timelineModel, objPath, rect, opts) {\n\t        var icon = graphic.makePath(\n\t            timelineModel.get(objPath).replace(/^path:\\/\\//, ''),\n\t            zrUtil.clone(opts || {}),\n\t            new BoundingRect(rect[0], rect[1], rect[2], rect[3]),\n\t            'center'\n\t        );\n\n\t        return icon;\n\t    }\n\n\t    /**\n\t     * Create symbol or update symbol\n\t     * opt: basic position and event handlers\n\t     */\n\t    function giveSymbol(hostModel, itemStyleModel, group, opt, symbol, callback) {\n\t        var color = itemStyleModel.get('color');\n\n\t        if (!symbol) {\n\t            var symbolType = hostModel.get('symbol');\n\t            symbol = symbolUtil.createSymbol(symbolType, -1, -1, 2, 2, color);\n\t            symbol.setStyle('strokeNoScale', true);\n\t            group.add(symbol);\n\t            callback && callback.onCreate(symbol);\n\t        }\n\t        else {\n\t            symbol.setColor(color);\n\t            group.add(symbol); // Group may be new, also need to add.\n\t            callback && callback.onUpdate(symbol);\n\t        }\n\n\t        // Style\n\t        var itemStyle = itemStyleModel.getItemStyle(['color', 'symbol', 'symbolSize']);\n\t        symbol.setStyle(itemStyle);\n\n\t        // Transform and events.\n\t        opt = zrUtil.merge({\n\t            rectHover: true,\n\t            z2: 100\n\t        }, opt, true);\n\n\t        var symbolSize = hostModel.get('symbolSize');\n\t        symbolSize = symbolSize instanceof Array\n\t            ? symbolSize.slice()\n\t            : [+symbolSize, +symbolSize];\n\t        symbolSize[0] /= 2;\n\t        symbolSize[1] /= 2;\n\t        opt.scale = symbolSize;\n\n\t        var symbolOffset = hostModel.get('symbolOffset');\n\t        if (symbolOffset) {\n\t            var pos = opt.position = opt.position || [0, 0];\n\t            pos[0] += numberUtil.parsePercent(symbolOffset[0], symbolSize[0]);\n\t            pos[1] += numberUtil.parsePercent(symbolOffset[1], symbolSize[1]);\n\t        }\n\n\t        var symbolRotate = hostModel.get('symbolRotate');\n\t        opt.rotation = (symbolRotate || 0) * Math.PI / 180 || 0;\n\n\t        symbol.attr(opt);\n\n\t        // FIXME\n\t        // (1) When symbol.style.strokeNoScale is true and updateTransform is not performed,\n\t        // getBoundingRect will return wrong result.\n\t        // (This is supposed to be resolved in zrender, but it is a little difficult to\n\t        // leverage performance and auto updateTransform)\n\t        // (2) All of ancesters of symbol do not scale, so we can just updateTransform symbol.\n\t        symbol.updateTransform();\n\n\t        return symbol;\n\t    }\n\n\t    function pointerMoveTo(pointer, dataIndex, axis, timelineModel, noAnimation) {\n\t        if (pointer.dragging) {\n\t            return;\n\t        }\n\n\t        var pointerModel = timelineModel.getModel('checkpointStyle');\n\t        var toCoord = axis.dataToCoord(timelineModel.getData().get(['value'], dataIndex));\n\n\t        if (noAnimation || !pointerModel.get('animation', true)) {\n\t            pointer.attr({position: [toCoord, 0]});\n\t        }\n\t        else {\n\t            pointer.stopAnimation(true);\n\t            pointer.animateTo(\n\t                {position: [toCoord, 0]},\n\t                pointerModel.get('animationDuration', true),\n\t                pointerModel.get('animationEasing', true)\n\t            );\n\t        }\n\t    }\n\n\n\n/***/ },\n/* 377 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Timeline view\n\t */\n\n\n\t    // var zrUtil = require('zrender/lib/core/util');\n\t    // var graphic = require('../../util/graphic');\n\t    var ComponentView = __webpack_require__(29);\n\n\t    module.exports = ComponentView.extend({\n\n\t        type: 'timeline'\n\t    });\n\n\n\n/***/ },\n/* 378 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var Axis = __webpack_require__(124);\n\t    var axisHelper = __webpack_require__(115);\n\n\t    /**\n\t     * Extend axis 2d\n\t     * @constructor module:echarts/coord/cartesian/Axis2D\n\t     * @extends {module:echarts/coord/cartesian/Axis}\n\t     * @param {string} dim\n\t     * @param {*} scale\n\t     * @param {Array.<number>} coordExtent\n\t     * @param {string} axisType\n\t     * @param {string} position\n\t     */\n\t    var TimelineAxis = function (dim, scale, coordExtent, axisType) {\n\n\t        Axis.call(this, dim, scale, coordExtent);\n\n\t        /**\n\t         * Axis type\n\t         *  - 'category'\n\t         *  - 'value'\n\t         *  - 'time'\n\t         *  - 'log'\n\t         * @type {string}\n\t         */\n\t        this.type = axisType || 'value';\n\n\t        /**\n\t         * @private\n\t         * @type {number}\n\t         */\n\t        this._autoLabelInterval;\n\n\t        /**\n\t         * Axis model\n\t         * @param {module:echarts/component/TimelineModel}\n\t         */\n\t        this.model = null;\n\t    };\n\n\t    TimelineAxis.prototype = {\n\n\t        constructor: TimelineAxis,\n\n\t        /**\n\t         * @public\n\t         * @return {number}\n\t         */\n\t        getLabelInterval: function () {\n\t            var timelineModel = this.model;\n\t            var labelModel = timelineModel.getModel('label.normal');\n\t            var labelInterval = labelModel.get('interval');\n\n\t            if (labelInterval != null && labelInterval != 'auto') {\n\t                return labelInterval;\n\t            }\n\n\t            var labelInterval = this._autoLabelInterval;\n\n\t            if (!labelInterval) {\n\t                labelInterval = this._autoLabelInterval = axisHelper.getAxisLabelInterval(\n\t                    zrUtil.map(this.scale.getTicks(), this.dataToCoord, this),\n\t                    axisHelper.getFormattedLabels(this, labelModel.get('formatter')),\n\t                    labelModel.getModel('textStyle').getFont(),\n\t                    timelineModel.get('orient') === 'horizontal'\n\t                );\n\t            }\n\n\t            return labelInterval;\n\t        },\n\n\t        /**\n\t         * If label is ignored.\n\t         * Automatically used when axis is category and label can not be all shown\n\t         * @public\n\t         * @param  {number} idx\n\t         * @return {boolean}\n\t         */\n\t        isLabelIgnored: function (idx) {\n\t            if (this.type === 'category') {\n\t                var labelInterval = this.getLabelInterval();\n\t                return ((typeof labelInterval === 'function')\n\t                    && !labelInterval(idx, this.scale.getLabel(idx)))\n\t                    || idx % (labelInterval + 1);\n\t            }\n\t        }\n\n\t    };\n\n\t    zrUtil.inherits(TimelineAxis, Axis);\n\n\t    module.exports = TimelineAxis;\n\n\n/***/ },\n/* 379 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    __webpack_require__(380);\n\t    __webpack_require__(381);\n\n\t    __webpack_require__(382);\n\t    __webpack_require__(383);\n\t    __webpack_require__(384);\n\t    __webpack_require__(385);\n\t    __webpack_require__(390);\n\n\n/***/ },\n/* 380 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var featureManager = __webpack_require__(327);\n\t    var zrUtil = __webpack_require__(4);\n\n\t    var ToolboxModel = __webpack_require__(1).extendComponentModel({\n\n\t        type: 'toolbox',\n\n\t        layoutMode: {\n\t            type: 'box',\n\t            ignoreSize: true\n\t        },\n\n\t        mergeDefaultAndTheme: function (option) {\n\t            ToolboxModel.superApply(this, 'mergeDefaultAndTheme', arguments);\n\n\t            zrUtil.each(this.option.feature, function (featureOpt, featureName) {\n\t                var Feature = featureManager.get(featureName);\n\t                Feature && zrUtil.merge(featureOpt, Feature.defaultOption);\n\t            });\n\t        },\n\n\t        defaultOption: {\n\n\t            show: true,\n\n\t            z: 6,\n\n\t            zlevel: 0,\n\n\t            orient: 'horizontal',\n\n\t            left: 'right',\n\n\t            top: 'top',\n\n\t            // right\n\t            // bottom\n\n\t            backgroundColor: 'transparent',\n\n\t            borderColor: '#ccc',\n\n\t            borderWidth: 0,\n\n\t            padding: 5,\n\n\t            itemSize: 15,\n\n\t            itemGap: 8,\n\n\t            showTitle: true,\n\n\t            iconStyle: {\n\t                normal: {\n\t                    borderColor: '#666',\n\t                    color: 'none'\n\t                },\n\t                emphasis: {\n\t                    borderColor: '#3E98C5'\n\t                }\n\t            }\n\t            // textStyle: {},\n\n\t            // feature\n\t        }\n\t    });\n\n\t    module.exports = ToolboxModel;\n\n\n/***/ },\n/* 381 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process) {\n\n\t    var featureManager = __webpack_require__(327);\n\t    var zrUtil = __webpack_require__(4);\n\t    var graphic = __webpack_require__(43);\n\t    var Model = __webpack_require__(12);\n\t    var DataDiffer = __webpack_require__(99);\n\t    var listComponentHelper = __webpack_require__(297);\n\t    var textContain = __webpack_require__(8);\n\n\t    module.exports = __webpack_require__(1).extendComponentView({\n\n\t        type: 'toolbox',\n\n\t        render: function (toolboxModel, ecModel, api, payload) {\n\t            var group = this.group;\n\t            group.removeAll();\n\n\t            if (!toolboxModel.get('show')) {\n\t                return;\n\t            }\n\n\t            var itemSize = +toolboxModel.get('itemSize');\n\t            var featureOpts = toolboxModel.get('feature') || {};\n\t            var features = this._features || (this._features = {});\n\n\t            var featureNames = [];\n\t            zrUtil.each(featureOpts, function (opt, name) {\n\t                featureNames.push(name);\n\t            });\n\n\t            (new DataDiffer(this._featureNames || [], featureNames))\n\t                .add(process)\n\t                .update(process)\n\t                .remove(zrUtil.curry(process, null))\n\t                .execute();\n\n\t            // Keep for diff.\n\t            this._featureNames = featureNames;\n\n\t            function process(newIndex, oldIndex) {\n\t                var featureName = featureNames[newIndex];\n\t                var oldName = featureNames[oldIndex];\n\t                var featureOpt = featureOpts[featureName];\n\t                var featureModel = new Model(featureOpt, toolboxModel, toolboxModel.ecModel);\n\t                var feature;\n\n\t                if (featureName && !oldName) { // Create\n\t                    if (isUserFeatureName(featureName)) {\n\t                        feature = {\n\t                            model: featureModel,\n\t                            onclick: featureModel.option.onclick,\n\t                            featureName: featureName\n\t                        };\n\t                    }\n\t                    else {\n\t                        var Feature = featureManager.get(featureName);\n\t                        if (!Feature) {\n\t                            return;\n\t                        }\n\t                        feature = new Feature(featureModel, ecModel, api);\n\t                    }\n\t                    features[featureName] = feature;\n\t                }\n\t                else {\n\t                    feature = features[oldName];\n\t                    // If feature does not exsit.\n\t                    if (!feature) {\n\t                        return;\n\t                    }\n\t                    feature.model = featureModel;\n\t                    feature.ecModel = ecModel;\n\t                    feature.api = api;\n\t                }\n\n\t                if (!featureName && oldName) {\n\t                    feature.dispose && feature.dispose(ecModel, api);\n\t                    return;\n\t                }\n\n\t                if (!featureModel.get('show') || feature.unusable) {\n\t                    feature.remove && feature.remove(ecModel, api);\n\t                    return;\n\t                }\n\n\t                createIconPaths(featureModel, feature, featureName);\n\n\t                featureModel.setIconStatus = function (iconName, status) {\n\t                    var option = this.option;\n\t                    var iconPaths = this.iconPaths;\n\t                    option.iconStatus = option.iconStatus || {};\n\t                    option.iconStatus[iconName] = status;\n\t                    // FIXME\n\t                    iconPaths[iconName] && iconPaths[iconName].trigger(status);\n\t                };\n\n\t                if (feature.render) {\n\t                    feature.render(featureModel, ecModel, api, payload);\n\t                }\n\t            }\n\n\t            function createIconPaths(featureModel, feature, featureName) {\n\t                var iconStyleModel = featureModel.getModel('iconStyle');\n\n\t                // If one feature has mutiple icon. they are orginaized as\n\t                // {\n\t                //     icon: {\n\t                //         foo: '',\n\t                //         bar: ''\n\t                //     },\n\t                //     title: {\n\t                //         foo: '',\n\t                //         bar: ''\n\t                //     }\n\t                // }\n\t                var icons = feature.getIcons ? feature.getIcons() : featureModel.get('icon');\n\t                var titles = featureModel.get('title') || {};\n\t                if (typeof icons === 'string') {\n\t                    var icon = icons;\n\t                    var title = titles;\n\t                    icons = {};\n\t                    titles = {};\n\t                    icons[featureName] = icon;\n\t                    titles[featureName] = title;\n\t                }\n\t                var iconPaths = featureModel.iconPaths = {};\n\t                zrUtil.each(icons, function (icon, iconName) {\n\t                    var normalStyle = iconStyleModel.getModel('normal').getItemStyle();\n\t                    var hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();\n\n\t                    var style = {\n\t                        x: -itemSize / 2,\n\t                        y: -itemSize / 2,\n\t                        width: itemSize,\n\t                        height: itemSize\n\t                    };\n\t                    var path = icon.indexOf('image://') === 0\n\t                        ? (\n\t                            style.image = icon.slice(8),\n\t                            new graphic.Image({style: style})\n\t                        )\n\t                        : graphic.makePath(\n\t                            icon.replace('path://', ''),\n\t                            {\n\t                                style: normalStyle,\n\t                                hoverStyle: hoverStyle,\n\t                                rectHover: true\n\t                            },\n\t                            style,\n\t                            'center'\n\t                        );\n\n\t                    graphic.setHoverStyle(path);\n\n\t                    if (toolboxModel.get('showTitle')) {\n\t                        path.__title = titles[iconName];\n\t                        path.on('mouseover', function () {\n\t                                // Should not reuse above hoverStyle, which might be modified.\n\t                                var hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();\n\t                                path.setStyle({\n\t                                    text: titles[iconName],\n\t                                    textPosition: hoverStyle.textPosition || 'bottom',\n\t                                    textFill: hoverStyle.fill || hoverStyle.stroke || '#000',\n\t                                    textAlign: hoverStyle.textAlign || 'center'\n\t                                });\n\t                            })\n\t                            .on('mouseout', function () {\n\t                                path.setStyle({\n\t                                    textFill: null\n\t                                });\n\t                            });\n\t                    }\n\t                    path.trigger(featureModel.get('iconStatus.' + iconName) || 'normal');\n\n\t                    group.add(path);\n\t                    path.on('click', zrUtil.bind(\n\t                        feature.onclick, feature, ecModel, api, iconName\n\t                    ));\n\n\t                    iconPaths[iconName] = path;\n\t                });\n\t            }\n\n\t            listComponentHelper.layout(group, toolboxModel, api);\n\t            // Render background after group is layout\n\t            // FIXME\n\t            listComponentHelper.addBackground(group, toolboxModel);\n\n\t            // Adjust icon title positions to avoid them out of screen\n\t            group.eachChild(function (icon) {\n\t                var titleText = icon.__title;\n\t                var hoverStyle = icon.hoverStyle;\n\t                // May be background element\n\t                if (hoverStyle && titleText) {\n\t                    var rect = textContain.getBoundingRect(\n\t                        titleText, hoverStyle.font\n\t                    );\n\t                    var offsetX = icon.position[0] + group.position[0];\n\t                    var offsetY = icon.position[1] + group.position[1] + itemSize;\n\n\t                    var needPutOnTop = false;\n\t                    if (offsetY + rect.height > api.getHeight()) {\n\t                        hoverStyle.textPosition = 'top';\n\t                        needPutOnTop = true;\n\t                    }\n\t                    var topOffset = needPutOnTop ? (-5 - rect.height) : (itemSize + 8);\n\t                    if (offsetX + rect.width /  2 > api.getWidth()) {\n\t                        hoverStyle.textPosition = ['100%', topOffset];\n\t                        hoverStyle.textAlign = 'right';\n\t                    }\n\t                    else if (offsetX - rect.width / 2 < 0) {\n\t                        hoverStyle.textPosition = [0, topOffset];\n\t                        hoverStyle.textAlign = 'left';\n\t                    }\n\t                }\n\t            });\n\t        },\n\n\t        updateView: function (toolboxModel, ecModel, api, payload) {\n\t            zrUtil.each(this._features, function (feature) {\n\t                feature.updateView && feature.updateView(feature.model, ecModel, api, payload);\n\t            });\n\t        },\n\n\t        updateLayout: function (toolboxModel, ecModel, api, payload) {\n\t            zrUtil.each(this._features, function (feature) {\n\t                feature.updateLayout && feature.updateLayout(feature.model, ecModel, api, payload);\n\t            });\n\t        },\n\n\t        remove: function (ecModel, api) {\n\t            zrUtil.each(this._features, function (feature) {\n\t                feature.remove && feature.remove(ecModel, api);\n\t            });\n\t            this.group.removeAll();\n\t        },\n\n\t        dispose: function (ecModel, api) {\n\t            zrUtil.each(this._features, function (feature) {\n\t                feature.dispose && feature.dispose(ecModel, api);\n\t            });\n\t        }\n\t    });\n\n\t    function isUserFeatureName(featureName) {\n\t        return featureName.indexOf('my') === 0;\n\t    }\n\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(289)))\n\n/***/ },\n/* 382 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    var env = __webpack_require__(2);\n\n\t    function SaveAsImage (model) {\n\t        this.model = model;\n\t    }\n\n\t    SaveAsImage.defaultOption = {\n\t        show: true,\n\t        icon: 'M4.7,22.9L29.3,45.5L54.7,23.4M4.6,43.6L4.6,58L53.8,58L53.8,43.6M29.2,45.1L29.2,0',\n\t        title: '保存为图片',\n\t        type: 'png',\n\t        // Default use option.backgroundColor\n\t        // backgroundColor: '#fff',\n\t        name: '',\n\t        excludeComponents: ['toolbox'],\n\t        pixelRatio: 1,\n\t        lang: ['右键另存为图片']\n\t    };\n\n\t    SaveAsImage.prototype.unusable = !env.canvasSupported;\n\n\t    var proto = SaveAsImage.prototype;\n\n\t    proto.onclick = function (ecModel, api) {\n\t        var model = this.model;\n\t        var title = model.get('name') || ecModel.get('title.0.text') || 'echarts';\n\t        var $a = document.createElement('a');\n\t        var type = model.get('type', true) || 'png';\n\t        $a.download = title + '.' + type;\n\t        $a.target = '_blank';\n\t        var url = api.getConnectedDataURL({\n\t            type: type,\n\t            backgroundColor: model.get('backgroundColor', true)\n\t                || ecModel.get('backgroundColor') || '#fff',\n\t            excludeComponents: model.get('excludeComponents'),\n\t            pixelRatio: model.get('pixelRatio')\n\t        });\n\t        $a.href = url;\n\t        // Chrome and Firefox\n\t        if (typeof MouseEvent === 'function' && !env.browser.ie && !env.browser.edge) {\n\t            var evt = new MouseEvent('click', {\n\t                view: window,\n\t                bubbles: true,\n\t                cancelable: false\n\t            });\n\t            $a.dispatchEvent(evt);\n\t        }\n\t        // IE\n\t        else {\n\t            var lang = model.get('lang');\n\t            var html = ''\n\t                + '<body style=\"margin:0;\">'\n\t                + '<img src=\"' + url + '\" style=\"max-width:100%;\" title=\"' + ((lang && lang[0]) || '') + '\" />'\n\t                + '</body>';\n\t            var tab = window.open();\n\t            tab.document.write(html);\n\t        }\n\t    };\n\n\t    __webpack_require__(327).register(\n\t        'saveAsImage', SaveAsImage\n\t    );\n\n\t    module.exports = SaveAsImage;\n\n\n/***/ },\n/* 383 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var zrUtil = __webpack_require__(4);\n\n\t    function MagicType(model) {\n\t        this.model = model;\n\t    }\n\n\t    MagicType.defaultOption = {\n\t        show: true,\n\t        type: [],\n\t        // Icon group\n\t        icon: {\n\t            line: 'M4.1,28.9h7.1l9.3-22l7.4,38l9.7-19.7l3,12.8h14.9M4.1,58h51.4',\n\t            bar: 'M6.7,22.9h10V48h-10V22.9zM24.9,13h10v35h-10V13zM43.2,2h10v46h-10V2zM3.1,58h53.7',\n\t            stack: 'M8.2,38.4l-8.4,4.1l30.6,15.3L60,42.5l-8.1-4.1l-21.5,11L8.2,38.4z M51.9,30l-8.1,4.2l-13.4,6.9l-13.9-6.9L8.2,30l-8.4,4.2l8.4,4.2l22.2,11l21.5-11l8.1-4.2L51.9,30z M51.9,21.7l-8.1,4.2L35.7,30l-5.3,2.8L24.9,30l-8.4-4.1l-8.3-4.2l-8.4,4.2L8.2,30l8.3,4.2l13.9,6.9l13.4-6.9l8.1-4.2l8.1-4.1L51.9,21.7zM30.4,2.2L-0.2,17.5l8.4,4.1l8.3,4.2l8.4,4.2l5.5,2.7l5.3-2.7l8.1-4.2l8.1-4.2l8.1-4.1L30.4,2.2z', // jshint ignore:line\n\t            tiled: 'M2.3,2.2h22.8V25H2.3V2.2z M35,2.2h22.8V25H35V2.2zM2.3,35h22.8v22.8H2.3V35z M35,35h22.8v22.8H35V35z'\n\t        },\n\t        title: {\n\t            line: '切换为折线图',\n\t            bar: '切换为柱状图',\n\t            stack: '切换为堆叠',\n\t            tiled: '切换为平铺'\n\t        },\n\t        option: {},\n\t        seriesIndex: {}\n\t    };\n\n\t    var proto = MagicType.prototype;\n\n\t    proto.getIcons = function () {\n\t        var model = this.model;\n\t        var availableIcons = model.get('icon');\n\t        var icons = {};\n\t        zrUtil.each(model.get('type'), function (type) {\n\t            if (availableIcons[type]) {\n\t                icons[type] = availableIcons[type];\n\t            }\n\t        });\n\t        return icons;\n\t    };\n\n\t    var seriesOptGenreator = {\n\t        'line': function (seriesType, seriesId, seriesModel, model) {\n\t            if (seriesType === 'bar') {\n\t                return zrUtil.merge({\n\t                    id: seriesId,\n\t                    type: 'line',\n\t                    // Preserve data related option\n\t                    data: seriesModel.get('data'),\n\t                    stack: seriesModel.get('stack'),\n\t                    markPoint: seriesModel.get('markPoint'),\n\t                    markLine: seriesModel.get('markLine')\n\t                }, model.get('option.line') || {}, true);\n\t            }\n\t        },\n\t        'bar': function (seriesType, seriesId, seriesModel, model) {\n\t            if (seriesType === 'line') {\n\t                return zrUtil.merge({\n\t                    id: seriesId,\n\t                    type: 'bar',\n\t                    // Preserve data related option\n\t                    data: seriesModel.get('data'),\n\t                    stack: seriesModel.get('stack'),\n\t                    markPoint: seriesModel.get('markPoint'),\n\t                    markLine: seriesModel.get('markLine')\n\t                }, model.get('option.bar') || {}, true);\n\t            }\n\t        },\n\t        'stack': function (seriesType, seriesId, seriesModel, model) {\n\t            if (seriesType === 'line' || seriesType === 'bar') {\n\t                return zrUtil.merge({\n\t                    id: seriesId,\n\t                    stack: '__ec_magicType_stack__'\n\t                }, model.get('option.stack') || {}, true);\n\t            }\n\t        },\n\t        'tiled': function (seriesType, seriesId, seriesModel, model) {\n\t            if (seriesType === 'line' || seriesType === 'bar') {\n\t                return zrUtil.merge({\n\t                    id: seriesId,\n\t                    stack: ''\n\t                }, model.get('option.tiled') || {}, true);\n\t            }\n\t        }\n\t    };\n\n\t    var radioTypes = [\n\t        ['line', 'bar'],\n\t        ['stack', 'tiled']\n\t    ];\n\n\t    proto.onclick = function (ecModel, api, type) {\n\t        var model = this.model;\n\t        var seriesIndex = model.get('seriesIndex.' + type);\n\t        // Not supported magicType\n\t        if (!seriesOptGenreator[type]) {\n\t            return;\n\t        }\n\t        var newOption = {\n\t            series: []\n\t        };\n\t        var generateNewSeriesTypes = function (seriesModel) {\n\t            var seriesType = seriesModel.subType;\n\t            var seriesId = seriesModel.id;\n\t            var newSeriesOpt = seriesOptGenreator[type](\n\t                seriesType, seriesId, seriesModel, model\n\t            );\n\t            if (newSeriesOpt) {\n\t                // PENDING If merge original option?\n\t                zrUtil.defaults(newSeriesOpt, seriesModel.option);\n\t                newOption.series.push(newSeriesOpt);\n\t            }\n\t            // Modify boundaryGap\n\t            var coordSys = seriesModel.coordinateSystem;\n\t            if (coordSys && coordSys.type === 'cartesian2d' && (type === 'line' || type === 'bar')) {\n\t                var categoryAxis = coordSys.getAxesByScale('ordinal')[0];\n\t                if (categoryAxis) {\n\t                    var axisDim = categoryAxis.dim;\n\t                    var axisType = axisDim + 'Axis';\n\t                    var axisModel = ecModel.queryComponents({\n\t                        mainType: axisType,\n\t                        index: seriesModel.get(name + 'Index'),\n\t                        id: seriesModel.get(name + 'Id')\n\t                    })[0];\n\t                    var axisIndex = axisModel.componentIndex;\n\n\t                    newOption[axisType] = newOption[axisType] || [];\n\t                    for (var i = 0; i <= axisIndex; i++) {\n\t                        newOption[axisType][axisIndex] = newOption[axisType][axisIndex] || {};\n\t                    }\n\t                    newOption[axisType][axisIndex].boundaryGap = type === 'bar' ? true : false;\n\t                }\n\t            }\n\t        };\n\n\t        zrUtil.each(radioTypes, function (radio) {\n\t            if (zrUtil.indexOf(radio, type) >= 0) {\n\t                zrUtil.each(radio, function (item) {\n\t                    model.setIconStatus(item, 'normal');\n\t                });\n\t            }\n\t        });\n\n\t        model.setIconStatus(type, 'emphasis');\n\n\t        ecModel.eachComponent(\n\t            {\n\t                mainType: 'series',\n\t                query: seriesIndex == null ? null : {\n\t                    seriesIndex: seriesIndex\n\t                }\n\t            }, generateNewSeriesTypes\n\t        );\n\t        api.dispatchAction({\n\t            type: 'changeMagicType',\n\t            currentType: type,\n\t            newOption: newOption\n\t        });\n\t    };\n\n\t    var echarts = __webpack_require__(1);\n\t    echarts.registerAction({\n\t        type: 'changeMagicType',\n\t        event: 'magicTypeChanged',\n\t        update: 'prepareAndUpdate'\n\t    }, function (payload, ecModel) {\n\t        ecModel.mergeOption(payload.newOption);\n\t    });\n\n\t    __webpack_require__(327).register('magicType', MagicType);\n\n\t    module.exports = MagicType;\n\n\n/***/ },\n/* 384 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @module echarts/component/toolbox/feature/DataView\n\t */\n\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var eventTool = __webpack_require__(88);\n\n\n\t    var BLOCK_SPLITER = new Array(60).join('-');\n\t    var ITEM_SPLITER = '\\t';\n\t    /**\n\t     * Group series into two types\n\t     *  1. on category axis, like line, bar\n\t     *  2. others, like scatter, pie\n\t     * @param {module:echarts/model/Global} ecModel\n\t     * @return {Object}\n\t     * @inner\n\t     */\n\t    function groupSeries(ecModel) {\n\t        var seriesGroupByCategoryAxis = {};\n\t        var otherSeries = [];\n\t        var meta = [];\n\t        ecModel.eachRawSeries(function (seriesModel) {\n\t            var coordSys = seriesModel.coordinateSystem;\n\n\t            if (coordSys && (coordSys.type === 'cartesian2d' || coordSys.type === 'polar')) {\n\t                var baseAxis = coordSys.getBaseAxis();\n\t                if (baseAxis.type === 'category') {\n\t                    var key = baseAxis.dim + '_' + baseAxis.index;\n\t                    if (!seriesGroupByCategoryAxis[key]) {\n\t                        seriesGroupByCategoryAxis[key] = {\n\t                            categoryAxis: baseAxis,\n\t                            valueAxis: coordSys.getOtherAxis(baseAxis),\n\t                            series: []\n\t                        };\n\t                        meta.push({\n\t                            axisDim: baseAxis.dim,\n\t                            axisIndex: baseAxis.index\n\t                        });\n\t                    }\n\t                    seriesGroupByCategoryAxis[key].series.push(seriesModel);\n\t                }\n\t                else {\n\t                    otherSeries.push(seriesModel);\n\t                }\n\t            }\n\t            else {\n\t                otherSeries.push(seriesModel);\n\t            }\n\t        });\n\n\t        return {\n\t            seriesGroupByCategoryAxis: seriesGroupByCategoryAxis,\n\t            other: otherSeries,\n\t            meta: meta\n\t        };\n\t    }\n\n\t    /**\n\t     * Assemble content of series on cateogory axis\n\t     * @param {Array.<module:echarts/model/Series>} series\n\t     * @return {string}\n\t     * @inner\n\t     */\n\t    function assembleSeriesWithCategoryAxis(series) {\n\t        var tables = [];\n\t        zrUtil.each(series, function (group, key) {\n\t            var categoryAxis = group.categoryAxis;\n\t            var valueAxis = group.valueAxis;\n\t            var valueAxisDim = valueAxis.dim;\n\n\t            var headers = [' '].concat(zrUtil.map(group.series, function (series) {\n\t                return series.name;\n\t            }));\n\t            var columns = [categoryAxis.model.getCategories()];\n\t            zrUtil.each(group.series, function (series) {\n\t                columns.push(series.getRawData().mapArray(valueAxisDim, function (val) {\n\t                    return val;\n\t                }));\n\t            });\n\t            // Assemble table content\n\t            var lines = [headers.join(ITEM_SPLITER)];\n\t            for (var i = 0; i < columns[0].length; i++) {\n\t                var items = [];\n\t                for (var j = 0; j < columns.length; j++) {\n\t                    items.push(columns[j][i]);\n\t                }\n\t                lines.push(items.join(ITEM_SPLITER));\n\t            }\n\t            tables.push(lines.join('\\n'));\n\t        });\n\t        return tables.join('\\n\\n' +  BLOCK_SPLITER + '\\n\\n');\n\t    }\n\n\t    /**\n\t     * Assemble content of other series\n\t     * @param {Array.<module:echarts/model/Series>} series\n\t     * @return {string}\n\t     * @inner\n\t     */\n\t    function assembleOtherSeries(series) {\n\t        return zrUtil.map(series, function (series) {\n\t            var data = series.getRawData();\n\t            var lines = [series.name];\n\t            var vals = [];\n\t            data.each(data.dimensions, function () {\n\t                var argLen = arguments.length;\n\t                var dataIndex = arguments[argLen - 1];\n\t                var name = data.getName(dataIndex);\n\t                for (var i = 0; i < argLen - 1; i++) {\n\t                    vals[i] = arguments[i];\n\t                }\n\t                lines.push((name ? (name + ITEM_SPLITER) : '') + vals.join(ITEM_SPLITER));\n\t            });\n\t            return lines.join('\\n');\n\t        }).join('\\n\\n' + BLOCK_SPLITER + '\\n\\n');\n\t    }\n\n\t    /**\n\t     * @param {module:echarts/model/Global}\n\t     * @return {string}\n\t     * @inner\n\t     */\n\t    function getContentFromModel(ecModel) {\n\n\t        var result = groupSeries(ecModel);\n\n\t        return {\n\t            value: zrUtil.filter([\n\t                    assembleSeriesWithCategoryAxis(result.seriesGroupByCategoryAxis),\n\t                    assembleOtherSeries(result.other)\n\t                ], function (str) {\n\t                    return str.replace(/[\\n\\t\\s]/g, '');\n\t                }).join('\\n\\n' + BLOCK_SPLITER + '\\n\\n'),\n\n\t            meta: result.meta\n\t        };\n\t    }\n\n\n\t    function trim(str) {\n\t        return str.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n\t    }\n\t    /**\n\t     * If a block is tsv format\n\t     */\n\t    function isTSVFormat(block) {\n\t        // Simple method to find out if a block is tsv format\n\t        var firstLine = block.slice(0, block.indexOf('\\n'));\n\t        if (firstLine.indexOf(ITEM_SPLITER) >= 0) {\n\t            return true;\n\t        }\n\t    }\n\n\t    var itemSplitRegex = new RegExp('[' + ITEM_SPLITER + ']+', 'g');\n\t    /**\n\t     * @param {string} tsv\n\t     * @return {Array.<Object>}\n\t     */\n\t    function parseTSVContents(tsv) {\n\t        var tsvLines = tsv.split(/\\n+/g);\n\t        var headers = trim(tsvLines.shift()).split(itemSplitRegex);\n\n\t        var categories = [];\n\t        var series = zrUtil.map(headers, function (header) {\n\t            return {\n\t                name: header,\n\t                data: []\n\t            };\n\t        });\n\t        for (var i = 0; i < tsvLines.length; i++) {\n\t            var items = trim(tsvLines[i]).split(itemSplitRegex);\n\t            categories.push(items.shift());\n\t            for (var j = 0; j < items.length; j++) {\n\t                series[j] && (series[j].data[i] = items[j]);\n\t            }\n\t        }\n\t        return {\n\t            series: series,\n\t            categories: categories\n\t        };\n\t    }\n\n\t    /**\n\t     * @param {string} str\n\t     * @return {Array.<Object>}\n\t     * @inner\n\t     */\n\t    function parseListContents(str) {\n\t        var lines = str.split(/\\n+/g);\n\t        var seriesName = trim(lines.shift());\n\n\t        var data = [];\n\t        for (var i = 0; i < lines.length; i++) {\n\t            var items = trim(lines[i]).split(itemSplitRegex);\n\t            var name = '';\n\t            var value;\n\t            var hasName = false;\n\t            if (isNaN(items[0])) { // First item is name\n\t                hasName = true;\n\t                name = items[0];\n\t                items = items.slice(1);\n\t                data[i] = {\n\t                    name: name,\n\t                    value: []\n\t                };\n\t                value = data[i].value;\n\t            }\n\t            else {\n\t                value = data[i] = [];\n\t            }\n\t            for (var j = 0; j < items.length; j++) {\n\t                value.push(+items[j]);\n\t            }\n\t            if (value.length === 1) {\n\t                hasName ? (data[i].value = value[0]) : (data[i] = value[0]);\n\t            }\n\t        }\n\n\t        return {\n\t            name: seriesName,\n\t            data: data\n\t        };\n\t    }\n\n\t    /**\n\t     * @param {string} str\n\t     * @param {Array.<Object>} blockMetaList\n\t     * @return {Object}\n\t     * @inner\n\t     */\n\t    function parseContents(str, blockMetaList) {\n\t        var blocks = str.split(new RegExp('\\n*' + BLOCK_SPLITER + '\\n*', 'g'));\n\t        var newOption = {\n\t            series: []\n\t        };\n\t        zrUtil.each(blocks, function (block, idx) {\n\t            if (isTSVFormat(block)) {\n\t                var result = parseTSVContents(block);\n\t                var blockMeta = blockMetaList[idx];\n\t                var axisKey = blockMeta.axisDim + 'Axis';\n\n\t                if (blockMeta) {\n\t                    newOption[axisKey] = newOption[axisKey] || [];\n\t                    newOption[axisKey][blockMeta.axisIndex] = {\n\t                        data: result.categories\n\t                    };\n\t                    newOption.series = newOption.series.concat(result.series);\n\t                }\n\t            }\n\t            else {\n\t                var result = parseListContents(block);\n\t                newOption.series.push(result);\n\t            }\n\t        });\n\t        return newOption;\n\t    }\n\n\t    /**\n\t     * @alias {module:echarts/component/toolbox/feature/DataView}\n\t     * @constructor\n\t     * @param {module:echarts/model/Model} model\n\t     */\n\t    function DataView(model) {\n\n\t        this._dom = null;\n\n\t        this.model = model;\n\t    }\n\n\t    DataView.defaultOption = {\n\t        show: true,\n\t        readOnly: false,\n\t        optionToContent: null,\n\t        contentToOption: null,\n\n\t        icon: 'M17.5,17.3H33 M17.5,17.3H33 M45.4,29.5h-28 M11.5,2v56H51V14.8L38.4,2H11.5z M38.4,2.2v12.7H51 M45.4,41.7h-28',\n\t        title: '数据视图',\n\t        lang: ['数据视图', '关闭', '刷新'],\n\t        backgroundColor: '#fff',\n\t        textColor: '#000',\n\t        textareaColor: '#fff',\n\t        textareaBorderColor: '#333',\n\t        buttonColor: '#c23531',\n\t        buttonTextColor: '#fff'\n\t    };\n\n\t    DataView.prototype.onclick = function (ecModel, api) {\n\t        var container = api.getDom();\n\t        var model = this.model;\n\t        if (this._dom) {\n\t            container.removeChild(this._dom);\n\t        }\n\t        var root = document.createElement('div');\n\t        root.style.cssText = 'position:absolute;left:5px;top:5px;bottom:5px;right:5px;';\n\t        root.style.backgroundColor = model.get('backgroundColor') || '#fff';\n\n\t        // Create elements\n\t        var header = document.createElement('h4');\n\t        var lang = model.get('lang') || [];\n\t        header.innerHTML = lang[0] || model.get('title');\n\t        header.style.cssText = 'margin: 10px 20px;';\n\t        header.style.color = model.get('textColor');\n\n\t        var viewMain = document.createElement('div');\n\t        var textarea = document.createElement('textarea');\n\t        viewMain.style.cssText = 'display:block;width:100%;overflow:hidden;';\n\n\t        var optionToContent = model.get('optionToContent');\n\t        var contentToOption = model.get('contentToOption');\n\t        var result = getContentFromModel(ecModel);\n\t        if (typeof optionToContent === 'function') {\n\t            var htmlOrDom = optionToContent(api.getOption());\n\t            if (typeof htmlOrDom === 'string') {\n\t                viewMain.innerHTML = htmlOrDom;\n\t            }\n\t            else if (zrUtil.isDom(htmlOrDom)) {\n\t                viewMain.appendChild(htmlOrDom);\n\t            }\n\t        }\n\t        else {\n\t            // Use default textarea\n\t            viewMain.appendChild(textarea);\n\t            textarea.readOnly = model.get('readOnly');\n\t            textarea.style.cssText = 'width:100%;height:100%;font-family:monospace;font-size:14px;line-height:1.6rem;';\n\t            textarea.style.color = model.get('textColor');\n\t            textarea.style.borderColor = model.get('textareaBorderColor');\n\t            textarea.style.backgroundColor = model.get('textareaColor');\n\t            textarea.value = result.value;\n\t        }\n\n\t        var blockMetaList = result.meta;\n\n\t        var buttonContainer = document.createElement('div');\n\t        buttonContainer.style.cssText = 'position:absolute;bottom:0;left:0;right:0;';\n\n\t        var buttonStyle = 'float:right;margin-right:20px;border:none;'\n\t            + 'cursor:pointer;padding:2px 5px;font-size:12px;border-radius:3px';\n\t        var closeButton = document.createElement('div');\n\t        var refreshButton = document.createElement('div');\n\n\t        buttonStyle += ';background-color:' + model.get('buttonColor');\n\t        buttonStyle += ';color:' + model.get('buttonTextColor');\n\n\t        var self = this;\n\n\t        function close() {\n\t            container.removeChild(root);\n\t            self._dom = null;\n\t        }\n\t        eventTool.addEventListener(closeButton, 'click', close);\n\n\t        eventTool.addEventListener(refreshButton, 'click', function () {\n\t            var newOption;\n\t            try {\n\t                if (typeof contentToOption === 'function') {\n\t                    newOption = contentToOption(viewMain, api.getOption());\n\t                }\n\t                else {\n\t                    newOption = parseContents(textarea.value, blockMetaList);\n\t                }\n\t            }\n\t            catch (e) {\n\t                close();\n\t                throw new Error('Data view format error ' + e);\n\t            }\n\t            if (newOption) {\n\t                api.dispatchAction({\n\t                    type: 'changeDataView',\n\t                    newOption: newOption\n\t                });\n\t            }\n\n\t            close();\n\t        });\n\n\t        closeButton.innerHTML = lang[1];\n\t        refreshButton.innerHTML = lang[2];\n\t        refreshButton.style.cssText = buttonStyle;\n\t        closeButton.style.cssText = buttonStyle;\n\n\t        !model.get('readOnly') && buttonContainer.appendChild(refreshButton);\n\t        buttonContainer.appendChild(closeButton);\n\n\t        // http://stackoverflow.com/questions/6637341/use-tab-to-indent-in-textarea\n\t        eventTool.addEventListener(textarea, 'keydown', function (e) {\n\t            if ((e.keyCode || e.which) === 9) {\n\t                // get caret position/selection\n\t                var val = this.value;\n\t                var start = this.selectionStart;\n\t                var end = this.selectionEnd;\n\n\t                // set textarea value to: text before caret + tab + text after caret\n\t                this.value = val.substring(0, start) + ITEM_SPLITER + val.substring(end);\n\n\t                // put caret at right position again\n\t                this.selectionStart = this.selectionEnd = start + 1;\n\n\t                // prevent the focus lose\n\t                eventTool.stop(e);\n\t            }\n\t        });\n\n\t        root.appendChild(header);\n\t        root.appendChild(viewMain);\n\t        root.appendChild(buttonContainer);\n\n\t        viewMain.style.height = (container.clientHeight - 80) + 'px';\n\n\t        container.appendChild(root);\n\t        this._dom = root;\n\t    };\n\n\t    DataView.prototype.remove = function (ecModel, api) {\n\t        this._dom && api.getDom().removeChild(this._dom);\n\t    };\n\n\t    DataView.prototype.dispose = function (ecModel, api) {\n\t        this.remove(ecModel, api);\n\t    };\n\n\t    /**\n\t     * @inner\n\t     */\n\t    function tryMergeDataOption(newData, originalData) {\n\t        return zrUtil.map(newData, function (newVal, idx) {\n\t            var original = originalData && originalData[idx];\n\t            if (zrUtil.isObject(original) && !zrUtil.isArray(original)) {\n\t                if (zrUtil.isObject(newVal) && !zrUtil.isArray(newVal)) {\n\t                    newVal = newVal.value;\n\t                }\n\t                // Original data has option\n\t                return zrUtil.defaults({\n\t                    value: newVal\n\t                }, original);\n\t            }\n\t            else {\n\t                return newVal;\n\t            }\n\t        });\n\t    }\n\n\t    __webpack_require__(327).register('dataView', DataView);\n\n\t    __webpack_require__(1).registerAction({\n\t        type: 'changeDataView',\n\t        event: 'dataViewChanged',\n\t        update: 'prepareAndUpdate'\n\t    }, function (payload, ecModel) {\n\t        var newSeriesOptList = [];\n\t        zrUtil.each(payload.newOption.series, function (seriesOpt) {\n\t            var seriesModel = ecModel.getSeriesByName(seriesOpt.name)[0];\n\t            if (!seriesModel) {\n\t                // New created series\n\t                // Geuss the series type\n\t                newSeriesOptList.push(zrUtil.extend({\n\t                    // Default is scatter\n\t                    type: 'scatter'\n\t                }, seriesOpt));\n\t            }\n\t            else {\n\t                var originalData = seriesModel.get('data');\n\t                newSeriesOptList.push({\n\t                    name: seriesOpt.name,\n\t                    data: tryMergeDataOption(seriesOpt.data, originalData)\n\t                });\n\t            }\n\t        });\n\n\t        ecModel.mergeOption(zrUtil.defaults({\n\t            series: newSeriesOptList\n\t        }, payload.newOption));\n\t    });\n\n\t    module.exports = DataView;\n\n\n/***/ },\n/* 385 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var BrushController = __webpack_require__(236);\n\t    var brushHelper = __webpack_require__(322);\n\t    var history = __webpack_require__(386);\n\n\t    var each = zrUtil.each;\n\n\t    // Use dataZoomSelect\n\t    __webpack_require__(387);\n\n\t    // Spectial component id start with \\0ec\\0, see echarts/model/Global.js~hasInnerId\n\t    var DATA_ZOOM_ID_BASE = '\\0_ec_\\0toolbox-dataZoom_';\n\n\t    function DataZoom(model, ecModel, api) {\n\n\t        /**\n\t         * @private\n\t         * @type {module:echarts/component/helper/BrushController}\n\t         */\n\t        (this._brushController = new BrushController(api.getZr()))\n\t            .on('brush', zrUtil.bind(this._onBrush, this))\n\t            .mount();\n\n\t        /**\n\t         * @private\n\t         * @type {boolean}\n\t         */\n\t        this._isZoomActive;\n\t    }\n\n\t    DataZoom.defaultOption = {\n\t        show: true,\n\t        // Icon group\n\t        icon: {\n\t            zoom: 'M0,13.5h26.9 M13.5,26.9V0 M32.1,13.5H58V58H13.5 V32.1',\n\t            back: 'M22,1.4L9.9,13.5l12.3,12.3 M10.3,13.5H54.9v44.6 H10.3v-26'\n\t        },\n\t        title: {\n\t            zoom: '区域缩放',\n\t            back: '区域缩放还原'\n\t        }\n\t    };\n\n\t    var proto = DataZoom.prototype;\n\n\t    proto.render = function (featureModel, ecModel, api, payload) {\n\t        this.model = featureModel;\n\t        this.ecModel = ecModel;\n\t        this.api = api;\n\n\t        updateZoomBtnStatus(featureModel, ecModel, this, payload);\n\t        updateBackBtnStatus(featureModel, ecModel);\n\t    };\n\n\t    proto.onclick = function (ecModel, api, type) {\n\t        handlers[type].call(this);\n\t    };\n\n\t    proto.remove = function (ecModel, api) {\n\t        this._brushController.unmount();\n\t    };\n\n\t    proto.dispose = function (ecModel, api) {\n\t        this._brushController.dispose();\n\t    };\n\n\t    /**\n\t     * @private\n\t     */\n\t    var handlers = {\n\n\t        zoom: function () {\n\t            var nextActive = !this._isZoomActive;\n\n\t            this.api.dispatchAction({\n\t                type: 'takeGlobalCursor',\n\t                key: 'dataZoomSelect',\n\t                dataZoomSelectActive: nextActive\n\t            });\n\t        },\n\n\t        back: function () {\n\t            this._dispatchZoomAction(history.pop(this.ecModel));\n\t        }\n\t    };\n\n\t    /**\n\t     * @private\n\t     */\n\t    proto._onBrush = function (areas, opt) {\n\t        if (!opt.isEnd || !areas.length) {\n\t            return;\n\t        }\n\t        var snapshot = {};\n\t        var ecModel = this.ecModel;\n\n\t        this._brushController.updateCovers([]); // remove cover\n\n\t        var coordInfoList = brushHelper.makeCoordInfoList(\n\t            retrieveAxisSetting(this.model.option), ecModel\n\t        );\n\t        var rangesCoordInfoList = [];\n\t        brushHelper.parseOutputRanges(areas, coordInfoList, ecModel, rangesCoordInfoList);\n\n\t        var area = areas[0]; // dataZoom can not multiple area.\n\t        var coordInfo = rangesCoordInfoList[0];\n\t        var coordRange = area.coordRange;\n\t        var brushType = area.brushType;\n\n\t        if (coordInfo && coordRange) {\n\t            if (brushType === 'rect') {\n\t                setBatch('xAxis', coordRange[0], coordInfo);\n\t                setBatch('yAxis', coordRange[1], coordInfo);\n\t            }\n\t            else {\n\t                var axisNames = {lineX: 'xAxis', lineY: 'yAxis'};\n\t                setBatch(axisNames[brushType], coordRange, coordInfo);\n\t            }\n\t        }\n\n\t        history.push(ecModel, snapshot);\n\n\t        this._dispatchZoomAction(snapshot);\n\n\t        function setBatch(axisName, minMax, coordInfo) {\n\t            var dataZoomModel = findDataZoom(axisName, coordInfo[axisName], ecModel);\n\t            if (dataZoomModel) {\n\t                snapshot[dataZoomModel.id] = {\n\t                    dataZoomId: dataZoomModel.id,\n\t                    startValue: minMax[0],\n\t                    endValue: minMax[1]\n\t                };\n\t            }\n\t        }\n\n\t        function findDataZoom(axisName, axisModel, ecModel) {\n\t            var dataZoomModel;\n\t            ecModel.eachComponent(\n\t                {mainType: 'dataZoom', subType: 'select'},\n\t                function (dzModel, dataZoomIndex) {\n\t                    var axisIndex = dzModel.get(axisName + 'Index');\n\t                    if (axisIndex != null\n\t                        && ecModel.getComponent(axisName, axisIndex) === axisModel\n\t                    ) {\n\t                        dataZoomModel = dzModel;\n\t                    }\n\t                }\n\t            );\n\t            return dataZoomModel;\n\t        }\n\t    };\n\n\t    /**\n\t     * @private\n\t     */\n\t    proto._dispatchZoomAction = function (snapshot) {\n\t        var batch = [];\n\n\t        // Convert from hash map to array.\n\t        each(snapshot, function (batchItem, dataZoomId) {\n\t            batch.push(zrUtil.clone(batchItem));\n\t        });\n\n\t        batch.length && this.api.dispatchAction({\n\t            type: 'dataZoom',\n\t            from: this.uid,\n\t            batch: batch\n\t        });\n\t    };\n\n\t    function retrieveAxisSetting(option) {\n\t        var setting = {};\n\t        // Compatible with previous setting: null => all axis, false => no axis.\n\t        zrUtil.each(['xAxisIndex', 'yAxisIndex'], function (name) {\n\t            setting[name] = option[name];\n\t            setting[name] == null && (setting[name] = 'all');\n\t            (setting[name] === false || setting[name] === 'none') && (setting[name] = []);\n\t        });\n\t        return setting;\n\t    }\n\n\t    function updateBackBtnStatus(featureModel, ecModel) {\n\t        featureModel.setIconStatus(\n\t            'back',\n\t            history.count(ecModel) > 1 ? 'emphasis' : 'normal'\n\t        );\n\t    }\n\n\t    function updateZoomBtnStatus(featureModel, ecModel, view, payload) {\n\t        var zoomActive = view._isZoomActive;\n\n\t        if (payload && payload.type === 'takeGlobalCursor') {\n\t            zoomActive = payload.key === 'dataZoomSelect'\n\t                ? payload.dataZoomSelectActive : false;\n\t        }\n\n\t        view._isZoomActive = zoomActive;\n\n\t        featureModel.setIconStatus('zoom', zoomActive ? 'emphasis' : 'normal');\n\n\t        var coordInfoList = brushHelper.makeCoordInfoList(\n\t            retrieveAxisSetting(featureModel.option), ecModel\n\t        );\n\t        var brushType = (coordInfoList.xAxisHas && !coordInfoList.yAxisHas)\n\t            ? 'lineX'\n\t            : (!coordInfoList.xAxisHas && coordInfoList.yAxisHas)\n\t            ? 'lineY'\n\t            : 'rect';\n\n\t        view._brushController\n\t            .setPanels(brushHelper.makePanelOpts(coordInfoList))\n\t            .enableBrush(\n\t                zoomActive\n\t                ? {\n\t                    brushType: brushType,\n\t                    brushStyle: { // FIXME user customized?\n\t                        lineWidth: 0,\n\t                        // stroke: '#333',\n\t                        fill: 'rgba(0,0,0,0.2)'\n\t                    }\n\t                }\n\t                : false\n\t            );\n\t    }\n\n\n\t    __webpack_require__(327).register('dataZoom', DataZoom);\n\n\n\t    // Create special dataZoom option for select\n\t    __webpack_require__(1).registerPreprocessor(function (option) {\n\t        if (!option) {\n\t            return;\n\t        }\n\n\t        var dataZoomOpts = option.dataZoom || (option.dataZoom = []);\n\t        if (!zrUtil.isArray(dataZoomOpts)) {\n\t            option.dataZoom = dataZoomOpts = [dataZoomOpts];\n\t        }\n\n\t        var toolboxOpt = option.toolbox;\n\t        if (toolboxOpt) {\n\t            // Assume there is only one toolbox\n\t            if (zrUtil.isArray(toolboxOpt)) {\n\t                toolboxOpt = toolboxOpt[0];\n\t            }\n\n\t            if (toolboxOpt && toolboxOpt.feature) {\n\t                var dataZoomOpt = toolboxOpt.feature.dataZoom;\n\t                addForAxis('xAxis', dataZoomOpt);\n\t                addForAxis('yAxis', dataZoomOpt);\n\t            }\n\t        }\n\n\t        function addForAxis(axisName, dataZoomOpt) {\n\t            if (!dataZoomOpt) {\n\t                return;\n\t            }\n\n\t            // Try not to modify model, because it is not merged yet.\n\t            var axisIndicesName = axisName + 'Index';\n\t            var givenAxisIndices = dataZoomOpt[axisIndicesName];\n\t            if (givenAxisIndices != null\n\t                && givenAxisIndices != 'all'\n\t                && !zrUtil.isArray(givenAxisIndices)\n\t            ) {\n\t                givenAxisIndices = (givenAxisIndices === false || givenAxisIndices === 'none') ? [] : [givenAxisIndices];\n\t            }\n\n\t            forEachComponent(axisName, function (axisOpt, axisIndex) {\n\t                if (givenAxisIndices != null\n\t                    && givenAxisIndices != 'all'\n\t                    && zrUtil.indexOf(givenAxisIndices, axisIndex) === -1\n\t                ) {\n\t                    return;\n\t                }\n\t                var newOpt = {\n\t                    type: 'select',\n\t                    $fromToolbox: true,\n\t                    // Id for merge mapping.\n\t                    id: DATA_ZOOM_ID_BASE + axisName + axisIndex\n\t                };\n\t                // FIXME\n\t                // Only support one axis now.\n\t                newOpt[axisIndicesName] = axisIndex;\n\t                dataZoomOpts.push(newOpt);\n\t            });\n\t        }\n\n\t        function forEachComponent(mainType, cb) {\n\t            var opts = option[mainType];\n\t            if (!zrUtil.isArray(opts)) {\n\t                opts = opts ? [opts] : [];\n\t            }\n\t            each(opts, cb);\n\t        }\n\t    });\n\n\t    module.exports = DataZoom;\n\n\n/***/ },\n/* 386 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file History manager.\n\t */\n\n\n\t    var zrUtil = __webpack_require__(4);\n\t    var each = zrUtil.each;\n\n\t    var ATTR = '\\0_ec_hist_store';\n\n\t    var history = {\n\n\t        /**\n\t         * @public\n\t         * @param {module:echarts/model/Global} ecModel\n\t         * @param {Object} newSnapshot {dataZoomId, batch: [payloadInfo, ...]}\n\t         */\n\t        push: function (ecModel, newSnapshot) {\n\t            var store = giveStore(ecModel);\n\n\t            // If previous dataZoom can not be found,\n\t            // complete an range with current range.\n\t            each(newSnapshot, function (batchItem, dataZoomId) {\n\t                var i = store.length - 1;\n\t                for (; i >= 0; i--) {\n\t                    var snapshot = store[i];\n\t                    if (snapshot[dataZoomId]) {\n\t                        break;\n\t                    }\n\t                }\n\t                if (i < 0) {\n\t                    // No origin range set, create one by current range.\n\t                    var dataZoomModel = ecModel.queryComponents(\n\t                        {mainType: 'dataZoom', subType: 'select', id: dataZoomId}\n\t                    )[0];\n\t                    if (dataZoomModel) {\n\t                        var percentRange = dataZoomModel.getPercentRange();\n\t                        store[0][dataZoomId] = {\n\t                            dataZoomId: dataZoomId,\n\t                            start: percentRange[0],\n\t                            end: percentRange[1]\n\t                        };\n\t                    }\n\t                }\n\t            });\n\n\t            store.push(newSnapshot);\n\t        },\n\n\t        /**\n\t         * @public\n\t         * @param {module:echarts/model/Global} ecModel\n\t         * @return {Object} snapshot\n\t         */\n\t        pop: function (ecModel) {\n\t            var store = giveStore(ecModel);\n\t            var head = store[store.length - 1];\n\t            store.length > 1 && store.pop();\n\n\t            // Find top for all dataZoom.\n\t            var snapshot = {};\n\t            each(head, function (batchItem, dataZoomId) {\n\t                for (var i = store.length - 1; i >= 0; i--) {\n\t                    var batchItem = store[i][dataZoomId];\n\t                    if (batchItem) {\n\t                        snapshot[dataZoomId] = batchItem;\n\t                        break;\n\t                    }\n\t                }\n\t            });\n\n\t            return snapshot;\n\t        },\n\n\t        /**\n\t         * @public\n\t         */\n\t        clear: function (ecModel) {\n\t            ecModel[ATTR] = null;\n\t        },\n\n\t        /**\n\t         * @public\n\t         * @param {module:echarts/model/Global} ecModel\n\t         * @return {number} records. always >= 1.\n\t         */\n\t        count: function (ecModel) {\n\t            return giveStore(ecModel).length;\n\t        }\n\n\t    };\n\n\t    /**\n\t     * [{key: dataZoomId, value: {dataZoomId, range}}, ...]\n\t     * History length of each dataZoom may be different.\n\t     * this._history[0] is used to store origin range.\n\t     * @type {Array.<Object>}\n\t     */\n\t    function giveStore(ecModel) {\n\t        var store = ecModel[ATTR];\n\t        if (!store) {\n\t            store = ecModel[ATTR] = [{}];\n\t        }\n\t        return store;\n\t    }\n\n\t    module.exports = history;\n\n\n\n/***/ },\n/* 387 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * DataZoom component entry\n\t */\n\n\n\t    __webpack_require__(330);\n\n\t    __webpack_require__(331);\n\t    __webpack_require__(334);\n\n\t    __webpack_require__(388);\n\t    __webpack_require__(389);\n\n\t    __webpack_require__(341);\n\t    __webpack_require__(342);\n\n\n\n/***/ },\n/* 388 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @file Data zoom model\n\t */\n\n\n\t    var DataZoomModel = __webpack_require__(331);\n\n\t    module.exports = DataZoomModel.extend({\n\n\t        type: 'dataZoom.select'\n\n\t    });\n\n\n\n/***/ },\n/* 389 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\t    module.exports = __webpack_require__(334).extend({\n\n\t        type: 'dataZoom.select'\n\n\t    });\n\n\n\n/***/ },\n/* 390 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\n\t    var history = __webpack_require__(386);\n\n\t    function Restore(model) {\n\t        this.model = model;\n\t    }\n\n\t    Restore.defaultOption = {\n\t        show: true,\n\t        icon: 'M3.8,33.4 M47,18.9h9.8V8.7 M56.3,20.1 C52.1,9,40.5,0.6,26.8,2.1C12.6,3.7,1.6,16.2,2.1,30.6 M13,41.1H3.1v10.2 M3.7,39.9c4.2,11.1,15.8,19.5,29.5,18 c14.2-1.6,25.2-14.1,24.7-28.5',\n\t        title: '还原'\n\t    };\n\n\t    var proto = Restore.prototype;\n\n\t    proto.onclick = function (ecModel, api, type) {\n\t        history.clear(ecModel);\n\n\t        api.dispatchAction({\n\t            type: 'restore',\n\t            from: this.uid\n\t        });\n\t    };\n\n\n\t    __webpack_require__(327).register('restore', Restore);\n\n\n\t    __webpack_require__(1).registerAction(\n\t        {type: 'restore', event: 'restore', update: 'prepareAndUpdate'},\n\t        function (payload, ecModel) {\n\t            ecModel.resetOption('recreate');\n\t        }\n\t    );\n\n\t    module.exports = Restore;\n\n\n/***/ },\n/* 391 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t    __webpack_require__(392);\n\t    __webpack_require__(82).registerPainter('vml', __webpack_require__(394));\n\n\n/***/ },\n/* 392 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// http://www.w3.org/TR/NOTE-VML\n\t// TODO Use proxy like svg instead of overwrite brush methods\n\n\n\tif (!__webpack_require__(2).canvasSupported) {\n\t    var vec2 = __webpack_require__(10);\n\t    var BoundingRect = __webpack_require__(9);\n\t    var CMD = __webpack_require__(49).CMD;\n\t    var colorTool = __webpack_require__(39);\n\t    var textContain = __webpack_require__(8);\n\t    var RectText = __webpack_require__(48);\n\t    var Displayable = __webpack_require__(46);\n\t    var ZImage = __webpack_require__(61);\n\t    var Text = __webpack_require__(63);\n\t    var Path = __webpack_require__(45);\n\n\t    var Gradient = __webpack_require__(79);\n\n\t    var vmlCore = __webpack_require__(393);\n\n\t    var round = Math.round;\n\t    var sqrt = Math.sqrt;\n\t    var abs = Math.abs;\n\t    var cos = Math.cos;\n\t    var sin = Math.sin;\n\t    var mathMax = Math.max;\n\n\t    var applyTransform = vec2.applyTransform;\n\n\t    var comma = ',';\n\t    var imageTransformPrefix = 'progid:DXImageTransform.Microsoft';\n\n\t    var Z = 21600;\n\t    var Z2 = Z / 2;\n\n\t    var ZLEVEL_BASE = 100000;\n\t    var Z_BASE = 1000;\n\n\t    var initRootElStyle = function (el) {\n\t        el.style.cssText = 'position:absolute;left:0;top:0;width:1px;height:1px;';\n\t        el.coordsize = Z + ','  + Z;\n\t        el.coordorigin = '0,0';\n\t    };\n\n\t    var encodeHtmlAttribute = function (s) {\n\t        return String(s).replace(/&/g, '&amp;').replace(/\"/g, '&quot;');\n\t    };\n\n\t    var rgb2Str = function (r, g, b) {\n\t        return 'rgb(' + [r, g, b].join(',') + ')';\n\t    };\n\n\t    var append = function (parent, child) {\n\t        if (child && parent && child.parentNode !== parent) {\n\t            parent.appendChild(child);\n\t        }\n\t    };\n\n\t    var remove = function (parent, child) {\n\t        if (child && parent && child.parentNode === parent) {\n\t            parent.removeChild(child);\n\t        }\n\t    };\n\n\t    var getZIndex = function (zlevel, z, z2) {\n\t        // z 的取值范围为 [0, 1000]\n\t        return (parseFloat(zlevel) || 0) * ZLEVEL_BASE + (parseFloat(z) || 0) * Z_BASE + z2;\n\t    };\n\n\t    var parsePercent = function (value, maxValue) {\n\t        if (typeof value === 'string') {\n\t            if (value.lastIndexOf('%') >= 0) {\n\t                return parseFloat(value) / 100 * maxValue;\n\t            }\n\t            return parseFloat(value);\n\t        }\n\t        return value;\n\t    };\n\n\t    /***************************************************\n\t     * PATH\n\t     **************************************************/\n\n\t    var setColorAndOpacity = function (el, color, opacity) {\n\t        var colorArr = colorTool.parse(color);\n\t        opacity = +opacity;\n\t        if (isNaN(opacity)) {\n\t            opacity = 1;\n\t        }\n\t        if (colorArr) {\n\t            el.color = rgb2Str(colorArr[0], colorArr[1], colorArr[2]);\n\t            el.opacity = opacity * colorArr[3];\n\t        }\n\t    };\n\n\t    var getColorAndAlpha = function (color) {\n\t        var colorArr = colorTool.parse(color);\n\t        return [\n\t            rgb2Str(colorArr[0], colorArr[1], colorArr[2]),\n\t            colorArr[3]\n\t        ];\n\t    };\n\n\t    var updateFillNode = function (el, style, zrEl) {\n\t        // TODO pattern\n\t        var fill = style.fill;\n\t        if (fill != null) {\n\t            // Modified from excanvas\n\t            if (fill instanceof Gradient) {\n\t                var gradientType;\n\t                var angle = 0;\n\t                var focus = [0, 0];\n\t                // additional offset\n\t                var shift = 0;\n\t                // scale factor for offset\n\t                var expansion = 1;\n\t                var rect = zrEl.getBoundingRect();\n\t                var rectWidth = rect.width;\n\t                var rectHeight = rect.height;\n\t                if (fill.type === 'linear') {\n\t                    gradientType = 'gradient';\n\t                    var transform = zrEl.transform;\n\t                    var p0 = [fill.x * rectWidth, fill.y * rectHeight];\n\t                    var p1 = [fill.x2 * rectWidth, fill.y2 * rectHeight];\n\t                    if (transform) {\n\t                        applyTransform(p0, p0, transform);\n\t                        applyTransform(p1, p1, transform);\n\t                    }\n\t                    var dx = p1[0] - p0[0];\n\t                    var dy = p1[1] - p0[1];\n\t                    angle = Math.atan2(dx, dy) * 180 / Math.PI;\n\t                    // The angle should be a non-negative number.\n\t                    if (angle < 0) {\n\t                        angle += 360;\n\t                    }\n\n\t                    // Very small angles produce an unexpected result because they are\n\t                    // converted to a scientific notation string.\n\t                    if (angle < 1e-6) {\n\t                        angle = 0;\n\t                    }\n\t                }\n\t                else {\n\t                    gradientType = 'gradientradial';\n\t                    var p0 = [fill.x * rectWidth, fill.y * rectHeight];\n\t                    var transform = zrEl.transform;\n\t                    var scale = zrEl.scale;\n\t                    var width = rectWidth;\n\t                    var height = rectHeight;\n\t                    focus = [\n\t                        // Percent in bounding rect\n\t                        (p0[0] - rect.x) / width,\n\t                        (p0[1] - rect.y) / height\n\t                    ];\n\t                    if (transform) {\n\t                        applyTransform(p0, p0, transform);\n\t                    }\n\n\t                    width /= scale[0] * Z;\n\t                    height /= scale[1] * Z;\n\t                    var dimension = mathMax(width, height);\n\t                    shift = 2 * 0 / dimension;\n\t                    expansion = 2 * fill.r / dimension - shift;\n\t                }\n\n\t                // We need to sort the color stops in ascending order by offset,\n\t                // otherwise IE won't interpret it correctly.\n\t                var stops = fill.colorStops.slice();\n\t                stops.sort(function(cs1, cs2) {\n\t                    return cs1.offset - cs2.offset;\n\t                });\n\n\t                var length = stops.length;\n\t                // Color and alpha list of first and last stop\n\t                var colorAndAlphaList = [];\n\t                var colors = [];\n\t                for (var i = 0; i < length; i++) {\n\t                    var stop = stops[i];\n\t                    var colorAndAlpha = getColorAndAlpha(stop.color);\n\t                    colors.push(stop.offset * expansion + shift + ' ' + colorAndAlpha[0]);\n\t                    if (i === 0 || i === length - 1) {\n\t                        colorAndAlphaList.push(colorAndAlpha);\n\t                    }\n\t                }\n\n\t                if (length >= 2) {\n\t                    var color1 = colorAndAlphaList[0][0];\n\t                    var color2 = colorAndAlphaList[1][0];\n\t                    var opacity1 = colorAndAlphaList[0][1] * style.opacity;\n\t                    var opacity2 = colorAndAlphaList[1][1] * style.opacity;\n\n\t                    el.type = gradientType;\n\t                    el.method = 'none';\n\t                    el.focus = '100%';\n\t                    el.angle = angle;\n\t                    el.color = color1;\n\t                    el.color2 = color2;\n\t                    el.colors = colors.join(',');\n\t                    // When colors attribute is used, the meanings of opacity and o:opacity2\n\t                    // are reversed.\n\t                    el.opacity = opacity2;\n\t                    // FIXME g_o_:opacity ?\n\t                    el.opacity2 = opacity1;\n\t                }\n\t                if (gradientType === 'radial') {\n\t                    el.focusposition = focus.join(',');\n\t                }\n\t            }\n\t            else {\n\t                // FIXME Change from Gradient fill to color fill\n\t                setColorAndOpacity(el, fill, style.opacity);\n\t            }\n\t        }\n\t    };\n\n\t    var updateStrokeNode = function (el, style) {\n\t        // if (style.lineJoin != null) {\n\t        //     el.joinstyle = style.lineJoin;\n\t        // }\n\t        // if (style.miterLimit != null) {\n\t        //     el.miterlimit = style.miterLimit * Z;\n\t        // }\n\t        // if (style.lineCap != null) {\n\t        //     el.endcap = style.lineCap;\n\t        // }\n\t        if (style.lineDash != null) {\n\t            el.dashstyle = style.lineDash.join(' ');\n\t        }\n\t        if (style.stroke != null && !(style.stroke instanceof Gradient)) {\n\t            setColorAndOpacity(el, style.stroke, style.opacity);\n\t        }\n\t    };\n\n\t    var updateFillAndStroke = function (vmlEl, type, style, zrEl) {\n\t        var isFill = type == 'fill';\n\t        var el = vmlEl.getElementsByTagName(type)[0];\n\t        // Stroke must have lineWidth\n\t        if (style[type] != null && style[type] !== 'none' && (isFill || (!isFill && style.lineWidth))) {\n\t            vmlEl[isFill ? 'filled' : 'stroked'] = 'true';\n\t            // FIXME Remove before updating, or set `colors` will throw error\n\t            if (style[type] instanceof Gradient) {\n\t                remove(vmlEl, el);\n\t            }\n\t            if (!el) {\n\t                el = vmlCore.createNode(type);\n\t            }\n\n\t            isFill ? updateFillNode(el, style, zrEl) : updateStrokeNode(el, style);\n\t            append(vmlEl, el);\n\t        }\n\t        else {\n\t            vmlEl[isFill ? 'filled' : 'stroked'] = 'false';\n\t            remove(vmlEl, el);\n\t        }\n\t    };\n\n\t    var points = [[], [], []];\n\t    var pathDataToString = function (data, m) {\n\t        var M = CMD.M;\n\t        var C = CMD.C;\n\t        var L = CMD.L;\n\t        var A = CMD.A;\n\t        var Q = CMD.Q;\n\n\t        var str = [];\n\t        var nPoint;\n\t        var cmdStr;\n\t        var cmd;\n\t        var i;\n\t        var xi;\n\t        var yi;\n\t        for (i = 0; i < data.length;) {\n\t            cmd = data[i++];\n\t            cmdStr = '';\n\t            nPoint = 0;\n\t            switch (cmd) {\n\t                case M:\n\t                    cmdStr = ' m ';\n\t                    nPoint = 1;\n\t                    xi = data[i++];\n\t                    yi = data[i++];\n\t                    points[0][0] = xi;\n\t                    points[0][1] = yi;\n\t                    break;\n\t                case L:\n\t                    cmdStr = ' l ';\n\t                    nPoint = 1;\n\t                    xi = data[i++];\n\t                    yi = data[i++];\n\t                    points[0][0] = xi;\n\t                    points[0][1] = yi;\n\t                    break;\n\t                case Q:\n\t                case C:\n\t                    cmdStr = ' c ';\n\t                    nPoint = 3;\n\t                    var x1 = data[i++];\n\t                    var y1 = data[i++];\n\t                    var x2 = data[i++];\n\t                    var y2 = data[i++];\n\t                    var x3;\n\t                    var y3;\n\t                    if (cmd === Q) {\n\t                        // Convert quadratic to cubic using degree elevation\n\t                        x3 = x2;\n\t                        y3 = y2;\n\t                        x2 = (x2 + 2 * x1) / 3;\n\t                        y2 = (y2 + 2 * y1) / 3;\n\t                        x1 = (xi + 2 * x1) / 3;\n\t                        y1 = (yi + 2 * y1) / 3;\n\t                    }\n\t                    else {\n\t                        x3 = data[i++];\n\t                        y3 = data[i++];\n\t                    }\n\t                    points[0][0] = x1;\n\t                    points[0][1] = y1;\n\t                    points[1][0] = x2;\n\t                    points[1][1] = y2;\n\t                    points[2][0] = x3;\n\t                    points[2][1] = y3;\n\n\t                    xi = x3;\n\t                    yi = y3;\n\t                    break;\n\t                case A:\n\t                    var x = 0;\n\t                    var y = 0;\n\t                    var sx = 1;\n\t                    var sy = 1;\n\t                    var angle = 0;\n\t                    if (m) {\n\t                        // Extract SRT from matrix\n\t                        x = m[4];\n\t                        y = m[5];\n\t                        sx = sqrt(m[0] * m[0] + m[1] * m[1]);\n\t                        sy = sqrt(m[2] * m[2] + m[3] * m[3]);\n\t                        angle = Math.atan2(-m[1] / sy, m[0] / sx);\n\t                    }\n\n\t                    var cx = data[i++];\n\t                    var cy = data[i++];\n\t                    var rx = data[i++];\n\t                    var ry = data[i++];\n\t                    var startAngle = data[i++] + angle;\n\t                    var endAngle = data[i++] + startAngle + angle;\n\t                    // FIXME\n\t                    // var psi = data[i++];\n\t                    i++;\n\t                    var clockwise = data[i++];\n\n\t                    var x0 = cx + cos(startAngle) * rx;\n\t                    var y0 = cy + sin(startAngle) * ry;\n\n\t                    var x1 = cx + cos(endAngle) * rx;\n\t                    var y1 = cy + sin(endAngle) * ry;\n\n\t                    var type = clockwise ? ' wa ' : ' at ';\n\t                    if (Math.abs(x0 - x1) < 1e-4) {\n\t                        // IE won't render arches drawn counter clockwise if x0 == x1.\n\t                        if (Math.abs(endAngle - startAngle) > 1e-2) {\n\t                            // Offset x0 by 1/80 of a pixel. Use something\n\t                            // that can be represented in binary\n\t                            if (clockwise) {\n\t                                x0 += 270 / Z;\n\t                            }\n\t                        }\n\t                        else {\n\t                            // Avoid case draw full circle\n\t                            if (Math.abs(y0 - cy) < 1e-4) {\n\t                                if ((clockwise && x0 < cx) || (!clockwise && x0 > cx)) {\n\t                                    y1 -= 270 / Z;\n\t                                }\n\t                                else {\n\t                                    y1 += 270 / Z;\n\t                                }\n\t                            }\n\t                            else if ((clockwise && y0 < cy) || (!clockwise && y0 > cy)) {\n\t                                x1 += 270 / Z;\n\t                            }\n\t                            else {\n\t                                x1 -= 270 / Z;\n\t                            }\n\t                        }\n\t                    }\n\t                    str.push(\n\t                        type,\n\t                        round(((cx - rx) * sx + x) * Z - Z2), comma,\n\t                        round(((cy - ry) * sy + y) * Z - Z2), comma,\n\t                        round(((cx + rx) * sx + x) * Z - Z2), comma,\n\t                        round(((cy + ry) * sy + y) * Z - Z2), comma,\n\t                        round((x0 * sx + x) * Z - Z2), comma,\n\t                        round((y0 * sy + y) * Z - Z2), comma,\n\t                        round((x1 * sx + x) * Z - Z2), comma,\n\t                        round((y1 * sy + y) * Z - Z2)\n\t                    );\n\n\t                    xi = x1;\n\t                    yi = y1;\n\t                    break;\n\t                case CMD.R:\n\t                    var p0 = points[0];\n\t                    var p1 = points[1];\n\t                    // x0, y0\n\t                    p0[0] = data[i++];\n\t                    p0[1] = data[i++];\n\t                    // x1, y1\n\t                    p1[0] = p0[0] + data[i++];\n\t                    p1[1] = p0[1] + data[i++];\n\n\t                    if (m) {\n\t                        applyTransform(p0, p0, m);\n\t                        applyTransform(p1, p1, m);\n\t                    }\n\n\t                    p0[0] = round(p0[0] * Z - Z2);\n\t                    p1[0] = round(p1[0] * Z - Z2);\n\t                    p0[1] = round(p0[1] * Z - Z2);\n\t                    p1[1] = round(p1[1] * Z - Z2);\n\t                    str.push(\n\t                        // x0, y0\n\t                        ' m ', p0[0], comma, p0[1],\n\t                        // x1, y0\n\t                        ' l ', p1[0], comma, p0[1],\n\t                        // x1, y1\n\t                        ' l ', p1[0], comma, p1[1],\n\t                        // x0, y1\n\t                        ' l ', p0[0], comma, p1[1]\n\t                    );\n\t                    break;\n\t                case CMD.Z:\n\t                    // FIXME Update xi, yi\n\t                    str.push(' x ');\n\t            }\n\n\t            if (nPoint > 0) {\n\t                str.push(cmdStr);\n\t                for (var k = 0; k < nPoint; k++) {\n\t                    var p = points[k];\n\n\t                    m && applyTransform(p, p, m);\n\t                    // 不 round 会非常慢\n\t                    str.push(\n\t                        round(p[0] * Z - Z2), comma, round(p[1] * Z - Z2),\n\t                        k < nPoint - 1 ? comma : ''\n\t                    );\n\t                }\n\t            }\n\t        }\n\n\t        return str.join('');\n\t    };\n\n\t    // Rewrite the original path method\n\t    Path.prototype.brushVML = function (vmlRoot) {\n\t        var style = this.style;\n\n\t        var vmlEl = this._vmlEl;\n\t        if (!vmlEl) {\n\t            vmlEl = vmlCore.createNode('shape');\n\t            initRootElStyle(vmlEl);\n\n\t            this._vmlEl = vmlEl;\n\t        }\n\n\t        updateFillAndStroke(vmlEl, 'fill', style, this);\n\t        updateFillAndStroke(vmlEl, 'stroke', style, this);\n\n\t        var m = this.transform;\n\t        var needTransform = m != null;\n\t        var strokeEl = vmlEl.getElementsByTagName('stroke')[0];\n\t        if (strokeEl) {\n\t            var lineWidth = style.lineWidth;\n\t            // Get the line scale.\n\t            // Determinant of this.m_ means how much the area is enlarged by the\n\t            // transformation. So its square root can be used as a scale factor\n\t            // for width.\n\t            if (needTransform && !style.strokeNoScale) {\n\t                var det = m[0] * m[3] - m[1] * m[2];\n\t                lineWidth *= sqrt(abs(det));\n\t            }\n\t            strokeEl.weight = lineWidth + 'px';\n\t        }\n\n\t        var path = this.path;\n\t        if (this.__dirtyPath) {\n\t            path.beginPath();\n\t            this.buildPath(path, this.shape);\n\t            path.toStatic();\n\t            this.__dirtyPath = false;\n\t        }\n\n\t        vmlEl.path = pathDataToString(path.data, this.transform);\n\n\t        vmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);\n\n\t        // Append to root\n\t        append(vmlRoot, vmlEl);\n\n\t        // Text\n\t        if (style.text != null) {\n\t            this.drawRectText(vmlRoot, this.getBoundingRect());\n\t        }\n\t        else {\n\t            this.removeRectText(vmlRoot);\n\t        }\n\t    };\n\n\t    Path.prototype.onRemove = function (vmlRoot) {\n\t        remove(vmlRoot, this._vmlEl);\n\t        this.removeRectText(vmlRoot);\n\t    };\n\n\t    Path.prototype.onAdd = function (vmlRoot) {\n\t        append(vmlRoot, this._vmlEl);\n\t        this.appendRectText(vmlRoot);\n\t    };\n\n\t    /***************************************************\n\t     * IMAGE\n\t     **************************************************/\n\t    var isImage = function (img) {\n\t        // FIXME img instanceof Image 如果 img 是一个字符串的时候，IE8 下会报错\n\t        return (typeof img === 'object') && img.tagName && img.tagName.toUpperCase() === 'IMG';\n\t        // return img instanceof Image;\n\t    };\n\n\t    // Rewrite the original path method\n\t    ZImage.prototype.brushVML = function (vmlRoot) {\n\t        var style = this.style;\n\t        var image = style.image;\n\n\t        // Image original width, height\n\t        var ow;\n\t        var oh;\n\n\t        if (isImage(image)) {\n\t            var src = image.src;\n\t            if (src === this._imageSrc) {\n\t                ow = this._imageWidth;\n\t                oh = this._imageHeight;\n\t            }\n\t            else {\n\t                var imageRuntimeStyle = image.runtimeStyle;\n\t                var oldRuntimeWidth = imageRuntimeStyle.width;\n\t                var oldRuntimeHeight = imageRuntimeStyle.height;\n\t                imageRuntimeStyle.width = 'auto';\n\t                imageRuntimeStyle.height = 'auto';\n\n\t                // get the original size\n\t                ow = image.width;\n\t                oh = image.height;\n\n\t                // and remove overides\n\t                imageRuntimeStyle.width = oldRuntimeWidth;\n\t                imageRuntimeStyle.height = oldRuntimeHeight;\n\n\t                // Caching image original width, height and src\n\t                this._imageSrc = src;\n\t                this._imageWidth = ow;\n\t                this._imageHeight = oh;\n\t            }\n\t            image = src;\n\t        }\n\t        else {\n\t            if (image === this._imageSrc) {\n\t                ow = this._imageWidth;\n\t                oh = this._imageHeight;\n\t            }\n\t        }\n\t        if (!image) {\n\t            return;\n\t        }\n\n\t        var x = style.x || 0;\n\t        var y = style.y || 0;\n\n\t        var dw = style.width;\n\t        var dh = style.height;\n\n\t        var sw = style.sWidth;\n\t        var sh = style.sHeight;\n\t        var sx = style.sx || 0;\n\t        var sy = style.sy || 0;\n\n\t        var hasCrop = sw && sh;\n\n\t        var vmlEl = this._vmlEl;\n\t        if (!vmlEl) {\n\t            // FIXME 使用 group 在 left, top 都不是 0 的时候就无法显示了。\n\t            // vmlEl = vmlCore.createNode('group');\n\t            vmlEl = vmlCore.doc.createElement('div');\n\t            initRootElStyle(vmlEl);\n\n\t            this._vmlEl = vmlEl;\n\t        }\n\n\t        var vmlElStyle = vmlEl.style;\n\t        var hasRotation = false;\n\t        var m;\n\t        var scaleX = 1;\n\t        var scaleY = 1;\n\t        if (this.transform) {\n\t            m = this.transform;\n\t            scaleX = sqrt(m[0] * m[0] + m[1] * m[1]);\n\t            scaleY = sqrt(m[2] * m[2] + m[3] * m[3]);\n\n\t            hasRotation = m[1] || m[2];\n\t        }\n\t        if (hasRotation) {\n\t            // If filters are necessary (rotation exists), create them\n\t            // filters are bog-slow, so only create them if abbsolutely necessary\n\t            // The following check doesn't account for skews (which don't exist\n\t            // in the canvas spec (yet) anyway.\n\t            // From excanvas\n\t            var p0 = [x, y];\n\t            var p1 = [x + dw, y];\n\t            var p2 = [x, y + dh];\n\t            var p3 = [x + dw, y + dh];\n\t            applyTransform(p0, p0, m);\n\t            applyTransform(p1, p1, m);\n\t            applyTransform(p2, p2, m);\n\t            applyTransform(p3, p3, m);\n\n\t            var maxX = mathMax(p0[0], p1[0], p2[0], p3[0]);\n\t            var maxY = mathMax(p0[1], p1[1], p2[1], p3[1]);\n\n\t            var transformFilter = [];\n\t            transformFilter.push('M11=', m[0] / scaleX, comma,\n\t                        'M12=', m[2] / scaleY, comma,\n\t                        'M21=', m[1] / scaleX, comma,\n\t                        'M22=', m[3] / scaleY, comma,\n\t                        'Dx=', round(x * scaleX + m[4]), comma,\n\t                        'Dy=', round(y * scaleY + m[5]));\n\n\t            vmlElStyle.padding = '0 ' + round(maxX) + 'px ' + round(maxY) + 'px 0';\n\t            // FIXME DXImageTransform 在 IE11 的兼容模式下不起作用\n\t            vmlElStyle.filter = imageTransformPrefix + '.Matrix('\n\t                + transformFilter.join('') + ', SizingMethod=clip)';\n\n\t        }\n\t        else {\n\t            if (m) {\n\t                x = x * scaleX + m[4];\n\t                y = y * scaleY + m[5];\n\t            }\n\t            vmlElStyle.filter = '';\n\t            vmlElStyle.left = round(x) + 'px';\n\t            vmlElStyle.top = round(y) + 'px';\n\t        }\n\n\t        var imageEl = this._imageEl;\n\t        var cropEl = this._cropEl;\n\n\t        if (!imageEl) {\n\t            imageEl = vmlCore.doc.createElement('div');\n\t            this._imageEl = imageEl;\n\t        }\n\t        var imageELStyle = imageEl.style;\n\t        if (hasCrop) {\n\t            // Needs know image original width and height\n\t            if (! (ow && oh)) {\n\t                var tmpImage = new Image();\n\t                var self = this;\n\t                tmpImage.onload = function () {\n\t                    tmpImage.onload = null;\n\t                    ow = tmpImage.width;\n\t                    oh = tmpImage.height;\n\t                    // Adjust image width and height to fit the ratio destinationSize / sourceSize\n\t                    imageELStyle.width = round(scaleX * ow * dw / sw) + 'px';\n\t                    imageELStyle.height = round(scaleY * oh * dh / sh) + 'px';\n\n\t                    // Caching image original width, height and src\n\t                    self._imageWidth = ow;\n\t                    self._imageHeight = oh;\n\t                    self._imageSrc = image;\n\t                };\n\t                tmpImage.src = image;\n\t            }\n\t            else {\n\t                imageELStyle.width = round(scaleX * ow * dw / sw) + 'px';\n\t                imageELStyle.height = round(scaleY * oh * dh / sh) + 'px';\n\t            }\n\n\t            if (! cropEl) {\n\t                cropEl = vmlCore.doc.createElement('div');\n\t                cropEl.style.overflow = 'hidden';\n\t                this._cropEl = cropEl;\n\t            }\n\t            var cropElStyle = cropEl.style;\n\t            cropElStyle.width = round((dw + sx * dw / sw) * scaleX);\n\t            cropElStyle.height = round((dh + sy * dh / sh) * scaleY);\n\t            cropElStyle.filter = imageTransformPrefix + '.Matrix(Dx='\n\t                    + (-sx * dw / sw * scaleX) + ',Dy=' + (-sy * dh / sh * scaleY) + ')';\n\n\t            if (! cropEl.parentNode) {\n\t                vmlEl.appendChild(cropEl);\n\t            }\n\t            if (imageEl.parentNode != cropEl) {\n\t                cropEl.appendChild(imageEl);\n\t            }\n\t        }\n\t        else {\n\t            imageELStyle.width = round(scaleX * dw) + 'px';\n\t            imageELStyle.height = round(scaleY * dh) + 'px';\n\n\t            vmlEl.appendChild(imageEl);\n\n\t            if (cropEl && cropEl.parentNode) {\n\t                vmlEl.removeChild(cropEl);\n\t                this._cropEl = null;\n\t            }\n\t        }\n\n\t        var filterStr = '';\n\t        var alpha = style.opacity;\n\t        if (alpha < 1) {\n\t            filterStr += '.Alpha(opacity=' + round(alpha * 100) + ') ';\n\t        }\n\t        filterStr += imageTransformPrefix + '.AlphaImageLoader(src=' + image + ', SizingMethod=scale)';\n\n\t        imageELStyle.filter = filterStr;\n\n\t        vmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);\n\n\t        // Append to root\n\t        append(vmlRoot, vmlEl);\n\n\t        // Text\n\t        if (style.text != null) {\n\t            this.drawRectText(vmlRoot, this.getBoundingRect());\n\t        }\n\t    };\n\n\t    ZImage.prototype.onRemove = function (vmlRoot) {\n\t        remove(vmlRoot, this._vmlEl);\n\n\t        this._vmlEl = null;\n\t        this._cropEl = null;\n\t        this._imageEl = null;\n\n\t        this.removeRectText(vmlRoot);\n\t    };\n\n\t    ZImage.prototype.onAdd = function (vmlRoot) {\n\t        append(vmlRoot, this._vmlEl);\n\t        this.appendRectText(vmlRoot);\n\t    };\n\n\n\t    /***************************************************\n\t     * TEXT\n\t     **************************************************/\n\n\t    var DEFAULT_STYLE_NORMAL = 'normal';\n\n\t    var fontStyleCache = {};\n\t    var fontStyleCacheCount = 0;\n\t    var MAX_FONT_CACHE_SIZE = 100;\n\t    var fontEl = document.createElement('div');\n\n\t    var getFontStyle = function (fontString) {\n\t        var fontStyle = fontStyleCache[fontString];\n\t        if (!fontStyle) {\n\t            // Clear cache\n\t            if (fontStyleCacheCount > MAX_FONT_CACHE_SIZE) {\n\t                fontStyleCacheCount = 0;\n\t                fontStyleCache = {};\n\t            }\n\n\t            var style = fontEl.style;\n\t            var fontFamily;\n\t            try {\n\t                style.font = fontString;\n\t                fontFamily = style.fontFamily.split(',')[0];\n\t            }\n\t            catch (e) {\n\t            }\n\n\t            fontStyle = {\n\t                style: style.fontStyle || DEFAULT_STYLE_NORMAL,\n\t                variant: style.fontVariant || DEFAULT_STYLE_NORMAL,\n\t                weight: style.fontWeight || DEFAULT_STYLE_NORMAL,\n\t                size: parseFloat(style.fontSize || 12) | 0,\n\t                family: fontFamily || 'Microsoft YaHei'\n\t            };\n\n\t            fontStyleCache[fontString] = fontStyle;\n\t            fontStyleCacheCount++;\n\t        }\n\t        return fontStyle;\n\t    };\n\n\t    var textMeasureEl;\n\t    // Overwrite measure text method\n\t    textContain.measureText = function (text, textFont) {\n\t        var doc = vmlCore.doc;\n\t        if (!textMeasureEl) {\n\t            textMeasureEl = doc.createElement('div');\n\t            textMeasureEl.style.cssText = 'position:absolute;top:-20000px;left:0;'\n\t                + 'padding:0;margin:0;border:none;white-space:pre;';\n\t            vmlCore.doc.body.appendChild(textMeasureEl);\n\t        }\n\n\t        try {\n\t            textMeasureEl.style.font = textFont;\n\t        } catch (ex) {\n\t            // Ignore failures to set to invalid font.\n\t        }\n\t        textMeasureEl.innerHTML = '';\n\t        // Don't use innerHTML or innerText because they allow markup/whitespace.\n\t        textMeasureEl.appendChild(doc.createTextNode(text));\n\t        return {\n\t            width: textMeasureEl.offsetWidth\n\t        };\n\t    };\n\n\t    var tmpRect = new BoundingRect();\n\n\t    var drawRectText = function (vmlRoot, rect, textRect, fromTextEl) {\n\n\t        var style = this.style;\n\t        var text = style.text;\n\t        // Convert to string\n\t        text != null && (text += '');\n\t        if (!text) {\n\t            return;\n\t        }\n\n\t        var x;\n\t        var y;\n\t        var align = style.textAlign;\n\t        var fontStyle = getFontStyle(style.textFont);\n\t        // FIXME encodeHtmlAttribute ?\n\t        var font = fontStyle.style + ' ' + fontStyle.variant + ' ' + fontStyle.weight + ' '\n\t            + fontStyle.size + 'px \"' + fontStyle.family + '\"';\n\n\t        var baseline = style.textBaseline;\n\t        var verticalAlign = style.textVerticalAlign;\n\n\t        textRect = textRect || textContain.getBoundingRect(text, font, align, baseline);\n\n\t        // Transform rect to view space\n\t        var m = this.transform;\n\t        // Ignore transform for text in other element\n\t        if (m && !fromTextEl) {\n\t            tmpRect.copy(rect);\n\t            tmpRect.applyTransform(m);\n\t            rect = tmpRect;\n\t        }\n\n\t        if (!fromTextEl) {\n\t            var textPosition = style.textPosition;\n\t            var distance = style.textDistance;\n\t            // Text position represented by coord\n\t            if (textPosition instanceof Array) {\n\t                x = rect.x + parsePercent(textPosition[0], rect.width);\n\t                y = rect.y + parsePercent(textPosition[1], rect.height);\n\n\t                align = align || 'left';\n\t                baseline = baseline || 'top';\n\t            }\n\t            else {\n\t                var res = textContain.adjustTextPositionOnRect(\n\t                    textPosition, rect, textRect, distance\n\t                );\n\t                x = res.x;\n\t                y = res.y;\n\n\t                // Default align and baseline when has textPosition\n\t                align = align || res.textAlign;\n\t                baseline = baseline || res.textBaseline;\n\t            }\n\t        }\n\t        else {\n\t            x = rect.x;\n\t            y = rect.y;\n\t        }\n\t        if (verticalAlign) {\n\t            switch (verticalAlign) {\n\t                case 'middle':\n\t                    y -= textRect.height / 2;\n\t                    break;\n\t                case 'bottom':\n\t                    y -= textRect.height;\n\t                    break;\n\t                // 'top'\n\t            }\n\t            // Ignore baseline\n\t            baseline = 'top';\n\t        }\n\n\t        var fontSize = fontStyle.size;\n\t        // 1.75 is an arbitrary number, as there is no info about the text baseline\n\t        switch (baseline) {\n\t            case 'hanging':\n\t            case 'top':\n\t                y += fontSize / 1.75;\n\t                break;\n\t            case 'middle':\n\t                break;\n\t            default:\n\t            // case null:\n\t            // case 'alphabetic':\n\t            // case 'ideographic':\n\t            // case 'bottom':\n\t                y -= fontSize / 2.25;\n\t                break;\n\t        }\n\t        switch (align) {\n\t            case 'left':\n\t                break;\n\t            case 'center':\n\t                x -= textRect.width / 2;\n\t                break;\n\t            case 'right':\n\t                x -= textRect.width;\n\t                break;\n\t            // case 'end':\n\t                // align = elementStyle.direction == 'ltr' ? 'right' : 'left';\n\t                // break;\n\t            // case 'start':\n\t                // align = elementStyle.direction == 'rtl' ? 'right' : 'left';\n\t                // break;\n\t            // default:\n\t            //     align = 'left';\n\t        }\n\n\t        var createNode = vmlCore.createNode;\n\n\t        var textVmlEl = this._textVmlEl;\n\t        var pathEl;\n\t        var textPathEl;\n\t        var skewEl;\n\t        if (!textVmlEl) {\n\t            textVmlEl = createNode('line');\n\t            pathEl = createNode('path');\n\t            textPathEl = createNode('textpath');\n\t            skewEl = createNode('skew');\n\n\t            // FIXME Why here is not cammel case\n\t            // Align 'center' seems wrong\n\t            textPathEl.style['v-text-align'] = 'left';\n\n\t            initRootElStyle(textVmlEl);\n\n\t            pathEl.textpathok = true;\n\t            textPathEl.on = true;\n\n\t            textVmlEl.from = '0 0';\n\t            textVmlEl.to = '1000 0.05';\n\n\t            append(textVmlEl, skewEl);\n\t            append(textVmlEl, pathEl);\n\t            append(textVmlEl, textPathEl);\n\n\t            this._textVmlEl = textVmlEl;\n\t        }\n\t        else {\n\t            // 这里是在前面 appendChild 保证顺序的前提下\n\t            skewEl = textVmlEl.firstChild;\n\t            pathEl = skewEl.nextSibling;\n\t            textPathEl = pathEl.nextSibling;\n\t        }\n\n\t        var coords = [x, y];\n\t        var textVmlElStyle = textVmlEl.style;\n\t        // Ignore transform for text in other element\n\t        if (m && fromTextEl) {\n\t            applyTransform(coords, coords, m);\n\n\t            skewEl.on = true;\n\n\t            skewEl.matrix = m[0].toFixed(3) + comma + m[2].toFixed(3) + comma +\n\t            m[1].toFixed(3) + comma + m[3].toFixed(3) + ',0,0';\n\n\t            // Text position\n\t            skewEl.offset = (round(coords[0]) || 0) + ',' + (round(coords[1]) || 0);\n\t            // Left top point as origin\n\t            skewEl.origin = '0 0';\n\n\t            textVmlElStyle.left = '0px';\n\t            textVmlElStyle.top = '0px';\n\t        }\n\t        else {\n\t            skewEl.on = false;\n\t            textVmlElStyle.left = round(x) + 'px';\n\t            textVmlElStyle.top = round(y) + 'px';\n\t        }\n\n\t        textPathEl.string = encodeHtmlAttribute(text);\n\t        // TODO\n\t        try {\n\t            textPathEl.style.font = font;\n\t        }\n\t        // Error font format\n\t        catch (e) {}\n\n\t        updateFillAndStroke(textVmlEl, 'fill', {\n\t            fill: fromTextEl ? style.fill : style.textFill,\n\t            opacity: style.opacity\n\t        }, this);\n\t        updateFillAndStroke(textVmlEl, 'stroke', {\n\t            stroke: fromTextEl ? style.stroke : style.textStroke,\n\t            opacity: style.opacity,\n\t            lineDash: style.lineDash\n\t        }, this);\n\n\t        textVmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);\n\n\t        // Attached to root\n\t        append(vmlRoot, textVmlEl);\n\t    };\n\n\t    var removeRectText = function (vmlRoot) {\n\t        remove(vmlRoot, this._textVmlEl);\n\t        this._textVmlEl = null;\n\t    };\n\n\t    var appendRectText = function (vmlRoot) {\n\t        append(vmlRoot, this._textVmlEl);\n\t    };\n\n\t    var list = [RectText, Displayable, ZImage, Path, Text];\n\n\t    // In case Displayable has been mixed in RectText\n\t    for (var i = 0; i < list.length; i++) {\n\t        var proto = list[i].prototype;\n\t        proto.drawRectText = drawRectText;\n\t        proto.removeRectText = removeRectText;\n\t        proto.appendRectText = appendRectText;\n\t    }\n\n\t    Text.prototype.brushVML = function (vmlRoot) {\n\t        var style = this.style;\n\t        if (style.text != null) {\n\t            this.drawRectText(vmlRoot, {\n\t                x: style.x || 0, y: style.y || 0,\n\t                width: 0, height: 0\n\t            }, this.getBoundingRect(), true);\n\t        }\n\t        else {\n\t            this.removeRectText(vmlRoot);\n\t        }\n\t    };\n\n\t    Text.prototype.onRemove = function (vmlRoot) {\n\t        this.removeRectText(vmlRoot);\n\t    };\n\n\t    Text.prototype.onAdd = function (vmlRoot) {\n\t        this.appendRectText(vmlRoot);\n\t    };\n\t}\n\n\n/***/ },\n/* 393 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\n\tif (!__webpack_require__(2).canvasSupported) {\n\t    var urn = 'urn:schemas-microsoft-com:vml';\n\n\t    var createNode;\n\t    var win = window;\n\t    var doc = win.document;\n\n\t    var vmlInited = false;\n\n\t    try {\n\t        !doc.namespaces.zrvml && doc.namespaces.add('zrvml', urn);\n\t        createNode = function (tagName) {\n\t            return doc.createElement('<zrvml:' + tagName + ' class=\"zrvml\">');\n\t        };\n\t    }\n\t    catch (e) {\n\t        createNode = function (tagName) {\n\t            return doc.createElement('<' + tagName + ' xmlns=\"' + urn + '\" class=\"zrvml\">');\n\t        };\n\t    }\n\n\t    // From raphael\n\t    var initVML = function () {\n\t        if (vmlInited) {\n\t            return;\n\t        }\n\t        vmlInited = true;\n\n\t        var styleSheets = doc.styleSheets;\n\t        if (styleSheets.length < 31) {\n\t            doc.createStyleSheet().addRule('.zrvml', 'behavior:url(#default#VML)');\n\t        }\n\t        else {\n\t            // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx\n\t            styleSheets[0].addRule('.zrvml', 'behavior:url(#default#VML)');\n\t        }\n\t    };\n\n\t    // Not useing return to avoid error when converting to CommonJS module\n\t    module.exports = {\n\t        doc: doc,\n\t        initVML: initVML,\n\t        createNode: createNode\n\t    };\n\t}\n\n\n/***/ },\n/* 394 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * VML Painter.\n\t *\n\t * @module zrender/vml/Painter\n\t */\n\n\n\n\t    var zrLog = __webpack_require__(40);\n\t    var vmlCore = __webpack_require__(393);\n\n\t    function parseInt10(val) {\n\t        return parseInt(val, 10);\n\t    }\n\n\t    /**\n\t     * @alias module:zrender/vml/Painter\n\t     */\n\t    function VMLPainter(root, storage) {\n\n\t        vmlCore.initVML();\n\n\t        this.root = root;\n\n\t        this.storage = storage;\n\n\t        var vmlViewport = document.createElement('div');\n\n\t        var vmlRoot = document.createElement('div');\n\n\t        vmlViewport.style.cssText = 'display:inline-block;overflow:hidden;position:relative;width:300px;height:150px;';\n\n\t        vmlRoot.style.cssText = 'position:absolute;left:0;top:0;';\n\n\t        root.appendChild(vmlViewport);\n\n\t        this._vmlRoot = vmlRoot;\n\t        this._vmlViewport = vmlViewport;\n\n\t        this.resize();\n\n\t        // Modify storage\n\t        var oldDelFromMap = storage.delFromMap;\n\t        var oldAddToMap = storage.addToMap;\n\t        storage.delFromMap = function (elId) {\n\t            var el = storage.get(elId);\n\n\t            oldDelFromMap.call(storage, elId);\n\n\t            if (el) {\n\t                el.onRemove && el.onRemove(vmlRoot);\n\t            }\n\t        };\n\n\t        storage.addToMap = function (el) {\n\t            // Displayable already has a vml node\n\t            el.onAdd && el.onAdd(vmlRoot);\n\n\t            oldAddToMap.call(storage, el);\n\t        };\n\n\t        this._firstPaint = true;\n\t    }\n\n\t    VMLPainter.prototype = {\n\n\t        constructor: VMLPainter,\n\n\t        /**\n\t         * @return {HTMLDivElement}\n\t         */\n\t        getViewportRoot: function () {\n\t            return this._vmlViewport;\n\t        },\n\n\t        /**\n\t         * 刷新\n\t         */\n\t        refresh: function () {\n\n\t            var list = this.storage.getDisplayList(true, true);\n\n\t            this._paintList(list);\n\t        },\n\n\t        _paintList: function (list) {\n\t            var vmlRoot = this._vmlRoot;\n\t            for (var i = 0; i < list.length; i++) {\n\t                var el = list[i];\n\t                if (el.invisible || el.ignore) {\n\t                    if (!el.__alreadyNotVisible) {\n\t                        el.onRemove(vmlRoot);\n\t                    }\n\t                    // Set as already invisible\n\t                    el.__alreadyNotVisible = true;\n\t                }\n\t                else {\n\t                    if (el.__alreadyNotVisible) {\n\t                        el.onAdd(vmlRoot);\n\t                    }\n\t                    el.__alreadyNotVisible = false;\n\t                    if (el.__dirty) {\n\t                        el.beforeBrush && el.beforeBrush();\n\t                        (el.brushVML || el.brush).call(el, vmlRoot);\n\t                        el.afterBrush && el.afterBrush();\n\t                    }\n\t                }\n\t                el.__dirty = false;\n\t            }\n\n\t            if (this._firstPaint) {\n\t                // Detached from document at first time\n\t                // to avoid page refreshing too many times\n\n\t                // FIXME 如果每次都先 removeChild 可能会导致一些填充和描边的效果改变\n\t                this._vmlViewport.appendChild(vmlRoot);\n\t                this._firstPaint = false;\n\t            }\n\t        },\n\n\t        resize: function (width, height) {\n\t            var width = width == null ? this._getWidth() : width;\n\t            var height = height == null ? this._getHeight() : height;\n\n\t            if (this._width != width || this._height != height) {\n\t                this._width = width;\n\t                this._height = height;\n\n\t                var vmlViewportStyle = this._vmlViewport.style;\n\t                vmlViewportStyle.width = width + 'px';\n\t                vmlViewportStyle.height = height + 'px';\n\t            }\n\t        },\n\n\t        dispose: function () {\n\t            this.root.innerHTML = '';\n\n\t            this._vmlRoot =\n\t            this._vmlViewport =\n\t            this.storage = null;\n\t        },\n\n\t        getWidth: function () {\n\t            return this._width;\n\t        },\n\n\t        getHeight: function () {\n\t            return this._height;\n\t        },\n\n\t        clear: function () {\n\t            if (this._vmlViewport) {\n\t                this.root.removeChild(this._vmlViewport);\n\t            }\n\t        },\n\n\t        _getWidth: function () {\n\t            var root = this.root;\n\t            var stl = root.currentStyle;\n\n\t            return ((root.clientWidth || parseInt10(stl.width))\n\t                    - parseInt10(stl.paddingLeft)\n\t                    - parseInt10(stl.paddingRight)) | 0;\n\t        },\n\n\t        _getHeight: function () {\n\t            var root = this.root;\n\t            var stl = root.currentStyle;\n\n\t            return ((root.clientHeight || parseInt10(stl.height))\n\t                    - parseInt10(stl.paddingTop)\n\t                    - parseInt10(stl.paddingBottom)) | 0;\n\t        }\n\t    };\n\n\t    // Not supported methods\n\t    function createMethodNotSupport(method) {\n\t        return function () {\n\t            zrLog('In IE8.0 VML mode painter not support method \"' + method + '\"');\n\t        };\n\t    }\n\n\t    var notSupportedMethods = [\n\t        'getLayer', 'insertLayer', 'eachLayer', 'eachBuildinLayer', 'eachOtherLayer', 'getLayers',\n\t        'modLayer', 'delLayer', 'clearLayer', 'toDataURL', 'pathToImage'\n\t    ];\n\n\t    for (var i = 0; i < notSupportedMethods.length; i++) {\n\t        var name = notSupportedMethods[i];\n\t        VMLPainter.prototype[name] = createMethodNotSupport(name);\n\t    }\n\n\t    module.exports = VMLPainter;\n\n\n/***/ }\n/******/ ])\n});\n;";
},375:function(t,n){t.exports="\n/* **********************************************\n     Begin prism-core.js\n********************************************** */\n\nvar _self = (typeof window !== 'undefined')\n\t? window   // if in browser\n\t: (\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\n\t\t? self // if in worker\n\t\t: {}   // if in node js\n\t);\n\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n * MIT license http://www.opensource.org/licenses/mit-license.php/\n * @author Lea Verou http://lea.verou.me\n */\n\nvar Prism = (function(){\n\n// Private helper vars\nvar lang = /\\blang(?:uage)?-(\\w+)\\b/i;\nvar uniqueId = 0;\n\nvar _ = _self.Prism = {\n\tutil: {\n\t\tencode: function (tokens) {\n\t\t\tif (tokens instanceof Token) {\n\t\t\t\treturn new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);\n\t\t\t} else if (_.util.type(tokens) === 'Array') {\n\t\t\t\treturn tokens.map(_.util.encode);\n\t\t\t} else {\n\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t}\n\t\t},\n\n\t\ttype: function (o) {\n\t\t\treturn Object.prototype.toString.call(o).match(/\\[object (\\w+)\\]/)[1];\n\t\t},\n\n\t\tobjId: function (obj) {\n\t\t\tif (!obj['__id']) {\n\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t}\n\t\t\treturn obj['__id'];\n\t\t},\n\n\t\t// Deep clone a language definition (e.g. to extend it)\n\t\tclone: function (o) {\n\t\t\tvar type = _.util.type(o);\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 'Object':\n\t\t\t\t\tvar clone = {};\n\n\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\tclone[key] = _.util.clone(o[key]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn clone;\n\n\t\t\t\tcase 'Array':\n\t\t\t\t\t// Check for existence for IE8\n\t\t\t\t\treturn o.map && o.map(function(v) { return _.util.clone(v); });\n\t\t\t}\n\n\t\t\treturn o;\n\t\t}\n\t},\n\n\tlanguages: {\n\t\textend: function (id, redef) {\n\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\tfor (var key in redef) {\n\t\t\t\tlang[key] = redef[key];\n\t\t\t}\n\n\t\t\treturn lang;\n\t\t},\n\n\t\t/**\n\t\t * Insert a token before another token in a language literal\n\t\t * As this needs to recreate the object (we cannot actually insert before keys in object literals),\n\t\t * we cannot just provide an object, we need anobject and a key.\n\t\t * @param inside The key (or language id) of the parent\n\t\t * @param before The key to insert before. If not provided, the function appends instead.\n\t\t * @param insert Object with the key/value pairs to insert\n\t\t * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.\n\t\t */\n\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\troot = root || _.languages;\n\t\t\tvar grammar = root[inside];\n\n\t\t\tif (arguments.length == 2) {\n\t\t\t\tinsert = arguments[1];\n\n\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\tgrammar[newToken] = insert[newToken];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn grammar;\n\t\t\t}\n\n\t\t\tvar ret = {};\n\n\t\t\tfor (var token in grammar) {\n\n\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\tif (token == before) {\n\n\t\t\t\t\t\tfor (var newToken in insert) {\n\n\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update references in other language definitions\n\t\t\t_.languages.DFS(_.languages, function(key, value) {\n\t\t\t\tif (value === root[inside] && key != inside) {\n\t\t\t\t\tthis[key] = ret;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn root[inside] = ret;\n\t\t},\n\n\t\t// Traverse a language definition with Depth First Search\n\t\tDFS: function(o, callback, type, visited) {\n\t\t\tvisited = visited || {};\n\t\t\tfor (var i in o) {\n\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\tif (_.util.type(o[i]) === 'Object' && !visited[_.util.objId(o[i])]) {\n\t\t\t\t\t\tvisited[_.util.objId(o[i])] = true;\n\t\t\t\t\t\t_.languages.DFS(o[i], callback, null, visited);\n\t\t\t\t\t}\n\t\t\t\t\telse if (_.util.type(o[i]) === 'Array' && !visited[_.util.objId(o[i])]) {\n\t\t\t\t\t\tvisited[_.util.objId(o[i])] = true;\n\t\t\t\t\t\t_.languages.DFS(o[i], callback, i, visited);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tplugins: {},\n\n\thighlightAll: function(async, callback) {\n\t\tvar env = {\n\t\t\tcallback: callback,\n\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n\t\t};\n\n\t\t_.hooks.run(\"before-highlightall\", env);\n\n\t\tvar elements = env.elements || document.querySelectorAll(env.selector);\n\n\t\tfor (var i=0, element; element = elements[i++];) {\n\t\t\t_.highlightElement(element, async === true, env.callback);\n\t\t}\n\t},\n\n\thighlightElement: function(element, async, callback) {\n\t\t// Find language\n\t\tvar language, grammar, parent = element;\n\n\t\twhile (parent && !lang.test(parent.className)) {\n\t\t\tparent = parent.parentNode;\n\t\t}\n\n\t\tif (parent) {\n\t\t\tlanguage = (parent.className.match(lang) || [,''])[1].toLowerCase();\n\t\t\tgrammar = _.languages[language];\n\t\t}\n\n\t\t// Set language on the element, if not present\n\t\telement.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n\n\t\t// Set language on the parent, for styling\n\t\tparent = element.parentNode;\n\n\t\tif (/pre/i.test(parent.nodeName)) {\n\t\t\tparent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n\t\t}\n\n\t\tvar code = element.textContent;\n\n\t\tvar env = {\n\t\t\telement: element,\n\t\t\tlanguage: language,\n\t\t\tgrammar: grammar,\n\t\t\tcode: code\n\t\t};\n\n\t\t_.hooks.run('before-sanity-check', env);\n\n\t\tif (!env.code || !env.grammar) {\n\t\t\tif (env.code) {\n\t\t\t\tenv.element.textContent = env.code;\n\t\t\t}\n\t\t\t_.hooks.run('complete', env);\n\t\t\treturn;\n\t\t}\n\n\t\t_.hooks.run('before-highlight', env);\n\n\t\tif (async && _self.Worker) {\n\t\t\tvar worker = new Worker(_.filename);\n\n\t\t\tworker.onmessage = function(evt) {\n\t\t\t\tenv.highlightedCode = evt.data;\n\n\t\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t};\n\n\t\t\tworker.postMessage(JSON.stringify({\n\t\t\t\tlanguage: env.language,\n\t\t\t\tcode: env.code,\n\t\t\t\timmediateClose: true\n\t\t\t}));\n\t\t}\n\t\telse {\n\t\t\tenv.highlightedCode = _.highlight(env.code, env.grammar, env.language);\n\n\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\tcallback && callback.call(element);\n\n\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t_.hooks.run('complete', env);\n\t\t}\n\t},\n\n\thighlight: function (text, grammar, language) {\n\t\tvar tokens = _.tokenize(text, grammar);\n\t\treturn Token.stringify(_.util.encode(tokens), language);\n\t},\n\n\ttokenize: function(text, grammar, language) {\n\t\tvar Token = _.Token;\n\n\t\tvar strarr = [text];\n\n\t\tvar rest = grammar.rest;\n\n\t\tif (rest) {\n\t\t\tfor (var token in rest) {\n\t\t\t\tgrammar[token] = rest[token];\n\t\t\t}\n\n\t\t\tdelete grammar.rest;\n\t\t}\n\n\t\ttokenloop: for (var token in grammar) {\n\t\t\tif(!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = (_.util.type(patterns) === \"Array\") ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tvar pattern = patterns[j],\n\t\t\t\t\tinside = pattern.inside,\n\t\t\t\t\tlookbehind = !!pattern.lookbehind,\n\t\t\t\t\tgreedy = !!pattern.greedy,\n\t\t\t\t\tlookbehindLength = 0,\n\t\t\t\t\talias = pattern.alias;\n\n\t\t\t\tif (greedy && !pattern.pattern.global) {\n\t\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\t\tvar flags = pattern.pattern.toString().match(/[imuy]*$/)[0];\n\t\t\t\t\tpattern.pattern = RegExp(pattern.pattern.source, flags + \"g\");\n\t\t\t\t}\n\n\t\t\t\tpattern = pattern.pattern || pattern;\n\n\t\t\t\t// Don’t cache length as it changes during the loop\n\t\t\t\tfor (var i=0, pos = 0; i<strarr.length; pos += strarr[i].length, ++i) {\n\n\t\t\t\t\tvar str = strarr[i];\n\n\t\t\t\t\tif (strarr.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\tbreak tokenloop;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tpattern.lastIndex = 0;\n\n\t\t\t\t\tvar match = pattern.exec(str),\n\t\t\t\t\t    delNum = 1;\n\n\t\t\t\t\t// Greedy patterns can override/remove up to two previously matched tokens\n\t\t\t\t\tif (!match && greedy && i != strarr.length - 1) {\n\t\t\t\t\t\tpattern.lastIndex = pos;\n\t\t\t\t\t\tmatch = pattern.exec(text);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index + (lookbehind ? match[1].length : 0),\n\t\t\t\t\t\t    to = match.index + match[0].length,\n\t\t\t\t\t\t    k = i,\n\t\t\t\t\t\t    p = pos;\n\n\t\t\t\t\t\tfor (var len = strarr.length; k < len && p < to; ++k) {\n\t\t\t\t\t\t\tp += strarr[k].length;\n\t\t\t\t\t\t\t// Move the index i to the element in strarr that is closest to from\n\t\t\t\t\t\t\tif (from >= p) {\n\t\t\t\t\t\t\t\t++i;\n\t\t\t\t\t\t\t\tpos = p;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * If strarr[i] is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\t * If strarr[k - 1] is greedy we are in conflict with another greedy pattern\n\t\t\t\t\t\t */\n\t\t\t\t\t\tif (strarr[i] instanceof Token || strarr[k - 1].greedy) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Number of tokens to delete and replace with the new match\n\t\t\t\t\t\tdelNum = k - i;\n\t\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!match) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(lookbehind) {\n\t\t\t\t\t\tlookbehindLength = match[1].length;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar from = match.index + lookbehindLength,\n\t\t\t\t\t    match = match[0].slice(lookbehindLength),\n\t\t\t\t\t    to = from + match.length,\n\t\t\t\t\t    before = str.slice(0, from),\n\t\t\t\t\t    after = str.slice(to);\n\n\t\t\t\t\tvar args = [i, delNum];\n\n\t\t\t\t\tif (before) {\n\t\t\t\t\t\targs.push(before);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar wrapped = new Token(token, inside? _.tokenize(match, inside) : match, alias, match, greedy);\n\n\t\t\t\t\targs.push(wrapped);\n\n\t\t\t\t\tif (after) {\n\t\t\t\t\t\targs.push(after);\n\t\t\t\t\t}\n\n\t\t\t\t\tArray.prototype.splice.apply(strarr, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn strarr;\n\t},\n\n\thooks: {\n\t\tall: {},\n\n\t\tadd: function (name, callback) {\n\t\t\tvar hooks = _.hooks.all;\n\n\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\thooks[name].push(callback);\n\t\t},\n\n\t\trun: function (name, env) {\n\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (var i=0, callback; callback = callbacks[i++];) {\n\t\t\t\tcallback(env);\n\t\t\t}\n\t\t}\n\t}\n};\n\nvar Token = _.Token = function(type, content, alias, matchedStr, greedy) {\n\tthis.type = type;\n\tthis.content = content;\n\tthis.alias = alias;\n\t// Copy of the full string this token was created from\n\tthis.length = (matchedStr || \"\").length|0;\n\tthis.greedy = !!greedy;\n};\n\nToken.stringify = function(o, language, parent) {\n\tif (typeof o == 'string') {\n\t\treturn o;\n\t}\n\n\tif (_.util.type(o) === 'Array') {\n\t\treturn o.map(function(element) {\n\t\t\treturn Token.stringify(element, language, o);\n\t\t}).join('');\n\t}\n\n\tvar env = {\n\t\ttype: o.type,\n\t\tcontent: Token.stringify(o.content, language, parent),\n\t\ttag: 'span',\n\t\tclasses: ['token', o.type],\n\t\tattributes: {},\n\t\tlanguage: language,\n\t\tparent: parent\n\t};\n\n\tif (env.type == 'comment') {\n\t\tenv.attributes['spellcheck'] = 'true';\n\t}\n\n\tif (o.alias) {\n\t\tvar aliases = _.util.type(o.alias) === 'Array' ? o.alias : [o.alias];\n\t\tArray.prototype.push.apply(env.classes, aliases);\n\t}\n\n\t_.hooks.run('wrap', env);\n\n\tvar attributes = Object.keys(env.attributes).map(function(name) {\n\t\treturn name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t}).join(' ');\n\n\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + (attributes ? ' ' + attributes : '') + '>' + env.content + '</' + env.tag + '>';\n\n};\n\nif (!_self.document) {\n\tif (!_self.addEventListener) {\n\t\t// in Node.js\n\t\treturn _self.Prism;\n\t}\n \t// In worker\n\t_self.addEventListener('message', function(evt) {\n\t\tvar message = JSON.parse(evt.data),\n\t\t    lang = message.language,\n\t\t    code = message.code,\n\t\t    immediateClose = message.immediateClose;\n\n\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\n\t\tif (immediateClose) {\n\t\t\t_self.close();\n\t\t}\n\t}, false);\n\n\treturn _self.Prism;\n}\n\n//Get current script and highlight\nvar script = document.currentScript || [].slice.call(document.getElementsByTagName(\"script\")).pop();\n\nif (script) {\n\t_.filename = script.src;\n\n\tif (document.addEventListener && !script.hasAttribute('data-manual')) {\n\t\tif(document.readyState !== \"loading\") {\n\t\t\tif (window.requestAnimationFrame) {\n\t\t\t\twindow.requestAnimationFrame(_.highlightAll);\n\t\t\t} else {\n\t\t\t\twindow.setTimeout(_.highlightAll, 16);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tdocument.addEventListener('DOMContentLoaded', _.highlightAll);\n\t\t}\n\t}\n}\n\nreturn _self.Prism;\n\n})();\n\nif (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = Prism;\n}\n\n// hack for components to work correctly in node.js\nif (typeof global !== 'undefined') {\n\tglobal.Prism = Prism;\n}\n\n\n/* **********************************************\n     Begin prism-markup.js\n********************************************** */\n\nPrism.languages.markup = {\n\t'comment': /<!--[\\w\\W]*?-->/,\n\t'prolog': /<\\?[\\w\\W]+?\\?>/,\n\t'doctype': /<!DOCTYPE[\\w\\W]+?>/i,\n\t'cdata': /<!\\[CDATA\\[[\\w\\W]*?]]>/i,\n\t'tag': {\n\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\\\1|\\\\?(?!\\1)[\\w\\W])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/i,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^<\\/?/,\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=(?:('|\")[\\w\\W]*?(\\1)|[^\\s>]+)/i,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /[=>\"']/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\/?>/,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': /&#?[\\da-z]{1,8};/i\n};\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add('wrap', function(env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n\nPrism.languages.xml = Prism.languages.markup;\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n\n\n/* **********************************************\n     Begin prism-css.js\n********************************************** */\n\nPrism.languages.css = {\n\t'comment': /\\/\\*[\\w\\W]*?\\*\\//,\n\t'atrule': {\n\t\tpattern: /@[\\w-]+?.*?(;|(?=\\s*\\{))/i,\n\t\tinside: {\n\t\t\t'rule': /@[\\w-]+/\n\t\t\t// See rest below\n\t\t}\n\t},\n\t'url': /url\\((?:([\"'])(\\\\(?:\\r\\n|[\\w\\W])|(?!\\1)[^\\\\\\r\\n])*\\1|.*?)\\)/i,\n\t'selector': /[^\\{\\}\\s][^\\{\\};]*?(?=\\s*\\{)/,\n\t'string': {\n\t\tpattern: /(\"|')(\\\\(?:\\r\\n|[\\w\\W])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'property': /(\\b|\\B)[\\w-]+(?=\\s*:)/i,\n\t'important': /\\B!important\\b/i,\n\t'function': /[-a-z0-9]+(?=\\()/i,\n\t'punctuation': /[(){};:]/\n};\n\nPrism.languages.css['atrule'].inside.rest = Prism.util.clone(Prism.languages.css);\n\nif (Prism.languages.markup) {\n\tPrism.languages.insertBefore('markup', 'tag', {\n\t\t'style': {\n\t\t\tpattern: /(<style[\\w\\W]*?>)[\\w\\W]*?(?=<\\/style>)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.css,\n\t\t\talias: 'language-css'\n\t\t}\n\t});\n\t\n\tPrism.languages.insertBefore('inside', 'attr-value', {\n\t\t'style-attr': {\n\t\t\tpattern: /\\s*style=(\"|').*?\\1/i,\n\t\t\tinside: {\n\t\t\t\t'attr-name': {\n\t\t\t\t\tpattern: /^\\s*style/i,\n\t\t\t\t\tinside: Prism.languages.markup.tag.inside\n\t\t\t\t},\n\t\t\t\t'punctuation': /^\\s*=\\s*['\"]|['\"]\\s*$/,\n\t\t\t\t'attr-value': {\n\t\t\t\t\tpattern: /.+/i,\n\t\t\t\t\tinside: Prism.languages.css\n\t\t\t\t}\n\t\t\t},\n\t\t\talias: 'language-css'\n\t\t}\n\t}, Prism.languages.markup.tag);\n}\n\n/* **********************************************\n     Begin prism-clike.js\n********************************************** */\n\nPrism.languages.clike = {\n\t'comment': [\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\w\\W]*?\\*\\//,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'string': {\n\t\tpattern: /([\"'])(\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'class-name': {\n\t\tpattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[a-z0-9_\\.\\\\]+/i,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\tpunctuation: /(\\.|\\\\)/\n\t\t}\n\t},\n\t'keyword': /\\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n\t'boolean': /\\b(true|false)\\b/,\n\t'function': /[a-z0-9_]+(?=\\()/i,\n\t'number': /\\b-?(?:0x[\\da-f]+|\\d*\\.?\\d+(?:e[+-]?\\d+)?)\\b/i,\n\t'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n\t'punctuation': /[{}[\\];(),.:]/\n};\n\n\n/* **********************************************\n     Begin prism-javascript.js\n********************************************** */\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n\t'keyword': /\\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\\b/,\n\t'number': /\\b-?(0x[\\dA-Fa-f]+|0b[01]+|0o[0-7]+|\\d*\\.?\\d+([Ee][+-]?\\d+)?|NaN|Infinity)\\b/,\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n\t'function': /[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*(?=\\()/i,\n\t'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*\\*?|\\/|~|\\^|%|\\.{3}/\n});\n\nPrism.languages.insertBefore('javascript', 'keyword', {\n\t'regex': {\n\t\tpattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})]))/,\n\t\tlookbehind: true,\n\t\tgreedy: true\n\t}\n});\n\nPrism.languages.insertBefore('javascript', 'string', {\n\t'template-string': {\n\t\tpattern: /`(?:\\\\\\\\|\\\\?[^\\\\])*?`/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /\\$\\{[^}]+\\}/,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages.javascript\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t}\n});\n\nif (Prism.languages.markup) {\n\tPrism.languages.insertBefore('markup', 'tag', {\n\t\t'script': {\n\t\t\tpattern: /(<script[\\w\\W]*?>)[\\w\\W]*?(?=<\\/script>)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript,\n\t\t\talias: 'language-javascript'\n\t\t}\n\t});\n}\n\nPrism.languages.js = Prism.languages.javascript;\n\n/* **********************************************\n     Begin prism-file-highlight.js\n********************************************** */\n\n(function () {\n\tif (typeof self === 'undefined' || !self.Prism || !self.document || !document.querySelector) {\n\t\treturn;\n\t}\n\n\tself.Prism.fileHighlight = function() {\n\n\t\tvar Extensions = {\n\t\t\t'js': 'javascript',\n\t\t\t'py': 'python',\n\t\t\t'rb': 'ruby',\n\t\t\t'ps1': 'powershell',\n\t\t\t'psm1': 'powershell',\n\t\t\t'sh': 'bash',\n\t\t\t'bat': 'batch',\n\t\t\t'h': 'c',\n\t\t\t'tex': 'latex'\n\t\t};\n\n\t\tif(Array.prototype.forEach) { // Check to prevent error in IE8\n\t\t\tArray.prototype.slice.call(document.querySelectorAll('pre[data-src]')).forEach(function (pre) {\n\t\t\t\tvar src = pre.getAttribute('data-src');\n\n\t\t\t\tvar language, parent = pre;\n\t\t\t\tvar lang = /\\blang(?:uage)?-(?!\\*)(\\w+)\\b/i;\n\t\t\t\twhile (parent && !lang.test(parent.className)) {\n\t\t\t\t\tparent = parent.parentNode;\n\t\t\t\t}\n\n\t\t\t\tif (parent) {\n\t\t\t\t\tlanguage = (pre.className.match(lang) || [, ''])[1];\n\t\t\t\t}\n\n\t\t\t\tif (!language) {\n\t\t\t\t\tvar extension = (src.match(/\\.(\\w+)$/) || [, ''])[1];\n\t\t\t\t\tlanguage = Extensions[extension] || extension;\n\t\t\t\t}\n\n\t\t\t\tvar code = document.createElement('code');\n\t\t\t\tcode.className = 'language-' + language;\n\n\t\t\t\tpre.textContent = '';\n\n\t\t\t\tcode.textContent = 'Loading…';\n\n\t\t\t\tpre.appendChild(code);\n\n\t\t\t\tvar xhr = new XMLHttpRequest();\n\n\t\t\t\txhr.open('GET', src, true);\n\n\t\t\t\txhr.onreadystatechange = function () {\n\t\t\t\t\tif (xhr.readyState == 4) {\n\n\t\t\t\t\t\tif (xhr.status < 400 && xhr.responseText) {\n\t\t\t\t\t\t\tcode.textContent = xhr.responseText;\n\n\t\t\t\t\t\t\tPrism.highlightElement(code);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (xhr.status >= 400) {\n\t\t\t\t\t\t\tcode.textContent = '✖ Error ' + xhr.status + ' while fetching file: ' + xhr.statusText;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tcode.textContent = '✖ Error: File does not exist or is empty';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\txhr.send(null);\n\t\t\t});\n\t\t}\n\n\t};\n\n\tdocument.addEventListener('DOMContentLoaded', self.Prism.fileHighlight);\n\n})();\n"},421:function(t,n,e){e(230),t.exports=e(231)}},[421]);